/*** Autogenerated by WIDL 3.8 from nsiface.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __nsiface_h__
#define __nsiface_h__

/* Forward declarations */

#ifndef __nsISupports_FWD_DEFINED__
#define __nsISupports_FWD_DEFINED__
typedef interface nsISupports nsISupports;
#ifdef __cplusplus
interface nsISupports;
#endif /* __cplusplus */
#endif

#ifndef __nsIServiceManager_FWD_DEFINED__
#define __nsIServiceManager_FWD_DEFINED__
typedef interface nsIServiceManager nsIServiceManager;
#ifdef __cplusplus
interface nsIServiceManager;
#endif /* __cplusplus */
#endif

#ifndef __nsIFactory_FWD_DEFINED__
#define __nsIFactory_FWD_DEFINED__
typedef interface nsIFactory nsIFactory;
#ifdef __cplusplus
interface nsIFactory;
#endif /* __cplusplus */
#endif

#ifndef __nsIWeakReference_FWD_DEFINED__
#define __nsIWeakReference_FWD_DEFINED__
typedef interface nsIWeakReference nsIWeakReference;
#ifdef __cplusplus
interface nsIWeakReference;
#endif /* __cplusplus */
#endif

#ifndef __nsISupportsWeakReference_FWD_DEFINED__
#define __nsISupportsWeakReference_FWD_DEFINED__
typedef interface nsISupportsWeakReference nsISupportsWeakReference;
#ifdef __cplusplus
interface nsISupportsWeakReference;
#endif /* __cplusplus */
#endif

#ifndef __nsIInterfaceRequestor_FWD_DEFINED__
#define __nsIInterfaceRequestor_FWD_DEFINED__
typedef interface nsIInterfaceRequestor nsIInterfaceRequestor;
#ifdef __cplusplus
interface nsIInterfaceRequestor;
#endif /* __cplusplus */
#endif

#ifndef __nsIRunnable_FWD_DEFINED__
#define __nsIRunnable_FWD_DEFINED__
typedef interface nsIRunnable nsIRunnable;
#ifdef __cplusplus
interface nsIRunnable;
#endif /* __cplusplus */
#endif

#ifndef __nsISimpleEnumerator_FWD_DEFINED__
#define __nsISimpleEnumerator_FWD_DEFINED__
typedef interface nsISimpleEnumerator nsISimpleEnumerator;
#ifdef __cplusplus
interface nsISimpleEnumerator;
#endif /* __cplusplus */
#endif

#ifndef __nsIVariant_FWD_DEFINED__
#define __nsIVariant_FWD_DEFINED__
typedef interface nsIVariant nsIVariant;
#ifdef __cplusplus
interface nsIVariant;
#endif /* __cplusplus */
#endif

#ifndef __nsIWritableVariant_FWD_DEFINED__
#define __nsIWritableVariant_FWD_DEFINED__
typedef interface nsIWritableVariant nsIWritableVariant;
#ifdef __cplusplus
interface nsIWritableVariant;
#endif /* __cplusplus */
#endif

#ifndef __nsIInputStream_FWD_DEFINED__
#define __nsIInputStream_FWD_DEFINED__
typedef interface nsIInputStream nsIInputStream;
#ifdef __cplusplus
interface nsIInputStream;
#endif /* __cplusplus */
#endif

#ifndef __nsISeekableStream_FWD_DEFINED__
#define __nsISeekableStream_FWD_DEFINED__
typedef interface nsISeekableStream nsISeekableStream;
#ifdef __cplusplus
interface nsISeekableStream;
#endif /* __cplusplus */
#endif

#ifndef __nsIURI_FWD_DEFINED__
#define __nsIURI_FWD_DEFINED__
typedef interface nsIURI nsIURI;
#ifdef __cplusplus
interface nsIURI;
#endif /* __cplusplus */
#endif

#ifndef __nsIURL_FWD_DEFINED__
#define __nsIURL_FWD_DEFINED__
typedef interface nsIURL nsIURL;
#ifdef __cplusplus
interface nsIURL;
#endif /* __cplusplus */
#endif

#ifndef __nsIFileURL_FWD_DEFINED__
#define __nsIFileURL_FWD_DEFINED__
typedef interface nsIFileURL nsIFileURL;
#ifdef __cplusplus
interface nsIFileURL;
#endif /* __cplusplus */
#endif

#ifndef __nsIMutable_FWD_DEFINED__
#define __nsIMutable_FWD_DEFINED__
typedef interface nsIMutable nsIMutable;
#ifdef __cplusplus
interface nsIMutable;
#endif /* __cplusplus */
#endif

#ifndef __nsIStandardURL_FWD_DEFINED__
#define __nsIStandardURL_FWD_DEFINED__
typedef interface nsIStandardURL nsIStandardURL;
#ifdef __cplusplus
interface nsIStandardURL;
#endif /* __cplusplus */
#endif

#ifndef __nsIRequest_FWD_DEFINED__
#define __nsIRequest_FWD_DEFINED__
typedef interface nsIRequest nsIRequest;
#ifdef __cplusplus
interface nsIRequest;
#endif /* __cplusplus */
#endif

#ifndef __nsIRequestObserver_FWD_DEFINED__
#define __nsIRequestObserver_FWD_DEFINED__
typedef interface nsIRequestObserver nsIRequestObserver;
#ifdef __cplusplus
interface nsIRequestObserver;
#endif /* __cplusplus */
#endif

#ifndef __nsIStreamListener_FWD_DEFINED__
#define __nsIStreamListener_FWD_DEFINED__
typedef interface nsIStreamListener nsIStreamListener;
#ifdef __cplusplus
interface nsIStreamListener;
#endif /* __cplusplus */
#endif

#ifndef __nsILoadGroup_FWD_DEFINED__
#define __nsILoadGroup_FWD_DEFINED__
typedef interface nsILoadGroup nsILoadGroup;
#ifdef __cplusplus
interface nsILoadGroup;
#endif /* __cplusplus */
#endif

#ifndef __nsIChannel_FWD_DEFINED__
#define __nsIChannel_FWD_DEFINED__
typedef interface nsIChannel nsIChannel;
#ifdef __cplusplus
interface nsIChannel;
#endif /* __cplusplus */
#endif

#ifndef __nsIHttpHeaderVisitor_FWD_DEFINED__
#define __nsIHttpHeaderVisitor_FWD_DEFINED__
typedef interface nsIHttpHeaderVisitor nsIHttpHeaderVisitor;
#ifdef __cplusplus
interface nsIHttpHeaderVisitor;
#endif /* __cplusplus */
#endif

#ifndef __nsIHttpChannel_FWD_DEFINED__
#define __nsIHttpChannel_FWD_DEFINED__
typedef interface nsIHttpChannel nsIHttpChannel;
#ifdef __cplusplus
interface nsIHttpChannel;
#endif /* __cplusplus */
#endif

#ifndef __nsIHttpChannelInternal_FWD_DEFINED__
#define __nsIHttpChannelInternal_FWD_DEFINED__
typedef interface nsIHttpChannelInternal nsIHttpChannelInternal;
#ifdef __cplusplus
interface nsIHttpChannelInternal;
#endif /* __cplusplus */
#endif

#ifndef __nsIUploadChannel_FWD_DEFINED__
#define __nsIUploadChannel_FWD_DEFINED__
typedef interface nsIUploadChannel nsIUploadChannel;
#ifdef __cplusplus
interface nsIUploadChannel;
#endif /* __cplusplus */
#endif

#ifndef __nsIAsyncVerifyRedirectCallback_FWD_DEFINED__
#define __nsIAsyncVerifyRedirectCallback_FWD_DEFINED__
typedef interface nsIAsyncVerifyRedirectCallback nsIAsyncVerifyRedirectCallback;
#ifdef __cplusplus
interface nsIAsyncVerifyRedirectCallback;
#endif /* __cplusplus */
#endif

#ifndef __nsIChannelEventSink_FWD_DEFINED__
#define __nsIChannelEventSink_FWD_DEFINED__
typedef interface nsIChannelEventSink nsIChannelEventSink;
#ifdef __cplusplus
interface nsIChannelEventSink;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMLocation_FWD_DEFINED__
#define __nsIDOMLocation_FWD_DEFINED__
typedef interface nsIDOMLocation nsIDOMLocation;
#ifdef __cplusplus
interface nsIDOMLocation;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMCSSRule_FWD_DEFINED__
#define __nsIDOMCSSRule_FWD_DEFINED__
typedef interface nsIDOMCSSRule nsIDOMCSSRule;
#ifdef __cplusplus
interface nsIDOMCSSRule;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMCSSStyleDeclaration_FWD_DEFINED__
#define __nsIDOMCSSStyleDeclaration_FWD_DEFINED__
typedef interface nsIDOMCSSStyleDeclaration nsIDOMCSSStyleDeclaration;
#ifdef __cplusplus
interface nsIDOMCSSStyleDeclaration;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMCSSRuleList_FWD_DEFINED__
#define __nsIDOMCSSRuleList_FWD_DEFINED__
typedef interface nsIDOMCSSRuleList nsIDOMCSSRuleList;
#ifdef __cplusplus
interface nsIDOMCSSRuleList;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMStyleSheet_FWD_DEFINED__
#define __nsIDOMStyleSheet_FWD_DEFINED__
typedef interface nsIDOMStyleSheet nsIDOMStyleSheet;
#ifdef __cplusplus
interface nsIDOMStyleSheet;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMCSSStyleSheet_FWD_DEFINED__
#define __nsIDOMCSSStyleSheet_FWD_DEFINED__
typedef interface nsIDOMCSSStyleSheet nsIDOMCSSStyleSheet;
#ifdef __cplusplus
interface nsIDOMCSSStyleSheet;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMStyleSheetList_FWD_DEFINED__
#define __nsIDOMStyleSheetList_FWD_DEFINED__
typedef interface nsIDOMStyleSheetList nsIDOMStyleSheetList;
#ifdef __cplusplus
interface nsIDOMStyleSheetList;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMNodeList_FWD_DEFINED__
#define __nsIDOMNodeList_FWD_DEFINED__
typedef interface nsIDOMNodeList nsIDOMNodeList;
#ifdef __cplusplus
interface nsIDOMNodeList;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLCollection_FWD_DEFINED__
#define __nsIDOMHTMLCollection_FWD_DEFINED__
typedef interface nsIDOMHTMLCollection nsIDOMHTMLCollection;
#ifdef __cplusplus
interface nsIDOMHTMLCollection;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMMozNamedAttrMap_FWD_DEFINED__
#define __nsIDOMMozNamedAttrMap_FWD_DEFINED__
typedef interface nsIDOMMozNamedAttrMap nsIDOMMozNamedAttrMap;
#ifdef __cplusplus
interface nsIDOMMozNamedAttrMap;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMNode_FWD_DEFINED__
#define __nsIDOMNode_FWD_DEFINED__
typedef interface nsIDOMNode nsIDOMNode;
#ifdef __cplusplus
interface nsIDOMNode;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMAttr_FWD_DEFINED__
#define __nsIDOMAttr_FWD_DEFINED__
typedef interface nsIDOMAttr nsIDOMAttr;
#ifdef __cplusplus
interface nsIDOMAttr;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMClientRect_FWD_DEFINED__
#define __nsIDOMClientRect_FWD_DEFINED__
typedef interface nsIDOMClientRect nsIDOMClientRect;
#ifdef __cplusplus
interface nsIDOMClientRect;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMElement_FWD_DEFINED__
#define __nsIDOMElement_FWD_DEFINED__
typedef interface nsIDOMElement nsIDOMElement;
#ifdef __cplusplus
interface nsIDOMElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMElementCSSInlineStyle_FWD_DEFINED__
#define __nsIDOMElementCSSInlineStyle_FWD_DEFINED__
typedef interface nsIDOMElementCSSInlineStyle nsIDOMElementCSSInlineStyle;
#ifdef __cplusplus
interface nsIDOMElementCSSInlineStyle;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLElement_FWD_DEFINED__
#define __nsIDOMHTMLElement_FWD_DEFINED__
typedef interface nsIDOMHTMLElement nsIDOMHTMLElement;
#ifdef __cplusplus
interface nsIDOMHTMLElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLHeadElement_FWD_DEFINED__
#define __nsIDOMHTMLHeadElement_FWD_DEFINED__
typedef interface nsIDOMHTMLHeadElement nsIDOMHTMLHeadElement;
#ifdef __cplusplus
interface nsIDOMHTMLHeadElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLMetaElement_FWD_DEFINED__
#define __nsIDOMHTMLMetaElement_FWD_DEFINED__
typedef interface nsIDOMHTMLMetaElement nsIDOMHTMLMetaElement;
#ifdef __cplusplus
interface nsIDOMHTMLMetaElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMCharacterData_FWD_DEFINED__
#define __nsIDOMCharacterData_FWD_DEFINED__
typedef interface nsIDOMCharacterData nsIDOMCharacterData;
#ifdef __cplusplus
interface nsIDOMCharacterData;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMText_FWD_DEFINED__
#define __nsIDOMText_FWD_DEFINED__
typedef interface nsIDOMText nsIDOMText;
#ifdef __cplusplus
interface nsIDOMText;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMComment_FWD_DEFINED__
#define __nsIDOMComment_FWD_DEFINED__
typedef interface nsIDOMComment nsIDOMComment;
#ifdef __cplusplus
interface nsIDOMComment;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMDocumentType_FWD_DEFINED__
#define __nsIDOMDocumentType_FWD_DEFINED__
typedef interface nsIDOMDocumentType nsIDOMDocumentType;
#ifdef __cplusplus
interface nsIDOMDocumentType;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMDocumentFragment_FWD_DEFINED__
#define __nsIDOMDocumentFragment_FWD_DEFINED__
typedef interface nsIDOMDocumentFragment nsIDOMDocumentFragment;
#ifdef __cplusplus
interface nsIDOMDocumentFragment;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMDocument_FWD_DEFINED__
#define __nsIDOMDocument_FWD_DEFINED__
typedef interface nsIDOMDocument nsIDOMDocument;
#ifdef __cplusplus
interface nsIDOMDocument;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLDocument_FWD_DEFINED__
#define __nsIDOMHTMLDocument_FWD_DEFINED__
typedef interface nsIDOMHTMLDocument nsIDOMHTMLDocument;
#ifdef __cplusplus
interface nsIDOMHTMLDocument;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMRange_FWD_DEFINED__
#define __nsIDOMRange_FWD_DEFINED__
typedef interface nsIDOMRange nsIDOMRange;
#ifdef __cplusplus
interface nsIDOMRange;
#endif /* __cplusplus */
#endif

#ifndef __nsISelection_FWD_DEFINED__
#define __nsISelection_FWD_DEFINED__
typedef interface nsISelection nsISelection;
#ifdef __cplusplus
interface nsISelection;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMWindowCollection_FWD_DEFINED__
#define __nsIDOMWindowCollection_FWD_DEFINED__
typedef interface nsIDOMWindowCollection nsIDOMWindowCollection;
#ifdef __cplusplus
interface nsIDOMWindowCollection;
#endif /* __cplusplus */
#endif

#ifndef __mozIDOMWindow_FWD_DEFINED__
#define __mozIDOMWindow_FWD_DEFINED__
typedef interface mozIDOMWindow mozIDOMWindow;
#ifdef __cplusplus
interface mozIDOMWindow;
#endif /* __cplusplus */
#endif

#ifndef __mozIDOMWindowProxy_FWD_DEFINED__
#define __mozIDOMWindowProxy_FWD_DEFINED__
typedef interface mozIDOMWindowProxy mozIDOMWindowProxy;
#ifdef __cplusplus
interface mozIDOMWindowProxy;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMWindow_FWD_DEFINED__
#define __nsIDOMWindow_FWD_DEFINED__
typedef interface nsIDOMWindow nsIDOMWindow;
#ifdef __cplusplus
interface nsIDOMWindow;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLBodyElement_FWD_DEFINED__
#define __nsIDOMHTMLBodyElement_FWD_DEFINED__
typedef interface nsIDOMHTMLBodyElement nsIDOMHTMLBodyElement;
#ifdef __cplusplus
interface nsIDOMHTMLBodyElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLFormElement_FWD_DEFINED__
#define __nsIDOMHTMLFormElement_FWD_DEFINED__
typedef interface nsIDOMHTMLFormElement nsIDOMHTMLFormElement;
#ifdef __cplusplus
interface nsIDOMHTMLFormElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLInputElement_FWD_DEFINED__
#define __nsIDOMHTMLInputElement_FWD_DEFINED__
typedef interface nsIDOMHTMLInputElement nsIDOMHTMLInputElement;
#ifdef __cplusplus
interface nsIDOMHTMLInputElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLOptionElement_FWD_DEFINED__
#define __nsIDOMHTMLOptionElement_FWD_DEFINED__
typedef interface nsIDOMHTMLOptionElement nsIDOMHTMLOptionElement;
#ifdef __cplusplus
interface nsIDOMHTMLOptionElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLButtonElement_FWD_DEFINED__
#define __nsIDOMHTMLButtonElement_FWD_DEFINED__
typedef interface nsIDOMHTMLButtonElement nsIDOMHTMLButtonElement;
#ifdef __cplusplus
interface nsIDOMHTMLButtonElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLOptionsCollection_FWD_DEFINED__
#define __nsIDOMHTMLOptionsCollection_FWD_DEFINED__
typedef interface nsIDOMHTMLOptionsCollection nsIDOMHTMLOptionsCollection;
#ifdef __cplusplus
interface nsIDOMHTMLOptionsCollection;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLSelectElement_FWD_DEFINED__
#define __nsIDOMHTMLSelectElement_FWD_DEFINED__
typedef interface nsIDOMHTMLSelectElement nsIDOMHTMLSelectElement;
#ifdef __cplusplus
interface nsIDOMHTMLSelectElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLTextAreaElement_FWD_DEFINED__
#define __nsIDOMHTMLTextAreaElement_FWD_DEFINED__
typedef interface nsIDOMHTMLTextAreaElement nsIDOMHTMLTextAreaElement;
#ifdef __cplusplus
interface nsIDOMHTMLTextAreaElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLScriptElement_FWD_DEFINED__
#define __nsIDOMHTMLScriptElement_FWD_DEFINED__
typedef interface nsIDOMHTMLScriptElement nsIDOMHTMLScriptElement;
#ifdef __cplusplus
interface nsIDOMHTMLScriptElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLImageElement_FWD_DEFINED__
#define __nsIDOMHTMLImageElement_FWD_DEFINED__
typedef interface nsIDOMHTMLImageElement nsIDOMHTMLImageElement;
#ifdef __cplusplus
interface nsIDOMHTMLImageElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLAnchorElement_FWD_DEFINED__
#define __nsIDOMHTMLAnchorElement_FWD_DEFINED__
typedef interface nsIDOMHTMLAnchorElement nsIDOMHTMLAnchorElement;
#ifdef __cplusplus
interface nsIDOMHTMLAnchorElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLAreaElement_FWD_DEFINED__
#define __nsIDOMHTMLAreaElement_FWD_DEFINED__
typedef interface nsIDOMHTMLAreaElement nsIDOMHTMLAreaElement;
#ifdef __cplusplus
interface nsIDOMHTMLAreaElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLLinkElement_FWD_DEFINED__
#define __nsIDOMHTMLLinkElement_FWD_DEFINED__
typedef interface nsIDOMHTMLLinkElement nsIDOMHTMLLinkElement;
#ifdef __cplusplus
interface nsIDOMHTMLLinkElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLTableElement_FWD_DEFINED__
#define __nsIDOMHTMLTableElement_FWD_DEFINED__
typedef interface nsIDOMHTMLTableElement nsIDOMHTMLTableElement;
#ifdef __cplusplus
interface nsIDOMHTMLTableElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLTableRowElement_FWD_DEFINED__
#define __nsIDOMHTMLTableRowElement_FWD_DEFINED__
typedef interface nsIDOMHTMLTableRowElement nsIDOMHTMLTableRowElement;
#ifdef __cplusplus
interface nsIDOMHTMLTableRowElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLTableCellElement_FWD_DEFINED__
#define __nsIDOMHTMLTableCellElement_FWD_DEFINED__
typedef interface nsIDOMHTMLTableCellElement nsIDOMHTMLTableCellElement;
#ifdef __cplusplus
interface nsIDOMHTMLTableCellElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLIFrameElement_FWD_DEFINED__
#define __nsIDOMHTMLIFrameElement_FWD_DEFINED__
typedef interface nsIDOMHTMLIFrameElement nsIDOMHTMLIFrameElement;
#ifdef __cplusplus
interface nsIDOMHTMLIFrameElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLFrameElement_FWD_DEFINED__
#define __nsIDOMHTMLFrameElement_FWD_DEFINED__
typedef interface nsIDOMHTMLFrameElement nsIDOMHTMLFrameElement;
#ifdef __cplusplus
interface nsIDOMHTMLFrameElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLObjectElement_FWD_DEFINED__
#define __nsIDOMHTMLObjectElement_FWD_DEFINED__
typedef interface nsIDOMHTMLObjectElement nsIDOMHTMLObjectElement;
#ifdef __cplusplus
interface nsIDOMHTMLObjectElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLStyleElement_FWD_DEFINED__
#define __nsIDOMHTMLStyleElement_FWD_DEFINED__
typedef interface nsIDOMHTMLStyleElement nsIDOMHTMLStyleElement;
#ifdef __cplusplus
interface nsIDOMHTMLStyleElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIURIContentListener_FWD_DEFINED__
#define __nsIURIContentListener_FWD_DEFINED__
typedef interface nsIURIContentListener nsIURIContentListener;
#ifdef __cplusplus
interface nsIURIContentListener;
#endif /* __cplusplus */
#endif

#ifndef __nsITooltipListener_FWD_DEFINED__
#define __nsITooltipListener_FWD_DEFINED__
typedef interface nsITooltipListener nsITooltipListener;
#ifdef __cplusplus
interface nsITooltipListener;
#endif /* __cplusplus */
#endif

#ifndef __nsIWebBrowser_FWD_DEFINED__
#define __nsIWebBrowser_FWD_DEFINED__
typedef interface nsIWebBrowser nsIWebBrowser;
#ifdef __cplusplus
interface nsIWebBrowser;
#endif /* __cplusplus */
#endif

#ifndef __nsIWebBrowserSetup_FWD_DEFINED__
#define __nsIWebBrowserSetup_FWD_DEFINED__
typedef interface nsIWebBrowserSetup nsIWebBrowserSetup;
#ifdef __cplusplus
interface nsIWebBrowserSetup;
#endif /* __cplusplus */
#endif

#ifndef __nsIBaseWindow_FWD_DEFINED__
#define __nsIBaseWindow_FWD_DEFINED__
typedef interface nsIBaseWindow nsIBaseWindow;
#ifdef __cplusplus
interface nsIBaseWindow;
#endif /* __cplusplus */
#endif

#ifndef __nsIWebNavigation_FWD_DEFINED__
#define __nsIWebNavigation_FWD_DEFINED__
typedef interface nsIWebNavigation nsIWebNavigation;
#ifdef __cplusplus
interface nsIWebNavigation;
#endif /* __cplusplus */
#endif

#ifndef __nsIWebProgress_FWD_DEFINED__
#define __nsIWebProgress_FWD_DEFINED__
typedef interface nsIWebProgress nsIWebProgress;
#ifdef __cplusplus
interface nsIWebProgress;
#endif /* __cplusplus */
#endif

#ifndef __nsIPrintSettings_FWD_DEFINED__
#define __nsIPrintSettings_FWD_DEFINED__
typedef interface nsIPrintSettings nsIPrintSettings;
#ifdef __cplusplus
interface nsIPrintSettings;
#endif /* __cplusplus */
#endif

#ifndef __nsIWebBrowserPrint_FWD_DEFINED__
#define __nsIWebBrowserPrint_FWD_DEFINED__
typedef interface nsIWebBrowserPrint nsIWebBrowserPrint;
#ifdef __cplusplus
interface nsIWebBrowserPrint;
#endif /* __cplusplus */
#endif

#ifndef __nsIScrollable_FWD_DEFINED__
#define __nsIScrollable_FWD_DEFINED__
typedef interface nsIScrollable nsIScrollable;
#ifdef __cplusplus
interface nsIScrollable;
#endif /* __cplusplus */
#endif

#ifndef __nsIFile_FWD_DEFINED__
#define __nsIFile_FWD_DEFINED__
typedef interface nsIFile nsIFile;
#ifdef __cplusplus
interface nsIFile;
#endif /* __cplusplus */
#endif

#ifndef __nsIComponentManager_FWD_DEFINED__
#define __nsIComponentManager_FWD_DEFINED__
typedef interface nsIComponentManager nsIComponentManager;
#ifdef __cplusplus
interface nsIComponentManager;
#endif /* __cplusplus */
#endif

#ifndef __nsIPrefBranch_FWD_DEFINED__
#define __nsIPrefBranch_FWD_DEFINED__
typedef interface nsIPrefBranch nsIPrefBranch;
#ifdef __cplusplus
interface nsIPrefBranch;
#endif /* __cplusplus */
#endif

#ifndef __nsIDirectoryServiceProvider_FWD_DEFINED__
#define __nsIDirectoryServiceProvider_FWD_DEFINED__
typedef interface nsIDirectoryServiceProvider nsIDirectoryServiceProvider;
#ifdef __cplusplus
interface nsIDirectoryServiceProvider;
#endif /* __cplusplus */
#endif

#ifndef __nsIDirectoryServiceProvider2_FWD_DEFINED__
#define __nsIDirectoryServiceProvider2_FWD_DEFINED__
typedef interface nsIDirectoryServiceProvider2 nsIDirectoryServiceProvider2;
#ifdef __cplusplus
interface nsIDirectoryServiceProvider2;
#endif /* __cplusplus */
#endif

#ifndef __nsIProtocolHandler_FWD_DEFINED__
#define __nsIProtocolHandler_FWD_DEFINED__
typedef interface nsIProtocolHandler nsIProtocolHandler;
#ifdef __cplusplus
interface nsIProtocolHandler;
#endif /* __cplusplus */
#endif

#ifndef __nsIExternalProtocolHandler_FWD_DEFINED__
#define __nsIExternalProtocolHandler_FWD_DEFINED__
typedef interface nsIExternalProtocolHandler nsIExternalProtocolHandler;
#ifdef __cplusplus
interface nsIExternalProtocolHandler;
#endif /* __cplusplus */
#endif

#ifndef __nsIIOServiceHook_FWD_DEFINED__
#define __nsIIOServiceHook_FWD_DEFINED__
typedef interface nsIIOServiceHook nsIIOServiceHook;
#ifdef __cplusplus
interface nsIIOServiceHook;
#endif /* __cplusplus */
#endif

#ifndef __nsIIOService_FWD_DEFINED__
#define __nsIIOService_FWD_DEFINED__
typedef interface nsIIOService nsIIOService;
#ifdef __cplusplus
interface nsIIOService;
#endif /* __cplusplus */
#endif

#ifndef __nsIWebBrowserFocus_FWD_DEFINED__
#define __nsIWebBrowserFocus_FWD_DEFINED__
typedef interface nsIWebBrowserFocus nsIWebBrowserFocus;
#ifdef __cplusplus
interface nsIWebBrowserFocus;
#endif /* __cplusplus */
#endif

#ifndef __nsIWebBrowserChrome_FWD_DEFINED__
#define __nsIWebBrowserChrome_FWD_DEFINED__
typedef interface nsIWebBrowserChrome nsIWebBrowserChrome;
#ifdef __cplusplus
interface nsIWebBrowserChrome;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMEventListener_FWD_DEFINED__
#define __nsIDOMEventListener_FWD_DEFINED__
typedef interface nsIDOMEventListener nsIDOMEventListener;
#ifdef __cplusplus
interface nsIDOMEventListener;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMEventTarget_FWD_DEFINED__
#define __nsIDOMEventTarget_FWD_DEFINED__
typedef interface nsIDOMEventTarget nsIDOMEventTarget;
#ifdef __cplusplus
interface nsIDOMEventTarget;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMEvent_FWD_DEFINED__
#define __nsIDOMEvent_FWD_DEFINED__
typedef interface nsIDOMEvent nsIDOMEvent;
#ifdef __cplusplus
interface nsIDOMEvent;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMWindowUtils_FWD_DEFINED__
#define __nsIDOMWindowUtils_FWD_DEFINED__
typedef interface nsIDOMWindowUtils nsIDOMWindowUtils;
#ifdef __cplusplus
interface nsIDOMWindowUtils;
#endif /* __cplusplus */
#endif

#ifndef __nsIContextMenuListener_FWD_DEFINED__
#define __nsIContextMenuListener_FWD_DEFINED__
typedef interface nsIContextMenuListener nsIContextMenuListener;
#ifdef __cplusplus
interface nsIContextMenuListener;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMUIEvent_FWD_DEFINED__
#define __nsIDOMUIEvent_FWD_DEFINED__
typedef interface nsIDOMUIEvent nsIDOMUIEvent;
#ifdef __cplusplus
interface nsIDOMUIEvent;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMMouseEvent_FWD_DEFINED__
#define __nsIDOMMouseEvent_FWD_DEFINED__
typedef interface nsIDOMMouseEvent nsIDOMMouseEvent;
#ifdef __cplusplus
interface nsIDOMMouseEvent;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMKeyEvent_FWD_DEFINED__
#define __nsIDOMKeyEvent_FWD_DEFINED__
typedef interface nsIDOMKeyEvent nsIDOMKeyEvent;
#ifdef __cplusplus
interface nsIDOMKeyEvent;
#endif /* __cplusplus */
#endif

#ifndef __nsIEmbeddingSiteWindow_FWD_DEFINED__
#define __nsIEmbeddingSiteWindow_FWD_DEFINED__
typedef interface nsIEmbeddingSiteWindow nsIEmbeddingSiteWindow;
#ifdef __cplusplus
interface nsIEmbeddingSiteWindow;
#endif /* __cplusplus */
#endif

#ifndef __nsIComponentRegistrar_FWD_DEFINED__
#define __nsIComponentRegistrar_FWD_DEFINED__
typedef interface nsIComponentRegistrar nsIComponentRegistrar;
#ifdef __cplusplus
interface nsIComponentRegistrar;
#endif /* __cplusplus */
#endif

#ifndef __nsIPromptService_FWD_DEFINED__
#define __nsIPromptService_FWD_DEFINED__
typedef interface nsIPromptService nsIPromptService;
#ifdef __cplusplus
interface nsIPromptService;
#endif /* __cplusplus */
#endif

#ifndef __nsITooltipTextProvider_FWD_DEFINED__
#define __nsITooltipTextProvider_FWD_DEFINED__
typedef interface nsITooltipTextProvider nsITooltipTextProvider;
#ifdef __cplusplus
interface nsITooltipTextProvider;
#endif /* __cplusplus */
#endif

#ifndef __nsIEditingSession_FWD_DEFINED__
#define __nsIEditingSession_FWD_DEFINED__
typedef interface nsIEditingSession nsIEditingSession;
#ifdef __cplusplus
interface nsIEditingSession;
#endif /* __cplusplus */
#endif

#ifndef __nsICommandParams_FWD_DEFINED__
#define __nsICommandParams_FWD_DEFINED__
typedef interface nsICommandParams nsICommandParams;
#ifdef __cplusplus
interface nsICommandParams;
#endif /* __cplusplus */
#endif

#ifndef __nsICommandManager_FWD_DEFINED__
#define __nsICommandManager_FWD_DEFINED__
typedef interface nsICommandManager nsICommandManager;
#ifdef __cplusplus
interface nsICommandManager;
#endif /* __cplusplus */
#endif

#ifndef __nsICategoryManager_FWD_DEFINED__
#define __nsICategoryManager_FWD_DEFINED__
typedef interface nsICategoryManager nsICategoryManager;
#ifdef __cplusplus
interface nsICategoryManager;
#endif /* __cplusplus */
#endif

#ifndef __nsIControllerContext_FWD_DEFINED__
#define __nsIControllerContext_FWD_DEFINED__
typedef interface nsIControllerContext nsIControllerContext;
#ifdef __cplusplus
interface nsIControllerContext;
#endif /* __cplusplus */
#endif

#ifndef __nsIController_FWD_DEFINED__
#define __nsIController_FWD_DEFINED__
typedef interface nsIController nsIController;
#ifdef __cplusplus
interface nsIController;
#endif /* __cplusplus */
#endif

#ifndef __nsIContent_FWD_DEFINED__
#define __nsIContent_FWD_DEFINED__
typedef interface nsIContent nsIContent;
#ifdef __cplusplus
interface nsIContent;
#endif /* __cplusplus */
#endif

#ifndef __nsIDocument_FWD_DEFINED__
#define __nsIDocument_FWD_DEFINED__
typedef interface nsIDocument nsIDocument;
#ifdef __cplusplus
interface nsIDocument;
#endif /* __cplusplus */
#endif

#ifndef __nsIContentSerializer_FWD_DEFINED__
#define __nsIContentSerializer_FWD_DEFINED__
typedef interface nsIContentSerializer nsIContentSerializer;
#ifdef __cplusplus
interface nsIContentSerializer;
#endif /* __cplusplus */
#endif

#ifndef __nsIEditor_FWD_DEFINED__
#define __nsIEditor_FWD_DEFINED__
typedef interface nsIEditor nsIEditor;
#ifdef __cplusplus
interface nsIEditor;
#endif /* __cplusplus */
#endif

#ifndef __nsIHTMLEditor_FWD_DEFINED__
#define __nsIHTMLEditor_FWD_DEFINED__
typedef interface nsIHTMLEditor nsIHTMLEditor;
#ifdef __cplusplus
interface nsIHTMLEditor;
#endif /* __cplusplus */
#endif

#ifndef __nsIClipboardCommands_FWD_DEFINED__
#define __nsIClipboardCommands_FWD_DEFINED__
typedef interface nsIClipboardCommands nsIClipboardCommands;
#ifdef __cplusplus
interface nsIClipboardCommands;
#endif /* __cplusplus */
#endif

#ifndef __nsIDocShellTreeItem_FWD_DEFINED__
#define __nsIDocShellTreeItem_FWD_DEFINED__
typedef interface nsIDocShellTreeItem nsIDocShellTreeItem;
#ifdef __cplusplus
interface nsIDocShellTreeItem;
#endif /* __cplusplus */
#endif

#ifndef __nsIContentViewer_FWD_DEFINED__
#define __nsIContentViewer_FWD_DEFINED__
typedef interface nsIContentViewer nsIContentViewer;
#ifdef __cplusplus
interface nsIContentViewer;
#endif /* __cplusplus */
#endif

#ifndef __nsIDocShellLoadInfo_FWD_DEFINED__
#define __nsIDocShellLoadInfo_FWD_DEFINED__
typedef interface nsIDocShellLoadInfo nsIDocShellLoadInfo;
#ifdef __cplusplus
interface nsIDocShellLoadInfo;
#endif /* __cplusplus */
#endif

#ifndef __nsIDocShell_FWD_DEFINED__
#define __nsIDocShell_FWD_DEFINED__
typedef interface nsIDocShell nsIDocShell;
#ifdef __cplusplus
interface nsIDocShell;
#endif /* __cplusplus */
#endif

#ifndef __nsIMutationObserver_FWD_DEFINED__
#define __nsIMutationObserver_FWD_DEFINED__
typedef interface nsIMutationObserver nsIMutationObserver;
#ifdef __cplusplus
interface nsIMutationObserver;
#endif /* __cplusplus */
#endif

#ifndef __nsIParser_FWD_DEFINED__
#define __nsIParser_FWD_DEFINED__
typedef interface nsIParser nsIParser;
#ifdef __cplusplus
interface nsIParser;
#endif /* __cplusplus */
#endif

#ifndef __nsIDocumentObserver_FWD_DEFINED__
#define __nsIDocumentObserver_FWD_DEFINED__
typedef interface nsIDocumentObserver nsIDocumentObserver;
#ifdef __cplusplus
interface nsIDocumentObserver;
#endif /* __cplusplus */
#endif

#ifndef __nsIContentUtils_FWD_DEFINED__
#define __nsIContentUtils_FWD_DEFINED__
typedef interface nsIContentUtils nsIContentUtils;
#ifdef __cplusplus
interface nsIContentUtils;
#endif /* __cplusplus */
#endif

#ifndef __nsIAudioChannelAgentCallback_FWD_DEFINED__
#define __nsIAudioChannelAgentCallback_FWD_DEFINED__
typedef interface nsIAudioChannelAgentCallback nsIAudioChannelAgentCallback;
#ifdef __cplusplus
interface nsIAudioChannelAgentCallback;
#endif /* __cplusplus */
#endif

#ifndef __nsIPluginInstance_FWD_DEFINED__
#define __nsIPluginInstance_FWD_DEFINED__
typedef interface nsIPluginInstance nsIPluginInstance;
#ifdef __cplusplus
interface nsIPluginInstance;
#endif /* __cplusplus */
#endif

#ifndef __nsIGlobalObject_FWD_DEFINED__
#define __nsIGlobalObject_FWD_DEFINED__
typedef interface nsIGlobalObject nsIGlobalObject;
#ifdef __cplusplus
interface nsIGlobalObject;
#endif /* __cplusplus */
#endif

#ifndef __nsIScriptObjectPrincipal_FWD_DEFINED__
#define __nsIScriptObjectPrincipal_FWD_DEFINED__
typedef interface nsIScriptObjectPrincipal nsIScriptObjectPrincipal;
#ifdef __cplusplus
interface nsIScriptObjectPrincipal;
#endif /* __cplusplus */
#endif

#ifndef __nsIXMLHttpRequest_FWD_DEFINED__
#define __nsIXMLHttpRequest_FWD_DEFINED__
typedef interface nsIXMLHttpRequest nsIXMLHttpRequest;
#ifdef __cplusplus
interface nsIXMLHttpRequest;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <wtypes.h>

#ifdef __cplusplus
extern "C" {
#endif

#define GECKO_VERSION "2.47"
#define GECKO_VERSION_STRING "Wine Gecko " GECKO_VERSION
#ifdef WINE_NO_UNICODE_MACROS
#undef GetForm
#undef SetPort
#undef GetClassName
#endif
typedef HRESULT nsresult;
typedef ULONG nsrefcnt;
typedef IID nsID;
typedef IID nsIID;
typedef nsIID nsCID;
typedef REFIID nsIIDRef;
typedef nsIIDRef nsCIDRef;
typedef WCHAR PRUnichar;
typedef UINT64 DOMTimeStamp;
typedef UINT32 nsLoadFlags;
typedef INT64 PRTime;
typedef unsigned char cpp_bool;
typedef struct __WIDL_nsiface_generated_name_00000002 {
    void *v;
    void *d1;
    UINT32 d2;
    void *d3;
} nsCStringContainer;
typedef struct __WIDL_nsiface_generated_name_00000003 {
    void *v;
    void *d1;
    UINT32 d2;
    void *d3;
} nsStringContainer;
typedef nsCStringContainer nsACString;
typedef nsStringContainer nsAString;
#ifndef __nsIWebBrowserChrome_FWD_DEFINED__
#define __nsIWebBrowserChrome_FWD_DEFINED__
typedef interface nsIWebBrowserChrome nsIWebBrowserChrome;
#ifdef __cplusplus
interface nsIWebBrowserChrome;
#endif /* __cplusplus */
#endif

#ifndef __nsILoadGroup_FWD_DEFINED__
#define __nsILoadGroup_FWD_DEFINED__
typedef interface nsILoadGroup nsILoadGroup;
#ifdef __cplusplus
interface nsILoadGroup;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMNode_FWD_DEFINED__
#define __nsIDOMNode_FWD_DEFINED__
typedef interface nsIDOMNode nsIDOMNode;
#ifdef __cplusplus
interface nsIDOMNode;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMAttr_FWD_DEFINED__
#define __nsIDOMAttr_FWD_DEFINED__
typedef interface nsIDOMAttr nsIDOMAttr;
#ifdef __cplusplus
interface nsIDOMAttr;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMDocument_FWD_DEFINED__
#define __nsIDOMDocument_FWD_DEFINED__
typedef interface nsIDOMDocument nsIDOMDocument;
#ifdef __cplusplus
interface nsIDOMDocument;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMEvent_FWD_DEFINED__
#define __nsIDOMEvent_FWD_DEFINED__
typedef interface nsIDOMEvent nsIDOMEvent;
#ifdef __cplusplus
interface nsIDOMEvent;
#endif /* __cplusplus */
#endif

#ifndef __nsIEditor_FWD_DEFINED__
#define __nsIEditor_FWD_DEFINED__
typedef interface nsIEditor nsIEditor;
#ifdef __cplusplus
interface nsIEditor;
#endif /* __cplusplus */
#endif

#ifndef __nsISelectionController_FWD_DEFINED__
#define __nsISelectionController_FWD_DEFINED__
typedef interface nsISelectionController nsISelectionController;
#ifdef __cplusplus
interface nsISelectionController;
#endif /* __cplusplus */
#endif

#ifndef __nsITransactionManager_FWD_DEFINED__
#define __nsITransactionManager_FWD_DEFINED__
typedef interface nsITransactionManager nsITransactionManager;
#ifdef __cplusplus
interface nsITransactionManager;
#endif /* __cplusplus */
#endif

#ifndef __nsITransaction_FWD_DEFINED__
#define __nsITransaction_FWD_DEFINED__
typedef interface nsITransaction nsITransaction;
#ifdef __cplusplus
interface nsITransaction;
#endif /* __cplusplus */
#endif

#ifndef __nsIInlineSpellChecker_FWD_DEFINED__
#define __nsIInlineSpellChecker_FWD_DEFINED__
typedef interface nsIInlineSpellChecker nsIInlineSpellChecker;
#ifdef __cplusplus
interface nsIInlineSpellChecker;
#endif /* __cplusplus */
#endif

#ifndef __nsIOutputStream_FWD_DEFINED__
#define __nsIOutputStream_FWD_DEFINED__
typedef interface nsIOutputStream nsIOutputStream;
#ifdef __cplusplus
interface nsIOutputStream;
#endif /* __cplusplus */
#endif

#ifndef __nsIEditorObserver_FWD_DEFINED__
#define __nsIEditorObserver_FWD_DEFINED__
typedef interface nsIEditorObserver nsIEditorObserver;
#ifdef __cplusplus
interface nsIEditorObserver;
#endif /* __cplusplus */
#endif

#ifndef __nsIEditActionListener_FWD_DEFINED__
#define __nsIEditActionListener_FWD_DEFINED__
typedef interface nsIEditActionListener nsIEditActionListener;
#ifdef __cplusplus
interface nsIEditActionListener;
#endif /* __cplusplus */
#endif

#ifndef __nsIDocumentStateListener_FWD_DEFINED__
#define __nsIDocumentStateListener_FWD_DEFINED__
typedef interface nsIDocumentStateListener nsIDocumentStateListener;
#ifdef __cplusplus
interface nsIDocumentStateListener;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMCSSStyleSheet_FWD_DEFINED__
#define __nsIDOMCSSStyleSheet_FWD_DEFINED__
typedef interface nsIDOMCSSStyleSheet nsIDOMCSSStyleSheet;
#ifdef __cplusplus
interface nsIDOMCSSStyleSheet;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMDocumentView_FWD_DEFINED__
#define __nsIDOMDocumentView_FWD_DEFINED__
typedef interface nsIDOMDocumentView nsIDOMDocumentView;
#ifdef __cplusplus
interface nsIDOMDocumentView;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMWindow_FWD_DEFINED__
#define __nsIDOMWindow_FWD_DEFINED__
typedef interface nsIDOMWindow nsIDOMWindow;
#ifdef __cplusplus
interface nsIDOMWindow;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMElement_FWD_DEFINED__
#define __nsIDOMElement_FWD_DEFINED__
typedef interface nsIDOMElement nsIDOMElement;
#ifdef __cplusplus
interface nsIDOMElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMRange_FWD_DEFINED__
#define __nsIDOMRange_FWD_DEFINED__
typedef interface nsIDOMRange nsIDOMRange;
#ifdef __cplusplus
interface nsIDOMRange;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMEventTarget_FWD_DEFINED__
#define __nsIDOMEventTarget_FWD_DEFINED__
typedef interface nsIDOMEventTarget nsIDOMEventTarget;
#ifdef __cplusplus
interface nsIDOMEventTarget;
#endif /* __cplusplus */
#endif

#ifndef __nsISelection_FWD_DEFINED__
#define __nsISelection_FWD_DEFINED__
typedef interface nsISelection nsISelection;
#ifdef __cplusplus
interface nsISelection;
#endif /* __cplusplus */
#endif

#ifndef __nsIDOMHTMLSelectElement_FWD_DEFINED__
#define __nsIDOMHTMLSelectElement_FWD_DEFINED__
typedef interface nsIDOMHTMLSelectElement nsIDOMHTMLSelectElement;
#ifdef __cplusplus
interface nsIDOMHTMLSelectElement;
#endif /* __cplusplus */
#endif

#ifndef __nsIFile_FWD_DEFINED__
#define __nsIFile_FWD_DEFINED__
typedef interface nsIFile nsIFile;
#ifdef __cplusplus
interface nsIFile;
#endif /* __cplusplus */
#endif

#ifndef __nsIDocShell_FWD_DEFINED__
#define __nsIDocShell_FWD_DEFINED__
typedef interface nsIDocShell nsIDocShell;
#ifdef __cplusplus
interface nsIDocShell;
#endif /* __cplusplus */
#endif

#ifndef __mozIDOMWindowProxy_FWD_DEFINED__
#define __mozIDOMWindowProxy_FWD_DEFINED__
typedef interface mozIDOMWindowProxy mozIDOMWindowProxy;
#ifdef __cplusplus
interface mozIDOMWindowProxy;
#endif /* __cplusplus */
#endif

#ifndef __IMoniker_FWD_DEFINED__
#define __IMoniker_FWD_DEFINED__
typedef interface IMoniker IMoniker;
#ifdef __cplusplus
interface IMoniker;
#endif /* __cplusplus */
#endif

/*****************************************************************************
 * nsISupports interface
 */
#ifndef __nsISupports_INTERFACE_DEFINED__
#define __nsISupports_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsISupports, 0x00000000, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("00000000-0000-0000-c000-000000000046")
nsISupports
{

    BEGIN_INTERFACE

    virtual nsresult STDMETHODCALLTYPE QueryInterface(
        nsIIDRef riid,
        void **result) = 0;

    virtual nsrefcnt STDMETHODCALLTYPE AddRef(
        ) = 0;

    virtual nsrefcnt STDMETHODCALLTYPE Release(
        ) = 0;

    END_INTERFACE

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsISupports, 0x00000000, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#else
typedef struct nsISupportsVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsISupports *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsISupports *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsISupports *This);

    END_INTERFACE
} nsISupportsVtbl;

interface nsISupports {
    CONST_VTBL nsISupportsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsISupports_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsISupports_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsISupports_Release(This) (This)->lpVtbl->Release(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsISupports_QueryInterface(nsISupports* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsISupports_AddRef(nsISupports* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsISupports_Release(nsISupports* This) {
    return This->lpVtbl->Release(This);
}
#endif
#endif

#endif


#endif  /* __nsISupports_INTERFACE_DEFINED__ */

typedef nsISupports nsISHistory;
typedef nsISupports nsIWidget;
typedef nsISupports nsIPrompt;
typedef nsISupports nsIAuthPrompt;
typedef nsISupports nsIDOMDOMImplementation;
typedef nsISupports nsIDOMCDATASection;
typedef nsISupports nsIDOMProcessingInstruction;
typedef nsISupports nsIDOMEntityReference;
typedef nsISupports nsIWebProgressListener;
typedef nsISupports nsIDOMCSSValue;
typedef nsISupports nsIPrintSession;
typedef nsISupports nsIControllerCommandTable;
typedef nsISupports nsIPrincipal;
typedef nsISupports nsIAtom;
typedef nsISupports nsISupportsArray;
typedef nsISupports nsIContentFilter;
typedef nsISupports nsIDOMMediaList;
typedef nsISupports nsIDOMHTMLTableSectionElement;
typedef nsISupports nsIDOMClientRectList;
typedef nsISupports nsINode;
typedef nsISupports nsIDOMUserDataHandler;
typedef nsISupports nsISHEntry;
typedef nsISupports nsIPresShell;
typedef nsISupports nsIDocumentCharsetInfo;
typedef nsISupports nsILayoutHistoryState;
typedef nsISupports nsISecureBrowserUI;
typedef nsISupports nsIDOMStorage;
typedef nsISupports nsIDOMDOMTokenList;
typedef nsISupports nsITransferable;
typedef nsISupports nsIDOMFileList;
typedef nsISupports nsIDOMFile;
typedef nsISupports nsIControllers;
typedef nsISupports nsIDOMValidityState;
typedef nsISupports nsIPluginInstanceOwner;
typedef nsISupports nsIPluginStreamListener;
typedef nsISupports nsIContentSink;
typedef nsISupports nsIParserFilter;
typedef nsISupports nsIDTD;
typedef nsISupports nsIObserver;
typedef nsISupports nsIDOMNodeFilter;
typedef nsISupports nsIDOMNodeIterator;
typedef nsISupports nsIDOMTreeWalker;
typedef nsISupports nsIHttpUpgradeListener;
typedef nsISupports nsIDOMOfflineResourceList;
typedef nsISupports nsIDOMNavigator;
typedef nsISupports nsIDOMScreen;
typedef nsISupports nsIAnimationFrameListener;
typedef nsISupports nsIDOMStorageList;
typedef nsISupports nsILocalFile;
typedef nsISupports nsIDOMHTMLMenuElement;
typedef nsISupports nsIDOMCaretPosition;
typedef nsISupports nsIFrameRequestCallback;
typedef nsISupports nsICycleCollectorListener;
typedef nsISupports nsIDOMHTMLCanvasElement;
typedef nsISupports nsIQueryContentEventResult;
typedef nsISupports nsIDOMBlob;
typedef nsISupports nsIPrivacyTransitionObserver;
typedef nsISupports nsIDOMHTMLPropertiesCollection;
typedef nsISupports mozIDOMApplication;
typedef nsISupports nsIDOMCrypto;
typedef nsISupports nsIDOMPkcs11;
typedef nsISupports nsIDocShellTreeOwner;
typedef nsISupports nsIArray;
typedef nsISupports nsILoadInfo;
typedef nsISupports nsIContentSecurityPolicy;
typedef nsISupports nsIXMLHttpRequestUpload;
typedef nsISupports nsIClassInfo;
typedef nsISupports nsILoadContext;
typedef nsISupports nsIDomainPolicy;
typedef nsISupports nsIScriptContext;
typedef nsISupports nsIObjectInputStream;
typedef nsISupports nsIObjectOutputStream;
typedef void *JSContext;
typedef void *JSObject;
typedef UINT64 jsval;
/*****************************************************************************
 * nsIServiceManager interface
 */
#ifndef __nsIServiceManager_INTERFACE_DEFINED__
#define __nsIServiceManager_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIServiceManager, 0x8bb35ed9, 0xe332, 0x462d, 0x91,0x55, 0x4a,0x00,0x2a,0xb5,0xc9,0x58);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("8bb35ed9-e332-462d-9155-4a002ab5c958")
nsIServiceManager : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetService(
        nsCIDRef aClass,
        nsIIDRef aIID,
        void **result) = 0;

    virtual nsresult STDMETHODCALLTYPE GetServiceByContractID(
        const char *aContractID,
        nsIIDRef aIID,
        void **result) = 0;

    virtual nsresult STDMETHODCALLTYPE IsServiceInstantiated(
        nsCIDRef aClass,
        nsIIDRef aIID,
        BOOL *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE IsServiceInstantiatedByContractID(
        const char *aContractID,
        nsIIDRef aIID,
        BOOL *_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIServiceManager, 0x8bb35ed9, 0xe332, 0x462d, 0x91,0x55, 0x4a,0x00,0x2a,0xb5,0xc9,0x58)
#endif
#else
typedef struct nsIServiceManagerVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIServiceManager *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIServiceManager *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIServiceManager *This);

    /*** nsIServiceManager methods ***/
    nsresult (STDMETHODCALLTYPE *GetService)(
        nsIServiceManager *This,
        nsCIDRef aClass,
        nsIIDRef aIID,
        void **result);

    nsresult (STDMETHODCALLTYPE *GetServiceByContractID)(
        nsIServiceManager *This,
        const char *aContractID,
        nsIIDRef aIID,
        void **result);

    nsresult (STDMETHODCALLTYPE *IsServiceInstantiated)(
        nsIServiceManager *This,
        nsCIDRef aClass,
        nsIIDRef aIID,
        BOOL *_retval);

    nsresult (STDMETHODCALLTYPE *IsServiceInstantiatedByContractID)(
        nsIServiceManager *This,
        const char *aContractID,
        nsIIDRef aIID,
        BOOL *_retval);

    END_INTERFACE
} nsIServiceManagerVtbl;

interface nsIServiceManager {
    CONST_VTBL nsIServiceManagerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIServiceManager_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIServiceManager_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIServiceManager_Release(This) (This)->lpVtbl->Release(This)
/*** nsIServiceManager methods ***/
#define nsIServiceManager_GetService(This,aClass,aIID,result) (This)->lpVtbl->GetService(This,aClass,aIID,result)
#define nsIServiceManager_GetServiceByContractID(This,aContractID,aIID,result) (This)->lpVtbl->GetServiceByContractID(This,aContractID,aIID,result)
#define nsIServiceManager_IsServiceInstantiated(This,aClass,aIID,_retval) (This)->lpVtbl->IsServiceInstantiated(This,aClass,aIID,_retval)
#define nsIServiceManager_IsServiceInstantiatedByContractID(This,aContractID,aIID,_retval) (This)->lpVtbl->IsServiceInstantiatedByContractID(This,aContractID,aIID,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIServiceManager_QueryInterface(nsIServiceManager* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIServiceManager_AddRef(nsIServiceManager* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIServiceManager_Release(nsIServiceManager* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIServiceManager methods ***/
static FORCEINLINE nsresult nsIServiceManager_GetService(nsIServiceManager* This,nsCIDRef aClass,nsIIDRef aIID,void **result) {
    return This->lpVtbl->GetService(This,aClass,aIID,result);
}
static FORCEINLINE nsresult nsIServiceManager_GetServiceByContractID(nsIServiceManager* This,const char *aContractID,nsIIDRef aIID,void **result) {
    return This->lpVtbl->GetServiceByContractID(This,aContractID,aIID,result);
}
static FORCEINLINE nsresult nsIServiceManager_IsServiceInstantiated(nsIServiceManager* This,nsCIDRef aClass,nsIIDRef aIID,BOOL *_retval) {
    return This->lpVtbl->IsServiceInstantiated(This,aClass,aIID,_retval);
}
static FORCEINLINE nsresult nsIServiceManager_IsServiceInstantiatedByContractID(nsIServiceManager* This,const char *aContractID,nsIIDRef aIID,BOOL *_retval) {
    return This->lpVtbl->IsServiceInstantiatedByContractID(This,aContractID,aIID,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIServiceManager_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIFactory interface
 */
#ifndef __nsIFactory_INTERFACE_DEFINED__
#define __nsIFactory_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIFactory, 0x00000001, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("00000001-0000-0000-c000-000000000046")
nsIFactory : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE CreateInstance(
        nsISupports *aOuter,
        const nsIID *iid,
        void **result) = 0;

    virtual nsresult STDMETHODCALLTYPE LockFactory(
        cpp_bool lock) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIFactory, 0x00000001, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#else
typedef struct nsIFactoryVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIFactory *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIFactory *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIFactory *This);

    /*** nsIFactory methods ***/
    nsresult (STDMETHODCALLTYPE *CreateInstance)(
        nsIFactory *This,
        nsISupports *aOuter,
        const nsIID *iid,
        void **result);

    nsresult (STDMETHODCALLTYPE *LockFactory)(
        nsIFactory *This,
        cpp_bool lock);

    END_INTERFACE
} nsIFactoryVtbl;

interface nsIFactory {
    CONST_VTBL nsIFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIFactory_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIFactory_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIFactory_Release(This) (This)->lpVtbl->Release(This)
/*** nsIFactory methods ***/
#define nsIFactory_CreateInstance(This,aOuter,iid,result) (This)->lpVtbl->CreateInstance(This,aOuter,iid,result)
#define nsIFactory_LockFactory(This,lock) (This)->lpVtbl->LockFactory(This,lock)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIFactory_QueryInterface(nsIFactory* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIFactory_AddRef(nsIFactory* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIFactory_Release(nsIFactory* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIFactory methods ***/
static FORCEINLINE nsresult nsIFactory_CreateInstance(nsIFactory* This,nsISupports *aOuter,const nsIID *iid,void **result) {
    return This->lpVtbl->CreateInstance(This,aOuter,iid,result);
}
static FORCEINLINE nsresult nsIFactory_LockFactory(nsIFactory* This,cpp_bool lock) {
    return This->lpVtbl->LockFactory(This,lock);
}
#endif
#endif

#endif


#endif  /* __nsIFactory_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIWeakReference interface
 */
#ifndef __nsIWeakReference_INTERFACE_DEFINED__
#define __nsIWeakReference_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIWeakReference, 0x9188bc85, 0xf92e, 0x11d2, 0x81,0xef, 0x00,0x60,0x08,0x3a,0x0b,0xcf);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("9188bc85-f92e-11d2-81ef-0060083a0bcf")
nsIWeakReference : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE QueryReferent(
        const nsIID *riid,
        void **result) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIWeakReference, 0x9188bc85, 0xf92e, 0x11d2, 0x81,0xef, 0x00,0x60,0x08,0x3a,0x0b,0xcf)
#endif
#else
typedef struct nsIWeakReferenceVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIWeakReference *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIWeakReference *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIWeakReference *This);

    /*** nsIWeakReference methods ***/
    nsresult (STDMETHODCALLTYPE *QueryReferent)(
        nsIWeakReference *This,
        const nsIID *riid,
        void **result);

    END_INTERFACE
} nsIWeakReferenceVtbl;

interface nsIWeakReference {
    CONST_VTBL nsIWeakReferenceVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIWeakReference_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIWeakReference_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIWeakReference_Release(This) (This)->lpVtbl->Release(This)
/*** nsIWeakReference methods ***/
#define nsIWeakReference_QueryReferent(This,riid,result) (This)->lpVtbl->QueryReferent(This,riid,result)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIWeakReference_QueryInterface(nsIWeakReference* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIWeakReference_AddRef(nsIWeakReference* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIWeakReference_Release(nsIWeakReference* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIWeakReference methods ***/
static FORCEINLINE nsresult nsIWeakReference_QueryReferent(nsIWeakReference* This,const nsIID *riid,void **result) {
    return This->lpVtbl->QueryReferent(This,riid,result);
}
#endif
#endif

#endif


#endif  /* __nsIWeakReference_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsISupportsWeakReference interface
 */
#ifndef __nsISupportsWeakReference_INTERFACE_DEFINED__
#define __nsISupportsWeakReference_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsISupportsWeakReference, 0x9188bc86, 0xf92e, 0x11d2, 0x81,0xef, 0x00,0x60,0x08,0x3a,0x0b,0xcf);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("9188bc86-f92e-11d2-81ef-0060083a0bcf")
nsISupportsWeakReference : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetWeakReference(
        nsIWeakReference **_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsISupportsWeakReference, 0x9188bc86, 0xf92e, 0x11d2, 0x81,0xef, 0x00,0x60,0x08,0x3a,0x0b,0xcf)
#endif
#else
typedef struct nsISupportsWeakReferenceVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsISupportsWeakReference *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsISupportsWeakReference *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsISupportsWeakReference *This);

    /*** nsISupportsWeakReference methods ***/
    nsresult (STDMETHODCALLTYPE *GetWeakReference)(
        nsISupportsWeakReference *This,
        nsIWeakReference **_retval);

    END_INTERFACE
} nsISupportsWeakReferenceVtbl;

interface nsISupportsWeakReference {
    CONST_VTBL nsISupportsWeakReferenceVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsISupportsWeakReference_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsISupportsWeakReference_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsISupportsWeakReference_Release(This) (This)->lpVtbl->Release(This)
/*** nsISupportsWeakReference methods ***/
#define nsISupportsWeakReference_GetWeakReference(This,_retval) (This)->lpVtbl->GetWeakReference(This,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsISupportsWeakReference_QueryInterface(nsISupportsWeakReference* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsISupportsWeakReference_AddRef(nsISupportsWeakReference* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsISupportsWeakReference_Release(nsISupportsWeakReference* This) {
    return This->lpVtbl->Release(This);
}
/*** nsISupportsWeakReference methods ***/
static FORCEINLINE nsresult nsISupportsWeakReference_GetWeakReference(nsISupportsWeakReference* This,nsIWeakReference **_retval) {
    return This->lpVtbl->GetWeakReference(This,_retval);
}
#endif
#endif

#endif


#endif  /* __nsISupportsWeakReference_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIInterfaceRequestor interface
 */
#ifndef __nsIInterfaceRequestor_INTERFACE_DEFINED__
#define __nsIInterfaceRequestor_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIInterfaceRequestor, 0x033a1470, 0x8b2a, 0x11d3, 0xaf,0x88, 0x00,0xa0,0x24,0xff,0xc0,0x8c);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("033a1470-8b2a-11d3-af88-00a024ffc08c")
nsIInterfaceRequestor : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetInterface(
        const nsIID *riid,
        void **result) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIInterfaceRequestor, 0x033a1470, 0x8b2a, 0x11d3, 0xaf,0x88, 0x00,0xa0,0x24,0xff,0xc0,0x8c)
#endif
#else
typedef struct nsIInterfaceRequestorVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIInterfaceRequestor *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIInterfaceRequestor *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIInterfaceRequestor *This);

    /*** nsIInterfaceRequestor methods ***/
    nsresult (STDMETHODCALLTYPE *GetInterface)(
        nsIInterfaceRequestor *This,
        const nsIID *riid,
        void **result);

    END_INTERFACE
} nsIInterfaceRequestorVtbl;

interface nsIInterfaceRequestor {
    CONST_VTBL nsIInterfaceRequestorVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIInterfaceRequestor_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIInterfaceRequestor_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIInterfaceRequestor_Release(This) (This)->lpVtbl->Release(This)
/*** nsIInterfaceRequestor methods ***/
#define nsIInterfaceRequestor_GetInterface(This,riid,result) (This)->lpVtbl->GetInterface(This,riid,result)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIInterfaceRequestor_QueryInterface(nsIInterfaceRequestor* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIInterfaceRequestor_AddRef(nsIInterfaceRequestor* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIInterfaceRequestor_Release(nsIInterfaceRequestor* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIInterfaceRequestor methods ***/
static FORCEINLINE nsresult nsIInterfaceRequestor_GetInterface(nsIInterfaceRequestor* This,const nsIID *riid,void **result) {
    return This->lpVtbl->GetInterface(This,riid,result);
}
#endif
#endif

#endif


#endif  /* __nsIInterfaceRequestor_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIRunnable interface
 */
#ifndef __nsIRunnable_INTERFACE_DEFINED__
#define __nsIRunnable_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIRunnable, 0x4a2abaf0, 0x6886, 0x11d3, 0x93,0x82, 0x00,0x10,0x4b,0xa0,0xfd,0x40);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("4a2abaf0-6886-11d3-9382-00104ba0fd40")
nsIRunnable : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE Run(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIRunnable, 0x4a2abaf0, 0x6886, 0x11d3, 0x93,0x82, 0x00,0x10,0x4b,0xa0,0xfd,0x40)
#endif
#else
typedef struct nsIRunnableVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIRunnable *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIRunnable *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIRunnable *This);

    /*** nsIRunnable methods ***/
    nsresult (STDMETHODCALLTYPE *Run)(
        nsIRunnable *This);

    END_INTERFACE
} nsIRunnableVtbl;

interface nsIRunnable {
    CONST_VTBL nsIRunnableVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIRunnable_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIRunnable_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIRunnable_Release(This) (This)->lpVtbl->Release(This)
/*** nsIRunnable methods ***/
#define nsIRunnable_Run(This) (This)->lpVtbl->Run(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIRunnable_QueryInterface(nsIRunnable* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIRunnable_AddRef(nsIRunnable* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIRunnable_Release(nsIRunnable* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIRunnable methods ***/
static FORCEINLINE nsresult nsIRunnable_Run(nsIRunnable* This) {
    return This->lpVtbl->Run(This);
}
#endif
#endif

#endif


#endif  /* __nsIRunnable_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsISimpleEnumerator interface
 */
#ifndef __nsISimpleEnumerator_INTERFACE_DEFINED__
#define __nsISimpleEnumerator_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsISimpleEnumerator, 0xd1899240, 0xf9d2, 0x11d2, 0xbd,0xd6, 0x00,0x00,0x64,0x65,0x73,0x74);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d1899240-f9d2-11d2-bdd6-000064657374")
nsISimpleEnumerator : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE HasMoreElements(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNext(
        nsISupports **_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsISimpleEnumerator, 0xd1899240, 0xf9d2, 0x11d2, 0xbd,0xd6, 0x00,0x00,0x64,0x65,0x73,0x74)
#endif
#else
typedef struct nsISimpleEnumeratorVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsISimpleEnumerator *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsISimpleEnumerator *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsISimpleEnumerator *This);

    /*** nsISimpleEnumerator methods ***/
    nsresult (STDMETHODCALLTYPE *HasMoreElements)(
        nsISimpleEnumerator *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetNext)(
        nsISimpleEnumerator *This,
        nsISupports **_retval);

    END_INTERFACE
} nsISimpleEnumeratorVtbl;

interface nsISimpleEnumerator {
    CONST_VTBL nsISimpleEnumeratorVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsISimpleEnumerator_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsISimpleEnumerator_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsISimpleEnumerator_Release(This) (This)->lpVtbl->Release(This)
/*** nsISimpleEnumerator methods ***/
#define nsISimpleEnumerator_HasMoreElements(This,_retval) (This)->lpVtbl->HasMoreElements(This,_retval)
#define nsISimpleEnumerator_GetNext(This,_retval) (This)->lpVtbl->GetNext(This,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsISimpleEnumerator_QueryInterface(nsISimpleEnumerator* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsISimpleEnumerator_AddRef(nsISimpleEnumerator* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsISimpleEnumerator_Release(nsISimpleEnumerator* This) {
    return This->lpVtbl->Release(This);
}
/*** nsISimpleEnumerator methods ***/
static FORCEINLINE nsresult nsISimpleEnumerator_HasMoreElements(nsISimpleEnumerator* This,cpp_bool *_retval) {
    return This->lpVtbl->HasMoreElements(This,_retval);
}
static FORCEINLINE nsresult nsISimpleEnumerator_GetNext(nsISimpleEnumerator* This,nsISupports **_retval) {
    return This->lpVtbl->GetNext(This,_retval);
}
#endif
#endif

#endif


#endif  /* __nsISimpleEnumerator_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIVariant interface
 */
#ifndef __nsIVariant_INTERFACE_DEFINED__
#define __nsIVariant_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIVariant, 0x81e4c2de, 0xacac, 0x4ad6, 0x90,0x1a, 0xb5,0xfb,0x1b,0x85,0x1a,0x0d);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("81e4c2de-acac-4ad6-901a-b5fb1b851a0d")
nsIVariant : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetDataType(
        UINT16 *aDataType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsInt8(
        UINT8 *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsInt16(
        short *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsInt32(
        LONG *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsInt64(
        INT64 *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsUint8(
        UINT8 *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsUint16(
        UINT16 *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsUint32(
        UINT32 *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsUint64(
        UINT64 *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsFloat(
        float *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsDouble(
        double *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsBool(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsChar(
        char *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsWChar(
        PRUnichar *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsID(
        nsID *retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsAString(
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsDOMString(
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsACString(
        nsACString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsAUTF8String(
        nsACString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsString(
        char **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsWString(
        PRUnichar **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsISupports(
        nsISupports **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsJSVal(
        LONG *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsInterface(
        nsIID **iid,
        void **iface) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsArray(
        UINT16 *type,
        nsIID *iid,
        UINT32 *count,
        void **ptr) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsStringWithSize(
        UINT32 *size,
        char **str) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsWStringWithSize(
        UINT32 *size,
        PRUnichar **str) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIVariant, 0x81e4c2de, 0xacac, 0x4ad6, 0x90,0x1a, 0xb5,0xfb,0x1b,0x85,0x1a,0x0d)
#endif
#else
typedef struct nsIVariantVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIVariant *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIVariant *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIVariant *This);

    /*** nsIVariant methods ***/
    nsresult (STDMETHODCALLTYPE *GetDataType)(
        nsIVariant *This,
        UINT16 *aDataType);

    nsresult (STDMETHODCALLTYPE *GetAsInt8)(
        nsIVariant *This,
        UINT8 *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsInt16)(
        nsIVariant *This,
        short *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsInt32)(
        nsIVariant *This,
        LONG *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsInt64)(
        nsIVariant *This,
        INT64 *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsUint8)(
        nsIVariant *This,
        UINT8 *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsUint16)(
        nsIVariant *This,
        UINT16 *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsUint32)(
        nsIVariant *This,
        UINT32 *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsUint64)(
        nsIVariant *This,
        UINT64 *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsFloat)(
        nsIVariant *This,
        float *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsDouble)(
        nsIVariant *This,
        double *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsBool)(
        nsIVariant *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsChar)(
        nsIVariant *This,
        char *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsWChar)(
        nsIVariant *This,
        PRUnichar *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsID)(
        nsIVariant *This,
        nsID *retval);

    nsresult (STDMETHODCALLTYPE *GetAsAString)(
        nsIVariant *This,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsDOMString)(
        nsIVariant *This,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsACString)(
        nsIVariant *This,
        nsACString *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsAUTF8String)(
        nsIVariant *This,
        nsACString *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsString)(
        nsIVariant *This,
        char **_retval);

    nsresult (STDMETHODCALLTYPE *GetAsWString)(
        nsIVariant *This,
        PRUnichar **_retval);

    nsresult (STDMETHODCALLTYPE *GetAsISupports)(
        nsIVariant *This,
        nsISupports **_retval);

    nsresult (STDMETHODCALLTYPE *GetAsJSVal)(
        nsIVariant *This,
        LONG *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsInterface)(
        nsIVariant *This,
        nsIID **iid,
        void **iface);

    nsresult (STDMETHODCALLTYPE *GetAsArray)(
        nsIVariant *This,
        UINT16 *type,
        nsIID *iid,
        UINT32 *count,
        void **ptr);

    nsresult (STDMETHODCALLTYPE *GetAsStringWithSize)(
        nsIVariant *This,
        UINT32 *size,
        char **str);

    nsresult (STDMETHODCALLTYPE *GetAsWStringWithSize)(
        nsIVariant *This,
        UINT32 *size,
        PRUnichar **str);

    END_INTERFACE
} nsIVariantVtbl;

interface nsIVariant {
    CONST_VTBL nsIVariantVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIVariant_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIVariant_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIVariant_Release(This) (This)->lpVtbl->Release(This)
/*** nsIVariant methods ***/
#define nsIVariant_GetDataType(This,aDataType) (This)->lpVtbl->GetDataType(This,aDataType)
#define nsIVariant_GetAsInt8(This,_retval) (This)->lpVtbl->GetAsInt8(This,_retval)
#define nsIVariant_GetAsInt16(This,_retval) (This)->lpVtbl->GetAsInt16(This,_retval)
#define nsIVariant_GetAsInt32(This,_retval) (This)->lpVtbl->GetAsInt32(This,_retval)
#define nsIVariant_GetAsInt64(This,_retval) (This)->lpVtbl->GetAsInt64(This,_retval)
#define nsIVariant_GetAsUint8(This,_retval) (This)->lpVtbl->GetAsUint8(This,_retval)
#define nsIVariant_GetAsUint16(This,_retval) (This)->lpVtbl->GetAsUint16(This,_retval)
#define nsIVariant_GetAsUint32(This,_retval) (This)->lpVtbl->GetAsUint32(This,_retval)
#define nsIVariant_GetAsUint64(This,_retval) (This)->lpVtbl->GetAsUint64(This,_retval)
#define nsIVariant_GetAsFloat(This,_retval) (This)->lpVtbl->GetAsFloat(This,_retval)
#define nsIVariant_GetAsDouble(This,_retval) (This)->lpVtbl->GetAsDouble(This,_retval)
#define nsIVariant_GetAsBool(This,_retval) (This)->lpVtbl->GetAsBool(This,_retval)
#define nsIVariant_GetAsChar(This,_retval) (This)->lpVtbl->GetAsChar(This,_retval)
#define nsIVariant_GetAsWChar(This,_retval) (This)->lpVtbl->GetAsWChar(This,_retval)
#define nsIVariant_GetAsID(This,retval) (This)->lpVtbl->GetAsID(This,retval)
#define nsIVariant_GetAsAString(This,_retval) (This)->lpVtbl->GetAsAString(This,_retval)
#define nsIVariant_GetAsDOMString(This,_retval) (This)->lpVtbl->GetAsDOMString(This,_retval)
#define nsIVariant_GetAsACString(This,_retval) (This)->lpVtbl->GetAsACString(This,_retval)
#define nsIVariant_GetAsAUTF8String(This,_retval) (This)->lpVtbl->GetAsAUTF8String(This,_retval)
#define nsIVariant_GetAsString(This,_retval) (This)->lpVtbl->GetAsString(This,_retval)
#define nsIVariant_GetAsWString(This,_retval) (This)->lpVtbl->GetAsWString(This,_retval)
#define nsIVariant_GetAsISupports(This,_retval) (This)->lpVtbl->GetAsISupports(This,_retval)
#define nsIVariant_GetAsJSVal(This,_retval) (This)->lpVtbl->GetAsJSVal(This,_retval)
#define nsIVariant_GetAsInterface(This,iid,iface) (This)->lpVtbl->GetAsInterface(This,iid,iface)
#define nsIVariant_GetAsArray(This,type,iid,count,ptr) (This)->lpVtbl->GetAsArray(This,type,iid,count,ptr)
#define nsIVariant_GetAsStringWithSize(This,size,str) (This)->lpVtbl->GetAsStringWithSize(This,size,str)
#define nsIVariant_GetAsWStringWithSize(This,size,str) (This)->lpVtbl->GetAsWStringWithSize(This,size,str)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIVariant_QueryInterface(nsIVariant* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIVariant_AddRef(nsIVariant* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIVariant_Release(nsIVariant* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIVariant methods ***/
static FORCEINLINE nsresult nsIVariant_GetDataType(nsIVariant* This,UINT16 *aDataType) {
    return This->lpVtbl->GetDataType(This,aDataType);
}
static FORCEINLINE nsresult nsIVariant_GetAsInt8(nsIVariant* This,UINT8 *_retval) {
    return This->lpVtbl->GetAsInt8(This,_retval);
}
static FORCEINLINE nsresult nsIVariant_GetAsInt16(nsIVariant* This,short *_retval) {
    return This->lpVtbl->GetAsInt16(This,_retval);
}
static FORCEINLINE nsresult nsIVariant_GetAsInt32(nsIVariant* This,LONG *_retval) {
    return This->lpVtbl->GetAsInt32(This,_retval);
}
static FORCEINLINE nsresult nsIVariant_GetAsInt64(nsIVariant* This,INT64 *_retval) {
    return This->lpVtbl->GetAsInt64(This,_retval);
}
static FORCEINLINE nsresult nsIVariant_GetAsUint8(nsIVariant* This,UINT8 *_retval) {
    return This->lpVtbl->GetAsUint8(This,_retval);
}
static FORCEINLINE nsresult nsIVariant_GetAsUint16(nsIVariant* This,UINT16 *_retval) {
    return This->lpVtbl->GetAsUint16(This,_retval);
}
static FORCEINLINE nsresult nsIVariant_GetAsUint32(nsIVariant* This,UINT32 *_retval) {
    return This->lpVtbl->GetAsUint32(This,_retval);
}
static FORCEINLINE nsresult nsIVariant_GetAsUint64(nsIVariant* This,UINT64 *_retval) {
    return This->lpVtbl->GetAsUint64(This,_retval);
}
static FORCEINLINE nsresult nsIVariant_GetAsFloat(nsIVariant* This,float *_retval) {
    return This->lpVtbl->GetAsFloat(This,_retval);
}
static FORCEINLINE nsresult nsIVariant_GetAsDouble(nsIVariant* This,double *_retval) {
    return This->lpVtbl->GetAsDouble(This,_retval);
}
static FORCEINLINE nsresult nsIVariant_GetAsBool(nsIVariant* This,cpp_bool *_retval) {
    return This->lpVtbl->GetAsBool(This,_retval);
}
static FORCEINLINE nsresult nsIVariant_GetAsChar(nsIVariant* This,char *_retval) {
    return This->lpVtbl->GetAsChar(This,_retval);
}
static FORCEINLINE nsresult nsIVariant_GetAsWChar(nsIVariant* This,PRUnichar *_retval) {
    return This->lpVtbl->GetAsWChar(This,_retval);
}
static FORCEINLINE nsresult nsIVariant_GetAsID(nsIVariant* This,nsID *retval) {
    return This->lpVtbl->GetAsID(This,retval);
}
static FORCEINLINE nsresult nsIVariant_GetAsAString(nsIVariant* This,nsAString *_retval) {
    return This->lpVtbl->GetAsAString(This,_retval);
}
static FORCEINLINE nsresult nsIVariant_GetAsDOMString(nsIVariant* This,nsAString *_retval) {
    return This->lpVtbl->GetAsDOMString(This,_retval);
}
static FORCEINLINE nsresult nsIVariant_GetAsACString(nsIVariant* This,nsACString *_retval) {
    return This->lpVtbl->GetAsACString(This,_retval);
}
static FORCEINLINE nsresult nsIVariant_GetAsAUTF8String(nsIVariant* This,nsACString *_retval) {
    return This->lpVtbl->GetAsAUTF8String(This,_retval);
}
static FORCEINLINE nsresult nsIVariant_GetAsString(nsIVariant* This,char **_retval) {
    return This->lpVtbl->GetAsString(This,_retval);
}
static FORCEINLINE nsresult nsIVariant_GetAsWString(nsIVariant* This,PRUnichar **_retval) {
    return This->lpVtbl->GetAsWString(This,_retval);
}
static FORCEINLINE nsresult nsIVariant_GetAsISupports(nsIVariant* This,nsISupports **_retval) {
    return This->lpVtbl->GetAsISupports(This,_retval);
}
static FORCEINLINE nsresult nsIVariant_GetAsJSVal(nsIVariant* This,LONG *_retval) {
    return This->lpVtbl->GetAsJSVal(This,_retval);
}
static FORCEINLINE nsresult nsIVariant_GetAsInterface(nsIVariant* This,nsIID **iid,void **iface) {
    return This->lpVtbl->GetAsInterface(This,iid,iface);
}
static FORCEINLINE nsresult nsIVariant_GetAsArray(nsIVariant* This,UINT16 *type,nsIID *iid,UINT32 *count,void **ptr) {
    return This->lpVtbl->GetAsArray(This,type,iid,count,ptr);
}
static FORCEINLINE nsresult nsIVariant_GetAsStringWithSize(nsIVariant* This,UINT32 *size,char **str) {
    return This->lpVtbl->GetAsStringWithSize(This,size,str);
}
static FORCEINLINE nsresult nsIVariant_GetAsWStringWithSize(nsIVariant* This,UINT32 *size,PRUnichar **str) {
    return This->lpVtbl->GetAsWStringWithSize(This,size,str);
}
#endif
#endif

#endif


#endif  /* __nsIVariant_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIWritableVariant interface
 */
#ifndef __nsIWritableVariant_INTERFACE_DEFINED__
#define __nsIWritableVariant_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIWritableVariant, 0x5586a590, 0x8c82, 0x11d5, 0x90,0xf3, 0x00,0x10,0xa4,0xe7,0x3d,0x9a);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("5586a590-8c82-11d5-90f3-0010a4e73d9a")
nsIWritableVariant : public nsIVariant
{
    virtual nsresult STDMETHODCALLTYPE GetWritable(
        cpp_bool *aWritable) = 0;

    virtual nsresult STDMETHODCALLTYPE SetWritable(
        cpp_bool aWritable) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsInt8(
        UINT8 aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsInt16(
        short aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsInt32(
        LONG aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsInt64(
        INT64 aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsUint8(
        UINT8 aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsUint16(
        UINT16 aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsUint32(
        UINT32 aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsUint64(
        UINT64 aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsFloat(
        float aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsDouble(
        double aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsBool(
        cpp_bool aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsChar(
        char aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsWChar(
        PRUnichar aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsID(
        const nsID *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsAString(
        const nsAString *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsDOMString(
        const nsAString *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsACString(
        const nsACString *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsAUTF8String(
        const nsACString *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsString(
        const char *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsWString(
        const PRUnichar *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsISupports(
        nsISupports *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsInterface(
        const nsIID *iid,
        void *iface) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsArray(
        UINT16 type,
        const nsIID *iid,
        UINT32 count,
        void *ptr) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsStringWithSize(
        UINT32 size,
        const char *str) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsWStringWithSize(
        UINT32 size,
        const PRUnichar *str) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsVoid(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsEmpty(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsEmptyArray(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFromVariant(
        nsIVariant *aValue) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIWritableVariant, 0x5586a590, 0x8c82, 0x11d5, 0x90,0xf3, 0x00,0x10,0xa4,0xe7,0x3d,0x9a)
#endif
#else
typedef struct nsIWritableVariantVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIWritableVariant *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIWritableVariant *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIWritableVariant *This);

    /*** nsIVariant methods ***/
    nsresult (STDMETHODCALLTYPE *GetDataType)(
        nsIWritableVariant *This,
        UINT16 *aDataType);

    nsresult (STDMETHODCALLTYPE *GetAsInt8)(
        nsIWritableVariant *This,
        UINT8 *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsInt16)(
        nsIWritableVariant *This,
        short *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsInt32)(
        nsIWritableVariant *This,
        LONG *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsInt64)(
        nsIWritableVariant *This,
        INT64 *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsUint8)(
        nsIWritableVariant *This,
        UINT8 *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsUint16)(
        nsIWritableVariant *This,
        UINT16 *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsUint32)(
        nsIWritableVariant *This,
        UINT32 *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsUint64)(
        nsIWritableVariant *This,
        UINT64 *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsFloat)(
        nsIWritableVariant *This,
        float *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsDouble)(
        nsIWritableVariant *This,
        double *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsBool)(
        nsIWritableVariant *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsChar)(
        nsIWritableVariant *This,
        char *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsWChar)(
        nsIWritableVariant *This,
        PRUnichar *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsID)(
        nsIWritableVariant *This,
        nsID *retval);

    nsresult (STDMETHODCALLTYPE *GetAsAString)(
        nsIWritableVariant *This,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsDOMString)(
        nsIWritableVariant *This,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsACString)(
        nsIWritableVariant *This,
        nsACString *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsAUTF8String)(
        nsIWritableVariant *This,
        nsACString *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsString)(
        nsIWritableVariant *This,
        char **_retval);

    nsresult (STDMETHODCALLTYPE *GetAsWString)(
        nsIWritableVariant *This,
        PRUnichar **_retval);

    nsresult (STDMETHODCALLTYPE *GetAsISupports)(
        nsIWritableVariant *This,
        nsISupports **_retval);

    nsresult (STDMETHODCALLTYPE *GetAsJSVal)(
        nsIWritableVariant *This,
        LONG *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsInterface)(
        nsIWritableVariant *This,
        nsIID **iid,
        void **iface);

    nsresult (STDMETHODCALLTYPE *GetAsArray)(
        nsIWritableVariant *This,
        UINT16 *type,
        nsIID *iid,
        UINT32 *count,
        void **ptr);

    nsresult (STDMETHODCALLTYPE *GetAsStringWithSize)(
        nsIWritableVariant *This,
        UINT32 *size,
        char **str);

    nsresult (STDMETHODCALLTYPE *GetAsWStringWithSize)(
        nsIWritableVariant *This,
        UINT32 *size,
        PRUnichar **str);

    /*** nsIWritableVariant methods ***/
    nsresult (STDMETHODCALLTYPE *GetWritable)(
        nsIWritableVariant *This,
        cpp_bool *aWritable);

    nsresult (STDMETHODCALLTYPE *SetWritable)(
        nsIWritableVariant *This,
        cpp_bool aWritable);

    nsresult (STDMETHODCALLTYPE *SetAsInt8)(
        nsIWritableVariant *This,
        UINT8 aValue);

    nsresult (STDMETHODCALLTYPE *SetAsInt16)(
        nsIWritableVariant *This,
        short aValue);

    nsresult (STDMETHODCALLTYPE *SetAsInt32)(
        nsIWritableVariant *This,
        LONG aValue);

    nsresult (STDMETHODCALLTYPE *SetAsInt64)(
        nsIWritableVariant *This,
        INT64 aValue);

    nsresult (STDMETHODCALLTYPE *SetAsUint8)(
        nsIWritableVariant *This,
        UINT8 aValue);

    nsresult (STDMETHODCALLTYPE *SetAsUint16)(
        nsIWritableVariant *This,
        UINT16 aValue);

    nsresult (STDMETHODCALLTYPE *SetAsUint32)(
        nsIWritableVariant *This,
        UINT32 aValue);

    nsresult (STDMETHODCALLTYPE *SetAsUint64)(
        nsIWritableVariant *This,
        UINT64 aValue);

    nsresult (STDMETHODCALLTYPE *SetAsFloat)(
        nsIWritableVariant *This,
        float aValue);

    nsresult (STDMETHODCALLTYPE *SetAsDouble)(
        nsIWritableVariant *This,
        double aValue);

    nsresult (STDMETHODCALLTYPE *SetAsBool)(
        nsIWritableVariant *This,
        cpp_bool aValue);

    nsresult (STDMETHODCALLTYPE *SetAsChar)(
        nsIWritableVariant *This,
        char aValue);

    nsresult (STDMETHODCALLTYPE *SetAsWChar)(
        nsIWritableVariant *This,
        PRUnichar aValue);

    nsresult (STDMETHODCALLTYPE *SetAsID)(
        nsIWritableVariant *This,
        const nsID *aValue);

    nsresult (STDMETHODCALLTYPE *SetAsAString)(
        nsIWritableVariant *This,
        const nsAString *aValue);

    nsresult (STDMETHODCALLTYPE *SetAsDOMString)(
        nsIWritableVariant *This,
        const nsAString *aValue);

    nsresult (STDMETHODCALLTYPE *SetAsACString)(
        nsIWritableVariant *This,
        const nsACString *aValue);

    nsresult (STDMETHODCALLTYPE *SetAsAUTF8String)(
        nsIWritableVariant *This,
        const nsACString *aValue);

    nsresult (STDMETHODCALLTYPE *SetAsString)(
        nsIWritableVariant *This,
        const char *aValue);

    nsresult (STDMETHODCALLTYPE *SetAsWString)(
        nsIWritableVariant *This,
        const PRUnichar *aValue);

    nsresult (STDMETHODCALLTYPE *SetAsISupports)(
        nsIWritableVariant *This,
        nsISupports *aValue);

    nsresult (STDMETHODCALLTYPE *SetAsInterface)(
        nsIWritableVariant *This,
        const nsIID *iid,
        void *iface);

    nsresult (STDMETHODCALLTYPE *SetAsArray)(
        nsIWritableVariant *This,
        UINT16 type,
        const nsIID *iid,
        UINT32 count,
        void *ptr);

    nsresult (STDMETHODCALLTYPE *SetAsStringWithSize)(
        nsIWritableVariant *This,
        UINT32 size,
        const char *str);

    nsresult (STDMETHODCALLTYPE *SetAsWStringWithSize)(
        nsIWritableVariant *This,
        UINT32 size,
        const PRUnichar *str);

    nsresult (STDMETHODCALLTYPE *SetAsVoid)(
        nsIWritableVariant *This);

    nsresult (STDMETHODCALLTYPE *SetAsEmpty)(
        nsIWritableVariant *This);

    nsresult (STDMETHODCALLTYPE *SetAsEmptyArray)(
        nsIWritableVariant *This);

    nsresult (STDMETHODCALLTYPE *SetFromVariant)(
        nsIWritableVariant *This,
        nsIVariant *aValue);

    END_INTERFACE
} nsIWritableVariantVtbl;

interface nsIWritableVariant {
    CONST_VTBL nsIWritableVariantVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIWritableVariant_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIWritableVariant_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIWritableVariant_Release(This) (This)->lpVtbl->Release(This)
/*** nsIVariant methods ***/
#define nsIWritableVariant_GetDataType(This,aDataType) (This)->lpVtbl->GetDataType(This,aDataType)
#define nsIWritableVariant_GetAsInt8(This,_retval) (This)->lpVtbl->GetAsInt8(This,_retval)
#define nsIWritableVariant_GetAsInt16(This,_retval) (This)->lpVtbl->GetAsInt16(This,_retval)
#define nsIWritableVariant_GetAsInt32(This,_retval) (This)->lpVtbl->GetAsInt32(This,_retval)
#define nsIWritableVariant_GetAsInt64(This,_retval) (This)->lpVtbl->GetAsInt64(This,_retval)
#define nsIWritableVariant_GetAsUint8(This,_retval) (This)->lpVtbl->GetAsUint8(This,_retval)
#define nsIWritableVariant_GetAsUint16(This,_retval) (This)->lpVtbl->GetAsUint16(This,_retval)
#define nsIWritableVariant_GetAsUint32(This,_retval) (This)->lpVtbl->GetAsUint32(This,_retval)
#define nsIWritableVariant_GetAsUint64(This,_retval) (This)->lpVtbl->GetAsUint64(This,_retval)
#define nsIWritableVariant_GetAsFloat(This,_retval) (This)->lpVtbl->GetAsFloat(This,_retval)
#define nsIWritableVariant_GetAsDouble(This,_retval) (This)->lpVtbl->GetAsDouble(This,_retval)
#define nsIWritableVariant_GetAsBool(This,_retval) (This)->lpVtbl->GetAsBool(This,_retval)
#define nsIWritableVariant_GetAsChar(This,_retval) (This)->lpVtbl->GetAsChar(This,_retval)
#define nsIWritableVariant_GetAsWChar(This,_retval) (This)->lpVtbl->GetAsWChar(This,_retval)
#define nsIWritableVariant_GetAsID(This,retval) (This)->lpVtbl->GetAsID(This,retval)
#define nsIWritableVariant_GetAsAString(This,_retval) (This)->lpVtbl->GetAsAString(This,_retval)
#define nsIWritableVariant_GetAsDOMString(This,_retval) (This)->lpVtbl->GetAsDOMString(This,_retval)
#define nsIWritableVariant_GetAsACString(This,_retval) (This)->lpVtbl->GetAsACString(This,_retval)
#define nsIWritableVariant_GetAsAUTF8String(This,_retval) (This)->lpVtbl->GetAsAUTF8String(This,_retval)
#define nsIWritableVariant_GetAsString(This,_retval) (This)->lpVtbl->GetAsString(This,_retval)
#define nsIWritableVariant_GetAsWString(This,_retval) (This)->lpVtbl->GetAsWString(This,_retval)
#define nsIWritableVariant_GetAsISupports(This,_retval) (This)->lpVtbl->GetAsISupports(This,_retval)
#define nsIWritableVariant_GetAsJSVal(This,_retval) (This)->lpVtbl->GetAsJSVal(This,_retval)
#define nsIWritableVariant_GetAsInterface(This,iid,iface) (This)->lpVtbl->GetAsInterface(This,iid,iface)
#define nsIWritableVariant_GetAsArray(This,type,iid,count,ptr) (This)->lpVtbl->GetAsArray(This,type,iid,count,ptr)
#define nsIWritableVariant_GetAsStringWithSize(This,size,str) (This)->lpVtbl->GetAsStringWithSize(This,size,str)
#define nsIWritableVariant_GetAsWStringWithSize(This,size,str) (This)->lpVtbl->GetAsWStringWithSize(This,size,str)
/*** nsIWritableVariant methods ***/
#define nsIWritableVariant_GetWritable(This,aWritable) (This)->lpVtbl->GetWritable(This,aWritable)
#define nsIWritableVariant_SetWritable(This,aWritable) (This)->lpVtbl->SetWritable(This,aWritable)
#define nsIWritableVariant_SetAsInt8(This,aValue) (This)->lpVtbl->SetAsInt8(This,aValue)
#define nsIWritableVariant_SetAsInt16(This,aValue) (This)->lpVtbl->SetAsInt16(This,aValue)
#define nsIWritableVariant_SetAsInt32(This,aValue) (This)->lpVtbl->SetAsInt32(This,aValue)
#define nsIWritableVariant_SetAsInt64(This,aValue) (This)->lpVtbl->SetAsInt64(This,aValue)
#define nsIWritableVariant_SetAsUint8(This,aValue) (This)->lpVtbl->SetAsUint8(This,aValue)
#define nsIWritableVariant_SetAsUint16(This,aValue) (This)->lpVtbl->SetAsUint16(This,aValue)
#define nsIWritableVariant_SetAsUint32(This,aValue) (This)->lpVtbl->SetAsUint32(This,aValue)
#define nsIWritableVariant_SetAsUint64(This,aValue) (This)->lpVtbl->SetAsUint64(This,aValue)
#define nsIWritableVariant_SetAsFloat(This,aValue) (This)->lpVtbl->SetAsFloat(This,aValue)
#define nsIWritableVariant_SetAsDouble(This,aValue) (This)->lpVtbl->SetAsDouble(This,aValue)
#define nsIWritableVariant_SetAsBool(This,aValue) (This)->lpVtbl->SetAsBool(This,aValue)
#define nsIWritableVariant_SetAsChar(This,aValue) (This)->lpVtbl->SetAsChar(This,aValue)
#define nsIWritableVariant_SetAsWChar(This,aValue) (This)->lpVtbl->SetAsWChar(This,aValue)
#define nsIWritableVariant_SetAsID(This,aValue) (This)->lpVtbl->SetAsID(This,aValue)
#define nsIWritableVariant_SetAsAString(This,aValue) (This)->lpVtbl->SetAsAString(This,aValue)
#define nsIWritableVariant_SetAsDOMString(This,aValue) (This)->lpVtbl->SetAsDOMString(This,aValue)
#define nsIWritableVariant_SetAsACString(This,aValue) (This)->lpVtbl->SetAsACString(This,aValue)
#define nsIWritableVariant_SetAsAUTF8String(This,aValue) (This)->lpVtbl->SetAsAUTF8String(This,aValue)
#define nsIWritableVariant_SetAsString(This,aValue) (This)->lpVtbl->SetAsString(This,aValue)
#define nsIWritableVariant_SetAsWString(This,aValue) (This)->lpVtbl->SetAsWString(This,aValue)
#define nsIWritableVariant_SetAsISupports(This,aValue) (This)->lpVtbl->SetAsISupports(This,aValue)
#define nsIWritableVariant_SetAsInterface(This,iid,iface) (This)->lpVtbl->SetAsInterface(This,iid,iface)
#define nsIWritableVariant_SetAsArray(This,type,iid,count,ptr) (This)->lpVtbl->SetAsArray(This,type,iid,count,ptr)
#define nsIWritableVariant_SetAsStringWithSize(This,size,str) (This)->lpVtbl->SetAsStringWithSize(This,size,str)
#define nsIWritableVariant_SetAsWStringWithSize(This,size,str) (This)->lpVtbl->SetAsWStringWithSize(This,size,str)
#define nsIWritableVariant_SetAsVoid(This) (This)->lpVtbl->SetAsVoid(This)
#define nsIWritableVariant_SetAsEmpty(This) (This)->lpVtbl->SetAsEmpty(This)
#define nsIWritableVariant_SetAsEmptyArray(This) (This)->lpVtbl->SetAsEmptyArray(This)
#define nsIWritableVariant_SetFromVariant(This,aValue) (This)->lpVtbl->SetFromVariant(This,aValue)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIWritableVariant_QueryInterface(nsIWritableVariant* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIWritableVariant_AddRef(nsIWritableVariant* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIWritableVariant_Release(nsIWritableVariant* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIVariant methods ***/
static FORCEINLINE nsresult nsIWritableVariant_GetDataType(nsIWritableVariant* This,UINT16 *aDataType) {
    return This->lpVtbl->GetDataType(This,aDataType);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsInt8(nsIWritableVariant* This,UINT8 *_retval) {
    return This->lpVtbl->GetAsInt8(This,_retval);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsInt16(nsIWritableVariant* This,short *_retval) {
    return This->lpVtbl->GetAsInt16(This,_retval);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsInt32(nsIWritableVariant* This,LONG *_retval) {
    return This->lpVtbl->GetAsInt32(This,_retval);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsInt64(nsIWritableVariant* This,INT64 *_retval) {
    return This->lpVtbl->GetAsInt64(This,_retval);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsUint8(nsIWritableVariant* This,UINT8 *_retval) {
    return This->lpVtbl->GetAsUint8(This,_retval);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsUint16(nsIWritableVariant* This,UINT16 *_retval) {
    return This->lpVtbl->GetAsUint16(This,_retval);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsUint32(nsIWritableVariant* This,UINT32 *_retval) {
    return This->lpVtbl->GetAsUint32(This,_retval);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsUint64(nsIWritableVariant* This,UINT64 *_retval) {
    return This->lpVtbl->GetAsUint64(This,_retval);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsFloat(nsIWritableVariant* This,float *_retval) {
    return This->lpVtbl->GetAsFloat(This,_retval);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsDouble(nsIWritableVariant* This,double *_retval) {
    return This->lpVtbl->GetAsDouble(This,_retval);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsBool(nsIWritableVariant* This,cpp_bool *_retval) {
    return This->lpVtbl->GetAsBool(This,_retval);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsChar(nsIWritableVariant* This,char *_retval) {
    return This->lpVtbl->GetAsChar(This,_retval);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsWChar(nsIWritableVariant* This,PRUnichar *_retval) {
    return This->lpVtbl->GetAsWChar(This,_retval);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsID(nsIWritableVariant* This,nsID *retval) {
    return This->lpVtbl->GetAsID(This,retval);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsAString(nsIWritableVariant* This,nsAString *_retval) {
    return This->lpVtbl->GetAsAString(This,_retval);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsDOMString(nsIWritableVariant* This,nsAString *_retval) {
    return This->lpVtbl->GetAsDOMString(This,_retval);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsACString(nsIWritableVariant* This,nsACString *_retval) {
    return This->lpVtbl->GetAsACString(This,_retval);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsAUTF8String(nsIWritableVariant* This,nsACString *_retval) {
    return This->lpVtbl->GetAsAUTF8String(This,_retval);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsString(nsIWritableVariant* This,char **_retval) {
    return This->lpVtbl->GetAsString(This,_retval);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsWString(nsIWritableVariant* This,PRUnichar **_retval) {
    return This->lpVtbl->GetAsWString(This,_retval);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsISupports(nsIWritableVariant* This,nsISupports **_retval) {
    return This->lpVtbl->GetAsISupports(This,_retval);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsJSVal(nsIWritableVariant* This,LONG *_retval) {
    return This->lpVtbl->GetAsJSVal(This,_retval);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsInterface(nsIWritableVariant* This,nsIID **iid,void **iface) {
    return This->lpVtbl->GetAsInterface(This,iid,iface);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsArray(nsIWritableVariant* This,UINT16 *type,nsIID *iid,UINT32 *count,void **ptr) {
    return This->lpVtbl->GetAsArray(This,type,iid,count,ptr);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsStringWithSize(nsIWritableVariant* This,UINT32 *size,char **str) {
    return This->lpVtbl->GetAsStringWithSize(This,size,str);
}
static FORCEINLINE nsresult nsIWritableVariant_GetAsWStringWithSize(nsIWritableVariant* This,UINT32 *size,PRUnichar **str) {
    return This->lpVtbl->GetAsWStringWithSize(This,size,str);
}
/*** nsIWritableVariant methods ***/
static FORCEINLINE nsresult nsIWritableVariant_GetWritable(nsIWritableVariant* This,cpp_bool *aWritable) {
    return This->lpVtbl->GetWritable(This,aWritable);
}
static FORCEINLINE nsresult nsIWritableVariant_SetWritable(nsIWritableVariant* This,cpp_bool aWritable) {
    return This->lpVtbl->SetWritable(This,aWritable);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsInt8(nsIWritableVariant* This,UINT8 aValue) {
    return This->lpVtbl->SetAsInt8(This,aValue);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsInt16(nsIWritableVariant* This,short aValue) {
    return This->lpVtbl->SetAsInt16(This,aValue);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsInt32(nsIWritableVariant* This,LONG aValue) {
    return This->lpVtbl->SetAsInt32(This,aValue);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsInt64(nsIWritableVariant* This,INT64 aValue) {
    return This->lpVtbl->SetAsInt64(This,aValue);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsUint8(nsIWritableVariant* This,UINT8 aValue) {
    return This->lpVtbl->SetAsUint8(This,aValue);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsUint16(nsIWritableVariant* This,UINT16 aValue) {
    return This->lpVtbl->SetAsUint16(This,aValue);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsUint32(nsIWritableVariant* This,UINT32 aValue) {
    return This->lpVtbl->SetAsUint32(This,aValue);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsUint64(nsIWritableVariant* This,UINT64 aValue) {
    return This->lpVtbl->SetAsUint64(This,aValue);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsFloat(nsIWritableVariant* This,float aValue) {
    return This->lpVtbl->SetAsFloat(This,aValue);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsDouble(nsIWritableVariant* This,double aValue) {
    return This->lpVtbl->SetAsDouble(This,aValue);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsBool(nsIWritableVariant* This,cpp_bool aValue) {
    return This->lpVtbl->SetAsBool(This,aValue);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsChar(nsIWritableVariant* This,char aValue) {
    return This->lpVtbl->SetAsChar(This,aValue);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsWChar(nsIWritableVariant* This,PRUnichar aValue) {
    return This->lpVtbl->SetAsWChar(This,aValue);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsID(nsIWritableVariant* This,const nsID *aValue) {
    return This->lpVtbl->SetAsID(This,aValue);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsAString(nsIWritableVariant* This,const nsAString *aValue) {
    return This->lpVtbl->SetAsAString(This,aValue);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsDOMString(nsIWritableVariant* This,const nsAString *aValue) {
    return This->lpVtbl->SetAsDOMString(This,aValue);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsACString(nsIWritableVariant* This,const nsACString *aValue) {
    return This->lpVtbl->SetAsACString(This,aValue);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsAUTF8String(nsIWritableVariant* This,const nsACString *aValue) {
    return This->lpVtbl->SetAsAUTF8String(This,aValue);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsString(nsIWritableVariant* This,const char *aValue) {
    return This->lpVtbl->SetAsString(This,aValue);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsWString(nsIWritableVariant* This,const PRUnichar *aValue) {
    return This->lpVtbl->SetAsWString(This,aValue);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsISupports(nsIWritableVariant* This,nsISupports *aValue) {
    return This->lpVtbl->SetAsISupports(This,aValue);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsInterface(nsIWritableVariant* This,const nsIID *iid,void *iface) {
    return This->lpVtbl->SetAsInterface(This,iid,iface);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsArray(nsIWritableVariant* This,UINT16 type,const nsIID *iid,UINT32 count,void *ptr) {
    return This->lpVtbl->SetAsArray(This,type,iid,count,ptr);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsStringWithSize(nsIWritableVariant* This,UINT32 size,const char *str) {
    return This->lpVtbl->SetAsStringWithSize(This,size,str);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsWStringWithSize(nsIWritableVariant* This,UINT32 size,const PRUnichar *str) {
    return This->lpVtbl->SetAsWStringWithSize(This,size,str);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsVoid(nsIWritableVariant* This) {
    return This->lpVtbl->SetAsVoid(This);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsEmpty(nsIWritableVariant* This) {
    return This->lpVtbl->SetAsEmpty(This);
}
static FORCEINLINE nsresult nsIWritableVariant_SetAsEmptyArray(nsIWritableVariant* This) {
    return This->lpVtbl->SetAsEmptyArray(This);
}
static FORCEINLINE nsresult nsIWritableVariant_SetFromVariant(nsIWritableVariant* This,nsIVariant *aValue) {
    return This->lpVtbl->SetFromVariant(This,aValue);
}
#endif
#endif

#endif


#endif  /* __nsIWritableVariant_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIInputStream interface
 */
#ifndef __nsIInputStream_INTERFACE_DEFINED__
#define __nsIInputStream_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIInputStream, 0x53cdbc97, 0xc2d7, 0x4e30, 0xb2,0xc3, 0x45,0xb2,0xee,0x79,0xdb,0x18);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("53cdbc97-c2d7-4e30-b2c3-45b2ee79db18")
nsIInputStream : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE Close(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE Available(
        UINT64 *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Read(
        char *aBuf,
        UINT32 aCount,
        UINT32 *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE ReadSegments(
        nsresult (STDMETHODCALLTYPE *aWriter)(nsIInputStream *aInStream,void *aClosure,const char *aFromSegment,UINT32 aToOffset,UINT32 aCount,UINT32 *aWriteCount),
        void *aClosure,
        UINT32 aCount,
        UINT32 *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE IsNonBlocking(
        cpp_bool *_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIInputStream, 0x53cdbc97, 0xc2d7, 0x4e30, 0xb2,0xc3, 0x45,0xb2,0xee,0x79,0xdb,0x18)
#endif
#else
typedef struct nsIInputStreamVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIInputStream *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIInputStream *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIInputStream *This);

    /*** nsIInputStream methods ***/
    nsresult (STDMETHODCALLTYPE *Close)(
        nsIInputStream *This);

    nsresult (STDMETHODCALLTYPE *Available)(
        nsIInputStream *This,
        UINT64 *_retval);

    nsresult (STDMETHODCALLTYPE *Read)(
        nsIInputStream *This,
        char *aBuf,
        UINT32 aCount,
        UINT32 *_retval);

    nsresult (STDMETHODCALLTYPE *ReadSegments)(
        nsIInputStream *This,
        nsresult (STDMETHODCALLTYPE *aWriter)(nsIInputStream *aInStream,void *aClosure,const char *aFromSegment,UINT32 aToOffset,UINT32 aCount,UINT32 *aWriteCount),
        void *aClosure,
        UINT32 aCount,
        UINT32 *_retval);

    nsresult (STDMETHODCALLTYPE *IsNonBlocking)(
        nsIInputStream *This,
        cpp_bool *_retval);

    END_INTERFACE
} nsIInputStreamVtbl;

interface nsIInputStream {
    CONST_VTBL nsIInputStreamVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIInputStream_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIInputStream_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIInputStream_Release(This) (This)->lpVtbl->Release(This)
/*** nsIInputStream methods ***/
#define nsIInputStream_Close(This) (This)->lpVtbl->Close(This)
#define nsIInputStream_Available(This,_retval) (This)->lpVtbl->Available(This,_retval)
#define nsIInputStream_Read(This,aBuf,aCount,_retval) (This)->lpVtbl->Read(This,aBuf,aCount,_retval)
#define nsIInputStream_ReadSegments(This,aWriter,aClosure,aCount,_retval) (This)->lpVtbl->ReadSegments(This,aWriter,aClosure,aCount,_retval)
#define nsIInputStream_IsNonBlocking(This,_retval) (This)->lpVtbl->IsNonBlocking(This,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIInputStream_QueryInterface(nsIInputStream* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIInputStream_AddRef(nsIInputStream* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIInputStream_Release(nsIInputStream* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIInputStream methods ***/
static FORCEINLINE nsresult nsIInputStream_Close(nsIInputStream* This) {
    return This->lpVtbl->Close(This);
}
static FORCEINLINE nsresult nsIInputStream_Available(nsIInputStream* This,UINT64 *_retval) {
    return This->lpVtbl->Available(This,_retval);
}
static FORCEINLINE nsresult nsIInputStream_Read(nsIInputStream* This,char *aBuf,UINT32 aCount,UINT32 *_retval) {
    return This->lpVtbl->Read(This,aBuf,aCount,_retval);
}
static FORCEINLINE nsresult nsIInputStream_ReadSegments(nsIInputStream* This,nsresult (STDMETHODCALLTYPE *aWriter)(nsIInputStream *aInStream,void *aClosure,const char *aFromSegment,UINT32 aToOffset,UINT32 aCount,UINT32 *aWriteCount),void *aClosure,UINT32 aCount,UINT32 *_retval) {
    return This->lpVtbl->ReadSegments(This,aWriter,aClosure,aCount,_retval);
}
static FORCEINLINE nsresult nsIInputStream_IsNonBlocking(nsIInputStream* This,cpp_bool *_retval) {
    return This->lpVtbl->IsNonBlocking(This,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIInputStream_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsISeekableStream interface
 */
#ifndef __nsISeekableStream_INTERFACE_DEFINED__
#define __nsISeekableStream_INTERFACE_DEFINED__

enum {
    NS_SEEK_SET = 0,
    NS_SEEK_CUR = 1,
    NS_SEEK_END = 2
};
DEFINE_GUID(IID_nsISeekableStream, 0x8429d350, 0x1040, 0x4661, 0x8b,0x71, 0xf2,0xa6,0xba,0x45,0x59,0x80);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("8429d350-1040-4661-8b71-f2a6ba455980")
nsISeekableStream : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE Seek(
        LONG whence,
        INT64 offset) = 0;

    virtual nsresult STDMETHODCALLTYPE Tell(
        INT64 *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetEOF(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsISeekableStream, 0x8429d350, 0x1040, 0x4661, 0x8b,0x71, 0xf2,0xa6,0xba,0x45,0x59,0x80)
#endif
#else
typedef struct nsISeekableStreamVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsISeekableStream *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsISeekableStream *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsISeekableStream *This);

    /*** nsISeekableStream methods ***/
    nsresult (STDMETHODCALLTYPE *Seek)(
        nsISeekableStream *This,
        LONG whence,
        INT64 offset);

    nsresult (STDMETHODCALLTYPE *Tell)(
        nsISeekableStream *This,
        INT64 *_retval);

    nsresult (STDMETHODCALLTYPE *SetEOF)(
        nsISeekableStream *This);

    END_INTERFACE
} nsISeekableStreamVtbl;

interface nsISeekableStream {
    CONST_VTBL nsISeekableStreamVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsISeekableStream_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsISeekableStream_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsISeekableStream_Release(This) (This)->lpVtbl->Release(This)
/*** nsISeekableStream methods ***/
#define nsISeekableStream_Seek(This,whence,offset) (This)->lpVtbl->Seek(This,whence,offset)
#define nsISeekableStream_Tell(This,_retval) (This)->lpVtbl->Tell(This,_retval)
#define nsISeekableStream_SetEOF(This) (This)->lpVtbl->SetEOF(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsISeekableStream_QueryInterface(nsISeekableStream* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsISeekableStream_AddRef(nsISeekableStream* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsISeekableStream_Release(nsISeekableStream* This) {
    return This->lpVtbl->Release(This);
}
/*** nsISeekableStream methods ***/
static FORCEINLINE nsresult nsISeekableStream_Seek(nsISeekableStream* This,LONG whence,INT64 offset) {
    return This->lpVtbl->Seek(This,whence,offset);
}
static FORCEINLINE nsresult nsISeekableStream_Tell(nsISeekableStream* This,INT64 *_retval) {
    return This->lpVtbl->Tell(This,_retval);
}
static FORCEINLINE nsresult nsISeekableStream_SetEOF(nsISeekableStream* This) {
    return This->lpVtbl->SetEOF(This);
}
#endif
#endif

#endif


#endif  /* __nsISeekableStream_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIURI interface
 */
#ifndef __nsIURI_INTERFACE_DEFINED__
#define __nsIURI_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIURI, 0x92073a54, 0x6d78, 0x4f30, 0x91,0x3a, 0xb8,0x71,0x81,0x32,0x08,0xc6);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("92073a54-6d78-4f30-913a-b871813208c6")
nsIURI : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetSpec(
        nsACString *aSpec) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSpec(
        const nsACString *aSpec) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPrePath(
        nsACString *aPrePath) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScheme(
        nsACString *aScheme) = 0;

    virtual nsresult STDMETHODCALLTYPE SetScheme(
        const nsACString *aScheme) = 0;

    virtual nsresult STDMETHODCALLTYPE GetUserPass(
        nsACString *aUserPass) = 0;

    virtual nsresult STDMETHODCALLTYPE SetUserPass(
        const nsACString *aUserPass) = 0;

    virtual nsresult STDMETHODCALLTYPE GetUsername(
        nsACString *aUsername) = 0;

    virtual nsresult STDMETHODCALLTYPE SetUsername(
        const nsACString *aUsername) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPassword(
        nsACString *aPassword) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPassword(
        const nsACString *aPassword) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHostPort(
        nsACString *aHostPort) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHostPort(
        const nsACString *aHostPort) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHost(
        nsACString *aHost) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHost(
        const nsACString *aHost) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPort(
        LONG *aPort) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPort(
        LONG aPort) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPath(
        nsACString *aPath) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPath(
        const nsACString *aPath) = 0;

    virtual nsresult STDMETHODCALLTYPE Equals(
        nsIURI *other,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SchemeIs(
        const char *scheme,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Clone(
        nsIURI **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Resolve(
        const nsACString *relativePath,
        nsACString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsciiSpec(
        nsACString *aAsciiSpec) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsciiHostPort(
        nsACString *aAsciiHostPort) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsciiHost(
        nsACString *aAsciiHost) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOriginCharset(
        nsACString *aOriginCharset) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRef(
        nsACString *aRef) = 0;

    virtual nsresult STDMETHODCALLTYPE SetRef(
        const nsACString *aRef) = 0;

    virtual nsresult STDMETHODCALLTYPE EqualsExceptRef(
        nsIURI *other,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CloneIgnoringRef(
        nsIURI **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSpecIgnoringRef(
        nsACString *aSpecIgnoringRef) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHasRef(
        cpp_bool *aHasRef) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIURI, 0x92073a54, 0x6d78, 0x4f30, 0x91,0x3a, 0xb8,0x71,0x81,0x32,0x08,0xc6)
#endif
#else
typedef struct nsIURIVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIURI *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIURI *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIURI *This);

    /*** nsIURI methods ***/
    nsresult (STDMETHODCALLTYPE *GetSpec)(
        nsIURI *This,
        nsACString *aSpec);

    nsresult (STDMETHODCALLTYPE *SetSpec)(
        nsIURI *This,
        const nsACString *aSpec);

    nsresult (STDMETHODCALLTYPE *GetPrePath)(
        nsIURI *This,
        nsACString *aPrePath);

    nsresult (STDMETHODCALLTYPE *GetScheme)(
        nsIURI *This,
        nsACString *aScheme);

    nsresult (STDMETHODCALLTYPE *SetScheme)(
        nsIURI *This,
        const nsACString *aScheme);

    nsresult (STDMETHODCALLTYPE *GetUserPass)(
        nsIURI *This,
        nsACString *aUserPass);

    nsresult (STDMETHODCALLTYPE *SetUserPass)(
        nsIURI *This,
        const nsACString *aUserPass);

    nsresult (STDMETHODCALLTYPE *GetUsername)(
        nsIURI *This,
        nsACString *aUsername);

    nsresult (STDMETHODCALLTYPE *SetUsername)(
        nsIURI *This,
        const nsACString *aUsername);

    nsresult (STDMETHODCALLTYPE *GetPassword)(
        nsIURI *This,
        nsACString *aPassword);

    nsresult (STDMETHODCALLTYPE *SetPassword)(
        nsIURI *This,
        const nsACString *aPassword);

    nsresult (STDMETHODCALLTYPE *GetHostPort)(
        nsIURI *This,
        nsACString *aHostPort);

    nsresult (STDMETHODCALLTYPE *SetHostPort)(
        nsIURI *This,
        const nsACString *aHostPort);

    nsresult (STDMETHODCALLTYPE *GetHost)(
        nsIURI *This,
        nsACString *aHost);

    nsresult (STDMETHODCALLTYPE *SetHost)(
        nsIURI *This,
        const nsACString *aHost);

    nsresult (STDMETHODCALLTYPE *GetPort)(
        nsIURI *This,
        LONG *aPort);

    nsresult (STDMETHODCALLTYPE *SetPort)(
        nsIURI *This,
        LONG aPort);

    nsresult (STDMETHODCALLTYPE *GetPath)(
        nsIURI *This,
        nsACString *aPath);

    nsresult (STDMETHODCALLTYPE *SetPath)(
        nsIURI *This,
        const nsACString *aPath);

    nsresult (STDMETHODCALLTYPE *Equals)(
        nsIURI *This,
        nsIURI *other,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SchemeIs)(
        nsIURI *This,
        const char *scheme,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *Clone)(
        nsIURI *This,
        nsIURI **_retval);

    nsresult (STDMETHODCALLTYPE *Resolve)(
        nsIURI *This,
        const nsACString *relativePath,
        nsACString *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsciiSpec)(
        nsIURI *This,
        nsACString *aAsciiSpec);

    nsresult (STDMETHODCALLTYPE *GetAsciiHostPort)(
        nsIURI *This,
        nsACString *aAsciiHostPort);

    nsresult (STDMETHODCALLTYPE *GetAsciiHost)(
        nsIURI *This,
        nsACString *aAsciiHost);

    nsresult (STDMETHODCALLTYPE *GetOriginCharset)(
        nsIURI *This,
        nsACString *aOriginCharset);

    nsresult (STDMETHODCALLTYPE *GetRef)(
        nsIURI *This,
        nsACString *aRef);

    nsresult (STDMETHODCALLTYPE *SetRef)(
        nsIURI *This,
        const nsACString *aRef);

    nsresult (STDMETHODCALLTYPE *EqualsExceptRef)(
        nsIURI *This,
        nsIURI *other,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CloneIgnoringRef)(
        nsIURI *This,
        nsIURI **_retval);

    nsresult (STDMETHODCALLTYPE *GetSpecIgnoringRef)(
        nsIURI *This,
        nsACString *aSpecIgnoringRef);

    nsresult (STDMETHODCALLTYPE *GetHasRef)(
        nsIURI *This,
        cpp_bool *aHasRef);

    END_INTERFACE
} nsIURIVtbl;

interface nsIURI {
    CONST_VTBL nsIURIVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIURI_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIURI_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIURI_Release(This) (This)->lpVtbl->Release(This)
/*** nsIURI methods ***/
#define nsIURI_GetSpec(This,aSpec) (This)->lpVtbl->GetSpec(This,aSpec)
#define nsIURI_SetSpec(This,aSpec) (This)->lpVtbl->SetSpec(This,aSpec)
#define nsIURI_GetPrePath(This,aPrePath) (This)->lpVtbl->GetPrePath(This,aPrePath)
#define nsIURI_GetScheme(This,aScheme) (This)->lpVtbl->GetScheme(This,aScheme)
#define nsIURI_SetScheme(This,aScheme) (This)->lpVtbl->SetScheme(This,aScheme)
#define nsIURI_GetUserPass(This,aUserPass) (This)->lpVtbl->GetUserPass(This,aUserPass)
#define nsIURI_SetUserPass(This,aUserPass) (This)->lpVtbl->SetUserPass(This,aUserPass)
#define nsIURI_GetUsername(This,aUsername) (This)->lpVtbl->GetUsername(This,aUsername)
#define nsIURI_SetUsername(This,aUsername) (This)->lpVtbl->SetUsername(This,aUsername)
#define nsIURI_GetPassword(This,aPassword) (This)->lpVtbl->GetPassword(This,aPassword)
#define nsIURI_SetPassword(This,aPassword) (This)->lpVtbl->SetPassword(This,aPassword)
#define nsIURI_GetHostPort(This,aHostPort) (This)->lpVtbl->GetHostPort(This,aHostPort)
#define nsIURI_SetHostPort(This,aHostPort) (This)->lpVtbl->SetHostPort(This,aHostPort)
#define nsIURI_GetHost(This,aHost) (This)->lpVtbl->GetHost(This,aHost)
#define nsIURI_SetHost(This,aHost) (This)->lpVtbl->SetHost(This,aHost)
#define nsIURI_GetPort(This,aPort) (This)->lpVtbl->GetPort(This,aPort)
#define nsIURI_SetPort(This,aPort) (This)->lpVtbl->SetPort(This,aPort)
#define nsIURI_GetPath(This,aPath) (This)->lpVtbl->GetPath(This,aPath)
#define nsIURI_SetPath(This,aPath) (This)->lpVtbl->SetPath(This,aPath)
#define nsIURI_Equals(This,other,_retval) (This)->lpVtbl->Equals(This,other,_retval)
#define nsIURI_SchemeIs(This,scheme,_retval) (This)->lpVtbl->SchemeIs(This,scheme,_retval)
#define nsIURI_Clone(This,_retval) (This)->lpVtbl->Clone(This,_retval)
#define nsIURI_Resolve(This,relativePath,_retval) (This)->lpVtbl->Resolve(This,relativePath,_retval)
#define nsIURI_GetAsciiSpec(This,aAsciiSpec) (This)->lpVtbl->GetAsciiSpec(This,aAsciiSpec)
#define nsIURI_GetAsciiHostPort(This,aAsciiHostPort) (This)->lpVtbl->GetAsciiHostPort(This,aAsciiHostPort)
#define nsIURI_GetAsciiHost(This,aAsciiHost) (This)->lpVtbl->GetAsciiHost(This,aAsciiHost)
#define nsIURI_GetOriginCharset(This,aOriginCharset) (This)->lpVtbl->GetOriginCharset(This,aOriginCharset)
#define nsIURI_GetRef(This,aRef) (This)->lpVtbl->GetRef(This,aRef)
#define nsIURI_SetRef(This,aRef) (This)->lpVtbl->SetRef(This,aRef)
#define nsIURI_EqualsExceptRef(This,other,_retval) (This)->lpVtbl->EqualsExceptRef(This,other,_retval)
#define nsIURI_CloneIgnoringRef(This,_retval) (This)->lpVtbl->CloneIgnoringRef(This,_retval)
#define nsIURI_GetSpecIgnoringRef(This,aSpecIgnoringRef) (This)->lpVtbl->GetSpecIgnoringRef(This,aSpecIgnoringRef)
#define nsIURI_GetHasRef(This,aHasRef) (This)->lpVtbl->GetHasRef(This,aHasRef)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIURI_QueryInterface(nsIURI* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIURI_AddRef(nsIURI* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIURI_Release(nsIURI* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIURI methods ***/
static FORCEINLINE nsresult nsIURI_GetSpec(nsIURI* This,nsACString *aSpec) {
    return This->lpVtbl->GetSpec(This,aSpec);
}
static FORCEINLINE nsresult nsIURI_SetSpec(nsIURI* This,const nsACString *aSpec) {
    return This->lpVtbl->SetSpec(This,aSpec);
}
static FORCEINLINE nsresult nsIURI_GetPrePath(nsIURI* This,nsACString *aPrePath) {
    return This->lpVtbl->GetPrePath(This,aPrePath);
}
static FORCEINLINE nsresult nsIURI_GetScheme(nsIURI* This,nsACString *aScheme) {
    return This->lpVtbl->GetScheme(This,aScheme);
}
static FORCEINLINE nsresult nsIURI_SetScheme(nsIURI* This,const nsACString *aScheme) {
    return This->lpVtbl->SetScheme(This,aScheme);
}
static FORCEINLINE nsresult nsIURI_GetUserPass(nsIURI* This,nsACString *aUserPass) {
    return This->lpVtbl->GetUserPass(This,aUserPass);
}
static FORCEINLINE nsresult nsIURI_SetUserPass(nsIURI* This,const nsACString *aUserPass) {
    return This->lpVtbl->SetUserPass(This,aUserPass);
}
static FORCEINLINE nsresult nsIURI_GetUsername(nsIURI* This,nsACString *aUsername) {
    return This->lpVtbl->GetUsername(This,aUsername);
}
static FORCEINLINE nsresult nsIURI_SetUsername(nsIURI* This,const nsACString *aUsername) {
    return This->lpVtbl->SetUsername(This,aUsername);
}
static FORCEINLINE nsresult nsIURI_GetPassword(nsIURI* This,nsACString *aPassword) {
    return This->lpVtbl->GetPassword(This,aPassword);
}
static FORCEINLINE nsresult nsIURI_SetPassword(nsIURI* This,const nsACString *aPassword) {
    return This->lpVtbl->SetPassword(This,aPassword);
}
static FORCEINLINE nsresult nsIURI_GetHostPort(nsIURI* This,nsACString *aHostPort) {
    return This->lpVtbl->GetHostPort(This,aHostPort);
}
static FORCEINLINE nsresult nsIURI_SetHostPort(nsIURI* This,const nsACString *aHostPort) {
    return This->lpVtbl->SetHostPort(This,aHostPort);
}
static FORCEINLINE nsresult nsIURI_GetHost(nsIURI* This,nsACString *aHost) {
    return This->lpVtbl->GetHost(This,aHost);
}
static FORCEINLINE nsresult nsIURI_SetHost(nsIURI* This,const nsACString *aHost) {
    return This->lpVtbl->SetHost(This,aHost);
}
static FORCEINLINE nsresult nsIURI_GetPort(nsIURI* This,LONG *aPort) {
    return This->lpVtbl->GetPort(This,aPort);
}
static FORCEINLINE nsresult nsIURI_SetPort(nsIURI* This,LONG aPort) {
    return This->lpVtbl->SetPort(This,aPort);
}
static FORCEINLINE nsresult nsIURI_GetPath(nsIURI* This,nsACString *aPath) {
    return This->lpVtbl->GetPath(This,aPath);
}
static FORCEINLINE nsresult nsIURI_SetPath(nsIURI* This,const nsACString *aPath) {
    return This->lpVtbl->SetPath(This,aPath);
}
static FORCEINLINE nsresult nsIURI_Equals(nsIURI* This,nsIURI *other,cpp_bool *_retval) {
    return This->lpVtbl->Equals(This,other,_retval);
}
static FORCEINLINE nsresult nsIURI_SchemeIs(nsIURI* This,const char *scheme,cpp_bool *_retval) {
    return This->lpVtbl->SchemeIs(This,scheme,_retval);
}
static FORCEINLINE nsresult nsIURI_Clone(nsIURI* This,nsIURI **_retval) {
    return This->lpVtbl->Clone(This,_retval);
}
static FORCEINLINE nsresult nsIURI_Resolve(nsIURI* This,const nsACString *relativePath,nsACString *_retval) {
    return This->lpVtbl->Resolve(This,relativePath,_retval);
}
static FORCEINLINE nsresult nsIURI_GetAsciiSpec(nsIURI* This,nsACString *aAsciiSpec) {
    return This->lpVtbl->GetAsciiSpec(This,aAsciiSpec);
}
static FORCEINLINE nsresult nsIURI_GetAsciiHostPort(nsIURI* This,nsACString *aAsciiHostPort) {
    return This->lpVtbl->GetAsciiHostPort(This,aAsciiHostPort);
}
static FORCEINLINE nsresult nsIURI_GetAsciiHost(nsIURI* This,nsACString *aAsciiHost) {
    return This->lpVtbl->GetAsciiHost(This,aAsciiHost);
}
static FORCEINLINE nsresult nsIURI_GetOriginCharset(nsIURI* This,nsACString *aOriginCharset) {
    return This->lpVtbl->GetOriginCharset(This,aOriginCharset);
}
static FORCEINLINE nsresult nsIURI_GetRef(nsIURI* This,nsACString *aRef) {
    return This->lpVtbl->GetRef(This,aRef);
}
static FORCEINLINE nsresult nsIURI_SetRef(nsIURI* This,const nsACString *aRef) {
    return This->lpVtbl->SetRef(This,aRef);
}
static FORCEINLINE nsresult nsIURI_EqualsExceptRef(nsIURI* This,nsIURI *other,cpp_bool *_retval) {
    return This->lpVtbl->EqualsExceptRef(This,other,_retval);
}
static FORCEINLINE nsresult nsIURI_CloneIgnoringRef(nsIURI* This,nsIURI **_retval) {
    return This->lpVtbl->CloneIgnoringRef(This,_retval);
}
static FORCEINLINE nsresult nsIURI_GetSpecIgnoringRef(nsIURI* This,nsACString *aSpecIgnoringRef) {
    return This->lpVtbl->GetSpecIgnoringRef(This,aSpecIgnoringRef);
}
static FORCEINLINE nsresult nsIURI_GetHasRef(nsIURI* This,cpp_bool *aHasRef) {
    return This->lpVtbl->GetHasRef(This,aHasRef);
}
#endif
#endif

#endif


#endif  /* __nsIURI_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIURL interface
 */
#ifndef __nsIURL_INTERFACE_DEFINED__
#define __nsIURL_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIURL, 0x86adcd89, 0x0b70, 0x47a2, 0xb0,0xfe, 0x5b,0xb2,0xc5,0xf3,0x7e,0x31);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("86adcd89-0b70-47a2-b0fe-5bb2c5f37e31")
nsIURL : public nsIURI
{
    virtual nsresult STDMETHODCALLTYPE GetFilePath(
        nsACString *aFilePath) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFilePath(
        const nsACString *aFilePath) = 0;

    virtual nsresult STDMETHODCALLTYPE GetQuery(
        nsACString *aQuery) = 0;

    virtual nsresult STDMETHODCALLTYPE SetQuery(
        const nsACString *aQuery) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDirectory(
        nsACString *aDirectory) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDirectory(
        const nsACString *aDirectory) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFileName(
        nsACString *aFileName) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFileName(
        const nsACString *aFileName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFileBaseName(
        nsACString *aFileBaseName) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFileBaseName(
        const nsACString *aFileBaseName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFileExtension(
        nsACString *aFileExtension) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFileExtension(
        const nsACString *aFileExtension) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCommonBaseSpec(
        nsIURI *aURIToCompare,
        nsACString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRelativeSpec(
        nsIURI *aURIToCompare,
        nsACString *_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIURL, 0x86adcd89, 0x0b70, 0x47a2, 0xb0,0xfe, 0x5b,0xb2,0xc5,0xf3,0x7e,0x31)
#endif
#else
typedef struct nsIURLVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIURL *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIURL *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIURL *This);

    /*** nsIURI methods ***/
    nsresult (STDMETHODCALLTYPE *GetSpec)(
        nsIURL *This,
        nsACString *aSpec);

    nsresult (STDMETHODCALLTYPE *SetSpec)(
        nsIURL *This,
        const nsACString *aSpec);

    nsresult (STDMETHODCALLTYPE *GetPrePath)(
        nsIURL *This,
        nsACString *aPrePath);

    nsresult (STDMETHODCALLTYPE *GetScheme)(
        nsIURL *This,
        nsACString *aScheme);

    nsresult (STDMETHODCALLTYPE *SetScheme)(
        nsIURL *This,
        const nsACString *aScheme);

    nsresult (STDMETHODCALLTYPE *GetUserPass)(
        nsIURL *This,
        nsACString *aUserPass);

    nsresult (STDMETHODCALLTYPE *SetUserPass)(
        nsIURL *This,
        const nsACString *aUserPass);

    nsresult (STDMETHODCALLTYPE *GetUsername)(
        nsIURL *This,
        nsACString *aUsername);

    nsresult (STDMETHODCALLTYPE *SetUsername)(
        nsIURL *This,
        const nsACString *aUsername);

    nsresult (STDMETHODCALLTYPE *GetPassword)(
        nsIURL *This,
        nsACString *aPassword);

    nsresult (STDMETHODCALLTYPE *SetPassword)(
        nsIURL *This,
        const nsACString *aPassword);

    nsresult (STDMETHODCALLTYPE *GetHostPort)(
        nsIURL *This,
        nsACString *aHostPort);

    nsresult (STDMETHODCALLTYPE *SetHostPort)(
        nsIURL *This,
        const nsACString *aHostPort);

    nsresult (STDMETHODCALLTYPE *GetHost)(
        nsIURL *This,
        nsACString *aHost);

    nsresult (STDMETHODCALLTYPE *SetHost)(
        nsIURL *This,
        const nsACString *aHost);

    nsresult (STDMETHODCALLTYPE *GetPort)(
        nsIURL *This,
        LONG *aPort);

    nsresult (STDMETHODCALLTYPE *SetPort)(
        nsIURL *This,
        LONG aPort);

    nsresult (STDMETHODCALLTYPE *GetPath)(
        nsIURL *This,
        nsACString *aPath);

    nsresult (STDMETHODCALLTYPE *SetPath)(
        nsIURL *This,
        const nsACString *aPath);

    nsresult (STDMETHODCALLTYPE *Equals)(
        nsIURL *This,
        nsIURI *other,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SchemeIs)(
        nsIURL *This,
        const char *scheme,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *Clone)(
        nsIURL *This,
        nsIURI **_retval);

    nsresult (STDMETHODCALLTYPE *Resolve)(
        nsIURL *This,
        const nsACString *relativePath,
        nsACString *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsciiSpec)(
        nsIURL *This,
        nsACString *aAsciiSpec);

    nsresult (STDMETHODCALLTYPE *GetAsciiHostPort)(
        nsIURL *This,
        nsACString *aAsciiHostPort);

    nsresult (STDMETHODCALLTYPE *GetAsciiHost)(
        nsIURL *This,
        nsACString *aAsciiHost);

    nsresult (STDMETHODCALLTYPE *GetOriginCharset)(
        nsIURL *This,
        nsACString *aOriginCharset);

    nsresult (STDMETHODCALLTYPE *GetRef)(
        nsIURL *This,
        nsACString *aRef);

    nsresult (STDMETHODCALLTYPE *SetRef)(
        nsIURL *This,
        const nsACString *aRef);

    nsresult (STDMETHODCALLTYPE *EqualsExceptRef)(
        nsIURL *This,
        nsIURI *other,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CloneIgnoringRef)(
        nsIURL *This,
        nsIURI **_retval);

    nsresult (STDMETHODCALLTYPE *GetSpecIgnoringRef)(
        nsIURL *This,
        nsACString *aSpecIgnoringRef);

    nsresult (STDMETHODCALLTYPE *GetHasRef)(
        nsIURL *This,
        cpp_bool *aHasRef);

    /*** nsIURL methods ***/
    nsresult (STDMETHODCALLTYPE *GetFilePath)(
        nsIURL *This,
        nsACString *aFilePath);

    nsresult (STDMETHODCALLTYPE *SetFilePath)(
        nsIURL *This,
        const nsACString *aFilePath);

    nsresult (STDMETHODCALLTYPE *GetQuery)(
        nsIURL *This,
        nsACString *aQuery);

    nsresult (STDMETHODCALLTYPE *SetQuery)(
        nsIURL *This,
        const nsACString *aQuery);

    nsresult (STDMETHODCALLTYPE *GetDirectory)(
        nsIURL *This,
        nsACString *aDirectory);

    nsresult (STDMETHODCALLTYPE *SetDirectory)(
        nsIURL *This,
        const nsACString *aDirectory);

    nsresult (STDMETHODCALLTYPE *GetFileName)(
        nsIURL *This,
        nsACString *aFileName);

    nsresult (STDMETHODCALLTYPE *SetFileName)(
        nsIURL *This,
        const nsACString *aFileName);

    nsresult (STDMETHODCALLTYPE *GetFileBaseName)(
        nsIURL *This,
        nsACString *aFileBaseName);

    nsresult (STDMETHODCALLTYPE *SetFileBaseName)(
        nsIURL *This,
        const nsACString *aFileBaseName);

    nsresult (STDMETHODCALLTYPE *GetFileExtension)(
        nsIURL *This,
        nsACString *aFileExtension);

    nsresult (STDMETHODCALLTYPE *SetFileExtension)(
        nsIURL *This,
        const nsACString *aFileExtension);

    nsresult (STDMETHODCALLTYPE *GetCommonBaseSpec)(
        nsIURL *This,
        nsIURI *aURIToCompare,
        nsACString *_retval);

    nsresult (STDMETHODCALLTYPE *GetRelativeSpec)(
        nsIURL *This,
        nsIURI *aURIToCompare,
        nsACString *_retval);

    END_INTERFACE
} nsIURLVtbl;

interface nsIURL {
    CONST_VTBL nsIURLVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIURL_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIURL_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIURL_Release(This) (This)->lpVtbl->Release(This)
/*** nsIURI methods ***/
#define nsIURL_GetSpec(This,aSpec) (This)->lpVtbl->GetSpec(This,aSpec)
#define nsIURL_SetSpec(This,aSpec) (This)->lpVtbl->SetSpec(This,aSpec)
#define nsIURL_GetPrePath(This,aPrePath) (This)->lpVtbl->GetPrePath(This,aPrePath)
#define nsIURL_GetScheme(This,aScheme) (This)->lpVtbl->GetScheme(This,aScheme)
#define nsIURL_SetScheme(This,aScheme) (This)->lpVtbl->SetScheme(This,aScheme)
#define nsIURL_GetUserPass(This,aUserPass) (This)->lpVtbl->GetUserPass(This,aUserPass)
#define nsIURL_SetUserPass(This,aUserPass) (This)->lpVtbl->SetUserPass(This,aUserPass)
#define nsIURL_GetUsername(This,aUsername) (This)->lpVtbl->GetUsername(This,aUsername)
#define nsIURL_SetUsername(This,aUsername) (This)->lpVtbl->SetUsername(This,aUsername)
#define nsIURL_GetPassword(This,aPassword) (This)->lpVtbl->GetPassword(This,aPassword)
#define nsIURL_SetPassword(This,aPassword) (This)->lpVtbl->SetPassword(This,aPassword)
#define nsIURL_GetHostPort(This,aHostPort) (This)->lpVtbl->GetHostPort(This,aHostPort)
#define nsIURL_SetHostPort(This,aHostPort) (This)->lpVtbl->SetHostPort(This,aHostPort)
#define nsIURL_GetHost(This,aHost) (This)->lpVtbl->GetHost(This,aHost)
#define nsIURL_SetHost(This,aHost) (This)->lpVtbl->SetHost(This,aHost)
#define nsIURL_GetPort(This,aPort) (This)->lpVtbl->GetPort(This,aPort)
#define nsIURL_SetPort(This,aPort) (This)->lpVtbl->SetPort(This,aPort)
#define nsIURL_GetPath(This,aPath) (This)->lpVtbl->GetPath(This,aPath)
#define nsIURL_SetPath(This,aPath) (This)->lpVtbl->SetPath(This,aPath)
#define nsIURL_Equals(This,other,_retval) (This)->lpVtbl->Equals(This,other,_retval)
#define nsIURL_SchemeIs(This,scheme,_retval) (This)->lpVtbl->SchemeIs(This,scheme,_retval)
#define nsIURL_Clone(This,_retval) (This)->lpVtbl->Clone(This,_retval)
#define nsIURL_Resolve(This,relativePath,_retval) (This)->lpVtbl->Resolve(This,relativePath,_retval)
#define nsIURL_GetAsciiSpec(This,aAsciiSpec) (This)->lpVtbl->GetAsciiSpec(This,aAsciiSpec)
#define nsIURL_GetAsciiHostPort(This,aAsciiHostPort) (This)->lpVtbl->GetAsciiHostPort(This,aAsciiHostPort)
#define nsIURL_GetAsciiHost(This,aAsciiHost) (This)->lpVtbl->GetAsciiHost(This,aAsciiHost)
#define nsIURL_GetOriginCharset(This,aOriginCharset) (This)->lpVtbl->GetOriginCharset(This,aOriginCharset)
#define nsIURL_GetRef(This,aRef) (This)->lpVtbl->GetRef(This,aRef)
#define nsIURL_SetRef(This,aRef) (This)->lpVtbl->SetRef(This,aRef)
#define nsIURL_EqualsExceptRef(This,other,_retval) (This)->lpVtbl->EqualsExceptRef(This,other,_retval)
#define nsIURL_CloneIgnoringRef(This,_retval) (This)->lpVtbl->CloneIgnoringRef(This,_retval)
#define nsIURL_GetSpecIgnoringRef(This,aSpecIgnoringRef) (This)->lpVtbl->GetSpecIgnoringRef(This,aSpecIgnoringRef)
#define nsIURL_GetHasRef(This,aHasRef) (This)->lpVtbl->GetHasRef(This,aHasRef)
/*** nsIURL methods ***/
#define nsIURL_GetFilePath(This,aFilePath) (This)->lpVtbl->GetFilePath(This,aFilePath)
#define nsIURL_SetFilePath(This,aFilePath) (This)->lpVtbl->SetFilePath(This,aFilePath)
#define nsIURL_GetQuery(This,aQuery) (This)->lpVtbl->GetQuery(This,aQuery)
#define nsIURL_SetQuery(This,aQuery) (This)->lpVtbl->SetQuery(This,aQuery)
#define nsIURL_GetDirectory(This,aDirectory) (This)->lpVtbl->GetDirectory(This,aDirectory)
#define nsIURL_SetDirectory(This,aDirectory) (This)->lpVtbl->SetDirectory(This,aDirectory)
#define nsIURL_GetFileName(This,aFileName) (This)->lpVtbl->GetFileName(This,aFileName)
#define nsIURL_SetFileName(This,aFileName) (This)->lpVtbl->SetFileName(This,aFileName)
#define nsIURL_GetFileBaseName(This,aFileBaseName) (This)->lpVtbl->GetFileBaseName(This,aFileBaseName)
#define nsIURL_SetFileBaseName(This,aFileBaseName) (This)->lpVtbl->SetFileBaseName(This,aFileBaseName)
#define nsIURL_GetFileExtension(This,aFileExtension) (This)->lpVtbl->GetFileExtension(This,aFileExtension)
#define nsIURL_SetFileExtension(This,aFileExtension) (This)->lpVtbl->SetFileExtension(This,aFileExtension)
#define nsIURL_GetCommonBaseSpec(This,aURIToCompare,_retval) (This)->lpVtbl->GetCommonBaseSpec(This,aURIToCompare,_retval)
#define nsIURL_GetRelativeSpec(This,aURIToCompare,_retval) (This)->lpVtbl->GetRelativeSpec(This,aURIToCompare,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIURL_QueryInterface(nsIURL* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIURL_AddRef(nsIURL* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIURL_Release(nsIURL* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIURI methods ***/
static FORCEINLINE nsresult nsIURL_GetSpec(nsIURL* This,nsACString *aSpec) {
    return This->lpVtbl->GetSpec(This,aSpec);
}
static FORCEINLINE nsresult nsIURL_SetSpec(nsIURL* This,const nsACString *aSpec) {
    return This->lpVtbl->SetSpec(This,aSpec);
}
static FORCEINLINE nsresult nsIURL_GetPrePath(nsIURL* This,nsACString *aPrePath) {
    return This->lpVtbl->GetPrePath(This,aPrePath);
}
static FORCEINLINE nsresult nsIURL_GetScheme(nsIURL* This,nsACString *aScheme) {
    return This->lpVtbl->GetScheme(This,aScheme);
}
static FORCEINLINE nsresult nsIURL_SetScheme(nsIURL* This,const nsACString *aScheme) {
    return This->lpVtbl->SetScheme(This,aScheme);
}
static FORCEINLINE nsresult nsIURL_GetUserPass(nsIURL* This,nsACString *aUserPass) {
    return This->lpVtbl->GetUserPass(This,aUserPass);
}
static FORCEINLINE nsresult nsIURL_SetUserPass(nsIURL* This,const nsACString *aUserPass) {
    return This->lpVtbl->SetUserPass(This,aUserPass);
}
static FORCEINLINE nsresult nsIURL_GetUsername(nsIURL* This,nsACString *aUsername) {
    return This->lpVtbl->GetUsername(This,aUsername);
}
static FORCEINLINE nsresult nsIURL_SetUsername(nsIURL* This,const nsACString *aUsername) {
    return This->lpVtbl->SetUsername(This,aUsername);
}
static FORCEINLINE nsresult nsIURL_GetPassword(nsIURL* This,nsACString *aPassword) {
    return This->lpVtbl->GetPassword(This,aPassword);
}
static FORCEINLINE nsresult nsIURL_SetPassword(nsIURL* This,const nsACString *aPassword) {
    return This->lpVtbl->SetPassword(This,aPassword);
}
static FORCEINLINE nsresult nsIURL_GetHostPort(nsIURL* This,nsACString *aHostPort) {
    return This->lpVtbl->GetHostPort(This,aHostPort);
}
static FORCEINLINE nsresult nsIURL_SetHostPort(nsIURL* This,const nsACString *aHostPort) {
    return This->lpVtbl->SetHostPort(This,aHostPort);
}
static FORCEINLINE nsresult nsIURL_GetHost(nsIURL* This,nsACString *aHost) {
    return This->lpVtbl->GetHost(This,aHost);
}
static FORCEINLINE nsresult nsIURL_SetHost(nsIURL* This,const nsACString *aHost) {
    return This->lpVtbl->SetHost(This,aHost);
}
static FORCEINLINE nsresult nsIURL_GetPort(nsIURL* This,LONG *aPort) {
    return This->lpVtbl->GetPort(This,aPort);
}
static FORCEINLINE nsresult nsIURL_SetPort(nsIURL* This,LONG aPort) {
    return This->lpVtbl->SetPort(This,aPort);
}
static FORCEINLINE nsresult nsIURL_GetPath(nsIURL* This,nsACString *aPath) {
    return This->lpVtbl->GetPath(This,aPath);
}
static FORCEINLINE nsresult nsIURL_SetPath(nsIURL* This,const nsACString *aPath) {
    return This->lpVtbl->SetPath(This,aPath);
}
static FORCEINLINE nsresult nsIURL_Equals(nsIURL* This,nsIURI *other,cpp_bool *_retval) {
    return This->lpVtbl->Equals(This,other,_retval);
}
static FORCEINLINE nsresult nsIURL_SchemeIs(nsIURL* This,const char *scheme,cpp_bool *_retval) {
    return This->lpVtbl->SchemeIs(This,scheme,_retval);
}
static FORCEINLINE nsresult nsIURL_Clone(nsIURL* This,nsIURI **_retval) {
    return This->lpVtbl->Clone(This,_retval);
}
static FORCEINLINE nsresult nsIURL_Resolve(nsIURL* This,const nsACString *relativePath,nsACString *_retval) {
    return This->lpVtbl->Resolve(This,relativePath,_retval);
}
static FORCEINLINE nsresult nsIURL_GetAsciiSpec(nsIURL* This,nsACString *aAsciiSpec) {
    return This->lpVtbl->GetAsciiSpec(This,aAsciiSpec);
}
static FORCEINLINE nsresult nsIURL_GetAsciiHostPort(nsIURL* This,nsACString *aAsciiHostPort) {
    return This->lpVtbl->GetAsciiHostPort(This,aAsciiHostPort);
}
static FORCEINLINE nsresult nsIURL_GetAsciiHost(nsIURL* This,nsACString *aAsciiHost) {
    return This->lpVtbl->GetAsciiHost(This,aAsciiHost);
}
static FORCEINLINE nsresult nsIURL_GetOriginCharset(nsIURL* This,nsACString *aOriginCharset) {
    return This->lpVtbl->GetOriginCharset(This,aOriginCharset);
}
static FORCEINLINE nsresult nsIURL_GetRef(nsIURL* This,nsACString *aRef) {
    return This->lpVtbl->GetRef(This,aRef);
}
static FORCEINLINE nsresult nsIURL_SetRef(nsIURL* This,const nsACString *aRef) {
    return This->lpVtbl->SetRef(This,aRef);
}
static FORCEINLINE nsresult nsIURL_EqualsExceptRef(nsIURL* This,nsIURI *other,cpp_bool *_retval) {
    return This->lpVtbl->EqualsExceptRef(This,other,_retval);
}
static FORCEINLINE nsresult nsIURL_CloneIgnoringRef(nsIURL* This,nsIURI **_retval) {
    return This->lpVtbl->CloneIgnoringRef(This,_retval);
}
static FORCEINLINE nsresult nsIURL_GetSpecIgnoringRef(nsIURL* This,nsACString *aSpecIgnoringRef) {
    return This->lpVtbl->GetSpecIgnoringRef(This,aSpecIgnoringRef);
}
static FORCEINLINE nsresult nsIURL_GetHasRef(nsIURL* This,cpp_bool *aHasRef) {
    return This->lpVtbl->GetHasRef(This,aHasRef);
}
/*** nsIURL methods ***/
static FORCEINLINE nsresult nsIURL_GetFilePath(nsIURL* This,nsACString *aFilePath) {
    return This->lpVtbl->GetFilePath(This,aFilePath);
}
static FORCEINLINE nsresult nsIURL_SetFilePath(nsIURL* This,const nsACString *aFilePath) {
    return This->lpVtbl->SetFilePath(This,aFilePath);
}
static FORCEINLINE nsresult nsIURL_GetQuery(nsIURL* This,nsACString *aQuery) {
    return This->lpVtbl->GetQuery(This,aQuery);
}
static FORCEINLINE nsresult nsIURL_SetQuery(nsIURL* This,const nsACString *aQuery) {
    return This->lpVtbl->SetQuery(This,aQuery);
}
static FORCEINLINE nsresult nsIURL_GetDirectory(nsIURL* This,nsACString *aDirectory) {
    return This->lpVtbl->GetDirectory(This,aDirectory);
}
static FORCEINLINE nsresult nsIURL_SetDirectory(nsIURL* This,const nsACString *aDirectory) {
    return This->lpVtbl->SetDirectory(This,aDirectory);
}
static FORCEINLINE nsresult nsIURL_GetFileName(nsIURL* This,nsACString *aFileName) {
    return This->lpVtbl->GetFileName(This,aFileName);
}
static FORCEINLINE nsresult nsIURL_SetFileName(nsIURL* This,const nsACString *aFileName) {
    return This->lpVtbl->SetFileName(This,aFileName);
}
static FORCEINLINE nsresult nsIURL_GetFileBaseName(nsIURL* This,nsACString *aFileBaseName) {
    return This->lpVtbl->GetFileBaseName(This,aFileBaseName);
}
static FORCEINLINE nsresult nsIURL_SetFileBaseName(nsIURL* This,const nsACString *aFileBaseName) {
    return This->lpVtbl->SetFileBaseName(This,aFileBaseName);
}
static FORCEINLINE nsresult nsIURL_GetFileExtension(nsIURL* This,nsACString *aFileExtension) {
    return This->lpVtbl->GetFileExtension(This,aFileExtension);
}
static FORCEINLINE nsresult nsIURL_SetFileExtension(nsIURL* This,const nsACString *aFileExtension) {
    return This->lpVtbl->SetFileExtension(This,aFileExtension);
}
static FORCEINLINE nsresult nsIURL_GetCommonBaseSpec(nsIURL* This,nsIURI *aURIToCompare,nsACString *_retval) {
    return This->lpVtbl->GetCommonBaseSpec(This,aURIToCompare,_retval);
}
static FORCEINLINE nsresult nsIURL_GetRelativeSpec(nsIURL* This,nsIURI *aURIToCompare,nsACString *_retval) {
    return This->lpVtbl->GetRelativeSpec(This,aURIToCompare,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIURL_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIFileURL interface
 */
#ifndef __nsIFileURL_INTERFACE_DEFINED__
#define __nsIFileURL_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIFileURL, 0xe91ac988, 0x27c2, 0x448b, 0xb1,0xa1, 0x38,0x22,0xe1,0xef,0x19,0x87);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("e91ac988-27c2-448b-b1a1-3822e1ef1987")
nsIFileURL : public nsIURL
{
    virtual nsresult STDMETHODCALLTYPE GetFile(
        nsIFile **aFile) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFile(
        nsIFile *aFile) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIFileURL, 0xe91ac988, 0x27c2, 0x448b, 0xb1,0xa1, 0x38,0x22,0xe1,0xef,0x19,0x87)
#endif
#else
typedef struct nsIFileURLVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIFileURL *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIFileURL *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIFileURL *This);

    /*** nsIURI methods ***/
    nsresult (STDMETHODCALLTYPE *GetSpec)(
        nsIFileURL *This,
        nsACString *aSpec);

    nsresult (STDMETHODCALLTYPE *SetSpec)(
        nsIFileURL *This,
        const nsACString *aSpec);

    nsresult (STDMETHODCALLTYPE *GetPrePath)(
        nsIFileURL *This,
        nsACString *aPrePath);

    nsresult (STDMETHODCALLTYPE *GetScheme)(
        nsIFileURL *This,
        nsACString *aScheme);

    nsresult (STDMETHODCALLTYPE *SetScheme)(
        nsIFileURL *This,
        const nsACString *aScheme);

    nsresult (STDMETHODCALLTYPE *GetUserPass)(
        nsIFileURL *This,
        nsACString *aUserPass);

    nsresult (STDMETHODCALLTYPE *SetUserPass)(
        nsIFileURL *This,
        const nsACString *aUserPass);

    nsresult (STDMETHODCALLTYPE *GetUsername)(
        nsIFileURL *This,
        nsACString *aUsername);

    nsresult (STDMETHODCALLTYPE *SetUsername)(
        nsIFileURL *This,
        const nsACString *aUsername);

    nsresult (STDMETHODCALLTYPE *GetPassword)(
        nsIFileURL *This,
        nsACString *aPassword);

    nsresult (STDMETHODCALLTYPE *SetPassword)(
        nsIFileURL *This,
        const nsACString *aPassword);

    nsresult (STDMETHODCALLTYPE *GetHostPort)(
        nsIFileURL *This,
        nsACString *aHostPort);

    nsresult (STDMETHODCALLTYPE *SetHostPort)(
        nsIFileURL *This,
        const nsACString *aHostPort);

    nsresult (STDMETHODCALLTYPE *GetHost)(
        nsIFileURL *This,
        nsACString *aHost);

    nsresult (STDMETHODCALLTYPE *SetHost)(
        nsIFileURL *This,
        const nsACString *aHost);

    nsresult (STDMETHODCALLTYPE *GetPort)(
        nsIFileURL *This,
        LONG *aPort);

    nsresult (STDMETHODCALLTYPE *SetPort)(
        nsIFileURL *This,
        LONG aPort);

    nsresult (STDMETHODCALLTYPE *GetPath)(
        nsIFileURL *This,
        nsACString *aPath);

    nsresult (STDMETHODCALLTYPE *SetPath)(
        nsIFileURL *This,
        const nsACString *aPath);

    nsresult (STDMETHODCALLTYPE *Equals)(
        nsIFileURL *This,
        nsIURI *other,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SchemeIs)(
        nsIFileURL *This,
        const char *scheme,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *Clone)(
        nsIFileURL *This,
        nsIURI **_retval);

    nsresult (STDMETHODCALLTYPE *Resolve)(
        nsIFileURL *This,
        const nsACString *relativePath,
        nsACString *_retval);

    nsresult (STDMETHODCALLTYPE *GetAsciiSpec)(
        nsIFileURL *This,
        nsACString *aAsciiSpec);

    nsresult (STDMETHODCALLTYPE *GetAsciiHostPort)(
        nsIFileURL *This,
        nsACString *aAsciiHostPort);

    nsresult (STDMETHODCALLTYPE *GetAsciiHost)(
        nsIFileURL *This,
        nsACString *aAsciiHost);

    nsresult (STDMETHODCALLTYPE *GetOriginCharset)(
        nsIFileURL *This,
        nsACString *aOriginCharset);

    nsresult (STDMETHODCALLTYPE *GetRef)(
        nsIFileURL *This,
        nsACString *aRef);

    nsresult (STDMETHODCALLTYPE *SetRef)(
        nsIFileURL *This,
        const nsACString *aRef);

    nsresult (STDMETHODCALLTYPE *EqualsExceptRef)(
        nsIFileURL *This,
        nsIURI *other,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CloneIgnoringRef)(
        nsIFileURL *This,
        nsIURI **_retval);

    nsresult (STDMETHODCALLTYPE *GetSpecIgnoringRef)(
        nsIFileURL *This,
        nsACString *aSpecIgnoringRef);

    nsresult (STDMETHODCALLTYPE *GetHasRef)(
        nsIFileURL *This,
        cpp_bool *aHasRef);

    /*** nsIURL methods ***/
    nsresult (STDMETHODCALLTYPE *GetFilePath)(
        nsIFileURL *This,
        nsACString *aFilePath);

    nsresult (STDMETHODCALLTYPE *SetFilePath)(
        nsIFileURL *This,
        const nsACString *aFilePath);

    nsresult (STDMETHODCALLTYPE *GetQuery)(
        nsIFileURL *This,
        nsACString *aQuery);

    nsresult (STDMETHODCALLTYPE *SetQuery)(
        nsIFileURL *This,
        const nsACString *aQuery);

    nsresult (STDMETHODCALLTYPE *GetDirectory)(
        nsIFileURL *This,
        nsACString *aDirectory);

    nsresult (STDMETHODCALLTYPE *SetDirectory)(
        nsIFileURL *This,
        const nsACString *aDirectory);

    nsresult (STDMETHODCALLTYPE *GetFileName)(
        nsIFileURL *This,
        nsACString *aFileName);

    nsresult (STDMETHODCALLTYPE *SetFileName)(
        nsIFileURL *This,
        const nsACString *aFileName);

    nsresult (STDMETHODCALLTYPE *GetFileBaseName)(
        nsIFileURL *This,
        nsACString *aFileBaseName);

    nsresult (STDMETHODCALLTYPE *SetFileBaseName)(
        nsIFileURL *This,
        const nsACString *aFileBaseName);

    nsresult (STDMETHODCALLTYPE *GetFileExtension)(
        nsIFileURL *This,
        nsACString *aFileExtension);

    nsresult (STDMETHODCALLTYPE *SetFileExtension)(
        nsIFileURL *This,
        const nsACString *aFileExtension);

    nsresult (STDMETHODCALLTYPE *GetCommonBaseSpec)(
        nsIFileURL *This,
        nsIURI *aURIToCompare,
        nsACString *_retval);

    nsresult (STDMETHODCALLTYPE *GetRelativeSpec)(
        nsIFileURL *This,
        nsIURI *aURIToCompare,
        nsACString *_retval);

    /*** nsIFileURL methods ***/
    nsresult (STDMETHODCALLTYPE *GetFile)(
        nsIFileURL *This,
        nsIFile **aFile);

    nsresult (STDMETHODCALLTYPE *SetFile)(
        nsIFileURL *This,
        nsIFile *aFile);

    END_INTERFACE
} nsIFileURLVtbl;

interface nsIFileURL {
    CONST_VTBL nsIFileURLVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIFileURL_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIFileURL_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIFileURL_Release(This) (This)->lpVtbl->Release(This)
/*** nsIURI methods ***/
#define nsIFileURL_GetSpec(This,aSpec) (This)->lpVtbl->GetSpec(This,aSpec)
#define nsIFileURL_SetSpec(This,aSpec) (This)->lpVtbl->SetSpec(This,aSpec)
#define nsIFileURL_GetPrePath(This,aPrePath) (This)->lpVtbl->GetPrePath(This,aPrePath)
#define nsIFileURL_GetScheme(This,aScheme) (This)->lpVtbl->GetScheme(This,aScheme)
#define nsIFileURL_SetScheme(This,aScheme) (This)->lpVtbl->SetScheme(This,aScheme)
#define nsIFileURL_GetUserPass(This,aUserPass) (This)->lpVtbl->GetUserPass(This,aUserPass)
#define nsIFileURL_SetUserPass(This,aUserPass) (This)->lpVtbl->SetUserPass(This,aUserPass)
#define nsIFileURL_GetUsername(This,aUsername) (This)->lpVtbl->GetUsername(This,aUsername)
#define nsIFileURL_SetUsername(This,aUsername) (This)->lpVtbl->SetUsername(This,aUsername)
#define nsIFileURL_GetPassword(This,aPassword) (This)->lpVtbl->GetPassword(This,aPassword)
#define nsIFileURL_SetPassword(This,aPassword) (This)->lpVtbl->SetPassword(This,aPassword)
#define nsIFileURL_GetHostPort(This,aHostPort) (This)->lpVtbl->GetHostPort(This,aHostPort)
#define nsIFileURL_SetHostPort(This,aHostPort) (This)->lpVtbl->SetHostPort(This,aHostPort)
#define nsIFileURL_GetHost(This,aHost) (This)->lpVtbl->GetHost(This,aHost)
#define nsIFileURL_SetHost(This,aHost) (This)->lpVtbl->SetHost(This,aHost)
#define nsIFileURL_GetPort(This,aPort) (This)->lpVtbl->GetPort(This,aPort)
#define nsIFileURL_SetPort(This,aPort) (This)->lpVtbl->SetPort(This,aPort)
#define nsIFileURL_GetPath(This,aPath) (This)->lpVtbl->GetPath(This,aPath)
#define nsIFileURL_SetPath(This,aPath) (This)->lpVtbl->SetPath(This,aPath)
#define nsIFileURL_Equals(This,other,_retval) (This)->lpVtbl->Equals(This,other,_retval)
#define nsIFileURL_SchemeIs(This,scheme,_retval) (This)->lpVtbl->SchemeIs(This,scheme,_retval)
#define nsIFileURL_Clone(This,_retval) (This)->lpVtbl->Clone(This,_retval)
#define nsIFileURL_Resolve(This,relativePath,_retval) (This)->lpVtbl->Resolve(This,relativePath,_retval)
#define nsIFileURL_GetAsciiSpec(This,aAsciiSpec) (This)->lpVtbl->GetAsciiSpec(This,aAsciiSpec)
#define nsIFileURL_GetAsciiHostPort(This,aAsciiHostPort) (This)->lpVtbl->GetAsciiHostPort(This,aAsciiHostPort)
#define nsIFileURL_GetAsciiHost(This,aAsciiHost) (This)->lpVtbl->GetAsciiHost(This,aAsciiHost)
#define nsIFileURL_GetOriginCharset(This,aOriginCharset) (This)->lpVtbl->GetOriginCharset(This,aOriginCharset)
#define nsIFileURL_GetRef(This,aRef) (This)->lpVtbl->GetRef(This,aRef)
#define nsIFileURL_SetRef(This,aRef) (This)->lpVtbl->SetRef(This,aRef)
#define nsIFileURL_EqualsExceptRef(This,other,_retval) (This)->lpVtbl->EqualsExceptRef(This,other,_retval)
#define nsIFileURL_CloneIgnoringRef(This,_retval) (This)->lpVtbl->CloneIgnoringRef(This,_retval)
#define nsIFileURL_GetSpecIgnoringRef(This,aSpecIgnoringRef) (This)->lpVtbl->GetSpecIgnoringRef(This,aSpecIgnoringRef)
#define nsIFileURL_GetHasRef(This,aHasRef) (This)->lpVtbl->GetHasRef(This,aHasRef)
/*** nsIURL methods ***/
#define nsIFileURL_GetFilePath(This,aFilePath) (This)->lpVtbl->GetFilePath(This,aFilePath)
#define nsIFileURL_SetFilePath(This,aFilePath) (This)->lpVtbl->SetFilePath(This,aFilePath)
#define nsIFileURL_GetQuery(This,aQuery) (This)->lpVtbl->GetQuery(This,aQuery)
#define nsIFileURL_SetQuery(This,aQuery) (This)->lpVtbl->SetQuery(This,aQuery)
#define nsIFileURL_GetDirectory(This,aDirectory) (This)->lpVtbl->GetDirectory(This,aDirectory)
#define nsIFileURL_SetDirectory(This,aDirectory) (This)->lpVtbl->SetDirectory(This,aDirectory)
#define nsIFileURL_GetFileName(This,aFileName) (This)->lpVtbl->GetFileName(This,aFileName)
#define nsIFileURL_SetFileName(This,aFileName) (This)->lpVtbl->SetFileName(This,aFileName)
#define nsIFileURL_GetFileBaseName(This,aFileBaseName) (This)->lpVtbl->GetFileBaseName(This,aFileBaseName)
#define nsIFileURL_SetFileBaseName(This,aFileBaseName) (This)->lpVtbl->SetFileBaseName(This,aFileBaseName)
#define nsIFileURL_GetFileExtension(This,aFileExtension) (This)->lpVtbl->GetFileExtension(This,aFileExtension)
#define nsIFileURL_SetFileExtension(This,aFileExtension) (This)->lpVtbl->SetFileExtension(This,aFileExtension)
#define nsIFileURL_GetCommonBaseSpec(This,aURIToCompare,_retval) (This)->lpVtbl->GetCommonBaseSpec(This,aURIToCompare,_retval)
#define nsIFileURL_GetRelativeSpec(This,aURIToCompare,_retval) (This)->lpVtbl->GetRelativeSpec(This,aURIToCompare,_retval)
/*** nsIFileURL methods ***/
#define nsIFileURL_GetFile(This,aFile) (This)->lpVtbl->GetFile(This,aFile)
#define nsIFileURL_SetFile(This,aFile) (This)->lpVtbl->SetFile(This,aFile)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIFileURL_QueryInterface(nsIFileURL* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIFileURL_AddRef(nsIFileURL* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIFileURL_Release(nsIFileURL* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIURI methods ***/
static FORCEINLINE nsresult nsIFileURL_GetSpec(nsIFileURL* This,nsACString *aSpec) {
    return This->lpVtbl->GetSpec(This,aSpec);
}
static FORCEINLINE nsresult nsIFileURL_SetSpec(nsIFileURL* This,const nsACString *aSpec) {
    return This->lpVtbl->SetSpec(This,aSpec);
}
static FORCEINLINE nsresult nsIFileURL_GetPrePath(nsIFileURL* This,nsACString *aPrePath) {
    return This->lpVtbl->GetPrePath(This,aPrePath);
}
static FORCEINLINE nsresult nsIFileURL_GetScheme(nsIFileURL* This,nsACString *aScheme) {
    return This->lpVtbl->GetScheme(This,aScheme);
}
static FORCEINLINE nsresult nsIFileURL_SetScheme(nsIFileURL* This,const nsACString *aScheme) {
    return This->lpVtbl->SetScheme(This,aScheme);
}
static FORCEINLINE nsresult nsIFileURL_GetUserPass(nsIFileURL* This,nsACString *aUserPass) {
    return This->lpVtbl->GetUserPass(This,aUserPass);
}
static FORCEINLINE nsresult nsIFileURL_SetUserPass(nsIFileURL* This,const nsACString *aUserPass) {
    return This->lpVtbl->SetUserPass(This,aUserPass);
}
static FORCEINLINE nsresult nsIFileURL_GetUsername(nsIFileURL* This,nsACString *aUsername) {
    return This->lpVtbl->GetUsername(This,aUsername);
}
static FORCEINLINE nsresult nsIFileURL_SetUsername(nsIFileURL* This,const nsACString *aUsername) {
    return This->lpVtbl->SetUsername(This,aUsername);
}
static FORCEINLINE nsresult nsIFileURL_GetPassword(nsIFileURL* This,nsACString *aPassword) {
    return This->lpVtbl->GetPassword(This,aPassword);
}
static FORCEINLINE nsresult nsIFileURL_SetPassword(nsIFileURL* This,const nsACString *aPassword) {
    return This->lpVtbl->SetPassword(This,aPassword);
}
static FORCEINLINE nsresult nsIFileURL_GetHostPort(nsIFileURL* This,nsACString *aHostPort) {
    return This->lpVtbl->GetHostPort(This,aHostPort);
}
static FORCEINLINE nsresult nsIFileURL_SetHostPort(nsIFileURL* This,const nsACString *aHostPort) {
    return This->lpVtbl->SetHostPort(This,aHostPort);
}
static FORCEINLINE nsresult nsIFileURL_GetHost(nsIFileURL* This,nsACString *aHost) {
    return This->lpVtbl->GetHost(This,aHost);
}
static FORCEINLINE nsresult nsIFileURL_SetHost(nsIFileURL* This,const nsACString *aHost) {
    return This->lpVtbl->SetHost(This,aHost);
}
static FORCEINLINE nsresult nsIFileURL_GetPort(nsIFileURL* This,LONG *aPort) {
    return This->lpVtbl->GetPort(This,aPort);
}
static FORCEINLINE nsresult nsIFileURL_SetPort(nsIFileURL* This,LONG aPort) {
    return This->lpVtbl->SetPort(This,aPort);
}
static FORCEINLINE nsresult nsIFileURL_GetPath(nsIFileURL* This,nsACString *aPath) {
    return This->lpVtbl->GetPath(This,aPath);
}
static FORCEINLINE nsresult nsIFileURL_SetPath(nsIFileURL* This,const nsACString *aPath) {
    return This->lpVtbl->SetPath(This,aPath);
}
static FORCEINLINE nsresult nsIFileURL_Equals(nsIFileURL* This,nsIURI *other,cpp_bool *_retval) {
    return This->lpVtbl->Equals(This,other,_retval);
}
static FORCEINLINE nsresult nsIFileURL_SchemeIs(nsIFileURL* This,const char *scheme,cpp_bool *_retval) {
    return This->lpVtbl->SchemeIs(This,scheme,_retval);
}
static FORCEINLINE nsresult nsIFileURL_Clone(nsIFileURL* This,nsIURI **_retval) {
    return This->lpVtbl->Clone(This,_retval);
}
static FORCEINLINE nsresult nsIFileURL_Resolve(nsIFileURL* This,const nsACString *relativePath,nsACString *_retval) {
    return This->lpVtbl->Resolve(This,relativePath,_retval);
}
static FORCEINLINE nsresult nsIFileURL_GetAsciiSpec(nsIFileURL* This,nsACString *aAsciiSpec) {
    return This->lpVtbl->GetAsciiSpec(This,aAsciiSpec);
}
static FORCEINLINE nsresult nsIFileURL_GetAsciiHostPort(nsIFileURL* This,nsACString *aAsciiHostPort) {
    return This->lpVtbl->GetAsciiHostPort(This,aAsciiHostPort);
}
static FORCEINLINE nsresult nsIFileURL_GetAsciiHost(nsIFileURL* This,nsACString *aAsciiHost) {
    return This->lpVtbl->GetAsciiHost(This,aAsciiHost);
}
static FORCEINLINE nsresult nsIFileURL_GetOriginCharset(nsIFileURL* This,nsACString *aOriginCharset) {
    return This->lpVtbl->GetOriginCharset(This,aOriginCharset);
}
static FORCEINLINE nsresult nsIFileURL_GetRef(nsIFileURL* This,nsACString *aRef) {
    return This->lpVtbl->GetRef(This,aRef);
}
static FORCEINLINE nsresult nsIFileURL_SetRef(nsIFileURL* This,const nsACString *aRef) {
    return This->lpVtbl->SetRef(This,aRef);
}
static FORCEINLINE nsresult nsIFileURL_EqualsExceptRef(nsIFileURL* This,nsIURI *other,cpp_bool *_retval) {
    return This->lpVtbl->EqualsExceptRef(This,other,_retval);
}
static FORCEINLINE nsresult nsIFileURL_CloneIgnoringRef(nsIFileURL* This,nsIURI **_retval) {
    return This->lpVtbl->CloneIgnoringRef(This,_retval);
}
static FORCEINLINE nsresult nsIFileURL_GetSpecIgnoringRef(nsIFileURL* This,nsACString *aSpecIgnoringRef) {
    return This->lpVtbl->GetSpecIgnoringRef(This,aSpecIgnoringRef);
}
static FORCEINLINE nsresult nsIFileURL_GetHasRef(nsIFileURL* This,cpp_bool *aHasRef) {
    return This->lpVtbl->GetHasRef(This,aHasRef);
}
/*** nsIURL methods ***/
static FORCEINLINE nsresult nsIFileURL_GetFilePath(nsIFileURL* This,nsACString *aFilePath) {
    return This->lpVtbl->GetFilePath(This,aFilePath);
}
static FORCEINLINE nsresult nsIFileURL_SetFilePath(nsIFileURL* This,const nsACString *aFilePath) {
    return This->lpVtbl->SetFilePath(This,aFilePath);
}
static FORCEINLINE nsresult nsIFileURL_GetQuery(nsIFileURL* This,nsACString *aQuery) {
    return This->lpVtbl->GetQuery(This,aQuery);
}
static FORCEINLINE nsresult nsIFileURL_SetQuery(nsIFileURL* This,const nsACString *aQuery) {
    return This->lpVtbl->SetQuery(This,aQuery);
}
static FORCEINLINE nsresult nsIFileURL_GetDirectory(nsIFileURL* This,nsACString *aDirectory) {
    return This->lpVtbl->GetDirectory(This,aDirectory);
}
static FORCEINLINE nsresult nsIFileURL_SetDirectory(nsIFileURL* This,const nsACString *aDirectory) {
    return This->lpVtbl->SetDirectory(This,aDirectory);
}
static FORCEINLINE nsresult nsIFileURL_GetFileName(nsIFileURL* This,nsACString *aFileName) {
    return This->lpVtbl->GetFileName(This,aFileName);
}
static FORCEINLINE nsresult nsIFileURL_SetFileName(nsIFileURL* This,const nsACString *aFileName) {
    return This->lpVtbl->SetFileName(This,aFileName);
}
static FORCEINLINE nsresult nsIFileURL_GetFileBaseName(nsIFileURL* This,nsACString *aFileBaseName) {
    return This->lpVtbl->GetFileBaseName(This,aFileBaseName);
}
static FORCEINLINE nsresult nsIFileURL_SetFileBaseName(nsIFileURL* This,const nsACString *aFileBaseName) {
    return This->lpVtbl->SetFileBaseName(This,aFileBaseName);
}
static FORCEINLINE nsresult nsIFileURL_GetFileExtension(nsIFileURL* This,nsACString *aFileExtension) {
    return This->lpVtbl->GetFileExtension(This,aFileExtension);
}
static FORCEINLINE nsresult nsIFileURL_SetFileExtension(nsIFileURL* This,const nsACString *aFileExtension) {
    return This->lpVtbl->SetFileExtension(This,aFileExtension);
}
static FORCEINLINE nsresult nsIFileURL_GetCommonBaseSpec(nsIFileURL* This,nsIURI *aURIToCompare,nsACString *_retval) {
    return This->lpVtbl->GetCommonBaseSpec(This,aURIToCompare,_retval);
}
static FORCEINLINE nsresult nsIFileURL_GetRelativeSpec(nsIFileURL* This,nsIURI *aURIToCompare,nsACString *_retval) {
    return This->lpVtbl->GetRelativeSpec(This,aURIToCompare,_retval);
}
/*** nsIFileURL methods ***/
static FORCEINLINE nsresult nsIFileURL_GetFile(nsIFileURL* This,nsIFile **aFile) {
    return This->lpVtbl->GetFile(This,aFile);
}
static FORCEINLINE nsresult nsIFileURL_SetFile(nsIFileURL* This,nsIFile *aFile) {
    return This->lpVtbl->SetFile(This,aFile);
}
#endif
#endif

#endif


#endif  /* __nsIFileURL_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIMutable interface
 */
#ifndef __nsIMutable_INTERFACE_DEFINED__
#define __nsIMutable_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIMutable, 0x321578d0, 0x03c1, 0x4d95, 0x88,0x21, 0x02,0x1a,0xc6,0x12,0xd1,0x8d);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("321578d0-03c1-4d95-8821-021ac612d18d")
nsIMutable : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetMutable(
        cpp_bool *aMutable) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMutable(
        cpp_bool aMutable) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIMutable, 0x321578d0, 0x03c1, 0x4d95, 0x88,0x21, 0x02,0x1a,0xc6,0x12,0xd1,0x8d)
#endif
#else
typedef struct nsIMutableVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIMutable *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIMutable *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIMutable *This);

    /*** nsIMutable methods ***/
    nsresult (STDMETHODCALLTYPE *GetMutable)(
        nsIMutable *This,
        cpp_bool *aMutable);

    nsresult (STDMETHODCALLTYPE *SetMutable)(
        nsIMutable *This,
        cpp_bool aMutable);

    END_INTERFACE
} nsIMutableVtbl;

interface nsIMutable {
    CONST_VTBL nsIMutableVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIMutable_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIMutable_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIMutable_Release(This) (This)->lpVtbl->Release(This)
/*** nsIMutable methods ***/
#define nsIMutable_GetMutable(This,aMutable) (This)->lpVtbl->GetMutable(This,aMutable)
#define nsIMutable_SetMutable(This,aMutable) (This)->lpVtbl->SetMutable(This,aMutable)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIMutable_QueryInterface(nsIMutable* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIMutable_AddRef(nsIMutable* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIMutable_Release(nsIMutable* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIMutable methods ***/
static FORCEINLINE nsresult nsIMutable_GetMutable(nsIMutable* This,cpp_bool *aMutable) {
    return This->lpVtbl->GetMutable(This,aMutable);
}
static FORCEINLINE nsresult nsIMutable_SetMutable(nsIMutable* This,cpp_bool aMutable) {
    return This->lpVtbl->SetMutable(This,aMutable);
}
#endif
#endif

#endif


#endif  /* __nsIMutable_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIStandardURL interface
 */
#ifndef __nsIStandardURL_INTERFACE_DEFINED__
#define __nsIStandardURL_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIStandardURL, 0xbabd6cca, 0xebe7, 0x4329, 0x96,0x7c, 0xd6,0xb9,0xe3,0x3c,0xaa,0x81);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("babd6cca-ebe7-4329-967c-d6b9e33caa81")
nsIStandardURL : public nsIMutable
{
    virtual nsresult STDMETHODCALLTYPE Init(
        UINT32 aUrlType,
        LONG aDefaultPort,
        const nsACString *aSpec,
        const char *aOriginCharset,
        nsIURI *aBaseURI) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDefaultPort(
        LONG aNewDefaultPort) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIStandardURL, 0xbabd6cca, 0xebe7, 0x4329, 0x96,0x7c, 0xd6,0xb9,0xe3,0x3c,0xaa,0x81)
#endif
#else
typedef struct nsIStandardURLVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIStandardURL *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIStandardURL *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIStandardURL *This);

    /*** nsIMutable methods ***/
    nsresult (STDMETHODCALLTYPE *GetMutable)(
        nsIStandardURL *This,
        cpp_bool *aMutable);

    nsresult (STDMETHODCALLTYPE *SetMutable)(
        nsIStandardURL *This,
        cpp_bool aMutable);

    /*** nsIStandardURL methods ***/
    nsresult (STDMETHODCALLTYPE *Init)(
        nsIStandardURL *This,
        UINT32 aUrlType,
        LONG aDefaultPort,
        const nsACString *aSpec,
        const char *aOriginCharset,
        nsIURI *aBaseURI);

    nsresult (STDMETHODCALLTYPE *SetDefaultPort)(
        nsIStandardURL *This,
        LONG aNewDefaultPort);

    END_INTERFACE
} nsIStandardURLVtbl;

interface nsIStandardURL {
    CONST_VTBL nsIStandardURLVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIStandardURL_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIStandardURL_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIStandardURL_Release(This) (This)->lpVtbl->Release(This)
/*** nsIMutable methods ***/
#define nsIStandardURL_GetMutable(This,aMutable) (This)->lpVtbl->GetMutable(This,aMutable)
#define nsIStandardURL_SetMutable(This,aMutable) (This)->lpVtbl->SetMutable(This,aMutable)
/*** nsIStandardURL methods ***/
#define nsIStandardURL_Init(This,aUrlType,aDefaultPort,aSpec,aOriginCharset,aBaseURI) (This)->lpVtbl->Init(This,aUrlType,aDefaultPort,aSpec,aOriginCharset,aBaseURI)
#define nsIStandardURL_SetDefaultPort(This,aNewDefaultPort) (This)->lpVtbl->SetDefaultPort(This,aNewDefaultPort)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIStandardURL_QueryInterface(nsIStandardURL* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIStandardURL_AddRef(nsIStandardURL* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIStandardURL_Release(nsIStandardURL* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIMutable methods ***/
static FORCEINLINE nsresult nsIStandardURL_GetMutable(nsIStandardURL* This,cpp_bool *aMutable) {
    return This->lpVtbl->GetMutable(This,aMutable);
}
static FORCEINLINE nsresult nsIStandardURL_SetMutable(nsIStandardURL* This,cpp_bool aMutable) {
    return This->lpVtbl->SetMutable(This,aMutable);
}
/*** nsIStandardURL methods ***/
static FORCEINLINE nsresult nsIStandardURL_Init(nsIStandardURL* This,UINT32 aUrlType,LONG aDefaultPort,const nsACString *aSpec,const char *aOriginCharset,nsIURI *aBaseURI) {
    return This->lpVtbl->Init(This,aUrlType,aDefaultPort,aSpec,aOriginCharset,aBaseURI);
}
static FORCEINLINE nsresult nsIStandardURL_SetDefaultPort(nsIStandardURL* This,LONG aNewDefaultPort) {
    return This->lpVtbl->SetDefaultPort(This,aNewDefaultPort);
}
#endif
#endif

#endif


#endif  /* __nsIStandardURL_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIRequest interface
 */
#ifndef __nsIRequest_INTERFACE_DEFINED__
#define __nsIRequest_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIRequest, 0xef6bfbd2, 0xfd46, 0x48d8, 0x96,0xb7, 0x9f,0x8f,0x0f,0xd3,0x87,0xfe);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ef6bfbd2-fd46-48d8-96b7-9f8f0fd387fe")
nsIRequest : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetName(
        nsACString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE IsPending(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetStatus(
        nsresult *aStatus) = 0;

    virtual nsresult STDMETHODCALLTYPE Cancel(
        nsresult aStatus) = 0;

    virtual nsresult STDMETHODCALLTYPE Suspend(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE Resume(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLoadGroup(
        nsILoadGroup **aLoadGroup) = 0;

    virtual nsresult STDMETHODCALLTYPE SetLoadGroup(
        nsILoadGroup *aLoadGroup) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLoadFlags(
        nsLoadFlags *aLoadFlags) = 0;

    virtual nsresult STDMETHODCALLTYPE SetLoadFlags(
        nsLoadFlags aLoadFlags) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIRequest, 0xef6bfbd2, 0xfd46, 0x48d8, 0x96,0xb7, 0x9f,0x8f,0x0f,0xd3,0x87,0xfe)
#endif
#else
typedef struct nsIRequestVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIRequest *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIRequest *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIRequest *This);

    /*** nsIRequest methods ***/
    nsresult (STDMETHODCALLTYPE *GetName)(
        nsIRequest *This,
        nsACString *aName);

    nsresult (STDMETHODCALLTYPE *IsPending)(
        nsIRequest *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetStatus)(
        nsIRequest *This,
        nsresult *aStatus);

    nsresult (STDMETHODCALLTYPE *Cancel)(
        nsIRequest *This,
        nsresult aStatus);

    nsresult (STDMETHODCALLTYPE *Suspend)(
        nsIRequest *This);

    nsresult (STDMETHODCALLTYPE *Resume)(
        nsIRequest *This);

    nsresult (STDMETHODCALLTYPE *GetLoadGroup)(
        nsIRequest *This,
        nsILoadGroup **aLoadGroup);

    nsresult (STDMETHODCALLTYPE *SetLoadGroup)(
        nsIRequest *This,
        nsILoadGroup *aLoadGroup);

    nsresult (STDMETHODCALLTYPE *GetLoadFlags)(
        nsIRequest *This,
        nsLoadFlags *aLoadFlags);

    nsresult (STDMETHODCALLTYPE *SetLoadFlags)(
        nsIRequest *This,
        nsLoadFlags aLoadFlags);

    END_INTERFACE
} nsIRequestVtbl;

interface nsIRequest {
    CONST_VTBL nsIRequestVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIRequest_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIRequest_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIRequest_Release(This) (This)->lpVtbl->Release(This)
/*** nsIRequest methods ***/
#define nsIRequest_GetName(This,aName) (This)->lpVtbl->GetName(This,aName)
#define nsIRequest_IsPending(This,_retval) (This)->lpVtbl->IsPending(This,_retval)
#define nsIRequest_GetStatus(This,aStatus) (This)->lpVtbl->GetStatus(This,aStatus)
#define nsIRequest_Cancel(This,aStatus) (This)->lpVtbl->Cancel(This,aStatus)
#define nsIRequest_Suspend(This) (This)->lpVtbl->Suspend(This)
#define nsIRequest_Resume(This) (This)->lpVtbl->Resume(This)
#define nsIRequest_GetLoadGroup(This,aLoadGroup) (This)->lpVtbl->GetLoadGroup(This,aLoadGroup)
#define nsIRequest_SetLoadGroup(This,aLoadGroup) (This)->lpVtbl->SetLoadGroup(This,aLoadGroup)
#define nsIRequest_GetLoadFlags(This,aLoadFlags) (This)->lpVtbl->GetLoadFlags(This,aLoadFlags)
#define nsIRequest_SetLoadFlags(This,aLoadFlags) (This)->lpVtbl->SetLoadFlags(This,aLoadFlags)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIRequest_QueryInterface(nsIRequest* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIRequest_AddRef(nsIRequest* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIRequest_Release(nsIRequest* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIRequest methods ***/
static FORCEINLINE nsresult nsIRequest_GetName(nsIRequest* This,nsACString *aName) {
    return This->lpVtbl->GetName(This,aName);
}
static FORCEINLINE nsresult nsIRequest_IsPending(nsIRequest* This,cpp_bool *_retval) {
    return This->lpVtbl->IsPending(This,_retval);
}
static FORCEINLINE nsresult nsIRequest_GetStatus(nsIRequest* This,nsresult *aStatus) {
    return This->lpVtbl->GetStatus(This,aStatus);
}
static FORCEINLINE nsresult nsIRequest_Cancel(nsIRequest* This,nsresult aStatus) {
    return This->lpVtbl->Cancel(This,aStatus);
}
static FORCEINLINE nsresult nsIRequest_Suspend(nsIRequest* This) {
    return This->lpVtbl->Suspend(This);
}
static FORCEINLINE nsresult nsIRequest_Resume(nsIRequest* This) {
    return This->lpVtbl->Resume(This);
}
static FORCEINLINE nsresult nsIRequest_GetLoadGroup(nsIRequest* This,nsILoadGroup **aLoadGroup) {
    return This->lpVtbl->GetLoadGroup(This,aLoadGroup);
}
static FORCEINLINE nsresult nsIRequest_SetLoadGroup(nsIRequest* This,nsILoadGroup *aLoadGroup) {
    return This->lpVtbl->SetLoadGroup(This,aLoadGroup);
}
static FORCEINLINE nsresult nsIRequest_GetLoadFlags(nsIRequest* This,nsLoadFlags *aLoadFlags) {
    return This->lpVtbl->GetLoadFlags(This,aLoadFlags);
}
static FORCEINLINE nsresult nsIRequest_SetLoadFlags(nsIRequest* This,nsLoadFlags aLoadFlags) {
    return This->lpVtbl->SetLoadFlags(This,aLoadFlags);
}
#endif
#endif

#endif


#endif  /* __nsIRequest_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIRequestObserver interface
 */
#ifndef __nsIRequestObserver_INTERFACE_DEFINED__
#define __nsIRequestObserver_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIRequestObserver, 0xfd91e2e0, 0x1481, 0x11d3, 0x93,0x33, 0x00,0x10,0x4b,0xa0,0xfd,0x40);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("fd91e2e0-1481-11d3-9333-00104ba0fd40")
nsIRequestObserver : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE OnStartRequest(
        nsIRequest *aRequest,
        nsISupports *aContext) = 0;

    virtual nsresult STDMETHODCALLTYPE OnStopRequest(
        nsIRequest *aRequest,
        nsISupports *aContext,
        nsresult aStatusCode) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIRequestObserver, 0xfd91e2e0, 0x1481, 0x11d3, 0x93,0x33, 0x00,0x10,0x4b,0xa0,0xfd,0x40)
#endif
#else
typedef struct nsIRequestObserverVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIRequestObserver *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIRequestObserver *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIRequestObserver *This);

    /*** nsIRequestObserver methods ***/
    nsresult (STDMETHODCALLTYPE *OnStartRequest)(
        nsIRequestObserver *This,
        nsIRequest *aRequest,
        nsISupports *aContext);

    nsresult (STDMETHODCALLTYPE *OnStopRequest)(
        nsIRequestObserver *This,
        nsIRequest *aRequest,
        nsISupports *aContext,
        nsresult aStatusCode);

    END_INTERFACE
} nsIRequestObserverVtbl;

interface nsIRequestObserver {
    CONST_VTBL nsIRequestObserverVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIRequestObserver_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIRequestObserver_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIRequestObserver_Release(This) (This)->lpVtbl->Release(This)
/*** nsIRequestObserver methods ***/
#define nsIRequestObserver_OnStartRequest(This,aRequest,aContext) (This)->lpVtbl->OnStartRequest(This,aRequest,aContext)
#define nsIRequestObserver_OnStopRequest(This,aRequest,aContext,aStatusCode) (This)->lpVtbl->OnStopRequest(This,aRequest,aContext,aStatusCode)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIRequestObserver_QueryInterface(nsIRequestObserver* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIRequestObserver_AddRef(nsIRequestObserver* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIRequestObserver_Release(nsIRequestObserver* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIRequestObserver methods ***/
static FORCEINLINE nsresult nsIRequestObserver_OnStartRequest(nsIRequestObserver* This,nsIRequest *aRequest,nsISupports *aContext) {
    return This->lpVtbl->OnStartRequest(This,aRequest,aContext);
}
static FORCEINLINE nsresult nsIRequestObserver_OnStopRequest(nsIRequestObserver* This,nsIRequest *aRequest,nsISupports *aContext,nsresult aStatusCode) {
    return This->lpVtbl->OnStopRequest(This,aRequest,aContext,aStatusCode);
}
#endif
#endif

#endif


#endif  /* __nsIRequestObserver_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIStreamListener interface
 */
#ifndef __nsIStreamListener_INTERFACE_DEFINED__
#define __nsIStreamListener_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIStreamListener, 0x3b4c8a77, 0x76ba, 0x4610, 0xb3,0x16, 0x67,0x8c,0x73,0xa3,0xb8,0x8c);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("3b4c8a77-76ba-4610-b316-678c73a3b88c")
nsIStreamListener : public nsIRequestObserver
{
    virtual nsresult STDMETHODCALLTYPE OnDataAvailable(
        nsIRequest *aRequest,
        nsISupports *aContext,
        nsIInputStream *aInputStream,
        UINT64 aOffset,
        UINT32 aCount) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIStreamListener, 0x3b4c8a77, 0x76ba, 0x4610, 0xb3,0x16, 0x67,0x8c,0x73,0xa3,0xb8,0x8c)
#endif
#else
typedef struct nsIStreamListenerVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIStreamListener *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIStreamListener *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIStreamListener *This);

    /*** nsIRequestObserver methods ***/
    nsresult (STDMETHODCALLTYPE *OnStartRequest)(
        nsIStreamListener *This,
        nsIRequest *aRequest,
        nsISupports *aContext);

    nsresult (STDMETHODCALLTYPE *OnStopRequest)(
        nsIStreamListener *This,
        nsIRequest *aRequest,
        nsISupports *aContext,
        nsresult aStatusCode);

    /*** nsIStreamListener methods ***/
    nsresult (STDMETHODCALLTYPE *OnDataAvailable)(
        nsIStreamListener *This,
        nsIRequest *aRequest,
        nsISupports *aContext,
        nsIInputStream *aInputStream,
        UINT64 aOffset,
        UINT32 aCount);

    END_INTERFACE
} nsIStreamListenerVtbl;

interface nsIStreamListener {
    CONST_VTBL nsIStreamListenerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIStreamListener_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIStreamListener_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIStreamListener_Release(This) (This)->lpVtbl->Release(This)
/*** nsIRequestObserver methods ***/
#define nsIStreamListener_OnStartRequest(This,aRequest,aContext) (This)->lpVtbl->OnStartRequest(This,aRequest,aContext)
#define nsIStreamListener_OnStopRequest(This,aRequest,aContext,aStatusCode) (This)->lpVtbl->OnStopRequest(This,aRequest,aContext,aStatusCode)
/*** nsIStreamListener methods ***/
#define nsIStreamListener_OnDataAvailable(This,aRequest,aContext,aInputStream,aOffset,aCount) (This)->lpVtbl->OnDataAvailable(This,aRequest,aContext,aInputStream,aOffset,aCount)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIStreamListener_QueryInterface(nsIStreamListener* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIStreamListener_AddRef(nsIStreamListener* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIStreamListener_Release(nsIStreamListener* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIRequestObserver methods ***/
static FORCEINLINE nsresult nsIStreamListener_OnStartRequest(nsIStreamListener* This,nsIRequest *aRequest,nsISupports *aContext) {
    return This->lpVtbl->OnStartRequest(This,aRequest,aContext);
}
static FORCEINLINE nsresult nsIStreamListener_OnStopRequest(nsIStreamListener* This,nsIRequest *aRequest,nsISupports *aContext,nsresult aStatusCode) {
    return This->lpVtbl->OnStopRequest(This,aRequest,aContext,aStatusCode);
}
/*** nsIStreamListener methods ***/
static FORCEINLINE nsresult nsIStreamListener_OnDataAvailable(nsIStreamListener* This,nsIRequest *aRequest,nsISupports *aContext,nsIInputStream *aInputStream,UINT64 aOffset,UINT32 aCount) {
    return This->lpVtbl->OnDataAvailable(This,aRequest,aContext,aInputStream,aOffset,aCount);
}
#endif
#endif

#endif


#endif  /* __nsIStreamListener_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsILoadGroup interface
 */
#ifndef __nsILoadGroup_INTERFACE_DEFINED__
#define __nsILoadGroup_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsILoadGroup, 0xf0c87725, 0x7a35, 0x463c, 0x9c,0xeb, 0x2c,0x07,0xf2,0x34,0x06,0xcc);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("f0c87725-7a35-463c-9ceb-2c07f23406cc")
nsILoadGroup : public nsIRequest
{
    virtual nsresult STDMETHODCALLTYPE GetGroupObserver(
        nsIRequestObserver **aGroupObserver) = 0;

    virtual nsresult STDMETHODCALLTYPE SetGroupObserver(
        nsIRequestObserver *aGroupObserver) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDefaultLoadRequest(
        nsIRequest **aDefaultLoadRequest) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDefaultLoadRequest(
        nsIRequest *aDefaultLoadRequest) = 0;

    virtual nsresult STDMETHODCALLTYPE AddRequest(
        nsIRequest *aRequest,
        nsISupports *aContext) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveRequest(
        nsIRequest *aRequest,
        nsISupports *aContext,
        nsresult aStatus) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRequests(
        nsISimpleEnumerator **aRequests) = 0;

    virtual nsresult STDMETHODCALLTYPE GetActiveCount(
        UINT32 *aActiveCount) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNotificationCallbacks(
        nsIInterfaceRequestor **aNotificationCallbacks) = 0;

    virtual nsresult STDMETHODCALLTYPE SetNotificationCallbacks(
        nsIInterfaceRequestor *aNotificationCallbacks) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSchedulingContextID(
        nsID *aSchedulingContextID) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDefaultLoadFlags(
        nsLoadFlags *aDefaultLoadFlags) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDefaultLoadFlags(
        nsLoadFlags aDefaultLoadFlags) = 0;

    virtual nsresult STDMETHODCALLTYPE GetUserAgentOverrideCache(
        nsACString *aUserAgentOverrideCache) = 0;

    virtual nsresult STDMETHODCALLTYPE SetUserAgentOverrideCache(
        const nsACString *aUserAgentOverrideCache) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsILoadGroup, 0xf0c87725, 0x7a35, 0x463c, 0x9c,0xeb, 0x2c,0x07,0xf2,0x34,0x06,0xcc)
#endif
#else
typedef struct nsILoadGroupVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsILoadGroup *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsILoadGroup *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsILoadGroup *This);

    /*** nsIRequest methods ***/
    nsresult (STDMETHODCALLTYPE *GetName)(
        nsILoadGroup *This,
        nsACString *aName);

    nsresult (STDMETHODCALLTYPE *IsPending)(
        nsILoadGroup *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetStatus)(
        nsILoadGroup *This,
        nsresult *aStatus);

    nsresult (STDMETHODCALLTYPE *Cancel)(
        nsILoadGroup *This,
        nsresult aStatus);

    nsresult (STDMETHODCALLTYPE *Suspend)(
        nsILoadGroup *This);

    nsresult (STDMETHODCALLTYPE *Resume)(
        nsILoadGroup *This);

    nsresult (STDMETHODCALLTYPE *GetLoadGroup)(
        nsILoadGroup *This,
        nsILoadGroup **aLoadGroup);

    nsresult (STDMETHODCALLTYPE *SetLoadGroup)(
        nsILoadGroup *This,
        nsILoadGroup *aLoadGroup);

    nsresult (STDMETHODCALLTYPE *GetLoadFlags)(
        nsILoadGroup *This,
        nsLoadFlags *aLoadFlags);

    nsresult (STDMETHODCALLTYPE *SetLoadFlags)(
        nsILoadGroup *This,
        nsLoadFlags aLoadFlags);

    /*** nsILoadGroup methods ***/
    nsresult (STDMETHODCALLTYPE *GetGroupObserver)(
        nsILoadGroup *This,
        nsIRequestObserver **aGroupObserver);

    nsresult (STDMETHODCALLTYPE *SetGroupObserver)(
        nsILoadGroup *This,
        nsIRequestObserver *aGroupObserver);

    nsresult (STDMETHODCALLTYPE *GetDefaultLoadRequest)(
        nsILoadGroup *This,
        nsIRequest **aDefaultLoadRequest);

    nsresult (STDMETHODCALLTYPE *SetDefaultLoadRequest)(
        nsILoadGroup *This,
        nsIRequest *aDefaultLoadRequest);

    nsresult (STDMETHODCALLTYPE *AddRequest)(
        nsILoadGroup *This,
        nsIRequest *aRequest,
        nsISupports *aContext);

    nsresult (STDMETHODCALLTYPE *RemoveRequest)(
        nsILoadGroup *This,
        nsIRequest *aRequest,
        nsISupports *aContext,
        nsresult aStatus);

    nsresult (STDMETHODCALLTYPE *GetRequests)(
        nsILoadGroup *This,
        nsISimpleEnumerator **aRequests);

    nsresult (STDMETHODCALLTYPE *GetActiveCount)(
        nsILoadGroup *This,
        UINT32 *aActiveCount);

    nsresult (STDMETHODCALLTYPE *GetNotificationCallbacks)(
        nsILoadGroup *This,
        nsIInterfaceRequestor **aNotificationCallbacks);

    nsresult (STDMETHODCALLTYPE *SetNotificationCallbacks)(
        nsILoadGroup *This,
        nsIInterfaceRequestor *aNotificationCallbacks);

    nsresult (STDMETHODCALLTYPE *GetSchedulingContextID)(
        nsILoadGroup *This,
        nsID *aSchedulingContextID);

    nsresult (STDMETHODCALLTYPE *GetDefaultLoadFlags)(
        nsILoadGroup *This,
        nsLoadFlags *aDefaultLoadFlags);

    nsresult (STDMETHODCALLTYPE *SetDefaultLoadFlags)(
        nsILoadGroup *This,
        nsLoadFlags aDefaultLoadFlags);

    nsresult (STDMETHODCALLTYPE *GetUserAgentOverrideCache)(
        nsILoadGroup *This,
        nsACString *aUserAgentOverrideCache);

    nsresult (STDMETHODCALLTYPE *SetUserAgentOverrideCache)(
        nsILoadGroup *This,
        const nsACString *aUserAgentOverrideCache);

    END_INTERFACE
} nsILoadGroupVtbl;

interface nsILoadGroup {
    CONST_VTBL nsILoadGroupVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsILoadGroup_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsILoadGroup_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsILoadGroup_Release(This) (This)->lpVtbl->Release(This)
/*** nsIRequest methods ***/
#define nsILoadGroup_GetName(This,aName) (This)->lpVtbl->GetName(This,aName)
#define nsILoadGroup_IsPending(This,_retval) (This)->lpVtbl->IsPending(This,_retval)
#define nsILoadGroup_GetStatus(This,aStatus) (This)->lpVtbl->GetStatus(This,aStatus)
#define nsILoadGroup_Cancel(This,aStatus) (This)->lpVtbl->Cancel(This,aStatus)
#define nsILoadGroup_Suspend(This) (This)->lpVtbl->Suspend(This)
#define nsILoadGroup_Resume(This) (This)->lpVtbl->Resume(This)
#define nsILoadGroup_GetLoadGroup(This,aLoadGroup) (This)->lpVtbl->GetLoadGroup(This,aLoadGroup)
#define nsILoadGroup_SetLoadGroup(This,aLoadGroup) (This)->lpVtbl->SetLoadGroup(This,aLoadGroup)
#define nsILoadGroup_GetLoadFlags(This,aLoadFlags) (This)->lpVtbl->GetLoadFlags(This,aLoadFlags)
#define nsILoadGroup_SetLoadFlags(This,aLoadFlags) (This)->lpVtbl->SetLoadFlags(This,aLoadFlags)
/*** nsILoadGroup methods ***/
#define nsILoadGroup_GetGroupObserver(This,aGroupObserver) (This)->lpVtbl->GetGroupObserver(This,aGroupObserver)
#define nsILoadGroup_SetGroupObserver(This,aGroupObserver) (This)->lpVtbl->SetGroupObserver(This,aGroupObserver)
#define nsILoadGroup_GetDefaultLoadRequest(This,aDefaultLoadRequest) (This)->lpVtbl->GetDefaultLoadRequest(This,aDefaultLoadRequest)
#define nsILoadGroup_SetDefaultLoadRequest(This,aDefaultLoadRequest) (This)->lpVtbl->SetDefaultLoadRequest(This,aDefaultLoadRequest)
#define nsILoadGroup_AddRequest(This,aRequest,aContext) (This)->lpVtbl->AddRequest(This,aRequest,aContext)
#define nsILoadGroup_RemoveRequest(This,aRequest,aContext,aStatus) (This)->lpVtbl->RemoveRequest(This,aRequest,aContext,aStatus)
#define nsILoadGroup_GetRequests(This,aRequests) (This)->lpVtbl->GetRequests(This,aRequests)
#define nsILoadGroup_GetActiveCount(This,aActiveCount) (This)->lpVtbl->GetActiveCount(This,aActiveCount)
#define nsILoadGroup_GetNotificationCallbacks(This,aNotificationCallbacks) (This)->lpVtbl->GetNotificationCallbacks(This,aNotificationCallbacks)
#define nsILoadGroup_SetNotificationCallbacks(This,aNotificationCallbacks) (This)->lpVtbl->SetNotificationCallbacks(This,aNotificationCallbacks)
#define nsILoadGroup_GetSchedulingContextID(This,aSchedulingContextID) (This)->lpVtbl->GetSchedulingContextID(This,aSchedulingContextID)
#define nsILoadGroup_GetDefaultLoadFlags(This,aDefaultLoadFlags) (This)->lpVtbl->GetDefaultLoadFlags(This,aDefaultLoadFlags)
#define nsILoadGroup_SetDefaultLoadFlags(This,aDefaultLoadFlags) (This)->lpVtbl->SetDefaultLoadFlags(This,aDefaultLoadFlags)
#define nsILoadGroup_GetUserAgentOverrideCache(This,aUserAgentOverrideCache) (This)->lpVtbl->GetUserAgentOverrideCache(This,aUserAgentOverrideCache)
#define nsILoadGroup_SetUserAgentOverrideCache(This,aUserAgentOverrideCache) (This)->lpVtbl->SetUserAgentOverrideCache(This,aUserAgentOverrideCache)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsILoadGroup_QueryInterface(nsILoadGroup* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsILoadGroup_AddRef(nsILoadGroup* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsILoadGroup_Release(nsILoadGroup* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIRequest methods ***/
static FORCEINLINE nsresult nsILoadGroup_GetName(nsILoadGroup* This,nsACString *aName) {
    return This->lpVtbl->GetName(This,aName);
}
static FORCEINLINE nsresult nsILoadGroup_IsPending(nsILoadGroup* This,cpp_bool *_retval) {
    return This->lpVtbl->IsPending(This,_retval);
}
static FORCEINLINE nsresult nsILoadGroup_GetStatus(nsILoadGroup* This,nsresult *aStatus) {
    return This->lpVtbl->GetStatus(This,aStatus);
}
static FORCEINLINE nsresult nsILoadGroup_Cancel(nsILoadGroup* This,nsresult aStatus) {
    return This->lpVtbl->Cancel(This,aStatus);
}
static FORCEINLINE nsresult nsILoadGroup_Suspend(nsILoadGroup* This) {
    return This->lpVtbl->Suspend(This);
}
static FORCEINLINE nsresult nsILoadGroup_Resume(nsILoadGroup* This) {
    return This->lpVtbl->Resume(This);
}
static FORCEINLINE nsresult nsILoadGroup_GetLoadGroup(nsILoadGroup* This,nsILoadGroup **aLoadGroup) {
    return This->lpVtbl->GetLoadGroup(This,aLoadGroup);
}
static FORCEINLINE nsresult nsILoadGroup_SetLoadGroup(nsILoadGroup* This,nsILoadGroup *aLoadGroup) {
    return This->lpVtbl->SetLoadGroup(This,aLoadGroup);
}
static FORCEINLINE nsresult nsILoadGroup_GetLoadFlags(nsILoadGroup* This,nsLoadFlags *aLoadFlags) {
    return This->lpVtbl->GetLoadFlags(This,aLoadFlags);
}
static FORCEINLINE nsresult nsILoadGroup_SetLoadFlags(nsILoadGroup* This,nsLoadFlags aLoadFlags) {
    return This->lpVtbl->SetLoadFlags(This,aLoadFlags);
}
/*** nsILoadGroup methods ***/
static FORCEINLINE nsresult nsILoadGroup_GetGroupObserver(nsILoadGroup* This,nsIRequestObserver **aGroupObserver) {
    return This->lpVtbl->GetGroupObserver(This,aGroupObserver);
}
static FORCEINLINE nsresult nsILoadGroup_SetGroupObserver(nsILoadGroup* This,nsIRequestObserver *aGroupObserver) {
    return This->lpVtbl->SetGroupObserver(This,aGroupObserver);
}
static FORCEINLINE nsresult nsILoadGroup_GetDefaultLoadRequest(nsILoadGroup* This,nsIRequest **aDefaultLoadRequest) {
    return This->lpVtbl->GetDefaultLoadRequest(This,aDefaultLoadRequest);
}
static FORCEINLINE nsresult nsILoadGroup_SetDefaultLoadRequest(nsILoadGroup* This,nsIRequest *aDefaultLoadRequest) {
    return This->lpVtbl->SetDefaultLoadRequest(This,aDefaultLoadRequest);
}
static FORCEINLINE nsresult nsILoadGroup_AddRequest(nsILoadGroup* This,nsIRequest *aRequest,nsISupports *aContext) {
    return This->lpVtbl->AddRequest(This,aRequest,aContext);
}
static FORCEINLINE nsresult nsILoadGroup_RemoveRequest(nsILoadGroup* This,nsIRequest *aRequest,nsISupports *aContext,nsresult aStatus) {
    return This->lpVtbl->RemoveRequest(This,aRequest,aContext,aStatus);
}
static FORCEINLINE nsresult nsILoadGroup_GetRequests(nsILoadGroup* This,nsISimpleEnumerator **aRequests) {
    return This->lpVtbl->GetRequests(This,aRequests);
}
static FORCEINLINE nsresult nsILoadGroup_GetActiveCount(nsILoadGroup* This,UINT32 *aActiveCount) {
    return This->lpVtbl->GetActiveCount(This,aActiveCount);
}
static FORCEINLINE nsresult nsILoadGroup_GetNotificationCallbacks(nsILoadGroup* This,nsIInterfaceRequestor **aNotificationCallbacks) {
    return This->lpVtbl->GetNotificationCallbacks(This,aNotificationCallbacks);
}
static FORCEINLINE nsresult nsILoadGroup_SetNotificationCallbacks(nsILoadGroup* This,nsIInterfaceRequestor *aNotificationCallbacks) {
    return This->lpVtbl->SetNotificationCallbacks(This,aNotificationCallbacks);
}
static FORCEINLINE nsresult nsILoadGroup_GetSchedulingContextID(nsILoadGroup* This,nsID *aSchedulingContextID) {
    return This->lpVtbl->GetSchedulingContextID(This,aSchedulingContextID);
}
static FORCEINLINE nsresult nsILoadGroup_GetDefaultLoadFlags(nsILoadGroup* This,nsLoadFlags *aDefaultLoadFlags) {
    return This->lpVtbl->GetDefaultLoadFlags(This,aDefaultLoadFlags);
}
static FORCEINLINE nsresult nsILoadGroup_SetDefaultLoadFlags(nsILoadGroup* This,nsLoadFlags aDefaultLoadFlags) {
    return This->lpVtbl->SetDefaultLoadFlags(This,aDefaultLoadFlags);
}
static FORCEINLINE nsresult nsILoadGroup_GetUserAgentOverrideCache(nsILoadGroup* This,nsACString *aUserAgentOverrideCache) {
    return This->lpVtbl->GetUserAgentOverrideCache(This,aUserAgentOverrideCache);
}
static FORCEINLINE nsresult nsILoadGroup_SetUserAgentOverrideCache(nsILoadGroup* This,const nsACString *aUserAgentOverrideCache) {
    return This->lpVtbl->SetUserAgentOverrideCache(This,aUserAgentOverrideCache);
}
#endif
#endif

#endif


#endif  /* __nsILoadGroup_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIChannel interface
 */
#ifndef __nsIChannel_INTERFACE_DEFINED__
#define __nsIChannel_INTERFACE_DEFINED__

#define LOAD_DOCUMENT_URI (1 << 16)

#define LOAD_RETARGETED_DOCUMENT_URI (1 << 17)

#define LOAD_REPLACE (1 << 18)

#define LOAD_INITIAL_DOCUMENT_URI (1 << 19)

#define LOAD_TARGETED (1 << 20)

#define LOAD_CALL_CONTENT_SNIFFERS (1 << 21)

#define LOAD_CLASSIFY_URI (1 << 22)

#define LOAD_MEDIA_SNIFFER_OVERRIDES_CONTENT_TYPE (1 << 23)

#define LOAD_EXPLICIT_CREDENTIALS (1 << 24)

#define LOAD_BYPASS_SERVICE_WORKER (1 << 25)

DEFINE_GUID(IID_nsIChannel, 0x2c389865, 0x23db, 0x4aa7, 0x9f,0xe5, 0x60,0xcc,0x7b,0x00,0x69,0x7e);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("2c389865-23db-4aa7-9fe5-60cc7b00697e")
nsIChannel : public nsIRequest
{
    virtual nsresult STDMETHODCALLTYPE GetOriginalURI(
        nsIURI **aOriginalURI) = 0;

    virtual nsresult STDMETHODCALLTYPE SetOriginalURI(
        nsIURI *aOriginalURI) = 0;

    virtual nsresult STDMETHODCALLTYPE GetURI(
        nsIURI **aURI) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOwner(
        nsISupports **aOwner) = 0;

    virtual nsresult STDMETHODCALLTYPE SetOwner(
        nsISupports *aOwner) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNotificationCallbacks(
        nsIInterfaceRequestor **aNotificationCallbacks) = 0;

    virtual nsresult STDMETHODCALLTYPE SetNotificationCallbacks(
        nsIInterfaceRequestor *aNotificationCallbacks) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSecurityInfo(
        nsISupports **aSecurityInfo) = 0;

    virtual nsresult STDMETHODCALLTYPE GetContentType(
        nsACString *aContentType) = 0;

    virtual nsresult STDMETHODCALLTYPE SetContentType(
        const nsACString *aContentType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetContentCharset(
        nsACString *aContentCharset) = 0;

    virtual nsresult STDMETHODCALLTYPE SetContentCharset(
        const nsACString *aContentCharset) = 0;

    virtual nsresult STDMETHODCALLTYPE GetContentLength(
        INT64 *aContentLength) = 0;

    virtual nsresult STDMETHODCALLTYPE SetContentLength(
        INT64 aContentLength) = 0;

    virtual nsresult STDMETHODCALLTYPE Open(
        nsIInputStream **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Open2(
        nsIInputStream **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE AsyncOpen(
        nsIStreamListener *aListener,
        nsISupports *aContext) = 0;

    virtual nsresult STDMETHODCALLTYPE AsyncOpen2(
        nsIStreamListener *aListener) = 0;

    virtual nsresult STDMETHODCALLTYPE GetContentDisposition(
        UINT32 *aContentDisposition) = 0;

    virtual nsresult STDMETHODCALLTYPE SetContentDisposition(
        UINT32 aContentDisposition) = 0;

    virtual nsresult STDMETHODCALLTYPE GetContentDispositionFilename(
        nsAString *aContentDispositionFilename) = 0;

    virtual nsresult STDMETHODCALLTYPE SetContentDispositionFilename(
        const nsAString *aContentDispositionFilename) = 0;

    virtual nsresult STDMETHODCALLTYPE GetContentDispositionHeader(
        nsACString *aContentDispositionHeader) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLoadInfo(
        nsILoadInfo **aLoadInfo) = 0;

    virtual nsresult STDMETHODCALLTYPE SetLoadInfo(
        nsILoadInfo *aLoadInfo) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIChannel, 0x2c389865, 0x23db, 0x4aa7, 0x9f,0xe5, 0x60,0xcc,0x7b,0x00,0x69,0x7e)
#endif
#else
typedef struct nsIChannelVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIChannel *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIChannel *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIChannel *This);

    /*** nsIRequest methods ***/
    nsresult (STDMETHODCALLTYPE *GetName)(
        nsIChannel *This,
        nsACString *aName);

    nsresult (STDMETHODCALLTYPE *IsPending)(
        nsIChannel *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetStatus)(
        nsIChannel *This,
        nsresult *aStatus);

    nsresult (STDMETHODCALLTYPE *Cancel)(
        nsIChannel *This,
        nsresult aStatus);

    nsresult (STDMETHODCALLTYPE *Suspend)(
        nsIChannel *This);

    nsresult (STDMETHODCALLTYPE *Resume)(
        nsIChannel *This);

    nsresult (STDMETHODCALLTYPE *GetLoadGroup)(
        nsIChannel *This,
        nsILoadGroup **aLoadGroup);

    nsresult (STDMETHODCALLTYPE *SetLoadGroup)(
        nsIChannel *This,
        nsILoadGroup *aLoadGroup);

    nsresult (STDMETHODCALLTYPE *GetLoadFlags)(
        nsIChannel *This,
        nsLoadFlags *aLoadFlags);

    nsresult (STDMETHODCALLTYPE *SetLoadFlags)(
        nsIChannel *This,
        nsLoadFlags aLoadFlags);

    /*** nsIChannel methods ***/
    nsresult (STDMETHODCALLTYPE *GetOriginalURI)(
        nsIChannel *This,
        nsIURI **aOriginalURI);

    nsresult (STDMETHODCALLTYPE *SetOriginalURI)(
        nsIChannel *This,
        nsIURI *aOriginalURI);

    nsresult (STDMETHODCALLTYPE *GetURI)(
        nsIChannel *This,
        nsIURI **aURI);

    nsresult (STDMETHODCALLTYPE *GetOwner)(
        nsIChannel *This,
        nsISupports **aOwner);

    nsresult (STDMETHODCALLTYPE *SetOwner)(
        nsIChannel *This,
        nsISupports *aOwner);

    nsresult (STDMETHODCALLTYPE *GetNotificationCallbacks)(
        nsIChannel *This,
        nsIInterfaceRequestor **aNotificationCallbacks);

    nsresult (STDMETHODCALLTYPE *SetNotificationCallbacks)(
        nsIChannel *This,
        nsIInterfaceRequestor *aNotificationCallbacks);

    nsresult (STDMETHODCALLTYPE *GetSecurityInfo)(
        nsIChannel *This,
        nsISupports **aSecurityInfo);

    nsresult (STDMETHODCALLTYPE *GetContentType)(
        nsIChannel *This,
        nsACString *aContentType);

    nsresult (STDMETHODCALLTYPE *SetContentType)(
        nsIChannel *This,
        const nsACString *aContentType);

    nsresult (STDMETHODCALLTYPE *GetContentCharset)(
        nsIChannel *This,
        nsACString *aContentCharset);

    nsresult (STDMETHODCALLTYPE *SetContentCharset)(
        nsIChannel *This,
        const nsACString *aContentCharset);

    nsresult (STDMETHODCALLTYPE *GetContentLength)(
        nsIChannel *This,
        INT64 *aContentLength);

    nsresult (STDMETHODCALLTYPE *SetContentLength)(
        nsIChannel *This,
        INT64 aContentLength);

    nsresult (STDMETHODCALLTYPE *Open)(
        nsIChannel *This,
        nsIInputStream **_retval);

    nsresult (STDMETHODCALLTYPE *Open2)(
        nsIChannel *This,
        nsIInputStream **_retval);

    nsresult (STDMETHODCALLTYPE *AsyncOpen)(
        nsIChannel *This,
        nsIStreamListener *aListener,
        nsISupports *aContext);

    nsresult (STDMETHODCALLTYPE *AsyncOpen2)(
        nsIChannel *This,
        nsIStreamListener *aListener);

    nsresult (STDMETHODCALLTYPE *GetContentDisposition)(
        nsIChannel *This,
        UINT32 *aContentDisposition);

    nsresult (STDMETHODCALLTYPE *SetContentDisposition)(
        nsIChannel *This,
        UINT32 aContentDisposition);

    nsresult (STDMETHODCALLTYPE *GetContentDispositionFilename)(
        nsIChannel *This,
        nsAString *aContentDispositionFilename);

    nsresult (STDMETHODCALLTYPE *SetContentDispositionFilename)(
        nsIChannel *This,
        const nsAString *aContentDispositionFilename);

    nsresult (STDMETHODCALLTYPE *GetContentDispositionHeader)(
        nsIChannel *This,
        nsACString *aContentDispositionHeader);

    nsresult (STDMETHODCALLTYPE *GetLoadInfo)(
        nsIChannel *This,
        nsILoadInfo **aLoadInfo);

    nsresult (STDMETHODCALLTYPE *SetLoadInfo)(
        nsIChannel *This,
        nsILoadInfo *aLoadInfo);

    END_INTERFACE
} nsIChannelVtbl;

interface nsIChannel {
    CONST_VTBL nsIChannelVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIChannel_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIChannel_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIChannel_Release(This) (This)->lpVtbl->Release(This)
/*** nsIRequest methods ***/
#define nsIChannel_GetName(This,aName) (This)->lpVtbl->GetName(This,aName)
#define nsIChannel_IsPending(This,_retval) (This)->lpVtbl->IsPending(This,_retval)
#define nsIChannel_GetStatus(This,aStatus) (This)->lpVtbl->GetStatus(This,aStatus)
#define nsIChannel_Cancel(This,aStatus) (This)->lpVtbl->Cancel(This,aStatus)
#define nsIChannel_Suspend(This) (This)->lpVtbl->Suspend(This)
#define nsIChannel_Resume(This) (This)->lpVtbl->Resume(This)
#define nsIChannel_GetLoadGroup(This,aLoadGroup) (This)->lpVtbl->GetLoadGroup(This,aLoadGroup)
#define nsIChannel_SetLoadGroup(This,aLoadGroup) (This)->lpVtbl->SetLoadGroup(This,aLoadGroup)
#define nsIChannel_GetLoadFlags(This,aLoadFlags) (This)->lpVtbl->GetLoadFlags(This,aLoadFlags)
#define nsIChannel_SetLoadFlags(This,aLoadFlags) (This)->lpVtbl->SetLoadFlags(This,aLoadFlags)
/*** nsIChannel methods ***/
#define nsIChannel_GetOriginalURI(This,aOriginalURI) (This)->lpVtbl->GetOriginalURI(This,aOriginalURI)
#define nsIChannel_SetOriginalURI(This,aOriginalURI) (This)->lpVtbl->SetOriginalURI(This,aOriginalURI)
#define nsIChannel_GetURI(This,aURI) (This)->lpVtbl->GetURI(This,aURI)
#define nsIChannel_GetOwner(This,aOwner) (This)->lpVtbl->GetOwner(This,aOwner)
#define nsIChannel_SetOwner(This,aOwner) (This)->lpVtbl->SetOwner(This,aOwner)
#define nsIChannel_GetNotificationCallbacks(This,aNotificationCallbacks) (This)->lpVtbl->GetNotificationCallbacks(This,aNotificationCallbacks)
#define nsIChannel_SetNotificationCallbacks(This,aNotificationCallbacks) (This)->lpVtbl->SetNotificationCallbacks(This,aNotificationCallbacks)
#define nsIChannel_GetSecurityInfo(This,aSecurityInfo) (This)->lpVtbl->GetSecurityInfo(This,aSecurityInfo)
#define nsIChannel_GetContentType(This,aContentType) (This)->lpVtbl->GetContentType(This,aContentType)
#define nsIChannel_SetContentType(This,aContentType) (This)->lpVtbl->SetContentType(This,aContentType)
#define nsIChannel_GetContentCharset(This,aContentCharset) (This)->lpVtbl->GetContentCharset(This,aContentCharset)
#define nsIChannel_SetContentCharset(This,aContentCharset) (This)->lpVtbl->SetContentCharset(This,aContentCharset)
#define nsIChannel_GetContentLength(This,aContentLength) (This)->lpVtbl->GetContentLength(This,aContentLength)
#define nsIChannel_SetContentLength(This,aContentLength) (This)->lpVtbl->SetContentLength(This,aContentLength)
#define nsIChannel_Open(This,_retval) (This)->lpVtbl->Open(This,_retval)
#define nsIChannel_Open2(This,_retval) (This)->lpVtbl->Open2(This,_retval)
#define nsIChannel_AsyncOpen(This,aListener,aContext) (This)->lpVtbl->AsyncOpen(This,aListener,aContext)
#define nsIChannel_AsyncOpen2(This,aListener) (This)->lpVtbl->AsyncOpen2(This,aListener)
#define nsIChannel_GetContentDisposition(This,aContentDisposition) (This)->lpVtbl->GetContentDisposition(This,aContentDisposition)
#define nsIChannel_SetContentDisposition(This,aContentDisposition) (This)->lpVtbl->SetContentDisposition(This,aContentDisposition)
#define nsIChannel_GetContentDispositionFilename(This,aContentDispositionFilename) (This)->lpVtbl->GetContentDispositionFilename(This,aContentDispositionFilename)
#define nsIChannel_SetContentDispositionFilename(This,aContentDispositionFilename) (This)->lpVtbl->SetContentDispositionFilename(This,aContentDispositionFilename)
#define nsIChannel_GetContentDispositionHeader(This,aContentDispositionHeader) (This)->lpVtbl->GetContentDispositionHeader(This,aContentDispositionHeader)
#define nsIChannel_GetLoadInfo(This,aLoadInfo) (This)->lpVtbl->GetLoadInfo(This,aLoadInfo)
#define nsIChannel_SetLoadInfo(This,aLoadInfo) (This)->lpVtbl->SetLoadInfo(This,aLoadInfo)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIChannel_QueryInterface(nsIChannel* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIChannel_AddRef(nsIChannel* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIChannel_Release(nsIChannel* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIRequest methods ***/
static FORCEINLINE nsresult nsIChannel_GetName(nsIChannel* This,nsACString *aName) {
    return This->lpVtbl->GetName(This,aName);
}
static FORCEINLINE nsresult nsIChannel_IsPending(nsIChannel* This,cpp_bool *_retval) {
    return This->lpVtbl->IsPending(This,_retval);
}
static FORCEINLINE nsresult nsIChannel_GetStatus(nsIChannel* This,nsresult *aStatus) {
    return This->lpVtbl->GetStatus(This,aStatus);
}
static FORCEINLINE nsresult nsIChannel_Cancel(nsIChannel* This,nsresult aStatus) {
    return This->lpVtbl->Cancel(This,aStatus);
}
static FORCEINLINE nsresult nsIChannel_Suspend(nsIChannel* This) {
    return This->lpVtbl->Suspend(This);
}
static FORCEINLINE nsresult nsIChannel_Resume(nsIChannel* This) {
    return This->lpVtbl->Resume(This);
}
static FORCEINLINE nsresult nsIChannel_GetLoadGroup(nsIChannel* This,nsILoadGroup **aLoadGroup) {
    return This->lpVtbl->GetLoadGroup(This,aLoadGroup);
}
static FORCEINLINE nsresult nsIChannel_SetLoadGroup(nsIChannel* This,nsILoadGroup *aLoadGroup) {
    return This->lpVtbl->SetLoadGroup(This,aLoadGroup);
}
static FORCEINLINE nsresult nsIChannel_GetLoadFlags(nsIChannel* This,nsLoadFlags *aLoadFlags) {
    return This->lpVtbl->GetLoadFlags(This,aLoadFlags);
}
static FORCEINLINE nsresult nsIChannel_SetLoadFlags(nsIChannel* This,nsLoadFlags aLoadFlags) {
    return This->lpVtbl->SetLoadFlags(This,aLoadFlags);
}
/*** nsIChannel methods ***/
static FORCEINLINE nsresult nsIChannel_GetOriginalURI(nsIChannel* This,nsIURI **aOriginalURI) {
    return This->lpVtbl->GetOriginalURI(This,aOriginalURI);
}
static FORCEINLINE nsresult nsIChannel_SetOriginalURI(nsIChannel* This,nsIURI *aOriginalURI) {
    return This->lpVtbl->SetOriginalURI(This,aOriginalURI);
}
static FORCEINLINE nsresult nsIChannel_GetURI(nsIChannel* This,nsIURI **aURI) {
    return This->lpVtbl->GetURI(This,aURI);
}
static FORCEINLINE nsresult nsIChannel_GetOwner(nsIChannel* This,nsISupports **aOwner) {
    return This->lpVtbl->GetOwner(This,aOwner);
}
static FORCEINLINE nsresult nsIChannel_SetOwner(nsIChannel* This,nsISupports *aOwner) {
    return This->lpVtbl->SetOwner(This,aOwner);
}
static FORCEINLINE nsresult nsIChannel_GetNotificationCallbacks(nsIChannel* This,nsIInterfaceRequestor **aNotificationCallbacks) {
    return This->lpVtbl->GetNotificationCallbacks(This,aNotificationCallbacks);
}
static FORCEINLINE nsresult nsIChannel_SetNotificationCallbacks(nsIChannel* This,nsIInterfaceRequestor *aNotificationCallbacks) {
    return This->lpVtbl->SetNotificationCallbacks(This,aNotificationCallbacks);
}
static FORCEINLINE nsresult nsIChannel_GetSecurityInfo(nsIChannel* This,nsISupports **aSecurityInfo) {
    return This->lpVtbl->GetSecurityInfo(This,aSecurityInfo);
}
static FORCEINLINE nsresult nsIChannel_GetContentType(nsIChannel* This,nsACString *aContentType) {
    return This->lpVtbl->GetContentType(This,aContentType);
}
static FORCEINLINE nsresult nsIChannel_SetContentType(nsIChannel* This,const nsACString *aContentType) {
    return This->lpVtbl->SetContentType(This,aContentType);
}
static FORCEINLINE nsresult nsIChannel_GetContentCharset(nsIChannel* This,nsACString *aContentCharset) {
    return This->lpVtbl->GetContentCharset(This,aContentCharset);
}
static FORCEINLINE nsresult nsIChannel_SetContentCharset(nsIChannel* This,const nsACString *aContentCharset) {
    return This->lpVtbl->SetContentCharset(This,aContentCharset);
}
static FORCEINLINE nsresult nsIChannel_GetContentLength(nsIChannel* This,INT64 *aContentLength) {
    return This->lpVtbl->GetContentLength(This,aContentLength);
}
static FORCEINLINE nsresult nsIChannel_SetContentLength(nsIChannel* This,INT64 aContentLength) {
    return This->lpVtbl->SetContentLength(This,aContentLength);
}
static FORCEINLINE nsresult nsIChannel_Open(nsIChannel* This,nsIInputStream **_retval) {
    return This->lpVtbl->Open(This,_retval);
}
static FORCEINLINE nsresult nsIChannel_Open2(nsIChannel* This,nsIInputStream **_retval) {
    return This->lpVtbl->Open2(This,_retval);
}
static FORCEINLINE nsresult nsIChannel_AsyncOpen(nsIChannel* This,nsIStreamListener *aListener,nsISupports *aContext) {
    return This->lpVtbl->AsyncOpen(This,aListener,aContext);
}
static FORCEINLINE nsresult nsIChannel_AsyncOpen2(nsIChannel* This,nsIStreamListener *aListener) {
    return This->lpVtbl->AsyncOpen2(This,aListener);
}
static FORCEINLINE nsresult nsIChannel_GetContentDisposition(nsIChannel* This,UINT32 *aContentDisposition) {
    return This->lpVtbl->GetContentDisposition(This,aContentDisposition);
}
static FORCEINLINE nsresult nsIChannel_SetContentDisposition(nsIChannel* This,UINT32 aContentDisposition) {
    return This->lpVtbl->SetContentDisposition(This,aContentDisposition);
}
static FORCEINLINE nsresult nsIChannel_GetContentDispositionFilename(nsIChannel* This,nsAString *aContentDispositionFilename) {
    return This->lpVtbl->GetContentDispositionFilename(This,aContentDispositionFilename);
}
static FORCEINLINE nsresult nsIChannel_SetContentDispositionFilename(nsIChannel* This,const nsAString *aContentDispositionFilename) {
    return This->lpVtbl->SetContentDispositionFilename(This,aContentDispositionFilename);
}
static FORCEINLINE nsresult nsIChannel_GetContentDispositionHeader(nsIChannel* This,nsACString *aContentDispositionHeader) {
    return This->lpVtbl->GetContentDispositionHeader(This,aContentDispositionHeader);
}
static FORCEINLINE nsresult nsIChannel_GetLoadInfo(nsIChannel* This,nsILoadInfo **aLoadInfo) {
    return This->lpVtbl->GetLoadInfo(This,aLoadInfo);
}
static FORCEINLINE nsresult nsIChannel_SetLoadInfo(nsIChannel* This,nsILoadInfo *aLoadInfo) {
    return This->lpVtbl->SetLoadInfo(This,aLoadInfo);
}
#endif
#endif

#endif


#endif  /* __nsIChannel_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIHttpHeaderVisitor interface
 */
#ifndef __nsIHttpHeaderVisitor_INTERFACE_DEFINED__
#define __nsIHttpHeaderVisitor_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIHttpHeaderVisitor, 0x35412859, 0xb9d9, 0x423c, 0x88,0x66, 0x2d,0x45,0x59,0xfd,0xd2,0xbe);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("35412859-b9d9-423c-8866-2d4559fdd2be")
nsIHttpHeaderVisitor : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE VisitHeader(
        const nsACString *aHeader,
        const nsACString *aValue) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIHttpHeaderVisitor, 0x35412859, 0xb9d9, 0x423c, 0x88,0x66, 0x2d,0x45,0x59,0xfd,0xd2,0xbe)
#endif
#else
typedef struct nsIHttpHeaderVisitorVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIHttpHeaderVisitor *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIHttpHeaderVisitor *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIHttpHeaderVisitor *This);

    /*** nsIHttpHeaderVisitor methods ***/
    nsresult (STDMETHODCALLTYPE *VisitHeader)(
        nsIHttpHeaderVisitor *This,
        const nsACString *aHeader,
        const nsACString *aValue);

    END_INTERFACE
} nsIHttpHeaderVisitorVtbl;

interface nsIHttpHeaderVisitor {
    CONST_VTBL nsIHttpHeaderVisitorVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIHttpHeaderVisitor_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIHttpHeaderVisitor_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIHttpHeaderVisitor_Release(This) (This)->lpVtbl->Release(This)
/*** nsIHttpHeaderVisitor methods ***/
#define nsIHttpHeaderVisitor_VisitHeader(This,aHeader,aValue) (This)->lpVtbl->VisitHeader(This,aHeader,aValue)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIHttpHeaderVisitor_QueryInterface(nsIHttpHeaderVisitor* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIHttpHeaderVisitor_AddRef(nsIHttpHeaderVisitor* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIHttpHeaderVisitor_Release(nsIHttpHeaderVisitor* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIHttpHeaderVisitor methods ***/
static FORCEINLINE nsresult nsIHttpHeaderVisitor_VisitHeader(nsIHttpHeaderVisitor* This,const nsACString *aHeader,const nsACString *aValue) {
    return This->lpVtbl->VisitHeader(This,aHeader,aValue);
}
#endif
#endif

#endif


#endif  /* __nsIHttpHeaderVisitor_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIHttpChannel interface
 */
#ifndef __nsIHttpChannel_INTERFACE_DEFINED__
#define __nsIHttpChannel_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIHttpChannel, 0xb2596105, 0x3d0d, 0x4e6a, 0x82,0x4f, 0x05,0x39,0x71,0x3b,0xb8,0x79);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("b2596105-3d0d-4e6a-824f-0539713bb879")
nsIHttpChannel : public nsIChannel
{
    virtual nsresult STDMETHODCALLTYPE GetRequestMethod(
        nsACString *aRequestMethod) = 0;

    virtual nsresult STDMETHODCALLTYPE SetRequestMethod(
        const nsACString *aRequestMethod) = 0;

    virtual nsresult STDMETHODCALLTYPE GetReferrer(
        nsIURI **aReferrer) = 0;

    virtual nsresult STDMETHODCALLTYPE SetReferrer(
        nsIURI *aReferrer) = 0;

    virtual nsresult STDMETHODCALLTYPE GetReferrerPolicy(
        UINT32 *aReferrerPolicy) = 0;

    virtual nsresult STDMETHODCALLTYPE SetReferrerWithPolicy(
        nsIURI *referrer,
        UINT32 referrerPolicy) = 0;

    virtual nsresult STDMETHODCALLTYPE GetProtocolVersion(
        nsACString *aProtocolVersion) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTransferSize(
        UINT64 *aTransferSize) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDecodedBodySize(
        UINT64 *aDecodedBodySize) = 0;

    virtual nsresult STDMETHODCALLTYPE GetEncodedBodySize(
        UINT64 *aEncodedBodySize) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRequestHeader(
        const nsACString *aHeader,
        nsACString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetRequestHeader(
        const nsACString *aHeader,
        const nsACString *aValue,
        cpp_bool aMerge) = 0;

    virtual nsresult STDMETHODCALLTYPE SetEmptyRequestHeader(
        const nsACString *aHeader) = 0;

    virtual nsresult STDMETHODCALLTYPE VisitRequestHeaders(
        nsIHttpHeaderVisitor *aVisitor) = 0;

    virtual nsresult STDMETHODCALLTYPE VisitNonDefaultRequestHeaders(
        nsIHttpHeaderVisitor *aVisitor) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAllowPipelining(
        cpp_bool *aAllowPipelining) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAllowPipelining(
        cpp_bool aAllowPipelining) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAllowSTS(
        cpp_bool *aAllowSTS) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAllowSTS(
        cpp_bool aAllowSTS) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRedirectionLimit(
        UINT32 *aRedirectionLimit) = 0;

    virtual nsresult STDMETHODCALLTYPE SetRedirectionLimit(
        UINT32 aRedirectionLimit) = 0;

    virtual nsresult STDMETHODCALLTYPE GetResponseStatus(
        UINT32 *aResponseStatus) = 0;

    virtual nsresult STDMETHODCALLTYPE GetResponseStatusText(
        nsACString *aResponseStatusText) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRequestSucceeded(
        cpp_bool *aRequestSucceeded) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsMainDocumentChannel(
        cpp_bool *aIsMainDocumentChannel) = 0;

    virtual nsresult STDMETHODCALLTYPE SetIsMainDocumentChannel(
        cpp_bool aIsMainDocumentChannel) = 0;

    virtual nsresult STDMETHODCALLTYPE GetResponseHeader(
        const nsACString *header,
        nsACString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetResponseHeader(
        const nsACString *header,
        const nsACString *value,
        cpp_bool merge) = 0;

    virtual nsresult STDMETHODCALLTYPE VisitResponseHeaders(
        nsIHttpHeaderVisitor *aVisitor) = 0;

    virtual nsresult STDMETHODCALLTYPE IsNoStoreResponse(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE IsNoCacheResponse(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE IsPrivateResponse(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE RedirectTo(
        nsIURI *aTargetURI) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSchedulingContextID(
        nsID *aSchedulingContextID) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSchedulingContextID(
        const nsID aSchedulingContextID) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIHttpChannel, 0xb2596105, 0x3d0d, 0x4e6a, 0x82,0x4f, 0x05,0x39,0x71,0x3b,0xb8,0x79)
#endif
#else
typedef struct nsIHttpChannelVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIHttpChannel *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIHttpChannel *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIHttpChannel *This);

    /*** nsIRequest methods ***/
    nsresult (STDMETHODCALLTYPE *GetName)(
        nsIHttpChannel *This,
        nsACString *aName);

    nsresult (STDMETHODCALLTYPE *IsPending)(
        nsIHttpChannel *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetStatus)(
        nsIHttpChannel *This,
        nsresult *aStatus);

    nsresult (STDMETHODCALLTYPE *Cancel)(
        nsIHttpChannel *This,
        nsresult aStatus);

    nsresult (STDMETHODCALLTYPE *Suspend)(
        nsIHttpChannel *This);

    nsresult (STDMETHODCALLTYPE *Resume)(
        nsIHttpChannel *This);

    nsresult (STDMETHODCALLTYPE *GetLoadGroup)(
        nsIHttpChannel *This,
        nsILoadGroup **aLoadGroup);

    nsresult (STDMETHODCALLTYPE *SetLoadGroup)(
        nsIHttpChannel *This,
        nsILoadGroup *aLoadGroup);

    nsresult (STDMETHODCALLTYPE *GetLoadFlags)(
        nsIHttpChannel *This,
        nsLoadFlags *aLoadFlags);

    nsresult (STDMETHODCALLTYPE *SetLoadFlags)(
        nsIHttpChannel *This,
        nsLoadFlags aLoadFlags);

    /*** nsIChannel methods ***/
    nsresult (STDMETHODCALLTYPE *GetOriginalURI)(
        nsIHttpChannel *This,
        nsIURI **aOriginalURI);

    nsresult (STDMETHODCALLTYPE *SetOriginalURI)(
        nsIHttpChannel *This,
        nsIURI *aOriginalURI);

    nsresult (STDMETHODCALLTYPE *GetURI)(
        nsIHttpChannel *This,
        nsIURI **aURI);

    nsresult (STDMETHODCALLTYPE *GetOwner)(
        nsIHttpChannel *This,
        nsISupports **aOwner);

    nsresult (STDMETHODCALLTYPE *SetOwner)(
        nsIHttpChannel *This,
        nsISupports *aOwner);

    nsresult (STDMETHODCALLTYPE *GetNotificationCallbacks)(
        nsIHttpChannel *This,
        nsIInterfaceRequestor **aNotificationCallbacks);

    nsresult (STDMETHODCALLTYPE *SetNotificationCallbacks)(
        nsIHttpChannel *This,
        nsIInterfaceRequestor *aNotificationCallbacks);

    nsresult (STDMETHODCALLTYPE *GetSecurityInfo)(
        nsIHttpChannel *This,
        nsISupports **aSecurityInfo);

    nsresult (STDMETHODCALLTYPE *GetContentType)(
        nsIHttpChannel *This,
        nsACString *aContentType);

    nsresult (STDMETHODCALLTYPE *SetContentType)(
        nsIHttpChannel *This,
        const nsACString *aContentType);

    nsresult (STDMETHODCALLTYPE *GetContentCharset)(
        nsIHttpChannel *This,
        nsACString *aContentCharset);

    nsresult (STDMETHODCALLTYPE *SetContentCharset)(
        nsIHttpChannel *This,
        const nsACString *aContentCharset);

    nsresult (STDMETHODCALLTYPE *GetContentLength)(
        nsIHttpChannel *This,
        INT64 *aContentLength);

    nsresult (STDMETHODCALLTYPE *SetContentLength)(
        nsIHttpChannel *This,
        INT64 aContentLength);

    nsresult (STDMETHODCALLTYPE *Open)(
        nsIHttpChannel *This,
        nsIInputStream **_retval);

    nsresult (STDMETHODCALLTYPE *Open2)(
        nsIHttpChannel *This,
        nsIInputStream **_retval);

    nsresult (STDMETHODCALLTYPE *AsyncOpen)(
        nsIHttpChannel *This,
        nsIStreamListener *aListener,
        nsISupports *aContext);

    nsresult (STDMETHODCALLTYPE *AsyncOpen2)(
        nsIHttpChannel *This,
        nsIStreamListener *aListener);

    nsresult (STDMETHODCALLTYPE *GetContentDisposition)(
        nsIHttpChannel *This,
        UINT32 *aContentDisposition);

    nsresult (STDMETHODCALLTYPE *SetContentDisposition)(
        nsIHttpChannel *This,
        UINT32 aContentDisposition);

    nsresult (STDMETHODCALLTYPE *GetContentDispositionFilename)(
        nsIHttpChannel *This,
        nsAString *aContentDispositionFilename);

    nsresult (STDMETHODCALLTYPE *SetContentDispositionFilename)(
        nsIHttpChannel *This,
        const nsAString *aContentDispositionFilename);

    nsresult (STDMETHODCALLTYPE *GetContentDispositionHeader)(
        nsIHttpChannel *This,
        nsACString *aContentDispositionHeader);

    nsresult (STDMETHODCALLTYPE *GetLoadInfo)(
        nsIHttpChannel *This,
        nsILoadInfo **aLoadInfo);

    nsresult (STDMETHODCALLTYPE *SetLoadInfo)(
        nsIHttpChannel *This,
        nsILoadInfo *aLoadInfo);

    /*** nsIHttpChannel methods ***/
    nsresult (STDMETHODCALLTYPE *GetRequestMethod)(
        nsIHttpChannel *This,
        nsACString *aRequestMethod);

    nsresult (STDMETHODCALLTYPE *SetRequestMethod)(
        nsIHttpChannel *This,
        const nsACString *aRequestMethod);

    nsresult (STDMETHODCALLTYPE *GetReferrer)(
        nsIHttpChannel *This,
        nsIURI **aReferrer);

    nsresult (STDMETHODCALLTYPE *SetReferrer)(
        nsIHttpChannel *This,
        nsIURI *aReferrer);

    nsresult (STDMETHODCALLTYPE *GetReferrerPolicy)(
        nsIHttpChannel *This,
        UINT32 *aReferrerPolicy);

    nsresult (STDMETHODCALLTYPE *SetReferrerWithPolicy)(
        nsIHttpChannel *This,
        nsIURI *referrer,
        UINT32 referrerPolicy);

    nsresult (STDMETHODCALLTYPE *GetProtocolVersion)(
        nsIHttpChannel *This,
        nsACString *aProtocolVersion);

    nsresult (STDMETHODCALLTYPE *GetTransferSize)(
        nsIHttpChannel *This,
        UINT64 *aTransferSize);

    nsresult (STDMETHODCALLTYPE *GetDecodedBodySize)(
        nsIHttpChannel *This,
        UINT64 *aDecodedBodySize);

    nsresult (STDMETHODCALLTYPE *GetEncodedBodySize)(
        nsIHttpChannel *This,
        UINT64 *aEncodedBodySize);

    nsresult (STDMETHODCALLTYPE *GetRequestHeader)(
        nsIHttpChannel *This,
        const nsACString *aHeader,
        nsACString *_retval);

    nsresult (STDMETHODCALLTYPE *SetRequestHeader)(
        nsIHttpChannel *This,
        const nsACString *aHeader,
        const nsACString *aValue,
        cpp_bool aMerge);

    nsresult (STDMETHODCALLTYPE *SetEmptyRequestHeader)(
        nsIHttpChannel *This,
        const nsACString *aHeader);

    nsresult (STDMETHODCALLTYPE *VisitRequestHeaders)(
        nsIHttpChannel *This,
        nsIHttpHeaderVisitor *aVisitor);

    nsresult (STDMETHODCALLTYPE *VisitNonDefaultRequestHeaders)(
        nsIHttpChannel *This,
        nsIHttpHeaderVisitor *aVisitor);

    nsresult (STDMETHODCALLTYPE *GetAllowPipelining)(
        nsIHttpChannel *This,
        cpp_bool *aAllowPipelining);

    nsresult (STDMETHODCALLTYPE *SetAllowPipelining)(
        nsIHttpChannel *This,
        cpp_bool aAllowPipelining);

    nsresult (STDMETHODCALLTYPE *GetAllowSTS)(
        nsIHttpChannel *This,
        cpp_bool *aAllowSTS);

    nsresult (STDMETHODCALLTYPE *SetAllowSTS)(
        nsIHttpChannel *This,
        cpp_bool aAllowSTS);

    nsresult (STDMETHODCALLTYPE *GetRedirectionLimit)(
        nsIHttpChannel *This,
        UINT32 *aRedirectionLimit);

    nsresult (STDMETHODCALLTYPE *SetRedirectionLimit)(
        nsIHttpChannel *This,
        UINT32 aRedirectionLimit);

    nsresult (STDMETHODCALLTYPE *GetResponseStatus)(
        nsIHttpChannel *This,
        UINT32 *aResponseStatus);

    nsresult (STDMETHODCALLTYPE *GetResponseStatusText)(
        nsIHttpChannel *This,
        nsACString *aResponseStatusText);

    nsresult (STDMETHODCALLTYPE *GetRequestSucceeded)(
        nsIHttpChannel *This,
        cpp_bool *aRequestSucceeded);

    nsresult (STDMETHODCALLTYPE *GetIsMainDocumentChannel)(
        nsIHttpChannel *This,
        cpp_bool *aIsMainDocumentChannel);

    nsresult (STDMETHODCALLTYPE *SetIsMainDocumentChannel)(
        nsIHttpChannel *This,
        cpp_bool aIsMainDocumentChannel);

    nsresult (STDMETHODCALLTYPE *GetResponseHeader)(
        nsIHttpChannel *This,
        const nsACString *header,
        nsACString *_retval);

    nsresult (STDMETHODCALLTYPE *SetResponseHeader)(
        nsIHttpChannel *This,
        const nsACString *header,
        const nsACString *value,
        cpp_bool merge);

    nsresult (STDMETHODCALLTYPE *VisitResponseHeaders)(
        nsIHttpChannel *This,
        nsIHttpHeaderVisitor *aVisitor);

    nsresult (STDMETHODCALLTYPE *IsNoStoreResponse)(
        nsIHttpChannel *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *IsNoCacheResponse)(
        nsIHttpChannel *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *IsPrivateResponse)(
        nsIHttpChannel *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *RedirectTo)(
        nsIHttpChannel *This,
        nsIURI *aTargetURI);

    nsresult (STDMETHODCALLTYPE *GetSchedulingContextID)(
        nsIHttpChannel *This,
        nsID *aSchedulingContextID);

    nsresult (STDMETHODCALLTYPE *SetSchedulingContextID)(
        nsIHttpChannel *This,
        const nsID aSchedulingContextID);

    END_INTERFACE
} nsIHttpChannelVtbl;

interface nsIHttpChannel {
    CONST_VTBL nsIHttpChannelVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIHttpChannel_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIHttpChannel_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIHttpChannel_Release(This) (This)->lpVtbl->Release(This)
/*** nsIRequest methods ***/
#define nsIHttpChannel_GetName(This,aName) (This)->lpVtbl->GetName(This,aName)
#define nsIHttpChannel_IsPending(This,_retval) (This)->lpVtbl->IsPending(This,_retval)
#define nsIHttpChannel_GetStatus(This,aStatus) (This)->lpVtbl->GetStatus(This,aStatus)
#define nsIHttpChannel_Cancel(This,aStatus) (This)->lpVtbl->Cancel(This,aStatus)
#define nsIHttpChannel_Suspend(This) (This)->lpVtbl->Suspend(This)
#define nsIHttpChannel_Resume(This) (This)->lpVtbl->Resume(This)
#define nsIHttpChannel_GetLoadGroup(This,aLoadGroup) (This)->lpVtbl->GetLoadGroup(This,aLoadGroup)
#define nsIHttpChannel_SetLoadGroup(This,aLoadGroup) (This)->lpVtbl->SetLoadGroup(This,aLoadGroup)
#define nsIHttpChannel_GetLoadFlags(This,aLoadFlags) (This)->lpVtbl->GetLoadFlags(This,aLoadFlags)
#define nsIHttpChannel_SetLoadFlags(This,aLoadFlags) (This)->lpVtbl->SetLoadFlags(This,aLoadFlags)
/*** nsIChannel methods ***/
#define nsIHttpChannel_GetOriginalURI(This,aOriginalURI) (This)->lpVtbl->GetOriginalURI(This,aOriginalURI)
#define nsIHttpChannel_SetOriginalURI(This,aOriginalURI) (This)->lpVtbl->SetOriginalURI(This,aOriginalURI)
#define nsIHttpChannel_GetURI(This,aURI) (This)->lpVtbl->GetURI(This,aURI)
#define nsIHttpChannel_GetOwner(This,aOwner) (This)->lpVtbl->GetOwner(This,aOwner)
#define nsIHttpChannel_SetOwner(This,aOwner) (This)->lpVtbl->SetOwner(This,aOwner)
#define nsIHttpChannel_GetNotificationCallbacks(This,aNotificationCallbacks) (This)->lpVtbl->GetNotificationCallbacks(This,aNotificationCallbacks)
#define nsIHttpChannel_SetNotificationCallbacks(This,aNotificationCallbacks) (This)->lpVtbl->SetNotificationCallbacks(This,aNotificationCallbacks)
#define nsIHttpChannel_GetSecurityInfo(This,aSecurityInfo) (This)->lpVtbl->GetSecurityInfo(This,aSecurityInfo)
#define nsIHttpChannel_GetContentType(This,aContentType) (This)->lpVtbl->GetContentType(This,aContentType)
#define nsIHttpChannel_SetContentType(This,aContentType) (This)->lpVtbl->SetContentType(This,aContentType)
#define nsIHttpChannel_GetContentCharset(This,aContentCharset) (This)->lpVtbl->GetContentCharset(This,aContentCharset)
#define nsIHttpChannel_SetContentCharset(This,aContentCharset) (This)->lpVtbl->SetContentCharset(This,aContentCharset)
#define nsIHttpChannel_GetContentLength(This,aContentLength) (This)->lpVtbl->GetContentLength(This,aContentLength)
#define nsIHttpChannel_SetContentLength(This,aContentLength) (This)->lpVtbl->SetContentLength(This,aContentLength)
#define nsIHttpChannel_Open(This,_retval) (This)->lpVtbl->Open(This,_retval)
#define nsIHttpChannel_Open2(This,_retval) (This)->lpVtbl->Open2(This,_retval)
#define nsIHttpChannel_AsyncOpen(This,aListener,aContext) (This)->lpVtbl->AsyncOpen(This,aListener,aContext)
#define nsIHttpChannel_AsyncOpen2(This,aListener) (This)->lpVtbl->AsyncOpen2(This,aListener)
#define nsIHttpChannel_GetContentDisposition(This,aContentDisposition) (This)->lpVtbl->GetContentDisposition(This,aContentDisposition)
#define nsIHttpChannel_SetContentDisposition(This,aContentDisposition) (This)->lpVtbl->SetContentDisposition(This,aContentDisposition)
#define nsIHttpChannel_GetContentDispositionFilename(This,aContentDispositionFilename) (This)->lpVtbl->GetContentDispositionFilename(This,aContentDispositionFilename)
#define nsIHttpChannel_SetContentDispositionFilename(This,aContentDispositionFilename) (This)->lpVtbl->SetContentDispositionFilename(This,aContentDispositionFilename)
#define nsIHttpChannel_GetContentDispositionHeader(This,aContentDispositionHeader) (This)->lpVtbl->GetContentDispositionHeader(This,aContentDispositionHeader)
#define nsIHttpChannel_GetLoadInfo(This,aLoadInfo) (This)->lpVtbl->GetLoadInfo(This,aLoadInfo)
#define nsIHttpChannel_SetLoadInfo(This,aLoadInfo) (This)->lpVtbl->SetLoadInfo(This,aLoadInfo)
/*** nsIHttpChannel methods ***/
#define nsIHttpChannel_GetRequestMethod(This,aRequestMethod) (This)->lpVtbl->GetRequestMethod(This,aRequestMethod)
#define nsIHttpChannel_SetRequestMethod(This,aRequestMethod) (This)->lpVtbl->SetRequestMethod(This,aRequestMethod)
#define nsIHttpChannel_GetReferrer(This,aReferrer) (This)->lpVtbl->GetReferrer(This,aReferrer)
#define nsIHttpChannel_SetReferrer(This,aReferrer) (This)->lpVtbl->SetReferrer(This,aReferrer)
#define nsIHttpChannel_GetReferrerPolicy(This,aReferrerPolicy) (This)->lpVtbl->GetReferrerPolicy(This,aReferrerPolicy)
#define nsIHttpChannel_SetReferrerWithPolicy(This,referrer,referrerPolicy) (This)->lpVtbl->SetReferrerWithPolicy(This,referrer,referrerPolicy)
#define nsIHttpChannel_GetProtocolVersion(This,aProtocolVersion) (This)->lpVtbl->GetProtocolVersion(This,aProtocolVersion)
#define nsIHttpChannel_GetTransferSize(This,aTransferSize) (This)->lpVtbl->GetTransferSize(This,aTransferSize)
#define nsIHttpChannel_GetDecodedBodySize(This,aDecodedBodySize) (This)->lpVtbl->GetDecodedBodySize(This,aDecodedBodySize)
#define nsIHttpChannel_GetEncodedBodySize(This,aEncodedBodySize) (This)->lpVtbl->GetEncodedBodySize(This,aEncodedBodySize)
#define nsIHttpChannel_GetRequestHeader(This,aHeader,_retval) (This)->lpVtbl->GetRequestHeader(This,aHeader,_retval)
#define nsIHttpChannel_SetRequestHeader(This,aHeader,aValue,aMerge) (This)->lpVtbl->SetRequestHeader(This,aHeader,aValue,aMerge)
#define nsIHttpChannel_SetEmptyRequestHeader(This,aHeader) (This)->lpVtbl->SetEmptyRequestHeader(This,aHeader)
#define nsIHttpChannel_VisitRequestHeaders(This,aVisitor) (This)->lpVtbl->VisitRequestHeaders(This,aVisitor)
#define nsIHttpChannel_VisitNonDefaultRequestHeaders(This,aVisitor) (This)->lpVtbl->VisitNonDefaultRequestHeaders(This,aVisitor)
#define nsIHttpChannel_GetAllowPipelining(This,aAllowPipelining) (This)->lpVtbl->GetAllowPipelining(This,aAllowPipelining)
#define nsIHttpChannel_SetAllowPipelining(This,aAllowPipelining) (This)->lpVtbl->SetAllowPipelining(This,aAllowPipelining)
#define nsIHttpChannel_GetAllowSTS(This,aAllowSTS) (This)->lpVtbl->GetAllowSTS(This,aAllowSTS)
#define nsIHttpChannel_SetAllowSTS(This,aAllowSTS) (This)->lpVtbl->SetAllowSTS(This,aAllowSTS)
#define nsIHttpChannel_GetRedirectionLimit(This,aRedirectionLimit) (This)->lpVtbl->GetRedirectionLimit(This,aRedirectionLimit)
#define nsIHttpChannel_SetRedirectionLimit(This,aRedirectionLimit) (This)->lpVtbl->SetRedirectionLimit(This,aRedirectionLimit)
#define nsIHttpChannel_GetResponseStatus(This,aResponseStatus) (This)->lpVtbl->GetResponseStatus(This,aResponseStatus)
#define nsIHttpChannel_GetResponseStatusText(This,aResponseStatusText) (This)->lpVtbl->GetResponseStatusText(This,aResponseStatusText)
#define nsIHttpChannel_GetRequestSucceeded(This,aRequestSucceeded) (This)->lpVtbl->GetRequestSucceeded(This,aRequestSucceeded)
#define nsIHttpChannel_GetIsMainDocumentChannel(This,aIsMainDocumentChannel) (This)->lpVtbl->GetIsMainDocumentChannel(This,aIsMainDocumentChannel)
#define nsIHttpChannel_SetIsMainDocumentChannel(This,aIsMainDocumentChannel) (This)->lpVtbl->SetIsMainDocumentChannel(This,aIsMainDocumentChannel)
#define nsIHttpChannel_GetResponseHeader(This,header,_retval) (This)->lpVtbl->GetResponseHeader(This,header,_retval)
#define nsIHttpChannel_SetResponseHeader(This,header,value,merge) (This)->lpVtbl->SetResponseHeader(This,header,value,merge)
#define nsIHttpChannel_VisitResponseHeaders(This,aVisitor) (This)->lpVtbl->VisitResponseHeaders(This,aVisitor)
#define nsIHttpChannel_IsNoStoreResponse(This,_retval) (This)->lpVtbl->IsNoStoreResponse(This,_retval)
#define nsIHttpChannel_IsNoCacheResponse(This,_retval) (This)->lpVtbl->IsNoCacheResponse(This,_retval)
#define nsIHttpChannel_IsPrivateResponse(This,_retval) (This)->lpVtbl->IsPrivateResponse(This,_retval)
#define nsIHttpChannel_RedirectTo(This,aTargetURI) (This)->lpVtbl->RedirectTo(This,aTargetURI)
#define nsIHttpChannel_GetSchedulingContextID(This,aSchedulingContextID) (This)->lpVtbl->GetSchedulingContextID(This,aSchedulingContextID)
#define nsIHttpChannel_SetSchedulingContextID(This,aSchedulingContextID) (This)->lpVtbl->SetSchedulingContextID(This,aSchedulingContextID)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIHttpChannel_QueryInterface(nsIHttpChannel* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIHttpChannel_AddRef(nsIHttpChannel* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIHttpChannel_Release(nsIHttpChannel* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIRequest methods ***/
static FORCEINLINE nsresult nsIHttpChannel_GetName(nsIHttpChannel* This,nsACString *aName) {
    return This->lpVtbl->GetName(This,aName);
}
static FORCEINLINE nsresult nsIHttpChannel_IsPending(nsIHttpChannel* This,cpp_bool *_retval) {
    return This->lpVtbl->IsPending(This,_retval);
}
static FORCEINLINE nsresult nsIHttpChannel_GetStatus(nsIHttpChannel* This,nsresult *aStatus) {
    return This->lpVtbl->GetStatus(This,aStatus);
}
static FORCEINLINE nsresult nsIHttpChannel_Cancel(nsIHttpChannel* This,nsresult aStatus) {
    return This->lpVtbl->Cancel(This,aStatus);
}
static FORCEINLINE nsresult nsIHttpChannel_Suspend(nsIHttpChannel* This) {
    return This->lpVtbl->Suspend(This);
}
static FORCEINLINE nsresult nsIHttpChannel_Resume(nsIHttpChannel* This) {
    return This->lpVtbl->Resume(This);
}
static FORCEINLINE nsresult nsIHttpChannel_GetLoadGroup(nsIHttpChannel* This,nsILoadGroup **aLoadGroup) {
    return This->lpVtbl->GetLoadGroup(This,aLoadGroup);
}
static FORCEINLINE nsresult nsIHttpChannel_SetLoadGroup(nsIHttpChannel* This,nsILoadGroup *aLoadGroup) {
    return This->lpVtbl->SetLoadGroup(This,aLoadGroup);
}
static FORCEINLINE nsresult nsIHttpChannel_GetLoadFlags(nsIHttpChannel* This,nsLoadFlags *aLoadFlags) {
    return This->lpVtbl->GetLoadFlags(This,aLoadFlags);
}
static FORCEINLINE nsresult nsIHttpChannel_SetLoadFlags(nsIHttpChannel* This,nsLoadFlags aLoadFlags) {
    return This->lpVtbl->SetLoadFlags(This,aLoadFlags);
}
/*** nsIChannel methods ***/
static FORCEINLINE nsresult nsIHttpChannel_GetOriginalURI(nsIHttpChannel* This,nsIURI **aOriginalURI) {
    return This->lpVtbl->GetOriginalURI(This,aOriginalURI);
}
static FORCEINLINE nsresult nsIHttpChannel_SetOriginalURI(nsIHttpChannel* This,nsIURI *aOriginalURI) {
    return This->lpVtbl->SetOriginalURI(This,aOriginalURI);
}
static FORCEINLINE nsresult nsIHttpChannel_GetURI(nsIHttpChannel* This,nsIURI **aURI) {
    return This->lpVtbl->GetURI(This,aURI);
}
static FORCEINLINE nsresult nsIHttpChannel_GetOwner(nsIHttpChannel* This,nsISupports **aOwner) {
    return This->lpVtbl->GetOwner(This,aOwner);
}
static FORCEINLINE nsresult nsIHttpChannel_SetOwner(nsIHttpChannel* This,nsISupports *aOwner) {
    return This->lpVtbl->SetOwner(This,aOwner);
}
static FORCEINLINE nsresult nsIHttpChannel_GetNotificationCallbacks(nsIHttpChannel* This,nsIInterfaceRequestor **aNotificationCallbacks) {
    return This->lpVtbl->GetNotificationCallbacks(This,aNotificationCallbacks);
}
static FORCEINLINE nsresult nsIHttpChannel_SetNotificationCallbacks(nsIHttpChannel* This,nsIInterfaceRequestor *aNotificationCallbacks) {
    return This->lpVtbl->SetNotificationCallbacks(This,aNotificationCallbacks);
}
static FORCEINLINE nsresult nsIHttpChannel_GetSecurityInfo(nsIHttpChannel* This,nsISupports **aSecurityInfo) {
    return This->lpVtbl->GetSecurityInfo(This,aSecurityInfo);
}
static FORCEINLINE nsresult nsIHttpChannel_GetContentType(nsIHttpChannel* This,nsACString *aContentType) {
    return This->lpVtbl->GetContentType(This,aContentType);
}
static FORCEINLINE nsresult nsIHttpChannel_SetContentType(nsIHttpChannel* This,const nsACString *aContentType) {
    return This->lpVtbl->SetContentType(This,aContentType);
}
static FORCEINLINE nsresult nsIHttpChannel_GetContentCharset(nsIHttpChannel* This,nsACString *aContentCharset) {
    return This->lpVtbl->GetContentCharset(This,aContentCharset);
}
static FORCEINLINE nsresult nsIHttpChannel_SetContentCharset(nsIHttpChannel* This,const nsACString *aContentCharset) {
    return This->lpVtbl->SetContentCharset(This,aContentCharset);
}
static FORCEINLINE nsresult nsIHttpChannel_GetContentLength(nsIHttpChannel* This,INT64 *aContentLength) {
    return This->lpVtbl->GetContentLength(This,aContentLength);
}
static FORCEINLINE nsresult nsIHttpChannel_SetContentLength(nsIHttpChannel* This,INT64 aContentLength) {
    return This->lpVtbl->SetContentLength(This,aContentLength);
}
static FORCEINLINE nsresult nsIHttpChannel_Open(nsIHttpChannel* This,nsIInputStream **_retval) {
    return This->lpVtbl->Open(This,_retval);
}
static FORCEINLINE nsresult nsIHttpChannel_Open2(nsIHttpChannel* This,nsIInputStream **_retval) {
    return This->lpVtbl->Open2(This,_retval);
}
static FORCEINLINE nsresult nsIHttpChannel_AsyncOpen(nsIHttpChannel* This,nsIStreamListener *aListener,nsISupports *aContext) {
    return This->lpVtbl->AsyncOpen(This,aListener,aContext);
}
static FORCEINLINE nsresult nsIHttpChannel_AsyncOpen2(nsIHttpChannel* This,nsIStreamListener *aListener) {
    return This->lpVtbl->AsyncOpen2(This,aListener);
}
static FORCEINLINE nsresult nsIHttpChannel_GetContentDisposition(nsIHttpChannel* This,UINT32 *aContentDisposition) {
    return This->lpVtbl->GetContentDisposition(This,aContentDisposition);
}
static FORCEINLINE nsresult nsIHttpChannel_SetContentDisposition(nsIHttpChannel* This,UINT32 aContentDisposition) {
    return This->lpVtbl->SetContentDisposition(This,aContentDisposition);
}
static FORCEINLINE nsresult nsIHttpChannel_GetContentDispositionFilename(nsIHttpChannel* This,nsAString *aContentDispositionFilename) {
    return This->lpVtbl->GetContentDispositionFilename(This,aContentDispositionFilename);
}
static FORCEINLINE nsresult nsIHttpChannel_SetContentDispositionFilename(nsIHttpChannel* This,const nsAString *aContentDispositionFilename) {
    return This->lpVtbl->SetContentDispositionFilename(This,aContentDispositionFilename);
}
static FORCEINLINE nsresult nsIHttpChannel_GetContentDispositionHeader(nsIHttpChannel* This,nsACString *aContentDispositionHeader) {
    return This->lpVtbl->GetContentDispositionHeader(This,aContentDispositionHeader);
}
static FORCEINLINE nsresult nsIHttpChannel_GetLoadInfo(nsIHttpChannel* This,nsILoadInfo **aLoadInfo) {
    return This->lpVtbl->GetLoadInfo(This,aLoadInfo);
}
static FORCEINLINE nsresult nsIHttpChannel_SetLoadInfo(nsIHttpChannel* This,nsILoadInfo *aLoadInfo) {
    return This->lpVtbl->SetLoadInfo(This,aLoadInfo);
}
/*** nsIHttpChannel methods ***/
static FORCEINLINE nsresult nsIHttpChannel_GetRequestMethod(nsIHttpChannel* This,nsACString *aRequestMethod) {
    return This->lpVtbl->GetRequestMethod(This,aRequestMethod);
}
static FORCEINLINE nsresult nsIHttpChannel_SetRequestMethod(nsIHttpChannel* This,const nsACString *aRequestMethod) {
    return This->lpVtbl->SetRequestMethod(This,aRequestMethod);
}
static FORCEINLINE nsresult nsIHttpChannel_GetReferrer(nsIHttpChannel* This,nsIURI **aReferrer) {
    return This->lpVtbl->GetReferrer(This,aReferrer);
}
static FORCEINLINE nsresult nsIHttpChannel_SetReferrer(nsIHttpChannel* This,nsIURI *aReferrer) {
    return This->lpVtbl->SetReferrer(This,aReferrer);
}
static FORCEINLINE nsresult nsIHttpChannel_GetReferrerPolicy(nsIHttpChannel* This,UINT32 *aReferrerPolicy) {
    return This->lpVtbl->GetReferrerPolicy(This,aReferrerPolicy);
}
static FORCEINLINE nsresult nsIHttpChannel_SetReferrerWithPolicy(nsIHttpChannel* This,nsIURI *referrer,UINT32 referrerPolicy) {
    return This->lpVtbl->SetReferrerWithPolicy(This,referrer,referrerPolicy);
}
static FORCEINLINE nsresult nsIHttpChannel_GetProtocolVersion(nsIHttpChannel* This,nsACString *aProtocolVersion) {
    return This->lpVtbl->GetProtocolVersion(This,aProtocolVersion);
}
static FORCEINLINE nsresult nsIHttpChannel_GetTransferSize(nsIHttpChannel* This,UINT64 *aTransferSize) {
    return This->lpVtbl->GetTransferSize(This,aTransferSize);
}
static FORCEINLINE nsresult nsIHttpChannel_GetDecodedBodySize(nsIHttpChannel* This,UINT64 *aDecodedBodySize) {
    return This->lpVtbl->GetDecodedBodySize(This,aDecodedBodySize);
}
static FORCEINLINE nsresult nsIHttpChannel_GetEncodedBodySize(nsIHttpChannel* This,UINT64 *aEncodedBodySize) {
    return This->lpVtbl->GetEncodedBodySize(This,aEncodedBodySize);
}
static FORCEINLINE nsresult nsIHttpChannel_GetRequestHeader(nsIHttpChannel* This,const nsACString *aHeader,nsACString *_retval) {
    return This->lpVtbl->GetRequestHeader(This,aHeader,_retval);
}
static FORCEINLINE nsresult nsIHttpChannel_SetRequestHeader(nsIHttpChannel* This,const nsACString *aHeader,const nsACString *aValue,cpp_bool aMerge) {
    return This->lpVtbl->SetRequestHeader(This,aHeader,aValue,aMerge);
}
static FORCEINLINE nsresult nsIHttpChannel_SetEmptyRequestHeader(nsIHttpChannel* This,const nsACString *aHeader) {
    return This->lpVtbl->SetEmptyRequestHeader(This,aHeader);
}
static FORCEINLINE nsresult nsIHttpChannel_VisitRequestHeaders(nsIHttpChannel* This,nsIHttpHeaderVisitor *aVisitor) {
    return This->lpVtbl->VisitRequestHeaders(This,aVisitor);
}
static FORCEINLINE nsresult nsIHttpChannel_VisitNonDefaultRequestHeaders(nsIHttpChannel* This,nsIHttpHeaderVisitor *aVisitor) {
    return This->lpVtbl->VisitNonDefaultRequestHeaders(This,aVisitor);
}
static FORCEINLINE nsresult nsIHttpChannel_GetAllowPipelining(nsIHttpChannel* This,cpp_bool *aAllowPipelining) {
    return This->lpVtbl->GetAllowPipelining(This,aAllowPipelining);
}
static FORCEINLINE nsresult nsIHttpChannel_SetAllowPipelining(nsIHttpChannel* This,cpp_bool aAllowPipelining) {
    return This->lpVtbl->SetAllowPipelining(This,aAllowPipelining);
}
static FORCEINLINE nsresult nsIHttpChannel_GetAllowSTS(nsIHttpChannel* This,cpp_bool *aAllowSTS) {
    return This->lpVtbl->GetAllowSTS(This,aAllowSTS);
}
static FORCEINLINE nsresult nsIHttpChannel_SetAllowSTS(nsIHttpChannel* This,cpp_bool aAllowSTS) {
    return This->lpVtbl->SetAllowSTS(This,aAllowSTS);
}
static FORCEINLINE nsresult nsIHttpChannel_GetRedirectionLimit(nsIHttpChannel* This,UINT32 *aRedirectionLimit) {
    return This->lpVtbl->GetRedirectionLimit(This,aRedirectionLimit);
}
static FORCEINLINE nsresult nsIHttpChannel_SetRedirectionLimit(nsIHttpChannel* This,UINT32 aRedirectionLimit) {
    return This->lpVtbl->SetRedirectionLimit(This,aRedirectionLimit);
}
static FORCEINLINE nsresult nsIHttpChannel_GetResponseStatus(nsIHttpChannel* This,UINT32 *aResponseStatus) {
    return This->lpVtbl->GetResponseStatus(This,aResponseStatus);
}
static FORCEINLINE nsresult nsIHttpChannel_GetResponseStatusText(nsIHttpChannel* This,nsACString *aResponseStatusText) {
    return This->lpVtbl->GetResponseStatusText(This,aResponseStatusText);
}
static FORCEINLINE nsresult nsIHttpChannel_GetRequestSucceeded(nsIHttpChannel* This,cpp_bool *aRequestSucceeded) {
    return This->lpVtbl->GetRequestSucceeded(This,aRequestSucceeded);
}
static FORCEINLINE nsresult nsIHttpChannel_GetIsMainDocumentChannel(nsIHttpChannel* This,cpp_bool *aIsMainDocumentChannel) {
    return This->lpVtbl->GetIsMainDocumentChannel(This,aIsMainDocumentChannel);
}
static FORCEINLINE nsresult nsIHttpChannel_SetIsMainDocumentChannel(nsIHttpChannel* This,cpp_bool aIsMainDocumentChannel) {
    return This->lpVtbl->SetIsMainDocumentChannel(This,aIsMainDocumentChannel);
}
static FORCEINLINE nsresult nsIHttpChannel_GetResponseHeader(nsIHttpChannel* This,const nsACString *header,nsACString *_retval) {
    return This->lpVtbl->GetResponseHeader(This,header,_retval);
}
static FORCEINLINE nsresult nsIHttpChannel_SetResponseHeader(nsIHttpChannel* This,const nsACString *header,const nsACString *value,cpp_bool merge) {
    return This->lpVtbl->SetResponseHeader(This,header,value,merge);
}
static FORCEINLINE nsresult nsIHttpChannel_VisitResponseHeaders(nsIHttpChannel* This,nsIHttpHeaderVisitor *aVisitor) {
    return This->lpVtbl->VisitResponseHeaders(This,aVisitor);
}
static FORCEINLINE nsresult nsIHttpChannel_IsNoStoreResponse(nsIHttpChannel* This,cpp_bool *_retval) {
    return This->lpVtbl->IsNoStoreResponse(This,_retval);
}
static FORCEINLINE nsresult nsIHttpChannel_IsNoCacheResponse(nsIHttpChannel* This,cpp_bool *_retval) {
    return This->lpVtbl->IsNoCacheResponse(This,_retval);
}
static FORCEINLINE nsresult nsIHttpChannel_IsPrivateResponse(nsIHttpChannel* This,cpp_bool *_retval) {
    return This->lpVtbl->IsPrivateResponse(This,_retval);
}
static FORCEINLINE nsresult nsIHttpChannel_RedirectTo(nsIHttpChannel* This,nsIURI *aTargetURI) {
    return This->lpVtbl->RedirectTo(This,aTargetURI);
}
static FORCEINLINE nsresult nsIHttpChannel_GetSchedulingContextID(nsIHttpChannel* This,nsID *aSchedulingContextID) {
    return This->lpVtbl->GetSchedulingContextID(This,aSchedulingContextID);
}
static FORCEINLINE nsresult nsIHttpChannel_SetSchedulingContextID(nsIHttpChannel* This,const nsID aSchedulingContextID) {
    return This->lpVtbl->SetSchedulingContextID(This,aSchedulingContextID);
}
#endif
#endif

#endif


#endif  /* __nsIHttpChannel_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIHttpChannelInternal interface
 */
#ifndef __nsIHttpChannelInternal_INTERFACE_DEFINED__
#define __nsIHttpChannelInternal_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIHttpChannelInternal, 0x4e28263d, 0x1e03, 0x46f4, 0xaa,0x5c, 0x95,0x12,0xf9,0x19,0x57,0xf9);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("4e28263d-1e03-46f4-aa5c-9512f91957f9")
nsIHttpChannelInternal : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetDocumentURI(
        nsIURI **aDocumentURI) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDocumentURI(
        nsIURI *aDocumentURI) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRequestVersion(
        UINT32 *major,
        UINT32 *minor) = 0;

    virtual nsresult STDMETHODCALLTYPE GetResponseVersion(
        UINT32 *major,
        UINT32 *minor) = 0;

    virtual nsresult STDMETHODCALLTYPE TakeAllSecurityMessages(
        void *aMessages) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCookie(
        const char *aCookieHeader) = 0;

    virtual nsresult STDMETHODCALLTYPE SetupFallbackChannel(
        const char *aFallbackKey) = 0;

    virtual nsresult STDMETHODCALLTYPE GetThirdPartyFlags(
        UINT32 *aThirdPartyFlags) = 0;

    virtual nsresult STDMETHODCALLTYPE SetThirdPartyFlags(
        UINT32 aThirdPartyFlags) = 0;

    virtual nsresult STDMETHODCALLTYPE GetForceAllowThirdPartyCookie(
        cpp_bool *aForceAllowThirdPartyCookie) = 0;

    virtual nsresult STDMETHODCALLTYPE SetForceAllowThirdPartyCookie(
        cpp_bool aForceAllowThirdPartyCookie) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCanceled(
        cpp_bool *aCanceled) = 0;

    virtual nsresult STDMETHODCALLTYPE GetChannelIsForDownload(
        cpp_bool *aChannelIsForDownload) = 0;

    virtual nsresult STDMETHODCALLTYPE SetChannelIsForDownload(
        cpp_bool aChannelIsForDownload) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLocalAddress(
        nsACString *aLocalAddress) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLocalPort(
        LONG *aLocalPort) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRemoteAddress(
        nsACString *aRemoteAddress) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRemotePort(
        LONG *aRemotePort) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCacheKeysRedirectChain(
        void *cacheKeys) = 0;

    virtual nsresult STDMETHODCALLTYPE HTTPUpgrade(
        const nsACString *aProtocolName,
        nsIHttpUpgradeListener *aListener) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAllowSpdy(
        cpp_bool *aAllowSpdy) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAllowSpdy(
        cpp_bool aAllowSpdy) = 0;

    virtual nsresult STDMETHODCALLTYPE GetResponseTimeoutEnabled(
        cpp_bool *aResponseTimeoutEnabled) = 0;

    virtual nsresult STDMETHODCALLTYPE SetResponseTimeoutEnabled(
        cpp_bool aResponseTimeoutEnabled) = 0;

    virtual nsresult STDMETHODCALLTYPE GetInitialRwin(
        UINT32 *aInitialRwin) = 0;

    virtual nsresult STDMETHODCALLTYPE SetInitialRwin(
        UINT32 aInitialRwin) = 0;

    virtual nsresult STDMETHODCALLTYPE GetApiRedirectToURI(
        nsIURI **aApiRedirectToURI) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAllowAltSvc(
        cpp_bool *aAllowAltSvc) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAllowAltSvc(
        cpp_bool aAllowAltSvc) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLastModifiedTime(
        PRTime *aLastModifiedTime) = 0;

    virtual nsresult STDMETHODCALLTYPE ForceIntercepted(
        UINT64 aInterceptionID) = 0;

    virtual nsresult STDMETHODCALLTYPE GetResponseSynthesized(
        cpp_bool *aResponseSynthesized) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCorsIncludeCredentials(
        cpp_bool *aCorsIncludeCredentials) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCorsIncludeCredentials(
        cpp_bool aCorsIncludeCredentials) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCorsMode(
        UINT32 *aCorsMode) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCorsMode(
        UINT32 aCorsMode) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRedirectMode(
        UINT32 *aRedirectMode) = 0;

    virtual nsresult STDMETHODCALLTYPE SetRedirectMode(
        UINT32 aRedirectMode) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTopWindowURI(
        nsIURI **aTopWindowURI) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNetworkInterfaceId(
        nsACString *aNetworkInterfaceId) = 0;

    virtual nsresult STDMETHODCALLTYPE SetNetworkInterfaceId(
        const nsACString *aNetworkInterfaceId) = 0;

    virtual nsresult STDMETHODCALLTYPE GetProxyURI(
        nsIURI **aProxyURI) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCorsPreflightParameters(
        const void *unsafeHeaders) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBlockAuthPrompt(
        cpp_bool *aBlockAuthPrompt) = 0;

    virtual nsresult STDMETHODCALLTYPE SetBlockAuthPrompt(
        cpp_bool aBlockAuthPrompt) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIHttpChannelInternal, 0x4e28263d, 0x1e03, 0x46f4, 0xaa,0x5c, 0x95,0x12,0xf9,0x19,0x57,0xf9)
#endif
#else
typedef struct nsIHttpChannelInternalVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIHttpChannelInternal *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIHttpChannelInternal *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIHttpChannelInternal *This);

    /*** nsIHttpChannelInternal methods ***/
    nsresult (STDMETHODCALLTYPE *GetDocumentURI)(
        nsIHttpChannelInternal *This,
        nsIURI **aDocumentURI);

    nsresult (STDMETHODCALLTYPE *SetDocumentURI)(
        nsIHttpChannelInternal *This,
        nsIURI *aDocumentURI);

    nsresult (STDMETHODCALLTYPE *GetRequestVersion)(
        nsIHttpChannelInternal *This,
        UINT32 *major,
        UINT32 *minor);

    nsresult (STDMETHODCALLTYPE *GetResponseVersion)(
        nsIHttpChannelInternal *This,
        UINT32 *major,
        UINT32 *minor);

    nsresult (STDMETHODCALLTYPE *TakeAllSecurityMessages)(
        nsIHttpChannelInternal *This,
        void *aMessages);

    nsresult (STDMETHODCALLTYPE *SetCookie)(
        nsIHttpChannelInternal *This,
        const char *aCookieHeader);

    nsresult (STDMETHODCALLTYPE *SetupFallbackChannel)(
        nsIHttpChannelInternal *This,
        const char *aFallbackKey);

    nsresult (STDMETHODCALLTYPE *GetThirdPartyFlags)(
        nsIHttpChannelInternal *This,
        UINT32 *aThirdPartyFlags);

    nsresult (STDMETHODCALLTYPE *SetThirdPartyFlags)(
        nsIHttpChannelInternal *This,
        UINT32 aThirdPartyFlags);

    nsresult (STDMETHODCALLTYPE *GetForceAllowThirdPartyCookie)(
        nsIHttpChannelInternal *This,
        cpp_bool *aForceAllowThirdPartyCookie);

    nsresult (STDMETHODCALLTYPE *SetForceAllowThirdPartyCookie)(
        nsIHttpChannelInternal *This,
        cpp_bool aForceAllowThirdPartyCookie);

    nsresult (STDMETHODCALLTYPE *GetCanceled)(
        nsIHttpChannelInternal *This,
        cpp_bool *aCanceled);

    nsresult (STDMETHODCALLTYPE *GetChannelIsForDownload)(
        nsIHttpChannelInternal *This,
        cpp_bool *aChannelIsForDownload);

    nsresult (STDMETHODCALLTYPE *SetChannelIsForDownload)(
        nsIHttpChannelInternal *This,
        cpp_bool aChannelIsForDownload);

    nsresult (STDMETHODCALLTYPE *GetLocalAddress)(
        nsIHttpChannelInternal *This,
        nsACString *aLocalAddress);

    nsresult (STDMETHODCALLTYPE *GetLocalPort)(
        nsIHttpChannelInternal *This,
        LONG *aLocalPort);

    nsresult (STDMETHODCALLTYPE *GetRemoteAddress)(
        nsIHttpChannelInternal *This,
        nsACString *aRemoteAddress);

    nsresult (STDMETHODCALLTYPE *GetRemotePort)(
        nsIHttpChannelInternal *This,
        LONG *aRemotePort);

    nsresult (STDMETHODCALLTYPE *SetCacheKeysRedirectChain)(
        nsIHttpChannelInternal *This,
        void *cacheKeys);

    nsresult (STDMETHODCALLTYPE *HTTPUpgrade)(
        nsIHttpChannelInternal *This,
        const nsACString *aProtocolName,
        nsIHttpUpgradeListener *aListener);

    nsresult (STDMETHODCALLTYPE *GetAllowSpdy)(
        nsIHttpChannelInternal *This,
        cpp_bool *aAllowSpdy);

    nsresult (STDMETHODCALLTYPE *SetAllowSpdy)(
        nsIHttpChannelInternal *This,
        cpp_bool aAllowSpdy);

    nsresult (STDMETHODCALLTYPE *GetResponseTimeoutEnabled)(
        nsIHttpChannelInternal *This,
        cpp_bool *aResponseTimeoutEnabled);

    nsresult (STDMETHODCALLTYPE *SetResponseTimeoutEnabled)(
        nsIHttpChannelInternal *This,
        cpp_bool aResponseTimeoutEnabled);

    nsresult (STDMETHODCALLTYPE *GetInitialRwin)(
        nsIHttpChannelInternal *This,
        UINT32 *aInitialRwin);

    nsresult (STDMETHODCALLTYPE *SetInitialRwin)(
        nsIHttpChannelInternal *This,
        UINT32 aInitialRwin);

    nsresult (STDMETHODCALLTYPE *GetApiRedirectToURI)(
        nsIHttpChannelInternal *This,
        nsIURI **aApiRedirectToURI);

    nsresult (STDMETHODCALLTYPE *GetAllowAltSvc)(
        nsIHttpChannelInternal *This,
        cpp_bool *aAllowAltSvc);

    nsresult (STDMETHODCALLTYPE *SetAllowAltSvc)(
        nsIHttpChannelInternal *This,
        cpp_bool aAllowAltSvc);

    nsresult (STDMETHODCALLTYPE *GetLastModifiedTime)(
        nsIHttpChannelInternal *This,
        PRTime *aLastModifiedTime);

    nsresult (STDMETHODCALLTYPE *ForceIntercepted)(
        nsIHttpChannelInternal *This,
        UINT64 aInterceptionID);

    nsresult (STDMETHODCALLTYPE *GetResponseSynthesized)(
        nsIHttpChannelInternal *This,
        cpp_bool *aResponseSynthesized);

    nsresult (STDMETHODCALLTYPE *GetCorsIncludeCredentials)(
        nsIHttpChannelInternal *This,
        cpp_bool *aCorsIncludeCredentials);

    nsresult (STDMETHODCALLTYPE *SetCorsIncludeCredentials)(
        nsIHttpChannelInternal *This,
        cpp_bool aCorsIncludeCredentials);

    nsresult (STDMETHODCALLTYPE *GetCorsMode)(
        nsIHttpChannelInternal *This,
        UINT32 *aCorsMode);

    nsresult (STDMETHODCALLTYPE *SetCorsMode)(
        nsIHttpChannelInternal *This,
        UINT32 aCorsMode);

    nsresult (STDMETHODCALLTYPE *GetRedirectMode)(
        nsIHttpChannelInternal *This,
        UINT32 *aRedirectMode);

    nsresult (STDMETHODCALLTYPE *SetRedirectMode)(
        nsIHttpChannelInternal *This,
        UINT32 aRedirectMode);

    nsresult (STDMETHODCALLTYPE *GetTopWindowURI)(
        nsIHttpChannelInternal *This,
        nsIURI **aTopWindowURI);

    nsresult (STDMETHODCALLTYPE *GetNetworkInterfaceId)(
        nsIHttpChannelInternal *This,
        nsACString *aNetworkInterfaceId);

    nsresult (STDMETHODCALLTYPE *SetNetworkInterfaceId)(
        nsIHttpChannelInternal *This,
        const nsACString *aNetworkInterfaceId);

    nsresult (STDMETHODCALLTYPE *GetProxyURI)(
        nsIHttpChannelInternal *This,
        nsIURI **aProxyURI);

    nsresult (STDMETHODCALLTYPE *SetCorsPreflightParameters)(
        nsIHttpChannelInternal *This,
        const void *unsafeHeaders);

    nsresult (STDMETHODCALLTYPE *GetBlockAuthPrompt)(
        nsIHttpChannelInternal *This,
        cpp_bool *aBlockAuthPrompt);

    nsresult (STDMETHODCALLTYPE *SetBlockAuthPrompt)(
        nsIHttpChannelInternal *This,
        cpp_bool aBlockAuthPrompt);

    END_INTERFACE
} nsIHttpChannelInternalVtbl;

interface nsIHttpChannelInternal {
    CONST_VTBL nsIHttpChannelInternalVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIHttpChannelInternal_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIHttpChannelInternal_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIHttpChannelInternal_Release(This) (This)->lpVtbl->Release(This)
/*** nsIHttpChannelInternal methods ***/
#define nsIHttpChannelInternal_GetDocumentURI(This,aDocumentURI) (This)->lpVtbl->GetDocumentURI(This,aDocumentURI)
#define nsIHttpChannelInternal_SetDocumentURI(This,aDocumentURI) (This)->lpVtbl->SetDocumentURI(This,aDocumentURI)
#define nsIHttpChannelInternal_GetRequestVersion(This,major,minor) (This)->lpVtbl->GetRequestVersion(This,major,minor)
#define nsIHttpChannelInternal_GetResponseVersion(This,major,minor) (This)->lpVtbl->GetResponseVersion(This,major,minor)
#define nsIHttpChannelInternal_TakeAllSecurityMessages(This,aMessages) (This)->lpVtbl->TakeAllSecurityMessages(This,aMessages)
#define nsIHttpChannelInternal_SetCookie(This,aCookieHeader) (This)->lpVtbl->SetCookie(This,aCookieHeader)
#define nsIHttpChannelInternal_SetupFallbackChannel(This,aFallbackKey) (This)->lpVtbl->SetupFallbackChannel(This,aFallbackKey)
#define nsIHttpChannelInternal_GetThirdPartyFlags(This,aThirdPartyFlags) (This)->lpVtbl->GetThirdPartyFlags(This,aThirdPartyFlags)
#define nsIHttpChannelInternal_SetThirdPartyFlags(This,aThirdPartyFlags) (This)->lpVtbl->SetThirdPartyFlags(This,aThirdPartyFlags)
#define nsIHttpChannelInternal_GetForceAllowThirdPartyCookie(This,aForceAllowThirdPartyCookie) (This)->lpVtbl->GetForceAllowThirdPartyCookie(This,aForceAllowThirdPartyCookie)
#define nsIHttpChannelInternal_SetForceAllowThirdPartyCookie(This,aForceAllowThirdPartyCookie) (This)->lpVtbl->SetForceAllowThirdPartyCookie(This,aForceAllowThirdPartyCookie)
#define nsIHttpChannelInternal_GetCanceled(This,aCanceled) (This)->lpVtbl->GetCanceled(This,aCanceled)
#define nsIHttpChannelInternal_GetChannelIsForDownload(This,aChannelIsForDownload) (This)->lpVtbl->GetChannelIsForDownload(This,aChannelIsForDownload)
#define nsIHttpChannelInternal_SetChannelIsForDownload(This,aChannelIsForDownload) (This)->lpVtbl->SetChannelIsForDownload(This,aChannelIsForDownload)
#define nsIHttpChannelInternal_GetLocalAddress(This,aLocalAddress) (This)->lpVtbl->GetLocalAddress(This,aLocalAddress)
#define nsIHttpChannelInternal_GetLocalPort(This,aLocalPort) (This)->lpVtbl->GetLocalPort(This,aLocalPort)
#define nsIHttpChannelInternal_GetRemoteAddress(This,aRemoteAddress) (This)->lpVtbl->GetRemoteAddress(This,aRemoteAddress)
#define nsIHttpChannelInternal_GetRemotePort(This,aRemotePort) (This)->lpVtbl->GetRemotePort(This,aRemotePort)
#define nsIHttpChannelInternal_SetCacheKeysRedirectChain(This,cacheKeys) (This)->lpVtbl->SetCacheKeysRedirectChain(This,cacheKeys)
#define nsIHttpChannelInternal_HTTPUpgrade(This,aProtocolName,aListener) (This)->lpVtbl->HTTPUpgrade(This,aProtocolName,aListener)
#define nsIHttpChannelInternal_GetAllowSpdy(This,aAllowSpdy) (This)->lpVtbl->GetAllowSpdy(This,aAllowSpdy)
#define nsIHttpChannelInternal_SetAllowSpdy(This,aAllowSpdy) (This)->lpVtbl->SetAllowSpdy(This,aAllowSpdy)
#define nsIHttpChannelInternal_GetResponseTimeoutEnabled(This,aResponseTimeoutEnabled) (This)->lpVtbl->GetResponseTimeoutEnabled(This,aResponseTimeoutEnabled)
#define nsIHttpChannelInternal_SetResponseTimeoutEnabled(This,aResponseTimeoutEnabled) (This)->lpVtbl->SetResponseTimeoutEnabled(This,aResponseTimeoutEnabled)
#define nsIHttpChannelInternal_GetInitialRwin(This,aInitialRwin) (This)->lpVtbl->GetInitialRwin(This,aInitialRwin)
#define nsIHttpChannelInternal_SetInitialRwin(This,aInitialRwin) (This)->lpVtbl->SetInitialRwin(This,aInitialRwin)
#define nsIHttpChannelInternal_GetApiRedirectToURI(This,aApiRedirectToURI) (This)->lpVtbl->GetApiRedirectToURI(This,aApiRedirectToURI)
#define nsIHttpChannelInternal_GetAllowAltSvc(This,aAllowAltSvc) (This)->lpVtbl->GetAllowAltSvc(This,aAllowAltSvc)
#define nsIHttpChannelInternal_SetAllowAltSvc(This,aAllowAltSvc) (This)->lpVtbl->SetAllowAltSvc(This,aAllowAltSvc)
#define nsIHttpChannelInternal_GetLastModifiedTime(This,aLastModifiedTime) (This)->lpVtbl->GetLastModifiedTime(This,aLastModifiedTime)
#define nsIHttpChannelInternal_ForceIntercepted(This,aInterceptionID) (This)->lpVtbl->ForceIntercepted(This,aInterceptionID)
#define nsIHttpChannelInternal_GetResponseSynthesized(This,aResponseSynthesized) (This)->lpVtbl->GetResponseSynthesized(This,aResponseSynthesized)
#define nsIHttpChannelInternal_GetCorsIncludeCredentials(This,aCorsIncludeCredentials) (This)->lpVtbl->GetCorsIncludeCredentials(This,aCorsIncludeCredentials)
#define nsIHttpChannelInternal_SetCorsIncludeCredentials(This,aCorsIncludeCredentials) (This)->lpVtbl->SetCorsIncludeCredentials(This,aCorsIncludeCredentials)
#define nsIHttpChannelInternal_GetCorsMode(This,aCorsMode) (This)->lpVtbl->GetCorsMode(This,aCorsMode)
#define nsIHttpChannelInternal_SetCorsMode(This,aCorsMode) (This)->lpVtbl->SetCorsMode(This,aCorsMode)
#define nsIHttpChannelInternal_GetRedirectMode(This,aRedirectMode) (This)->lpVtbl->GetRedirectMode(This,aRedirectMode)
#define nsIHttpChannelInternal_SetRedirectMode(This,aRedirectMode) (This)->lpVtbl->SetRedirectMode(This,aRedirectMode)
#define nsIHttpChannelInternal_GetTopWindowURI(This,aTopWindowURI) (This)->lpVtbl->GetTopWindowURI(This,aTopWindowURI)
#define nsIHttpChannelInternal_GetNetworkInterfaceId(This,aNetworkInterfaceId) (This)->lpVtbl->GetNetworkInterfaceId(This,aNetworkInterfaceId)
#define nsIHttpChannelInternal_SetNetworkInterfaceId(This,aNetworkInterfaceId) (This)->lpVtbl->SetNetworkInterfaceId(This,aNetworkInterfaceId)
#define nsIHttpChannelInternal_GetProxyURI(This,aProxyURI) (This)->lpVtbl->GetProxyURI(This,aProxyURI)
#define nsIHttpChannelInternal_SetCorsPreflightParameters(This,unsafeHeaders) (This)->lpVtbl->SetCorsPreflightParameters(This,unsafeHeaders)
#define nsIHttpChannelInternal_GetBlockAuthPrompt(This,aBlockAuthPrompt) (This)->lpVtbl->GetBlockAuthPrompt(This,aBlockAuthPrompt)
#define nsIHttpChannelInternal_SetBlockAuthPrompt(This,aBlockAuthPrompt) (This)->lpVtbl->SetBlockAuthPrompt(This,aBlockAuthPrompt)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIHttpChannelInternal_QueryInterface(nsIHttpChannelInternal* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIHttpChannelInternal_AddRef(nsIHttpChannelInternal* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIHttpChannelInternal_Release(nsIHttpChannelInternal* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIHttpChannelInternal methods ***/
static FORCEINLINE nsresult nsIHttpChannelInternal_GetDocumentURI(nsIHttpChannelInternal* This,nsIURI **aDocumentURI) {
    return This->lpVtbl->GetDocumentURI(This,aDocumentURI);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_SetDocumentURI(nsIHttpChannelInternal* This,nsIURI *aDocumentURI) {
    return This->lpVtbl->SetDocumentURI(This,aDocumentURI);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetRequestVersion(nsIHttpChannelInternal* This,UINT32 *major,UINT32 *minor) {
    return This->lpVtbl->GetRequestVersion(This,major,minor);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetResponseVersion(nsIHttpChannelInternal* This,UINT32 *major,UINT32 *minor) {
    return This->lpVtbl->GetResponseVersion(This,major,minor);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_TakeAllSecurityMessages(nsIHttpChannelInternal* This,void *aMessages) {
    return This->lpVtbl->TakeAllSecurityMessages(This,aMessages);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_SetCookie(nsIHttpChannelInternal* This,const char *aCookieHeader) {
    return This->lpVtbl->SetCookie(This,aCookieHeader);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_SetupFallbackChannel(nsIHttpChannelInternal* This,const char *aFallbackKey) {
    return This->lpVtbl->SetupFallbackChannel(This,aFallbackKey);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetThirdPartyFlags(nsIHttpChannelInternal* This,UINT32 *aThirdPartyFlags) {
    return This->lpVtbl->GetThirdPartyFlags(This,aThirdPartyFlags);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_SetThirdPartyFlags(nsIHttpChannelInternal* This,UINT32 aThirdPartyFlags) {
    return This->lpVtbl->SetThirdPartyFlags(This,aThirdPartyFlags);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetForceAllowThirdPartyCookie(nsIHttpChannelInternal* This,cpp_bool *aForceAllowThirdPartyCookie) {
    return This->lpVtbl->GetForceAllowThirdPartyCookie(This,aForceAllowThirdPartyCookie);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_SetForceAllowThirdPartyCookie(nsIHttpChannelInternal* This,cpp_bool aForceAllowThirdPartyCookie) {
    return This->lpVtbl->SetForceAllowThirdPartyCookie(This,aForceAllowThirdPartyCookie);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetCanceled(nsIHttpChannelInternal* This,cpp_bool *aCanceled) {
    return This->lpVtbl->GetCanceled(This,aCanceled);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetChannelIsForDownload(nsIHttpChannelInternal* This,cpp_bool *aChannelIsForDownload) {
    return This->lpVtbl->GetChannelIsForDownload(This,aChannelIsForDownload);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_SetChannelIsForDownload(nsIHttpChannelInternal* This,cpp_bool aChannelIsForDownload) {
    return This->lpVtbl->SetChannelIsForDownload(This,aChannelIsForDownload);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetLocalAddress(nsIHttpChannelInternal* This,nsACString *aLocalAddress) {
    return This->lpVtbl->GetLocalAddress(This,aLocalAddress);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetLocalPort(nsIHttpChannelInternal* This,LONG *aLocalPort) {
    return This->lpVtbl->GetLocalPort(This,aLocalPort);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetRemoteAddress(nsIHttpChannelInternal* This,nsACString *aRemoteAddress) {
    return This->lpVtbl->GetRemoteAddress(This,aRemoteAddress);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetRemotePort(nsIHttpChannelInternal* This,LONG *aRemotePort) {
    return This->lpVtbl->GetRemotePort(This,aRemotePort);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_SetCacheKeysRedirectChain(nsIHttpChannelInternal* This,void *cacheKeys) {
    return This->lpVtbl->SetCacheKeysRedirectChain(This,cacheKeys);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_HTTPUpgrade(nsIHttpChannelInternal* This,const nsACString *aProtocolName,nsIHttpUpgradeListener *aListener) {
    return This->lpVtbl->HTTPUpgrade(This,aProtocolName,aListener);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetAllowSpdy(nsIHttpChannelInternal* This,cpp_bool *aAllowSpdy) {
    return This->lpVtbl->GetAllowSpdy(This,aAllowSpdy);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_SetAllowSpdy(nsIHttpChannelInternal* This,cpp_bool aAllowSpdy) {
    return This->lpVtbl->SetAllowSpdy(This,aAllowSpdy);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetResponseTimeoutEnabled(nsIHttpChannelInternal* This,cpp_bool *aResponseTimeoutEnabled) {
    return This->lpVtbl->GetResponseTimeoutEnabled(This,aResponseTimeoutEnabled);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_SetResponseTimeoutEnabled(nsIHttpChannelInternal* This,cpp_bool aResponseTimeoutEnabled) {
    return This->lpVtbl->SetResponseTimeoutEnabled(This,aResponseTimeoutEnabled);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetInitialRwin(nsIHttpChannelInternal* This,UINT32 *aInitialRwin) {
    return This->lpVtbl->GetInitialRwin(This,aInitialRwin);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_SetInitialRwin(nsIHttpChannelInternal* This,UINT32 aInitialRwin) {
    return This->lpVtbl->SetInitialRwin(This,aInitialRwin);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetApiRedirectToURI(nsIHttpChannelInternal* This,nsIURI **aApiRedirectToURI) {
    return This->lpVtbl->GetApiRedirectToURI(This,aApiRedirectToURI);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetAllowAltSvc(nsIHttpChannelInternal* This,cpp_bool *aAllowAltSvc) {
    return This->lpVtbl->GetAllowAltSvc(This,aAllowAltSvc);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_SetAllowAltSvc(nsIHttpChannelInternal* This,cpp_bool aAllowAltSvc) {
    return This->lpVtbl->SetAllowAltSvc(This,aAllowAltSvc);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetLastModifiedTime(nsIHttpChannelInternal* This,PRTime *aLastModifiedTime) {
    return This->lpVtbl->GetLastModifiedTime(This,aLastModifiedTime);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_ForceIntercepted(nsIHttpChannelInternal* This,UINT64 aInterceptionID) {
    return This->lpVtbl->ForceIntercepted(This,aInterceptionID);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetResponseSynthesized(nsIHttpChannelInternal* This,cpp_bool *aResponseSynthesized) {
    return This->lpVtbl->GetResponseSynthesized(This,aResponseSynthesized);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetCorsIncludeCredentials(nsIHttpChannelInternal* This,cpp_bool *aCorsIncludeCredentials) {
    return This->lpVtbl->GetCorsIncludeCredentials(This,aCorsIncludeCredentials);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_SetCorsIncludeCredentials(nsIHttpChannelInternal* This,cpp_bool aCorsIncludeCredentials) {
    return This->lpVtbl->SetCorsIncludeCredentials(This,aCorsIncludeCredentials);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetCorsMode(nsIHttpChannelInternal* This,UINT32 *aCorsMode) {
    return This->lpVtbl->GetCorsMode(This,aCorsMode);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_SetCorsMode(nsIHttpChannelInternal* This,UINT32 aCorsMode) {
    return This->lpVtbl->SetCorsMode(This,aCorsMode);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetRedirectMode(nsIHttpChannelInternal* This,UINT32 *aRedirectMode) {
    return This->lpVtbl->GetRedirectMode(This,aRedirectMode);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_SetRedirectMode(nsIHttpChannelInternal* This,UINT32 aRedirectMode) {
    return This->lpVtbl->SetRedirectMode(This,aRedirectMode);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetTopWindowURI(nsIHttpChannelInternal* This,nsIURI **aTopWindowURI) {
    return This->lpVtbl->GetTopWindowURI(This,aTopWindowURI);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetNetworkInterfaceId(nsIHttpChannelInternal* This,nsACString *aNetworkInterfaceId) {
    return This->lpVtbl->GetNetworkInterfaceId(This,aNetworkInterfaceId);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_SetNetworkInterfaceId(nsIHttpChannelInternal* This,const nsACString *aNetworkInterfaceId) {
    return This->lpVtbl->SetNetworkInterfaceId(This,aNetworkInterfaceId);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetProxyURI(nsIHttpChannelInternal* This,nsIURI **aProxyURI) {
    return This->lpVtbl->GetProxyURI(This,aProxyURI);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_SetCorsPreflightParameters(nsIHttpChannelInternal* This,const void *unsafeHeaders) {
    return This->lpVtbl->SetCorsPreflightParameters(This,unsafeHeaders);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_GetBlockAuthPrompt(nsIHttpChannelInternal* This,cpp_bool *aBlockAuthPrompt) {
    return This->lpVtbl->GetBlockAuthPrompt(This,aBlockAuthPrompt);
}
static FORCEINLINE nsresult nsIHttpChannelInternal_SetBlockAuthPrompt(nsIHttpChannelInternal* This,cpp_bool aBlockAuthPrompt) {
    return This->lpVtbl->SetBlockAuthPrompt(This,aBlockAuthPrompt);
}
#endif
#endif

#endif


#endif  /* __nsIHttpChannelInternal_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIUploadChannel interface
 */
#ifndef __nsIUploadChannel_INTERFACE_DEFINED__
#define __nsIUploadChannel_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIUploadChannel, 0x5cfe15bd, 0x5adb, 0x4a7f, 0x9e,0x55, 0x4f,0x5a,0x67,0xd1,0x57,0x94);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("5cfe15bd-5adb-4a7f-9e55-4f5a67d15794")
nsIUploadChannel : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE SetUploadStream(
        nsIInputStream *aStream,
        const nsACString *aContentType,
        INT64 aContentLength) = 0;

    virtual nsresult STDMETHODCALLTYPE GetUploadStream(
        nsIInputStream **aUploadStream) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIUploadChannel, 0x5cfe15bd, 0x5adb, 0x4a7f, 0x9e,0x55, 0x4f,0x5a,0x67,0xd1,0x57,0x94)
#endif
#else
typedef struct nsIUploadChannelVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIUploadChannel *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIUploadChannel *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIUploadChannel *This);

    /*** nsIUploadChannel methods ***/
    nsresult (STDMETHODCALLTYPE *SetUploadStream)(
        nsIUploadChannel *This,
        nsIInputStream *aStream,
        const nsACString *aContentType,
        INT64 aContentLength);

    nsresult (STDMETHODCALLTYPE *GetUploadStream)(
        nsIUploadChannel *This,
        nsIInputStream **aUploadStream);

    END_INTERFACE
} nsIUploadChannelVtbl;

interface nsIUploadChannel {
    CONST_VTBL nsIUploadChannelVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIUploadChannel_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIUploadChannel_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIUploadChannel_Release(This) (This)->lpVtbl->Release(This)
/*** nsIUploadChannel methods ***/
#define nsIUploadChannel_SetUploadStream(This,aStream,aContentType,aContentLength) (This)->lpVtbl->SetUploadStream(This,aStream,aContentType,aContentLength)
#define nsIUploadChannel_GetUploadStream(This,aUploadStream) (This)->lpVtbl->GetUploadStream(This,aUploadStream)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIUploadChannel_QueryInterface(nsIUploadChannel* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIUploadChannel_AddRef(nsIUploadChannel* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIUploadChannel_Release(nsIUploadChannel* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIUploadChannel methods ***/
static FORCEINLINE nsresult nsIUploadChannel_SetUploadStream(nsIUploadChannel* This,nsIInputStream *aStream,const nsACString *aContentType,INT64 aContentLength) {
    return This->lpVtbl->SetUploadStream(This,aStream,aContentType,aContentLength);
}
static FORCEINLINE nsresult nsIUploadChannel_GetUploadStream(nsIUploadChannel* This,nsIInputStream **aUploadStream) {
    return This->lpVtbl->GetUploadStream(This,aUploadStream);
}
#endif
#endif

#endif


#endif  /* __nsIUploadChannel_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIAsyncVerifyRedirectCallback interface
 */
#ifndef __nsIAsyncVerifyRedirectCallback_INTERFACE_DEFINED__
#define __nsIAsyncVerifyRedirectCallback_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIAsyncVerifyRedirectCallback, 0x8d171460, 0xa716, 0x41f1, 0x92,0xbe, 0x8c,0x65,0x9d,0xb3,0x9b,0x45);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("8d171460-a716-41f1-92be-8c659db39b45")
nsIAsyncVerifyRedirectCallback : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE OnRedirectVerifyCallback(
        nsresult result) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIAsyncVerifyRedirectCallback, 0x8d171460, 0xa716, 0x41f1, 0x92,0xbe, 0x8c,0x65,0x9d,0xb3,0x9b,0x45)
#endif
#else
typedef struct nsIAsyncVerifyRedirectCallbackVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIAsyncVerifyRedirectCallback *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIAsyncVerifyRedirectCallback *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIAsyncVerifyRedirectCallback *This);

    /*** nsIAsyncVerifyRedirectCallback methods ***/
    nsresult (STDMETHODCALLTYPE *OnRedirectVerifyCallback)(
        nsIAsyncVerifyRedirectCallback *This,
        nsresult result);

    END_INTERFACE
} nsIAsyncVerifyRedirectCallbackVtbl;

interface nsIAsyncVerifyRedirectCallback {
    CONST_VTBL nsIAsyncVerifyRedirectCallbackVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIAsyncVerifyRedirectCallback_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIAsyncVerifyRedirectCallback_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIAsyncVerifyRedirectCallback_Release(This) (This)->lpVtbl->Release(This)
/*** nsIAsyncVerifyRedirectCallback methods ***/
#define nsIAsyncVerifyRedirectCallback_OnRedirectVerifyCallback(This,result) (This)->lpVtbl->OnRedirectVerifyCallback(This,result)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIAsyncVerifyRedirectCallback_QueryInterface(nsIAsyncVerifyRedirectCallback* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIAsyncVerifyRedirectCallback_AddRef(nsIAsyncVerifyRedirectCallback* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIAsyncVerifyRedirectCallback_Release(nsIAsyncVerifyRedirectCallback* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIAsyncVerifyRedirectCallback methods ***/
static FORCEINLINE nsresult nsIAsyncVerifyRedirectCallback_OnRedirectVerifyCallback(nsIAsyncVerifyRedirectCallback* This,nsresult result) {
    return This->lpVtbl->OnRedirectVerifyCallback(This,result);
}
#endif
#endif

#endif


#endif  /* __nsIAsyncVerifyRedirectCallback_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIChannelEventSink interface
 */
#ifndef __nsIChannelEventSink_INTERFACE_DEFINED__
#define __nsIChannelEventSink_INTERFACE_DEFINED__

#define REDIRECT_TEMPORARY (1)

#define REDIRECT_PERMANENT (2)

#define REDIRECT_INTERNAL (4)

#define REDIRECT_STS_UPGRADE (8)

DEFINE_GUID(IID_nsIChannelEventSink, 0x0197720d, 0x37ed, 0x4e75, 0x89,0x56, 0xd0,0xd2,0x96,0xe4,0xd8,0xa6);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("0197720d-37ed-4e75-8956-d0d296e4d8a6")
nsIChannelEventSink : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE AsyncOnChannelRedirect(
        nsIChannel *oldChannel,
        nsIChannel *newChannel,
        UINT32 flags,
        nsIAsyncVerifyRedirectCallback *callback) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIChannelEventSink, 0x0197720d, 0x37ed, 0x4e75, 0x89,0x56, 0xd0,0xd2,0x96,0xe4,0xd8,0xa6)
#endif
#else
typedef struct nsIChannelEventSinkVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIChannelEventSink *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIChannelEventSink *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIChannelEventSink *This);

    /*** nsIChannelEventSink methods ***/
    nsresult (STDMETHODCALLTYPE *AsyncOnChannelRedirect)(
        nsIChannelEventSink *This,
        nsIChannel *oldChannel,
        nsIChannel *newChannel,
        UINT32 flags,
        nsIAsyncVerifyRedirectCallback *callback);

    END_INTERFACE
} nsIChannelEventSinkVtbl;

interface nsIChannelEventSink {
    CONST_VTBL nsIChannelEventSinkVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIChannelEventSink_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIChannelEventSink_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIChannelEventSink_Release(This) (This)->lpVtbl->Release(This)
/*** nsIChannelEventSink methods ***/
#define nsIChannelEventSink_AsyncOnChannelRedirect(This,oldChannel,newChannel,flags,callback) (This)->lpVtbl->AsyncOnChannelRedirect(This,oldChannel,newChannel,flags,callback)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIChannelEventSink_QueryInterface(nsIChannelEventSink* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIChannelEventSink_AddRef(nsIChannelEventSink* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIChannelEventSink_Release(nsIChannelEventSink* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIChannelEventSink methods ***/
static FORCEINLINE nsresult nsIChannelEventSink_AsyncOnChannelRedirect(nsIChannelEventSink* This,nsIChannel *oldChannel,nsIChannel *newChannel,UINT32 flags,nsIAsyncVerifyRedirectCallback *callback) {
    return This->lpVtbl->AsyncOnChannelRedirect(This,oldChannel,newChannel,flags,callback);
}
#endif
#endif

#endif


#endif  /* __nsIChannelEventSink_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMLocation interface
 */
#ifndef __nsIDOMLocation_INTERFACE_DEFINED__
#define __nsIDOMLocation_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMLocation, 0x79de76e5, 0x994e, 0x4f6b, 0x81,0xaa, 0x42,0xd9,0xad,0xb6,0xe6,0x7e);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("79de76e5-994e-4f6b-81aa-42d9adb6e67e")
nsIDOMLocation : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetHash(
        nsAString *aHash) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHash(
        const nsAString *aHash) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHost(
        nsAString *aHost) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHost(
        const nsAString *aHost) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHostname(
        nsAString *aHostname) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHostname(
        const nsAString *aHostname) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHref(
        nsAString *aHref) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHref(
        const nsAString *aHref) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPathname(
        nsAString *aPathname) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPathname(
        const nsAString *aPathname) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPort(
        nsAString *aPort) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPort(
        const nsAString *aPort) = 0;

    virtual nsresult STDMETHODCALLTYPE GetProtocol(
        nsAString *aProtocol) = 0;

    virtual nsresult STDMETHODCALLTYPE SetProtocol(
        const nsAString *aProtocol) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSearch(
        nsAString *aSearch) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSearch(
        const nsAString *aSearch) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOrigin(
        nsAString *aOrigin) = 0;

    virtual nsresult STDMETHODCALLTYPE Reload(
        cpp_bool forceget) = 0;

    virtual nsresult STDMETHODCALLTYPE Replace(
        const nsAString *url) = 0;

    virtual nsresult STDMETHODCALLTYPE Assign(
        const nsAString *url) = 0;

    virtual nsresult STDMETHODCALLTYPE ToString(
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE ValueOf(
        nsIDOMLocation **_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMLocation, 0x79de76e5, 0x994e, 0x4f6b, 0x81,0xaa, 0x42,0xd9,0xad,0xb6,0xe6,0x7e)
#endif
#else
typedef struct nsIDOMLocationVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMLocation *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMLocation *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMLocation *This);

    /*** nsIDOMLocation methods ***/
    nsresult (STDMETHODCALLTYPE *GetHash)(
        nsIDOMLocation *This,
        nsAString *aHash);

    nsresult (STDMETHODCALLTYPE *SetHash)(
        nsIDOMLocation *This,
        const nsAString *aHash);

    nsresult (STDMETHODCALLTYPE *GetHost)(
        nsIDOMLocation *This,
        nsAString *aHost);

    nsresult (STDMETHODCALLTYPE *SetHost)(
        nsIDOMLocation *This,
        const nsAString *aHost);

    nsresult (STDMETHODCALLTYPE *GetHostname)(
        nsIDOMLocation *This,
        nsAString *aHostname);

    nsresult (STDMETHODCALLTYPE *SetHostname)(
        nsIDOMLocation *This,
        const nsAString *aHostname);

    nsresult (STDMETHODCALLTYPE *GetHref)(
        nsIDOMLocation *This,
        nsAString *aHref);

    nsresult (STDMETHODCALLTYPE *SetHref)(
        nsIDOMLocation *This,
        const nsAString *aHref);

    nsresult (STDMETHODCALLTYPE *GetPathname)(
        nsIDOMLocation *This,
        nsAString *aPathname);

    nsresult (STDMETHODCALLTYPE *SetPathname)(
        nsIDOMLocation *This,
        const nsAString *aPathname);

    nsresult (STDMETHODCALLTYPE *GetPort)(
        nsIDOMLocation *This,
        nsAString *aPort);

    nsresult (STDMETHODCALLTYPE *SetPort)(
        nsIDOMLocation *This,
        const nsAString *aPort);

    nsresult (STDMETHODCALLTYPE *GetProtocol)(
        nsIDOMLocation *This,
        nsAString *aProtocol);

    nsresult (STDMETHODCALLTYPE *SetProtocol)(
        nsIDOMLocation *This,
        const nsAString *aProtocol);

    nsresult (STDMETHODCALLTYPE *GetSearch)(
        nsIDOMLocation *This,
        nsAString *aSearch);

    nsresult (STDMETHODCALLTYPE *SetSearch)(
        nsIDOMLocation *This,
        const nsAString *aSearch);

    nsresult (STDMETHODCALLTYPE *GetOrigin)(
        nsIDOMLocation *This,
        nsAString *aOrigin);

    nsresult (STDMETHODCALLTYPE *Reload)(
        nsIDOMLocation *This,
        cpp_bool forceget);

    nsresult (STDMETHODCALLTYPE *Replace)(
        nsIDOMLocation *This,
        const nsAString *url);

    nsresult (STDMETHODCALLTYPE *Assign)(
        nsIDOMLocation *This,
        const nsAString *url);

    nsresult (STDMETHODCALLTYPE *ToString)(
        nsIDOMLocation *This,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *ValueOf)(
        nsIDOMLocation *This,
        nsIDOMLocation **_retval);

    END_INTERFACE
} nsIDOMLocationVtbl;

interface nsIDOMLocation {
    CONST_VTBL nsIDOMLocationVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMLocation_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMLocation_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMLocation_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMLocation methods ***/
#define nsIDOMLocation_GetHash(This,aHash) (This)->lpVtbl->GetHash(This,aHash)
#define nsIDOMLocation_SetHash(This,aHash) (This)->lpVtbl->SetHash(This,aHash)
#define nsIDOMLocation_GetHost(This,aHost) (This)->lpVtbl->GetHost(This,aHost)
#define nsIDOMLocation_SetHost(This,aHost) (This)->lpVtbl->SetHost(This,aHost)
#define nsIDOMLocation_GetHostname(This,aHostname) (This)->lpVtbl->GetHostname(This,aHostname)
#define nsIDOMLocation_SetHostname(This,aHostname) (This)->lpVtbl->SetHostname(This,aHostname)
#define nsIDOMLocation_GetHref(This,aHref) (This)->lpVtbl->GetHref(This,aHref)
#define nsIDOMLocation_SetHref(This,aHref) (This)->lpVtbl->SetHref(This,aHref)
#define nsIDOMLocation_GetPathname(This,aPathname) (This)->lpVtbl->GetPathname(This,aPathname)
#define nsIDOMLocation_SetPathname(This,aPathname) (This)->lpVtbl->SetPathname(This,aPathname)
#define nsIDOMLocation_GetPort(This,aPort) (This)->lpVtbl->GetPort(This,aPort)
#define nsIDOMLocation_SetPort(This,aPort) (This)->lpVtbl->SetPort(This,aPort)
#define nsIDOMLocation_GetProtocol(This,aProtocol) (This)->lpVtbl->GetProtocol(This,aProtocol)
#define nsIDOMLocation_SetProtocol(This,aProtocol) (This)->lpVtbl->SetProtocol(This,aProtocol)
#define nsIDOMLocation_GetSearch(This,aSearch) (This)->lpVtbl->GetSearch(This,aSearch)
#define nsIDOMLocation_SetSearch(This,aSearch) (This)->lpVtbl->SetSearch(This,aSearch)
#define nsIDOMLocation_GetOrigin(This,aOrigin) (This)->lpVtbl->GetOrigin(This,aOrigin)
#define nsIDOMLocation_Reload(This,forceget) (This)->lpVtbl->Reload(This,forceget)
#define nsIDOMLocation_Replace(This,url) (This)->lpVtbl->Replace(This,url)
#define nsIDOMLocation_Assign(This,url) (This)->lpVtbl->Assign(This,url)
#define nsIDOMLocation_ToString(This,_retval) (This)->lpVtbl->ToString(This,_retval)
#define nsIDOMLocation_ValueOf(This,_retval) (This)->lpVtbl->ValueOf(This,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMLocation_QueryInterface(nsIDOMLocation* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMLocation_AddRef(nsIDOMLocation* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMLocation_Release(nsIDOMLocation* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMLocation methods ***/
static FORCEINLINE nsresult nsIDOMLocation_GetHash(nsIDOMLocation* This,nsAString *aHash) {
    return This->lpVtbl->GetHash(This,aHash);
}
static FORCEINLINE nsresult nsIDOMLocation_SetHash(nsIDOMLocation* This,const nsAString *aHash) {
    return This->lpVtbl->SetHash(This,aHash);
}
static FORCEINLINE nsresult nsIDOMLocation_GetHost(nsIDOMLocation* This,nsAString *aHost) {
    return This->lpVtbl->GetHost(This,aHost);
}
static FORCEINLINE nsresult nsIDOMLocation_SetHost(nsIDOMLocation* This,const nsAString *aHost) {
    return This->lpVtbl->SetHost(This,aHost);
}
static FORCEINLINE nsresult nsIDOMLocation_GetHostname(nsIDOMLocation* This,nsAString *aHostname) {
    return This->lpVtbl->GetHostname(This,aHostname);
}
static FORCEINLINE nsresult nsIDOMLocation_SetHostname(nsIDOMLocation* This,const nsAString *aHostname) {
    return This->lpVtbl->SetHostname(This,aHostname);
}
static FORCEINLINE nsresult nsIDOMLocation_GetHref(nsIDOMLocation* This,nsAString *aHref) {
    return This->lpVtbl->GetHref(This,aHref);
}
static FORCEINLINE nsresult nsIDOMLocation_SetHref(nsIDOMLocation* This,const nsAString *aHref) {
    return This->lpVtbl->SetHref(This,aHref);
}
static FORCEINLINE nsresult nsIDOMLocation_GetPathname(nsIDOMLocation* This,nsAString *aPathname) {
    return This->lpVtbl->GetPathname(This,aPathname);
}
static FORCEINLINE nsresult nsIDOMLocation_SetPathname(nsIDOMLocation* This,const nsAString *aPathname) {
    return This->lpVtbl->SetPathname(This,aPathname);
}
static FORCEINLINE nsresult nsIDOMLocation_GetPort(nsIDOMLocation* This,nsAString *aPort) {
    return This->lpVtbl->GetPort(This,aPort);
}
static FORCEINLINE nsresult nsIDOMLocation_SetPort(nsIDOMLocation* This,const nsAString *aPort) {
    return This->lpVtbl->SetPort(This,aPort);
}
static FORCEINLINE nsresult nsIDOMLocation_GetProtocol(nsIDOMLocation* This,nsAString *aProtocol) {
    return This->lpVtbl->GetProtocol(This,aProtocol);
}
static FORCEINLINE nsresult nsIDOMLocation_SetProtocol(nsIDOMLocation* This,const nsAString *aProtocol) {
    return This->lpVtbl->SetProtocol(This,aProtocol);
}
static FORCEINLINE nsresult nsIDOMLocation_GetSearch(nsIDOMLocation* This,nsAString *aSearch) {
    return This->lpVtbl->GetSearch(This,aSearch);
}
static FORCEINLINE nsresult nsIDOMLocation_SetSearch(nsIDOMLocation* This,const nsAString *aSearch) {
    return This->lpVtbl->SetSearch(This,aSearch);
}
static FORCEINLINE nsresult nsIDOMLocation_GetOrigin(nsIDOMLocation* This,nsAString *aOrigin) {
    return This->lpVtbl->GetOrigin(This,aOrigin);
}
static FORCEINLINE nsresult nsIDOMLocation_Reload(nsIDOMLocation* This,cpp_bool forceget) {
    return This->lpVtbl->Reload(This,forceget);
}
static FORCEINLINE nsresult nsIDOMLocation_Replace(nsIDOMLocation* This,const nsAString *url) {
    return This->lpVtbl->Replace(This,url);
}
static FORCEINLINE nsresult nsIDOMLocation_Assign(nsIDOMLocation* This,const nsAString *url) {
    return This->lpVtbl->Assign(This,url);
}
static FORCEINLINE nsresult nsIDOMLocation_ToString(nsIDOMLocation* This,nsAString *_retval) {
    return This->lpVtbl->ToString(This,_retval);
}
static FORCEINLINE nsresult nsIDOMLocation_ValueOf(nsIDOMLocation* This,nsIDOMLocation **_retval) {
    return This->lpVtbl->ValueOf(This,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIDOMLocation_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMCSSRule interface
 */
#ifndef __nsIDOMCSSRule_INTERFACE_DEFINED__
#define __nsIDOMCSSRule_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMCSSRule, 0x4d6b3bad, 0xf53c, 0x4585, 0x82,0xf6, 0x62,0x98,0x2e,0x27,0xed,0xe8);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("4d6b3bad-f53c-4585-82f6-62982e27ede8")
nsIDOMCSSRule : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetType(
        UINT16 *aType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCssText(
        nsAString *aCssText) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCssText(
        const nsAString *aCssText) = 0;

    virtual nsresult STDMETHODCALLTYPE GetParentStyleSheet(
        nsIDOMCSSStyleSheet **aParentStyleSheet) = 0;

    virtual nsresult STDMETHODCALLTYPE GetParentRule(
        nsIDOMCSSRule **aParentRule) = 0;

    virtual int STDMETHODCALLTYPE GetCSSRule(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMCSSRule, 0x4d6b3bad, 0xf53c, 0x4585, 0x82,0xf6, 0x62,0x98,0x2e,0x27,0xed,0xe8)
#endif
#else
typedef struct nsIDOMCSSRuleVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMCSSRule *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMCSSRule *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMCSSRule *This);

    /*** nsIDOMCSSRule methods ***/
    nsresult (STDMETHODCALLTYPE *GetType)(
        nsIDOMCSSRule *This,
        UINT16 *aType);

    nsresult (STDMETHODCALLTYPE *GetCssText)(
        nsIDOMCSSRule *This,
        nsAString *aCssText);

    nsresult (STDMETHODCALLTYPE *SetCssText)(
        nsIDOMCSSRule *This,
        const nsAString *aCssText);

    nsresult (STDMETHODCALLTYPE *GetParentStyleSheet)(
        nsIDOMCSSRule *This,
        nsIDOMCSSStyleSheet **aParentStyleSheet);

    nsresult (STDMETHODCALLTYPE *GetParentRule)(
        nsIDOMCSSRule *This,
        nsIDOMCSSRule **aParentRule);

    int (STDMETHODCALLTYPE *GetCSSRule)(
        nsIDOMCSSRule *This);

    END_INTERFACE
} nsIDOMCSSRuleVtbl;

interface nsIDOMCSSRule {
    CONST_VTBL nsIDOMCSSRuleVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMCSSRule_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMCSSRule_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMCSSRule_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMCSSRule methods ***/
#define nsIDOMCSSRule_GetType(This,aType) (This)->lpVtbl->GetType(This,aType)
#define nsIDOMCSSRule_GetCssText(This,aCssText) (This)->lpVtbl->GetCssText(This,aCssText)
#define nsIDOMCSSRule_SetCssText(This,aCssText) (This)->lpVtbl->SetCssText(This,aCssText)
#define nsIDOMCSSRule_GetParentStyleSheet(This,aParentStyleSheet) (This)->lpVtbl->GetParentStyleSheet(This,aParentStyleSheet)
#define nsIDOMCSSRule_GetParentRule(This,aParentRule) (This)->lpVtbl->GetParentRule(This,aParentRule)
#define nsIDOMCSSRule_GetCSSRule(This) (This)->lpVtbl->GetCSSRule(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMCSSRule_QueryInterface(nsIDOMCSSRule* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMCSSRule_AddRef(nsIDOMCSSRule* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMCSSRule_Release(nsIDOMCSSRule* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMCSSRule methods ***/
static FORCEINLINE nsresult nsIDOMCSSRule_GetType(nsIDOMCSSRule* This,UINT16 *aType) {
    return This->lpVtbl->GetType(This,aType);
}
static FORCEINLINE nsresult nsIDOMCSSRule_GetCssText(nsIDOMCSSRule* This,nsAString *aCssText) {
    return This->lpVtbl->GetCssText(This,aCssText);
}
static FORCEINLINE nsresult nsIDOMCSSRule_SetCssText(nsIDOMCSSRule* This,const nsAString *aCssText) {
    return This->lpVtbl->SetCssText(This,aCssText);
}
static FORCEINLINE nsresult nsIDOMCSSRule_GetParentStyleSheet(nsIDOMCSSRule* This,nsIDOMCSSStyleSheet **aParentStyleSheet) {
    return This->lpVtbl->GetParentStyleSheet(This,aParentStyleSheet);
}
static FORCEINLINE nsresult nsIDOMCSSRule_GetParentRule(nsIDOMCSSRule* This,nsIDOMCSSRule **aParentRule) {
    return This->lpVtbl->GetParentRule(This,aParentRule);
}
static FORCEINLINE int nsIDOMCSSRule_GetCSSRule(nsIDOMCSSRule* This) {
    return This->lpVtbl->GetCSSRule(This);
}
#endif
#endif

#endif


#endif  /* __nsIDOMCSSRule_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMCSSStyleDeclaration interface
 */
#ifndef __nsIDOMCSSStyleDeclaration_INTERFACE_DEFINED__
#define __nsIDOMCSSStyleDeclaration_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMCSSStyleDeclaration, 0xa6cf90be, 0x15b3, 0x11d2, 0x93,0x2e, 0x00,0x80,0x5f,0x8a,0xdd,0x32);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("a6cf90be-15b3-11d2-932e-00805f8add32")
nsIDOMCSSStyleDeclaration : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetCssText(
        nsAString *aCssText) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCssText(
        const nsAString *aCssText) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPropertyValue(
        const nsAString *propertyName,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPropertyCSSValue(
        const nsAString *propertyName,
        nsIDOMCSSValue **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveProperty(
        const nsAString *propertyName,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPropertyPriority(
        const nsAString *propertyName,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetProperty(
        const nsAString *propertyName,
        const nsAString *value,
        const nsAString *priority) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLength(
        UINT32 *aLength) = 0;

    virtual nsresult STDMETHODCALLTYPE Item(
        UINT32 index,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetParentRule(
        nsIDOMCSSRule **aParentRule) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMCSSStyleDeclaration, 0xa6cf90be, 0x15b3, 0x11d2, 0x93,0x2e, 0x00,0x80,0x5f,0x8a,0xdd,0x32)
#endif
#else
typedef struct nsIDOMCSSStyleDeclarationVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMCSSStyleDeclaration *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMCSSStyleDeclaration *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMCSSStyleDeclaration *This);

    /*** nsIDOMCSSStyleDeclaration methods ***/
    nsresult (STDMETHODCALLTYPE *GetCssText)(
        nsIDOMCSSStyleDeclaration *This,
        nsAString *aCssText);

    nsresult (STDMETHODCALLTYPE *SetCssText)(
        nsIDOMCSSStyleDeclaration *This,
        const nsAString *aCssText);

    nsresult (STDMETHODCALLTYPE *GetPropertyValue)(
        nsIDOMCSSStyleDeclaration *This,
        const nsAString *propertyName,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *GetPropertyCSSValue)(
        nsIDOMCSSStyleDeclaration *This,
        const nsAString *propertyName,
        nsIDOMCSSValue **_retval);

    nsresult (STDMETHODCALLTYPE *RemoveProperty)(
        nsIDOMCSSStyleDeclaration *This,
        const nsAString *propertyName,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *GetPropertyPriority)(
        nsIDOMCSSStyleDeclaration *This,
        const nsAString *propertyName,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *SetProperty)(
        nsIDOMCSSStyleDeclaration *This,
        const nsAString *propertyName,
        const nsAString *value,
        const nsAString *priority);

    nsresult (STDMETHODCALLTYPE *GetLength)(
        nsIDOMCSSStyleDeclaration *This,
        UINT32 *aLength);

    nsresult (STDMETHODCALLTYPE *Item)(
        nsIDOMCSSStyleDeclaration *This,
        UINT32 index,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *GetParentRule)(
        nsIDOMCSSStyleDeclaration *This,
        nsIDOMCSSRule **aParentRule);

    END_INTERFACE
} nsIDOMCSSStyleDeclarationVtbl;

interface nsIDOMCSSStyleDeclaration {
    CONST_VTBL nsIDOMCSSStyleDeclarationVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMCSSStyleDeclaration_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMCSSStyleDeclaration_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMCSSStyleDeclaration_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMCSSStyleDeclaration methods ***/
#define nsIDOMCSSStyleDeclaration_GetCssText(This,aCssText) (This)->lpVtbl->GetCssText(This,aCssText)
#define nsIDOMCSSStyleDeclaration_SetCssText(This,aCssText) (This)->lpVtbl->SetCssText(This,aCssText)
#define nsIDOMCSSStyleDeclaration_GetPropertyValue(This,propertyName,_retval) (This)->lpVtbl->GetPropertyValue(This,propertyName,_retval)
#define nsIDOMCSSStyleDeclaration_GetPropertyCSSValue(This,propertyName,_retval) (This)->lpVtbl->GetPropertyCSSValue(This,propertyName,_retval)
#define nsIDOMCSSStyleDeclaration_RemoveProperty(This,propertyName,_retval) (This)->lpVtbl->RemoveProperty(This,propertyName,_retval)
#define nsIDOMCSSStyleDeclaration_GetPropertyPriority(This,propertyName,_retval) (This)->lpVtbl->GetPropertyPriority(This,propertyName,_retval)
#define nsIDOMCSSStyleDeclaration_SetProperty(This,propertyName,value,priority) (This)->lpVtbl->SetProperty(This,propertyName,value,priority)
#define nsIDOMCSSStyleDeclaration_GetLength(This,aLength) (This)->lpVtbl->GetLength(This,aLength)
#define nsIDOMCSSStyleDeclaration_Item(This,index,_retval) (This)->lpVtbl->Item(This,index,_retval)
#define nsIDOMCSSStyleDeclaration_GetParentRule(This,aParentRule) (This)->lpVtbl->GetParentRule(This,aParentRule)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMCSSStyleDeclaration_QueryInterface(nsIDOMCSSStyleDeclaration* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMCSSStyleDeclaration_AddRef(nsIDOMCSSStyleDeclaration* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMCSSStyleDeclaration_Release(nsIDOMCSSStyleDeclaration* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMCSSStyleDeclaration methods ***/
static FORCEINLINE nsresult nsIDOMCSSStyleDeclaration_GetCssText(nsIDOMCSSStyleDeclaration* This,nsAString *aCssText) {
    return This->lpVtbl->GetCssText(This,aCssText);
}
static FORCEINLINE nsresult nsIDOMCSSStyleDeclaration_SetCssText(nsIDOMCSSStyleDeclaration* This,const nsAString *aCssText) {
    return This->lpVtbl->SetCssText(This,aCssText);
}
static FORCEINLINE nsresult nsIDOMCSSStyleDeclaration_GetPropertyValue(nsIDOMCSSStyleDeclaration* This,const nsAString *propertyName,nsAString *_retval) {
    return This->lpVtbl->GetPropertyValue(This,propertyName,_retval);
}
static FORCEINLINE nsresult nsIDOMCSSStyleDeclaration_GetPropertyCSSValue(nsIDOMCSSStyleDeclaration* This,const nsAString *propertyName,nsIDOMCSSValue **_retval) {
    return This->lpVtbl->GetPropertyCSSValue(This,propertyName,_retval);
}
static FORCEINLINE nsresult nsIDOMCSSStyleDeclaration_RemoveProperty(nsIDOMCSSStyleDeclaration* This,const nsAString *propertyName,nsAString *_retval) {
    return This->lpVtbl->RemoveProperty(This,propertyName,_retval);
}
static FORCEINLINE nsresult nsIDOMCSSStyleDeclaration_GetPropertyPriority(nsIDOMCSSStyleDeclaration* This,const nsAString *propertyName,nsAString *_retval) {
    return This->lpVtbl->GetPropertyPriority(This,propertyName,_retval);
}
static FORCEINLINE nsresult nsIDOMCSSStyleDeclaration_SetProperty(nsIDOMCSSStyleDeclaration* This,const nsAString *propertyName,const nsAString *value,const nsAString *priority) {
    return This->lpVtbl->SetProperty(This,propertyName,value,priority);
}
static FORCEINLINE nsresult nsIDOMCSSStyleDeclaration_GetLength(nsIDOMCSSStyleDeclaration* This,UINT32 *aLength) {
    return This->lpVtbl->GetLength(This,aLength);
}
static FORCEINLINE nsresult nsIDOMCSSStyleDeclaration_Item(nsIDOMCSSStyleDeclaration* This,UINT32 index,nsAString *_retval) {
    return This->lpVtbl->Item(This,index,_retval);
}
static FORCEINLINE nsresult nsIDOMCSSStyleDeclaration_GetParentRule(nsIDOMCSSStyleDeclaration* This,nsIDOMCSSRule **aParentRule) {
    return This->lpVtbl->GetParentRule(This,aParentRule);
}
#endif
#endif

#endif


#endif  /* __nsIDOMCSSStyleDeclaration_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMCSSRuleList interface
 */
#ifndef __nsIDOMCSSRuleList_INTERFACE_DEFINED__
#define __nsIDOMCSSRuleList_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMCSSRuleList, 0xa6cf90c0, 0x15b3, 0x11d2, 0x93,0x2e, 0x00,0x80,0x5f,0x8a,0xdd,0x32);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("a6cf90c0-15b3-11d2-932e-00805f8add32")
nsIDOMCSSRuleList : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetLength(
        UINT32 *aLength) = 0;

    virtual nsresult STDMETHODCALLTYPE Item(
        UINT32 index,
        nsIDOMCSSRule **_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMCSSRuleList, 0xa6cf90c0, 0x15b3, 0x11d2, 0x93,0x2e, 0x00,0x80,0x5f,0x8a,0xdd,0x32)
#endif
#else
typedef struct nsIDOMCSSRuleListVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMCSSRuleList *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMCSSRuleList *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMCSSRuleList *This);

    /*** nsIDOMCSSRuleList methods ***/
    nsresult (STDMETHODCALLTYPE *GetLength)(
        nsIDOMCSSRuleList *This,
        UINT32 *aLength);

    nsresult (STDMETHODCALLTYPE *Item)(
        nsIDOMCSSRuleList *This,
        UINT32 index,
        nsIDOMCSSRule **_retval);

    END_INTERFACE
} nsIDOMCSSRuleListVtbl;

interface nsIDOMCSSRuleList {
    CONST_VTBL nsIDOMCSSRuleListVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMCSSRuleList_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMCSSRuleList_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMCSSRuleList_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMCSSRuleList methods ***/
#define nsIDOMCSSRuleList_GetLength(This,aLength) (This)->lpVtbl->GetLength(This,aLength)
#define nsIDOMCSSRuleList_Item(This,index,_retval) (This)->lpVtbl->Item(This,index,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMCSSRuleList_QueryInterface(nsIDOMCSSRuleList* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMCSSRuleList_AddRef(nsIDOMCSSRuleList* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMCSSRuleList_Release(nsIDOMCSSRuleList* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMCSSRuleList methods ***/
static FORCEINLINE nsresult nsIDOMCSSRuleList_GetLength(nsIDOMCSSRuleList* This,UINT32 *aLength) {
    return This->lpVtbl->GetLength(This,aLength);
}
static FORCEINLINE nsresult nsIDOMCSSRuleList_Item(nsIDOMCSSRuleList* This,UINT32 index,nsIDOMCSSRule **_retval) {
    return This->lpVtbl->Item(This,index,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIDOMCSSRuleList_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMStyleSheet interface
 */
#ifndef __nsIDOMStyleSheet_INTERFACE_DEFINED__
#define __nsIDOMStyleSheet_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMStyleSheet, 0xa6cf9080, 0x15b3, 0x11d2, 0x93,0x2e, 0x00,0x80,0x5f,0x8a,0xdd,0x32);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("a6cf9080-15b3-11d2-932e-00805f8add32")
nsIDOMStyleSheet : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetType(
        nsAString *aType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDisabled(
        cpp_bool *aDisabled) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDisabled(
        cpp_bool aDisabled) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOwnerNode(
        nsIDOMNode **aOwnerNode) = 0;

    virtual nsresult STDMETHODCALLTYPE GetParentStyleSheet(
        nsIDOMStyleSheet **aParentStyleSheet) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHref(
        nsAString *aHref) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTitle(
        nsAString *aTitle) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMedia(
        nsIDOMMediaList **aMedia) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMStyleSheet, 0xa6cf9080, 0x15b3, 0x11d2, 0x93,0x2e, 0x00,0x80,0x5f,0x8a,0xdd,0x32)
#endif
#else
typedef struct nsIDOMStyleSheetVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMStyleSheet *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMStyleSheet *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMStyleSheet *This);

    /*** nsIDOMStyleSheet methods ***/
    nsresult (STDMETHODCALLTYPE *GetType)(
        nsIDOMStyleSheet *This,
        nsAString *aType);

    nsresult (STDMETHODCALLTYPE *GetDisabled)(
        nsIDOMStyleSheet *This,
        cpp_bool *aDisabled);

    nsresult (STDMETHODCALLTYPE *SetDisabled)(
        nsIDOMStyleSheet *This,
        cpp_bool aDisabled);

    nsresult (STDMETHODCALLTYPE *GetOwnerNode)(
        nsIDOMStyleSheet *This,
        nsIDOMNode **aOwnerNode);

    nsresult (STDMETHODCALLTYPE *GetParentStyleSheet)(
        nsIDOMStyleSheet *This,
        nsIDOMStyleSheet **aParentStyleSheet);

    nsresult (STDMETHODCALLTYPE *GetHref)(
        nsIDOMStyleSheet *This,
        nsAString *aHref);

    nsresult (STDMETHODCALLTYPE *GetTitle)(
        nsIDOMStyleSheet *This,
        nsAString *aTitle);

    nsresult (STDMETHODCALLTYPE *GetMedia)(
        nsIDOMStyleSheet *This,
        nsIDOMMediaList **aMedia);

    END_INTERFACE
} nsIDOMStyleSheetVtbl;

interface nsIDOMStyleSheet {
    CONST_VTBL nsIDOMStyleSheetVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMStyleSheet_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMStyleSheet_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMStyleSheet_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMStyleSheet methods ***/
#define nsIDOMStyleSheet_GetType(This,aType) (This)->lpVtbl->GetType(This,aType)
#define nsIDOMStyleSheet_GetDisabled(This,aDisabled) (This)->lpVtbl->GetDisabled(This,aDisabled)
#define nsIDOMStyleSheet_SetDisabled(This,aDisabled) (This)->lpVtbl->SetDisabled(This,aDisabled)
#define nsIDOMStyleSheet_GetOwnerNode(This,aOwnerNode) (This)->lpVtbl->GetOwnerNode(This,aOwnerNode)
#define nsIDOMStyleSheet_GetParentStyleSheet(This,aParentStyleSheet) (This)->lpVtbl->GetParentStyleSheet(This,aParentStyleSheet)
#define nsIDOMStyleSheet_GetHref(This,aHref) (This)->lpVtbl->GetHref(This,aHref)
#define nsIDOMStyleSheet_GetTitle(This,aTitle) (This)->lpVtbl->GetTitle(This,aTitle)
#define nsIDOMStyleSheet_GetMedia(This,aMedia) (This)->lpVtbl->GetMedia(This,aMedia)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMStyleSheet_QueryInterface(nsIDOMStyleSheet* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMStyleSheet_AddRef(nsIDOMStyleSheet* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMStyleSheet_Release(nsIDOMStyleSheet* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMStyleSheet methods ***/
static FORCEINLINE nsresult nsIDOMStyleSheet_GetType(nsIDOMStyleSheet* This,nsAString *aType) {
    return This->lpVtbl->GetType(This,aType);
}
static FORCEINLINE nsresult nsIDOMStyleSheet_GetDisabled(nsIDOMStyleSheet* This,cpp_bool *aDisabled) {
    return This->lpVtbl->GetDisabled(This,aDisabled);
}
static FORCEINLINE nsresult nsIDOMStyleSheet_SetDisabled(nsIDOMStyleSheet* This,cpp_bool aDisabled) {
    return This->lpVtbl->SetDisabled(This,aDisabled);
}
static FORCEINLINE nsresult nsIDOMStyleSheet_GetOwnerNode(nsIDOMStyleSheet* This,nsIDOMNode **aOwnerNode) {
    return This->lpVtbl->GetOwnerNode(This,aOwnerNode);
}
static FORCEINLINE nsresult nsIDOMStyleSheet_GetParentStyleSheet(nsIDOMStyleSheet* This,nsIDOMStyleSheet **aParentStyleSheet) {
    return This->lpVtbl->GetParentStyleSheet(This,aParentStyleSheet);
}
static FORCEINLINE nsresult nsIDOMStyleSheet_GetHref(nsIDOMStyleSheet* This,nsAString *aHref) {
    return This->lpVtbl->GetHref(This,aHref);
}
static FORCEINLINE nsresult nsIDOMStyleSheet_GetTitle(nsIDOMStyleSheet* This,nsAString *aTitle) {
    return This->lpVtbl->GetTitle(This,aTitle);
}
static FORCEINLINE nsresult nsIDOMStyleSheet_GetMedia(nsIDOMStyleSheet* This,nsIDOMMediaList **aMedia) {
    return This->lpVtbl->GetMedia(This,aMedia);
}
#endif
#endif

#endif


#endif  /* __nsIDOMStyleSheet_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMCSSStyleSheet interface
 */
#ifndef __nsIDOMCSSStyleSheet_INTERFACE_DEFINED__
#define __nsIDOMCSSStyleSheet_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMCSSStyleSheet, 0xa6cf90c2, 0x15b3, 0x11d2, 0x93,0x2e, 0x00,0x80,0x5f,0x8a,0xdd,0x32);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("a6cf90c2-15b3-11d2-932e-00805f8add32")
nsIDOMCSSStyleSheet : public nsIDOMStyleSheet
{
    virtual nsresult STDMETHODCALLTYPE GetOwnerRule(
        nsIDOMCSSRule **aOwnerRule) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCssRules(
        nsIDOMCSSRuleList **aCssRules) = 0;

    virtual nsresult STDMETHODCALLTYPE InsertRule(
        const nsAString *rule,
        UINT32 index,
        UINT32 *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE DeleteRule(
        UINT32 index) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMCSSStyleSheet, 0xa6cf90c2, 0x15b3, 0x11d2, 0x93,0x2e, 0x00,0x80,0x5f,0x8a,0xdd,0x32)
#endif
#else
typedef struct nsIDOMCSSStyleSheetVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMCSSStyleSheet *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMCSSStyleSheet *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMCSSStyleSheet *This);

    /*** nsIDOMStyleSheet methods ***/
    nsresult (STDMETHODCALLTYPE *GetType)(
        nsIDOMCSSStyleSheet *This,
        nsAString *aType);

    nsresult (STDMETHODCALLTYPE *GetDisabled)(
        nsIDOMCSSStyleSheet *This,
        cpp_bool *aDisabled);

    nsresult (STDMETHODCALLTYPE *SetDisabled)(
        nsIDOMCSSStyleSheet *This,
        cpp_bool aDisabled);

    nsresult (STDMETHODCALLTYPE *GetOwnerNode)(
        nsIDOMCSSStyleSheet *This,
        nsIDOMNode **aOwnerNode);

    nsresult (STDMETHODCALLTYPE *GetParentStyleSheet)(
        nsIDOMCSSStyleSheet *This,
        nsIDOMStyleSheet **aParentStyleSheet);

    nsresult (STDMETHODCALLTYPE *GetHref)(
        nsIDOMCSSStyleSheet *This,
        nsAString *aHref);

    nsresult (STDMETHODCALLTYPE *GetTitle)(
        nsIDOMCSSStyleSheet *This,
        nsAString *aTitle);

    nsresult (STDMETHODCALLTYPE *GetMedia)(
        nsIDOMCSSStyleSheet *This,
        nsIDOMMediaList **aMedia);

    /*** nsIDOMCSSStyleSheet methods ***/
    nsresult (STDMETHODCALLTYPE *GetOwnerRule)(
        nsIDOMCSSStyleSheet *This,
        nsIDOMCSSRule **aOwnerRule);

    nsresult (STDMETHODCALLTYPE *GetCssRules)(
        nsIDOMCSSStyleSheet *This,
        nsIDOMCSSRuleList **aCssRules);

    nsresult (STDMETHODCALLTYPE *InsertRule)(
        nsIDOMCSSStyleSheet *This,
        const nsAString *rule,
        UINT32 index,
        UINT32 *_retval);

    nsresult (STDMETHODCALLTYPE *DeleteRule)(
        nsIDOMCSSStyleSheet *This,
        UINT32 index);

    END_INTERFACE
} nsIDOMCSSStyleSheetVtbl;

interface nsIDOMCSSStyleSheet {
    CONST_VTBL nsIDOMCSSStyleSheetVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMCSSStyleSheet_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMCSSStyleSheet_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMCSSStyleSheet_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMStyleSheet methods ***/
#define nsIDOMCSSStyleSheet_GetType(This,aType) (This)->lpVtbl->GetType(This,aType)
#define nsIDOMCSSStyleSheet_GetDisabled(This,aDisabled) (This)->lpVtbl->GetDisabled(This,aDisabled)
#define nsIDOMCSSStyleSheet_SetDisabled(This,aDisabled) (This)->lpVtbl->SetDisabled(This,aDisabled)
#define nsIDOMCSSStyleSheet_GetOwnerNode(This,aOwnerNode) (This)->lpVtbl->GetOwnerNode(This,aOwnerNode)
#define nsIDOMCSSStyleSheet_GetParentStyleSheet(This,aParentStyleSheet) (This)->lpVtbl->GetParentStyleSheet(This,aParentStyleSheet)
#define nsIDOMCSSStyleSheet_GetHref(This,aHref) (This)->lpVtbl->GetHref(This,aHref)
#define nsIDOMCSSStyleSheet_GetTitle(This,aTitle) (This)->lpVtbl->GetTitle(This,aTitle)
#define nsIDOMCSSStyleSheet_GetMedia(This,aMedia) (This)->lpVtbl->GetMedia(This,aMedia)
/*** nsIDOMCSSStyleSheet methods ***/
#define nsIDOMCSSStyleSheet_GetOwnerRule(This,aOwnerRule) (This)->lpVtbl->GetOwnerRule(This,aOwnerRule)
#define nsIDOMCSSStyleSheet_GetCssRules(This,aCssRules) (This)->lpVtbl->GetCssRules(This,aCssRules)
#define nsIDOMCSSStyleSheet_InsertRule(This,rule,index,_retval) (This)->lpVtbl->InsertRule(This,rule,index,_retval)
#define nsIDOMCSSStyleSheet_DeleteRule(This,index) (This)->lpVtbl->DeleteRule(This,index)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMCSSStyleSheet_QueryInterface(nsIDOMCSSStyleSheet* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMCSSStyleSheet_AddRef(nsIDOMCSSStyleSheet* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMCSSStyleSheet_Release(nsIDOMCSSStyleSheet* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMStyleSheet methods ***/
static FORCEINLINE nsresult nsIDOMCSSStyleSheet_GetType(nsIDOMCSSStyleSheet* This,nsAString *aType) {
    return This->lpVtbl->GetType(This,aType);
}
static FORCEINLINE nsresult nsIDOMCSSStyleSheet_GetDisabled(nsIDOMCSSStyleSheet* This,cpp_bool *aDisabled) {
    return This->lpVtbl->GetDisabled(This,aDisabled);
}
static FORCEINLINE nsresult nsIDOMCSSStyleSheet_SetDisabled(nsIDOMCSSStyleSheet* This,cpp_bool aDisabled) {
    return This->lpVtbl->SetDisabled(This,aDisabled);
}
static FORCEINLINE nsresult nsIDOMCSSStyleSheet_GetOwnerNode(nsIDOMCSSStyleSheet* This,nsIDOMNode **aOwnerNode) {
    return This->lpVtbl->GetOwnerNode(This,aOwnerNode);
}
static FORCEINLINE nsresult nsIDOMCSSStyleSheet_GetParentStyleSheet(nsIDOMCSSStyleSheet* This,nsIDOMStyleSheet **aParentStyleSheet) {
    return This->lpVtbl->GetParentStyleSheet(This,aParentStyleSheet);
}
static FORCEINLINE nsresult nsIDOMCSSStyleSheet_GetHref(nsIDOMCSSStyleSheet* This,nsAString *aHref) {
    return This->lpVtbl->GetHref(This,aHref);
}
static FORCEINLINE nsresult nsIDOMCSSStyleSheet_GetTitle(nsIDOMCSSStyleSheet* This,nsAString *aTitle) {
    return This->lpVtbl->GetTitle(This,aTitle);
}
static FORCEINLINE nsresult nsIDOMCSSStyleSheet_GetMedia(nsIDOMCSSStyleSheet* This,nsIDOMMediaList **aMedia) {
    return This->lpVtbl->GetMedia(This,aMedia);
}
/*** nsIDOMCSSStyleSheet methods ***/
static FORCEINLINE nsresult nsIDOMCSSStyleSheet_GetOwnerRule(nsIDOMCSSStyleSheet* This,nsIDOMCSSRule **aOwnerRule) {
    return This->lpVtbl->GetOwnerRule(This,aOwnerRule);
}
static FORCEINLINE nsresult nsIDOMCSSStyleSheet_GetCssRules(nsIDOMCSSStyleSheet* This,nsIDOMCSSRuleList **aCssRules) {
    return This->lpVtbl->GetCssRules(This,aCssRules);
}
static FORCEINLINE nsresult nsIDOMCSSStyleSheet_InsertRule(nsIDOMCSSStyleSheet* This,const nsAString *rule,UINT32 index,UINT32 *_retval) {
    return This->lpVtbl->InsertRule(This,rule,index,_retval);
}
static FORCEINLINE nsresult nsIDOMCSSStyleSheet_DeleteRule(nsIDOMCSSStyleSheet* This,UINT32 index) {
    return This->lpVtbl->DeleteRule(This,index);
}
#endif
#endif

#endif


#endif  /* __nsIDOMCSSStyleSheet_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMStyleSheetList interface
 */
#ifndef __nsIDOMStyleSheetList_INTERFACE_DEFINED__
#define __nsIDOMStyleSheetList_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMStyleSheetList, 0x0e424250, 0xac2a, 0x4fe2, 0xbc,0xcd, 0xa4,0x58,0x24,0xaf,0x09,0x0e);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("0e424250-ac2a-4fe2-bccd-a45824af090e")
nsIDOMStyleSheetList : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetLength(
        UINT32 *aLength) = 0;

    virtual nsresult STDMETHODCALLTYPE Item(
        UINT32 index,
        nsIDOMStyleSheet **_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMStyleSheetList, 0x0e424250, 0xac2a, 0x4fe2, 0xbc,0xcd, 0xa4,0x58,0x24,0xaf,0x09,0x0e)
#endif
#else
typedef struct nsIDOMStyleSheetListVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMStyleSheetList *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMStyleSheetList *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMStyleSheetList *This);

    /*** nsIDOMStyleSheetList methods ***/
    nsresult (STDMETHODCALLTYPE *GetLength)(
        nsIDOMStyleSheetList *This,
        UINT32 *aLength);

    nsresult (STDMETHODCALLTYPE *Item)(
        nsIDOMStyleSheetList *This,
        UINT32 index,
        nsIDOMStyleSheet **_retval);

    END_INTERFACE
} nsIDOMStyleSheetListVtbl;

interface nsIDOMStyleSheetList {
    CONST_VTBL nsIDOMStyleSheetListVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMStyleSheetList_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMStyleSheetList_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMStyleSheetList_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMStyleSheetList methods ***/
#define nsIDOMStyleSheetList_GetLength(This,aLength) (This)->lpVtbl->GetLength(This,aLength)
#define nsIDOMStyleSheetList_Item(This,index,_retval) (This)->lpVtbl->Item(This,index,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMStyleSheetList_QueryInterface(nsIDOMStyleSheetList* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMStyleSheetList_AddRef(nsIDOMStyleSheetList* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMStyleSheetList_Release(nsIDOMStyleSheetList* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMStyleSheetList methods ***/
static FORCEINLINE nsresult nsIDOMStyleSheetList_GetLength(nsIDOMStyleSheetList* This,UINT32 *aLength) {
    return This->lpVtbl->GetLength(This,aLength);
}
static FORCEINLINE nsresult nsIDOMStyleSheetList_Item(nsIDOMStyleSheetList* This,UINT32 index,nsIDOMStyleSheet **_retval) {
    return This->lpVtbl->Item(This,index,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIDOMStyleSheetList_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMNodeList interface
 */
#ifndef __nsIDOMNodeList_INTERFACE_DEFINED__
#define __nsIDOMNodeList_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMNodeList, 0x450cf0ba, 0xde90, 0x4f86, 0x85,0xbf, 0xe1,0x0c,0xc8,0xb8,0x71,0x3f);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("450cf0ba-de90-4f86-85bf-e10cc8b8713f")
nsIDOMNodeList : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE Item(
        UINT32 index,
        nsIDOMNode **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLength(
        UINT32 *aLength) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMNodeList, 0x450cf0ba, 0xde90, 0x4f86, 0x85,0xbf, 0xe1,0x0c,0xc8,0xb8,0x71,0x3f)
#endif
#else
typedef struct nsIDOMNodeListVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMNodeList *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMNodeList *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMNodeList *This);

    /*** nsIDOMNodeList methods ***/
    nsresult (STDMETHODCALLTYPE *Item)(
        nsIDOMNodeList *This,
        UINT32 index,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *GetLength)(
        nsIDOMNodeList *This,
        UINT32 *aLength);

    END_INTERFACE
} nsIDOMNodeListVtbl;

interface nsIDOMNodeList {
    CONST_VTBL nsIDOMNodeListVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMNodeList_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMNodeList_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMNodeList_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMNodeList methods ***/
#define nsIDOMNodeList_Item(This,index,_retval) (This)->lpVtbl->Item(This,index,_retval)
#define nsIDOMNodeList_GetLength(This,aLength) (This)->lpVtbl->GetLength(This,aLength)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMNodeList_QueryInterface(nsIDOMNodeList* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMNodeList_AddRef(nsIDOMNodeList* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMNodeList_Release(nsIDOMNodeList* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMNodeList methods ***/
static FORCEINLINE nsresult nsIDOMNodeList_Item(nsIDOMNodeList* This,UINT32 index,nsIDOMNode **_retval) {
    return This->lpVtbl->Item(This,index,_retval);
}
static FORCEINLINE nsresult nsIDOMNodeList_GetLength(nsIDOMNodeList* This,UINT32 *aLength) {
    return This->lpVtbl->GetLength(This,aLength);
}
#endif
#endif

#endif


#endif  /* __nsIDOMNodeList_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLCollection interface
 */
#ifndef __nsIDOMHTMLCollection_INTERFACE_DEFINED__
#define __nsIDOMHTMLCollection_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLCollection, 0xbb07f567, 0x5b37, 0x4172, 0x92,0xaa, 0x7d,0x00,0xce,0xed,0x48,0x09);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("bb07f567-5b37-4172-92aa-7d00ceed4809")
nsIDOMHTMLCollection : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetLength(
        UINT32 *aLength) = 0;

    virtual nsresult STDMETHODCALLTYPE Item(
        UINT32 index,
        nsIDOMNode **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE NamedItem(
        const nsAString *name,
        nsIDOMNode **_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLCollection, 0xbb07f567, 0x5b37, 0x4172, 0x92,0xaa, 0x7d,0x00,0xce,0xed,0x48,0x09)
#endif
#else
typedef struct nsIDOMHTMLCollectionVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLCollection *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLCollection *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLCollection *This);

    /*** nsIDOMHTMLCollection methods ***/
    nsresult (STDMETHODCALLTYPE *GetLength)(
        nsIDOMHTMLCollection *This,
        UINT32 *aLength);

    nsresult (STDMETHODCALLTYPE *Item)(
        nsIDOMHTMLCollection *This,
        UINT32 index,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *NamedItem)(
        nsIDOMHTMLCollection *This,
        const nsAString *name,
        nsIDOMNode **_retval);

    END_INTERFACE
} nsIDOMHTMLCollectionVtbl;

interface nsIDOMHTMLCollection {
    CONST_VTBL nsIDOMHTMLCollectionVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLCollection_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLCollection_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLCollection_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMHTMLCollection methods ***/
#define nsIDOMHTMLCollection_GetLength(This,aLength) (This)->lpVtbl->GetLength(This,aLength)
#define nsIDOMHTMLCollection_Item(This,index,_retval) (This)->lpVtbl->Item(This,index,_retval)
#define nsIDOMHTMLCollection_NamedItem(This,name,_retval) (This)->lpVtbl->NamedItem(This,name,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLCollection_QueryInterface(nsIDOMHTMLCollection* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLCollection_AddRef(nsIDOMHTMLCollection* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLCollection_Release(nsIDOMHTMLCollection* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMHTMLCollection methods ***/
static FORCEINLINE nsresult nsIDOMHTMLCollection_GetLength(nsIDOMHTMLCollection* This,UINT32 *aLength) {
    return This->lpVtbl->GetLength(This,aLength);
}
static FORCEINLINE nsresult nsIDOMHTMLCollection_Item(nsIDOMHTMLCollection* This,UINT32 index,nsIDOMNode **_retval) {
    return This->lpVtbl->Item(This,index,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLCollection_NamedItem(nsIDOMHTMLCollection* This,const nsAString *name,nsIDOMNode **_retval) {
    return This->lpVtbl->NamedItem(This,name,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLCollection_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMMozNamedAttrMap interface
 */
#ifndef __nsIDOMMozNamedAttrMap_INTERFACE_DEFINED__
#define __nsIDOMMozNamedAttrMap_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMMozNamedAttrMap, 0xcb5564cd, 0x26ec, 0x418f, 0xa6,0xd6, 0x1d,0x57,0xcd,0x2c,0x97,0x1c);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("cb5564cd-26ec-418f-a6d6-1d57cd2c971c")
nsIDOMMozNamedAttrMap : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetNamedItem(
        const nsAString *name,
        nsIDOMAttr **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetNamedItem(
        nsIDOMAttr *arg,
        nsIDOMAttr **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveNamedItem(
        const nsAString *name,
        nsIDOMAttr **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Item(
        UINT32 index,
        nsIDOMAttr **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLength(
        UINT32 *aLength) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNamedItemNS(
        const nsAString *namespaceURI,
        const nsAString *localName,
        nsIDOMAttr **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetNamedItemNS(
        nsIDOMAttr *arg,
        nsIDOMAttr **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveNamedItemNS(
        const nsAString *namespaceURI,
        const nsAString *localName,
        nsIDOMAttr **_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMMozNamedAttrMap, 0xcb5564cd, 0x26ec, 0x418f, 0xa6,0xd6, 0x1d,0x57,0xcd,0x2c,0x97,0x1c)
#endif
#else
typedef struct nsIDOMMozNamedAttrMapVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMMozNamedAttrMap *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMMozNamedAttrMap *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMMozNamedAttrMap *This);

    /*** nsIDOMMozNamedAttrMap methods ***/
    nsresult (STDMETHODCALLTYPE *GetNamedItem)(
        nsIDOMMozNamedAttrMap *This,
        const nsAString *name,
        nsIDOMAttr **_retval);

    nsresult (STDMETHODCALLTYPE *SetNamedItem)(
        nsIDOMMozNamedAttrMap *This,
        nsIDOMAttr *arg,
        nsIDOMAttr **_retval);

    nsresult (STDMETHODCALLTYPE *RemoveNamedItem)(
        nsIDOMMozNamedAttrMap *This,
        const nsAString *name,
        nsIDOMAttr **_retval);

    nsresult (STDMETHODCALLTYPE *Item)(
        nsIDOMMozNamedAttrMap *This,
        UINT32 index,
        nsIDOMAttr **_retval);

    nsresult (STDMETHODCALLTYPE *GetLength)(
        nsIDOMMozNamedAttrMap *This,
        UINT32 *aLength);

    nsresult (STDMETHODCALLTYPE *GetNamedItemNS)(
        nsIDOMMozNamedAttrMap *This,
        const nsAString *namespaceURI,
        const nsAString *localName,
        nsIDOMAttr **_retval);

    nsresult (STDMETHODCALLTYPE *SetNamedItemNS)(
        nsIDOMMozNamedAttrMap *This,
        nsIDOMAttr *arg,
        nsIDOMAttr **_retval);

    nsresult (STDMETHODCALLTYPE *RemoveNamedItemNS)(
        nsIDOMMozNamedAttrMap *This,
        const nsAString *namespaceURI,
        const nsAString *localName,
        nsIDOMAttr **_retval);

    END_INTERFACE
} nsIDOMMozNamedAttrMapVtbl;

interface nsIDOMMozNamedAttrMap {
    CONST_VTBL nsIDOMMozNamedAttrMapVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMMozNamedAttrMap_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMMozNamedAttrMap_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMMozNamedAttrMap_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMMozNamedAttrMap methods ***/
#define nsIDOMMozNamedAttrMap_GetNamedItem(This,name,_retval) (This)->lpVtbl->GetNamedItem(This,name,_retval)
#define nsIDOMMozNamedAttrMap_SetNamedItem(This,arg,_retval) (This)->lpVtbl->SetNamedItem(This,arg,_retval)
#define nsIDOMMozNamedAttrMap_RemoveNamedItem(This,name,_retval) (This)->lpVtbl->RemoveNamedItem(This,name,_retval)
#define nsIDOMMozNamedAttrMap_Item(This,index,_retval) (This)->lpVtbl->Item(This,index,_retval)
#define nsIDOMMozNamedAttrMap_GetLength(This,aLength) (This)->lpVtbl->GetLength(This,aLength)
#define nsIDOMMozNamedAttrMap_GetNamedItemNS(This,namespaceURI,localName,_retval) (This)->lpVtbl->GetNamedItemNS(This,namespaceURI,localName,_retval)
#define nsIDOMMozNamedAttrMap_SetNamedItemNS(This,arg,_retval) (This)->lpVtbl->SetNamedItemNS(This,arg,_retval)
#define nsIDOMMozNamedAttrMap_RemoveNamedItemNS(This,namespaceURI,localName,_retval) (This)->lpVtbl->RemoveNamedItemNS(This,namespaceURI,localName,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMMozNamedAttrMap_QueryInterface(nsIDOMMozNamedAttrMap* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMMozNamedAttrMap_AddRef(nsIDOMMozNamedAttrMap* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMMozNamedAttrMap_Release(nsIDOMMozNamedAttrMap* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMMozNamedAttrMap methods ***/
static FORCEINLINE nsresult nsIDOMMozNamedAttrMap_GetNamedItem(nsIDOMMozNamedAttrMap* This,const nsAString *name,nsIDOMAttr **_retval) {
    return This->lpVtbl->GetNamedItem(This,name,_retval);
}
static FORCEINLINE nsresult nsIDOMMozNamedAttrMap_SetNamedItem(nsIDOMMozNamedAttrMap* This,nsIDOMAttr *arg,nsIDOMAttr **_retval) {
    return This->lpVtbl->SetNamedItem(This,arg,_retval);
}
static FORCEINLINE nsresult nsIDOMMozNamedAttrMap_RemoveNamedItem(nsIDOMMozNamedAttrMap* This,const nsAString *name,nsIDOMAttr **_retval) {
    return This->lpVtbl->RemoveNamedItem(This,name,_retval);
}
static FORCEINLINE nsresult nsIDOMMozNamedAttrMap_Item(nsIDOMMozNamedAttrMap* This,UINT32 index,nsIDOMAttr **_retval) {
    return This->lpVtbl->Item(This,index,_retval);
}
static FORCEINLINE nsresult nsIDOMMozNamedAttrMap_GetLength(nsIDOMMozNamedAttrMap* This,UINT32 *aLength) {
    return This->lpVtbl->GetLength(This,aLength);
}
static FORCEINLINE nsresult nsIDOMMozNamedAttrMap_GetNamedItemNS(nsIDOMMozNamedAttrMap* This,const nsAString *namespaceURI,const nsAString *localName,nsIDOMAttr **_retval) {
    return This->lpVtbl->GetNamedItemNS(This,namespaceURI,localName,_retval);
}
static FORCEINLINE nsresult nsIDOMMozNamedAttrMap_SetNamedItemNS(nsIDOMMozNamedAttrMap* This,nsIDOMAttr *arg,nsIDOMAttr **_retval) {
    return This->lpVtbl->SetNamedItemNS(This,arg,_retval);
}
static FORCEINLINE nsresult nsIDOMMozNamedAttrMap_RemoveNamedItemNS(nsIDOMMozNamedAttrMap* This,const nsAString *namespaceURI,const nsAString *localName,nsIDOMAttr **_retval) {
    return This->lpVtbl->RemoveNamedItemNS(This,namespaceURI,localName,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIDOMMozNamedAttrMap_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMNode interface
 */
#ifndef __nsIDOMNode_INTERFACE_DEFINED__
#define __nsIDOMNode_INTERFACE_DEFINED__

enum NSNODETYPE {
    ELEMENT_NODE = 1,
    ATTRIBUTE_NODE = 2,
    TEXT_NODE = 3,
    CDATA_SELECTION_NODE = 4,
    ENTITY_REFERENCE_NODE = 5,
    ENTITY_NODE = 6,
    PROCESSING_INSTRUCTION_NODE = 7,
    COMMENT_NODE = 8,
    DOCUMENT_NODE = 9,
    DOCUMENT_TYPE_NODE = 10,
    DOCUMENT_FRAGMENT_NODE = 11,
    NOTATION_NODE = 12
};
enum {
    DOCUMENT_POSITION_DISCONNECTED = 1,
    DOCUMENT_POSITION_PRECEDING = 2,
    DOCUMENT_POSITION_FOLLOWING = 4,
    DOCUMENT_POSITION_CONTAINS = 8,
    DOCUMENT_POSITION_CONTAINED_BY = 16,
    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32
};
DEFINE_GUID(IID_nsIDOMNode, 0xcc35b412, 0x009b, 0x46a3, 0x9b,0xe0, 0x76,0x44,0x8f,0x12,0x54,0x8d);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("cc35b412-009b-46a3-9be0-76448f12548d")
nsIDOMNode : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetNodeName(
        nsAString *aNodeName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNodeValue(
        nsAString *aNodeValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetNodeValue(
        const nsAString *aNodeValue) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNodeType(
        UINT16 *aNodeType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetParentNode(
        nsIDOMNode **aParentNode) = 0;

    virtual nsresult STDMETHODCALLTYPE GetParentElement(
        nsIDOMElement **aParentElement) = 0;

    virtual nsresult STDMETHODCALLTYPE GetChildNodes(
        nsIDOMNodeList **aChildNodes) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFirstChild(
        nsIDOMNode **aFirstChild) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLastChild(
        nsIDOMNode **aLastChild) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPreviousSibling(
        nsIDOMNode **aPreviousSibling) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNextSibling(
        nsIDOMNode **aNextSibling) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOwnerDocument(
        nsIDOMDocument **aOwnerDocument) = 0;

    virtual nsresult STDMETHODCALLTYPE InsertBefore(
        nsIDOMNode *newChild,
        nsIDOMNode *refChild,
        nsIDOMNode **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE ReplaceChild(
        nsIDOMNode *newChild,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveChild(
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE AppendChild(
        nsIDOMNode *newChild,
        nsIDOMNode **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE HasChildNodes(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CloneNode(
        cpp_bool deep,
        UINT8 _argc,
        nsIDOMNode **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Normalize(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNamespaceURI(
        nsAString *aNamespaceURI) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPrefix(
        nsAString *aPrefix) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLocalName(
        nsAString *aLocalName) = 0;

    virtual nsresult STDMETHODCALLTYPE UnusedPlaceholder(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDOMBaseURI(
        nsAString *aBaseURI) = 0;

    virtual nsresult STDMETHODCALLTYPE CompareDocumentPosition(
        nsIDOMNode *other,
        UINT16 *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTextContent(
        nsAString *aTextContent) = 0;

    virtual nsresult STDMETHODCALLTYPE SetTextContent(
        const nsAString *aTextContent) = 0;

    virtual nsresult STDMETHODCALLTYPE LookupPrefix(
        const nsAString *namespaceURI,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE IsDefaultNamespace(
        const nsAString *namespaceURI,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE LookupNamespaceURI(
        const nsAString *prefix,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE IsEqualNode(
        nsIDOMNode *arg,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetUserData(
        const nsAString *key,
        nsIVariant *data,
        nsIVariant **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetUserData(
        const nsAString *key,
        nsIVariant **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Contains(
        nsIDOMNode *aOther,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMshtmlNode(
        nsISupports **aMshtmlNode) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMshtmlNode(
        nsISupports *aMshtmlNode) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMNode, 0xcc35b412, 0x009b, 0x46a3, 0x9b,0xe0, 0x76,0x44,0x8f,0x12,0x54,0x8d)
#endif
#else
typedef struct nsIDOMNodeVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMNode *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMNode *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMNode *This);

    /*** nsIDOMNode methods ***/
    nsresult (STDMETHODCALLTYPE *GetNodeName)(
        nsIDOMNode *This,
        nsAString *aNodeName);

    nsresult (STDMETHODCALLTYPE *GetNodeValue)(
        nsIDOMNode *This,
        nsAString *aNodeValue);

    nsresult (STDMETHODCALLTYPE *SetNodeValue)(
        nsIDOMNode *This,
        const nsAString *aNodeValue);

    nsresult (STDMETHODCALLTYPE *GetNodeType)(
        nsIDOMNode *This,
        UINT16 *aNodeType);

    nsresult (STDMETHODCALLTYPE *GetParentNode)(
        nsIDOMNode *This,
        nsIDOMNode **aParentNode);

    nsresult (STDMETHODCALLTYPE *GetParentElement)(
        nsIDOMNode *This,
        nsIDOMElement **aParentElement);

    nsresult (STDMETHODCALLTYPE *GetChildNodes)(
        nsIDOMNode *This,
        nsIDOMNodeList **aChildNodes);

    nsresult (STDMETHODCALLTYPE *GetFirstChild)(
        nsIDOMNode *This,
        nsIDOMNode **aFirstChild);

    nsresult (STDMETHODCALLTYPE *GetLastChild)(
        nsIDOMNode *This,
        nsIDOMNode **aLastChild);

    nsresult (STDMETHODCALLTYPE *GetPreviousSibling)(
        nsIDOMNode *This,
        nsIDOMNode **aPreviousSibling);

    nsresult (STDMETHODCALLTYPE *GetNextSibling)(
        nsIDOMNode *This,
        nsIDOMNode **aNextSibling);

    nsresult (STDMETHODCALLTYPE *GetOwnerDocument)(
        nsIDOMNode *This,
        nsIDOMDocument **aOwnerDocument);

    nsresult (STDMETHODCALLTYPE *InsertBefore)(
        nsIDOMNode *This,
        nsIDOMNode *newChild,
        nsIDOMNode *refChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *ReplaceChild)(
        nsIDOMNode *This,
        nsIDOMNode *newChild,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *RemoveChild)(
        nsIDOMNode *This,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *AppendChild)(
        nsIDOMNode *This,
        nsIDOMNode *newChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *HasChildNodes)(
        nsIDOMNode *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CloneNode)(
        nsIDOMNode *This,
        cpp_bool deep,
        UINT8 _argc,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *Normalize)(
        nsIDOMNode *This);

    nsresult (STDMETHODCALLTYPE *GetNamespaceURI)(
        nsIDOMNode *This,
        nsAString *aNamespaceURI);

    nsresult (STDMETHODCALLTYPE *GetPrefix)(
        nsIDOMNode *This,
        nsAString *aPrefix);

    nsresult (STDMETHODCALLTYPE *GetLocalName)(
        nsIDOMNode *This,
        nsAString *aLocalName);

    nsresult (STDMETHODCALLTYPE *UnusedPlaceholder)(
        nsIDOMNode *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetDOMBaseURI)(
        nsIDOMNode *This,
        nsAString *aBaseURI);

    nsresult (STDMETHODCALLTYPE *CompareDocumentPosition)(
        nsIDOMNode *This,
        nsIDOMNode *other,
        UINT16 *_retval);

    nsresult (STDMETHODCALLTYPE *GetTextContent)(
        nsIDOMNode *This,
        nsAString *aTextContent);

    nsresult (STDMETHODCALLTYPE *SetTextContent)(
        nsIDOMNode *This,
        const nsAString *aTextContent);

    nsresult (STDMETHODCALLTYPE *LookupPrefix)(
        nsIDOMNode *This,
        const nsAString *namespaceURI,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *IsDefaultNamespace)(
        nsIDOMNode *This,
        const nsAString *namespaceURI,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *LookupNamespaceURI)(
        nsIDOMNode *This,
        const nsAString *prefix,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *IsEqualNode)(
        nsIDOMNode *This,
        nsIDOMNode *arg,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetUserData)(
        nsIDOMNode *This,
        const nsAString *key,
        nsIVariant *data,
        nsIVariant **_retval);

    nsresult (STDMETHODCALLTYPE *GetUserData)(
        nsIDOMNode *This,
        const nsAString *key,
        nsIVariant **_retval);

    nsresult (STDMETHODCALLTYPE *Contains)(
        nsIDOMNode *This,
        nsIDOMNode *aOther,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetMshtmlNode)(
        nsIDOMNode *This,
        nsISupports **aMshtmlNode);

    nsresult (STDMETHODCALLTYPE *SetMshtmlNode)(
        nsIDOMNode *This,
        nsISupports *aMshtmlNode);

    END_INTERFACE
} nsIDOMNodeVtbl;

interface nsIDOMNode {
    CONST_VTBL nsIDOMNodeVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMNode_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMNode_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMNode_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMNode methods ***/
#define nsIDOMNode_GetNodeName(This,aNodeName) (This)->lpVtbl->GetNodeName(This,aNodeName)
#define nsIDOMNode_GetNodeValue(This,aNodeValue) (This)->lpVtbl->GetNodeValue(This,aNodeValue)
#define nsIDOMNode_SetNodeValue(This,aNodeValue) (This)->lpVtbl->SetNodeValue(This,aNodeValue)
#define nsIDOMNode_GetNodeType(This,aNodeType) (This)->lpVtbl->GetNodeType(This,aNodeType)
#define nsIDOMNode_GetParentNode(This,aParentNode) (This)->lpVtbl->GetParentNode(This,aParentNode)
#define nsIDOMNode_GetParentElement(This,aParentElement) (This)->lpVtbl->GetParentElement(This,aParentElement)
#define nsIDOMNode_GetChildNodes(This,aChildNodes) (This)->lpVtbl->GetChildNodes(This,aChildNodes)
#define nsIDOMNode_GetFirstChild(This,aFirstChild) (This)->lpVtbl->GetFirstChild(This,aFirstChild)
#define nsIDOMNode_GetLastChild(This,aLastChild) (This)->lpVtbl->GetLastChild(This,aLastChild)
#define nsIDOMNode_GetPreviousSibling(This,aPreviousSibling) (This)->lpVtbl->GetPreviousSibling(This,aPreviousSibling)
#define nsIDOMNode_GetNextSibling(This,aNextSibling) (This)->lpVtbl->GetNextSibling(This,aNextSibling)
#define nsIDOMNode_GetOwnerDocument(This,aOwnerDocument) (This)->lpVtbl->GetOwnerDocument(This,aOwnerDocument)
#define nsIDOMNode_InsertBefore(This,newChild,refChild,_retval) (This)->lpVtbl->InsertBefore(This,newChild,refChild,_retval)
#define nsIDOMNode_ReplaceChild(This,newChild,oldChild,_retval) (This)->lpVtbl->ReplaceChild(This,newChild,oldChild,_retval)
#define nsIDOMNode_RemoveChild(This,oldChild,_retval) (This)->lpVtbl->RemoveChild(This,oldChild,_retval)
#define nsIDOMNode_AppendChild(This,newChild,_retval) (This)->lpVtbl->AppendChild(This,newChild,_retval)
#define nsIDOMNode_HasChildNodes(This,_retval) (This)->lpVtbl->HasChildNodes(This,_retval)
#define nsIDOMNode_CloneNode(This,deep,_argc,_retval) (This)->lpVtbl->CloneNode(This,deep,_argc,_retval)
#define nsIDOMNode_Normalize(This) (This)->lpVtbl->Normalize(This)
#define nsIDOMNode_GetNamespaceURI(This,aNamespaceURI) (This)->lpVtbl->GetNamespaceURI(This,aNamespaceURI)
#define nsIDOMNode_GetPrefix(This,aPrefix) (This)->lpVtbl->GetPrefix(This,aPrefix)
#define nsIDOMNode_GetLocalName(This,aLocalName) (This)->lpVtbl->GetLocalName(This,aLocalName)
#define nsIDOMNode_UnusedPlaceholder(This,_retval) (This)->lpVtbl->UnusedPlaceholder(This,_retval)
#define nsIDOMNode_GetDOMBaseURI(This,aBaseURI) (This)->lpVtbl->GetDOMBaseURI(This,aBaseURI)
#define nsIDOMNode_CompareDocumentPosition(This,other,_retval) (This)->lpVtbl->CompareDocumentPosition(This,other,_retval)
#define nsIDOMNode_GetTextContent(This,aTextContent) (This)->lpVtbl->GetTextContent(This,aTextContent)
#define nsIDOMNode_SetTextContent(This,aTextContent) (This)->lpVtbl->SetTextContent(This,aTextContent)
#define nsIDOMNode_LookupPrefix(This,namespaceURI,_retval) (This)->lpVtbl->LookupPrefix(This,namespaceURI,_retval)
#define nsIDOMNode_IsDefaultNamespace(This,namespaceURI,_retval) (This)->lpVtbl->IsDefaultNamespace(This,namespaceURI,_retval)
#define nsIDOMNode_LookupNamespaceURI(This,prefix,_retval) (This)->lpVtbl->LookupNamespaceURI(This,prefix,_retval)
#define nsIDOMNode_IsEqualNode(This,arg,_retval) (This)->lpVtbl->IsEqualNode(This,arg,_retval)
#define nsIDOMNode_SetUserData(This,key,data,_retval) (This)->lpVtbl->SetUserData(This,key,data,_retval)
#define nsIDOMNode_GetUserData(This,key,_retval) (This)->lpVtbl->GetUserData(This,key,_retval)
#define nsIDOMNode_Contains(This,aOther,_retval) (This)->lpVtbl->Contains(This,aOther,_retval)
#define nsIDOMNode_GetMshtmlNode(This,aMshtmlNode) (This)->lpVtbl->GetMshtmlNode(This,aMshtmlNode)
#define nsIDOMNode_SetMshtmlNode(This,aMshtmlNode) (This)->lpVtbl->SetMshtmlNode(This,aMshtmlNode)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMNode_QueryInterface(nsIDOMNode* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMNode_AddRef(nsIDOMNode* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMNode_Release(nsIDOMNode* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMNode methods ***/
static FORCEINLINE nsresult nsIDOMNode_GetNodeName(nsIDOMNode* This,nsAString *aNodeName) {
    return This->lpVtbl->GetNodeName(This,aNodeName);
}
static FORCEINLINE nsresult nsIDOMNode_GetNodeValue(nsIDOMNode* This,nsAString *aNodeValue) {
    return This->lpVtbl->GetNodeValue(This,aNodeValue);
}
static FORCEINLINE nsresult nsIDOMNode_SetNodeValue(nsIDOMNode* This,const nsAString *aNodeValue) {
    return This->lpVtbl->SetNodeValue(This,aNodeValue);
}
static FORCEINLINE nsresult nsIDOMNode_GetNodeType(nsIDOMNode* This,UINT16 *aNodeType) {
    return This->lpVtbl->GetNodeType(This,aNodeType);
}
static FORCEINLINE nsresult nsIDOMNode_GetParentNode(nsIDOMNode* This,nsIDOMNode **aParentNode) {
    return This->lpVtbl->GetParentNode(This,aParentNode);
}
static FORCEINLINE nsresult nsIDOMNode_GetParentElement(nsIDOMNode* This,nsIDOMElement **aParentElement) {
    return This->lpVtbl->GetParentElement(This,aParentElement);
}
static FORCEINLINE nsresult nsIDOMNode_GetChildNodes(nsIDOMNode* This,nsIDOMNodeList **aChildNodes) {
    return This->lpVtbl->GetChildNodes(This,aChildNodes);
}
static FORCEINLINE nsresult nsIDOMNode_GetFirstChild(nsIDOMNode* This,nsIDOMNode **aFirstChild) {
    return This->lpVtbl->GetFirstChild(This,aFirstChild);
}
static FORCEINLINE nsresult nsIDOMNode_GetLastChild(nsIDOMNode* This,nsIDOMNode **aLastChild) {
    return This->lpVtbl->GetLastChild(This,aLastChild);
}
static FORCEINLINE nsresult nsIDOMNode_GetPreviousSibling(nsIDOMNode* This,nsIDOMNode **aPreviousSibling) {
    return This->lpVtbl->GetPreviousSibling(This,aPreviousSibling);
}
static FORCEINLINE nsresult nsIDOMNode_GetNextSibling(nsIDOMNode* This,nsIDOMNode **aNextSibling) {
    return This->lpVtbl->GetNextSibling(This,aNextSibling);
}
static FORCEINLINE nsresult nsIDOMNode_GetOwnerDocument(nsIDOMNode* This,nsIDOMDocument **aOwnerDocument) {
    return This->lpVtbl->GetOwnerDocument(This,aOwnerDocument);
}
static FORCEINLINE nsresult nsIDOMNode_InsertBefore(nsIDOMNode* This,nsIDOMNode *newChild,nsIDOMNode *refChild,nsIDOMNode **_retval) {
    return This->lpVtbl->InsertBefore(This,newChild,refChild,_retval);
}
static FORCEINLINE nsresult nsIDOMNode_ReplaceChild(nsIDOMNode* This,nsIDOMNode *newChild,nsIDOMNode *oldChild,nsIDOMNode **_retval) {
    return This->lpVtbl->ReplaceChild(This,newChild,oldChild,_retval);
}
static FORCEINLINE nsresult nsIDOMNode_RemoveChild(nsIDOMNode* This,nsIDOMNode *oldChild,nsIDOMNode **_retval) {
    return This->lpVtbl->RemoveChild(This,oldChild,_retval);
}
static FORCEINLINE nsresult nsIDOMNode_AppendChild(nsIDOMNode* This,nsIDOMNode *newChild,nsIDOMNode **_retval) {
    return This->lpVtbl->AppendChild(This,newChild,_retval);
}
static FORCEINLINE nsresult nsIDOMNode_HasChildNodes(nsIDOMNode* This,cpp_bool *_retval) {
    return This->lpVtbl->HasChildNodes(This,_retval);
}
static FORCEINLINE nsresult nsIDOMNode_CloneNode(nsIDOMNode* This,cpp_bool deep,UINT8 _argc,nsIDOMNode **_retval) {
    return This->lpVtbl->CloneNode(This,deep,_argc,_retval);
}
static FORCEINLINE nsresult nsIDOMNode_Normalize(nsIDOMNode* This) {
    return This->lpVtbl->Normalize(This);
}
static FORCEINLINE nsresult nsIDOMNode_GetNamespaceURI(nsIDOMNode* This,nsAString *aNamespaceURI) {
    return This->lpVtbl->GetNamespaceURI(This,aNamespaceURI);
}
static FORCEINLINE nsresult nsIDOMNode_GetPrefix(nsIDOMNode* This,nsAString *aPrefix) {
    return This->lpVtbl->GetPrefix(This,aPrefix);
}
static FORCEINLINE nsresult nsIDOMNode_GetLocalName(nsIDOMNode* This,nsAString *aLocalName) {
    return This->lpVtbl->GetLocalName(This,aLocalName);
}
static FORCEINLINE nsresult nsIDOMNode_UnusedPlaceholder(nsIDOMNode* This,cpp_bool *_retval) {
    return This->lpVtbl->UnusedPlaceholder(This,_retval);
}
static FORCEINLINE nsresult nsIDOMNode_GetDOMBaseURI(nsIDOMNode* This,nsAString *aBaseURI) {
    return This->lpVtbl->GetDOMBaseURI(This,aBaseURI);
}
static FORCEINLINE nsresult nsIDOMNode_CompareDocumentPosition(nsIDOMNode* This,nsIDOMNode *other,UINT16 *_retval) {
    return This->lpVtbl->CompareDocumentPosition(This,other,_retval);
}
static FORCEINLINE nsresult nsIDOMNode_GetTextContent(nsIDOMNode* This,nsAString *aTextContent) {
    return This->lpVtbl->GetTextContent(This,aTextContent);
}
static FORCEINLINE nsresult nsIDOMNode_SetTextContent(nsIDOMNode* This,const nsAString *aTextContent) {
    return This->lpVtbl->SetTextContent(This,aTextContent);
}
static FORCEINLINE nsresult nsIDOMNode_LookupPrefix(nsIDOMNode* This,const nsAString *namespaceURI,nsAString *_retval) {
    return This->lpVtbl->LookupPrefix(This,namespaceURI,_retval);
}
static FORCEINLINE nsresult nsIDOMNode_IsDefaultNamespace(nsIDOMNode* This,const nsAString *namespaceURI,cpp_bool *_retval) {
    return This->lpVtbl->IsDefaultNamespace(This,namespaceURI,_retval);
}
static FORCEINLINE nsresult nsIDOMNode_LookupNamespaceURI(nsIDOMNode* This,const nsAString *prefix,nsAString *_retval) {
    return This->lpVtbl->LookupNamespaceURI(This,prefix,_retval);
}
static FORCEINLINE nsresult nsIDOMNode_IsEqualNode(nsIDOMNode* This,nsIDOMNode *arg,cpp_bool *_retval) {
    return This->lpVtbl->IsEqualNode(This,arg,_retval);
}
static FORCEINLINE nsresult nsIDOMNode_SetUserData(nsIDOMNode* This,const nsAString *key,nsIVariant *data,nsIVariant **_retval) {
    return This->lpVtbl->SetUserData(This,key,data,_retval);
}
static FORCEINLINE nsresult nsIDOMNode_GetUserData(nsIDOMNode* This,const nsAString *key,nsIVariant **_retval) {
    return This->lpVtbl->GetUserData(This,key,_retval);
}
static FORCEINLINE nsresult nsIDOMNode_Contains(nsIDOMNode* This,nsIDOMNode *aOther,cpp_bool *_retval) {
    return This->lpVtbl->Contains(This,aOther,_retval);
}
static FORCEINLINE nsresult nsIDOMNode_GetMshtmlNode(nsIDOMNode* This,nsISupports **aMshtmlNode) {
    return This->lpVtbl->GetMshtmlNode(This,aMshtmlNode);
}
static FORCEINLINE nsresult nsIDOMNode_SetMshtmlNode(nsIDOMNode* This,nsISupports *aMshtmlNode) {
    return This->lpVtbl->SetMshtmlNode(This,aMshtmlNode);
}
#endif
#endif

#endif


#endif  /* __nsIDOMNode_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMAttr interface
 */
#ifndef __nsIDOMAttr_INTERFACE_DEFINED__
#define __nsIDOMAttr_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMAttr, 0x7db491e8, 0xa3a3, 0x4432, 0xad,0x67, 0xe6,0xc3,0x3e,0x24,0xac,0x6d);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("7db491e8-a3a3-4432-ad67-e6c33e24ac6d")
nsIDOMAttr : public nsIDOMNode
{
    virtual nsresult STDMETHODCALLTYPE GetName(
        nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSpecified(
        cpp_bool *aSpecified) = 0;

    virtual nsresult STDMETHODCALLTYPE GetValue(
        nsAString *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetValue(
        const nsAString *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOwnerElement(
        nsIDOMElement **aOwnerElement) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsId(
        cpp_bool *aIsId) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMAttr, 0x7db491e8, 0xa3a3, 0x4432, 0xad,0x67, 0xe6,0xc3,0x3e,0x24,0xac,0x6d)
#endif
#else
typedef struct nsIDOMAttrVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMAttr *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMAttr *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMAttr *This);

    /*** nsIDOMNode methods ***/
    nsresult (STDMETHODCALLTYPE *GetNodeName)(
        nsIDOMAttr *This,
        nsAString *aNodeName);

    nsresult (STDMETHODCALLTYPE *GetNodeValue)(
        nsIDOMAttr *This,
        nsAString *aNodeValue);

    nsresult (STDMETHODCALLTYPE *SetNodeValue)(
        nsIDOMAttr *This,
        const nsAString *aNodeValue);

    nsresult (STDMETHODCALLTYPE *GetNodeType)(
        nsIDOMAttr *This,
        UINT16 *aNodeType);

    nsresult (STDMETHODCALLTYPE *GetParentNode)(
        nsIDOMAttr *This,
        nsIDOMNode **aParentNode);

    nsresult (STDMETHODCALLTYPE *GetParentElement)(
        nsIDOMAttr *This,
        nsIDOMElement **aParentElement);

    nsresult (STDMETHODCALLTYPE *GetChildNodes)(
        nsIDOMAttr *This,
        nsIDOMNodeList **aChildNodes);

    nsresult (STDMETHODCALLTYPE *GetFirstChild)(
        nsIDOMAttr *This,
        nsIDOMNode **aFirstChild);

    nsresult (STDMETHODCALLTYPE *GetLastChild)(
        nsIDOMAttr *This,
        nsIDOMNode **aLastChild);

    nsresult (STDMETHODCALLTYPE *GetPreviousSibling)(
        nsIDOMAttr *This,
        nsIDOMNode **aPreviousSibling);

    nsresult (STDMETHODCALLTYPE *GetNextSibling)(
        nsIDOMAttr *This,
        nsIDOMNode **aNextSibling);

    nsresult (STDMETHODCALLTYPE *GetOwnerDocument)(
        nsIDOMAttr *This,
        nsIDOMDocument **aOwnerDocument);

    nsresult (STDMETHODCALLTYPE *InsertBefore)(
        nsIDOMAttr *This,
        nsIDOMNode *newChild,
        nsIDOMNode *refChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *ReplaceChild)(
        nsIDOMAttr *This,
        nsIDOMNode *newChild,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *RemoveChild)(
        nsIDOMAttr *This,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *AppendChild)(
        nsIDOMAttr *This,
        nsIDOMNode *newChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *HasChildNodes)(
        nsIDOMAttr *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CloneNode)(
        nsIDOMAttr *This,
        cpp_bool deep,
        UINT8 _argc,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *Normalize)(
        nsIDOMAttr *This);

    nsresult (STDMETHODCALLTYPE *GetNamespaceURI)(
        nsIDOMAttr *This,
        nsAString *aNamespaceURI);

    nsresult (STDMETHODCALLTYPE *GetPrefix)(
        nsIDOMAttr *This,
        nsAString *aPrefix);

    nsresult (STDMETHODCALLTYPE *GetLocalName)(
        nsIDOMAttr *This,
        nsAString *aLocalName);

    nsresult (STDMETHODCALLTYPE *UnusedPlaceholder)(
        nsIDOMAttr *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetDOMBaseURI)(
        nsIDOMAttr *This,
        nsAString *aBaseURI);

    nsresult (STDMETHODCALLTYPE *CompareDocumentPosition)(
        nsIDOMAttr *This,
        nsIDOMNode *other,
        UINT16 *_retval);

    nsresult (STDMETHODCALLTYPE *GetTextContent)(
        nsIDOMAttr *This,
        nsAString *aTextContent);

    nsresult (STDMETHODCALLTYPE *SetTextContent)(
        nsIDOMAttr *This,
        const nsAString *aTextContent);

    nsresult (STDMETHODCALLTYPE *LookupPrefix)(
        nsIDOMAttr *This,
        const nsAString *namespaceURI,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *IsDefaultNamespace)(
        nsIDOMAttr *This,
        const nsAString *namespaceURI,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *LookupNamespaceURI)(
        nsIDOMAttr *This,
        const nsAString *prefix,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *IsEqualNode)(
        nsIDOMAttr *This,
        nsIDOMNode *arg,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetUserData)(
        nsIDOMAttr *This,
        const nsAString *key,
        nsIVariant *data,
        nsIVariant **_retval);

    nsresult (STDMETHODCALLTYPE *GetUserData)(
        nsIDOMAttr *This,
        const nsAString *key,
        nsIVariant **_retval);

    nsresult (STDMETHODCALLTYPE *Contains)(
        nsIDOMAttr *This,
        nsIDOMNode *aOther,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetMshtmlNode)(
        nsIDOMAttr *This,
        nsISupports **aMshtmlNode);

    nsresult (STDMETHODCALLTYPE *SetMshtmlNode)(
        nsIDOMAttr *This,
        nsISupports *aMshtmlNode);

    /*** nsIDOMAttr methods ***/
    nsresult (STDMETHODCALLTYPE *GetName)(
        nsIDOMAttr *This,
        nsAString *aName);

    nsresult (STDMETHODCALLTYPE *GetSpecified)(
        nsIDOMAttr *This,
        cpp_bool *aSpecified);

    nsresult (STDMETHODCALLTYPE *GetValue)(
        nsIDOMAttr *This,
        nsAString *aValue);

    nsresult (STDMETHODCALLTYPE *SetValue)(
        nsIDOMAttr *This,
        const nsAString *aValue);

    nsresult (STDMETHODCALLTYPE *GetOwnerElement)(
        nsIDOMAttr *This,
        nsIDOMElement **aOwnerElement);

    nsresult (STDMETHODCALLTYPE *GetIsId)(
        nsIDOMAttr *This,
        cpp_bool *aIsId);

    END_INTERFACE
} nsIDOMAttrVtbl;

interface nsIDOMAttr {
    CONST_VTBL nsIDOMAttrVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMAttr_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMAttr_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMAttr_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMNode methods ***/
#define nsIDOMAttr_GetNodeName(This,aNodeName) (This)->lpVtbl->GetNodeName(This,aNodeName)
#define nsIDOMAttr_GetNodeValue(This,aNodeValue) (This)->lpVtbl->GetNodeValue(This,aNodeValue)
#define nsIDOMAttr_SetNodeValue(This,aNodeValue) (This)->lpVtbl->SetNodeValue(This,aNodeValue)
#define nsIDOMAttr_GetNodeType(This,aNodeType) (This)->lpVtbl->GetNodeType(This,aNodeType)
#define nsIDOMAttr_GetParentNode(This,aParentNode) (This)->lpVtbl->GetParentNode(This,aParentNode)
#define nsIDOMAttr_GetParentElement(This,aParentElement) (This)->lpVtbl->GetParentElement(This,aParentElement)
#define nsIDOMAttr_GetChildNodes(This,aChildNodes) (This)->lpVtbl->GetChildNodes(This,aChildNodes)
#define nsIDOMAttr_GetFirstChild(This,aFirstChild) (This)->lpVtbl->GetFirstChild(This,aFirstChild)
#define nsIDOMAttr_GetLastChild(This,aLastChild) (This)->lpVtbl->GetLastChild(This,aLastChild)
#define nsIDOMAttr_GetPreviousSibling(This,aPreviousSibling) (This)->lpVtbl->GetPreviousSibling(This,aPreviousSibling)
#define nsIDOMAttr_GetNextSibling(This,aNextSibling) (This)->lpVtbl->GetNextSibling(This,aNextSibling)
#define nsIDOMAttr_GetOwnerDocument(This,aOwnerDocument) (This)->lpVtbl->GetOwnerDocument(This,aOwnerDocument)
#define nsIDOMAttr_InsertBefore(This,newChild,refChild,_retval) (This)->lpVtbl->InsertBefore(This,newChild,refChild,_retval)
#define nsIDOMAttr_ReplaceChild(This,newChild,oldChild,_retval) (This)->lpVtbl->ReplaceChild(This,newChild,oldChild,_retval)
#define nsIDOMAttr_RemoveChild(This,oldChild,_retval) (This)->lpVtbl->RemoveChild(This,oldChild,_retval)
#define nsIDOMAttr_AppendChild(This,newChild,_retval) (This)->lpVtbl->AppendChild(This,newChild,_retval)
#define nsIDOMAttr_HasChildNodes(This,_retval) (This)->lpVtbl->HasChildNodes(This,_retval)
#define nsIDOMAttr_CloneNode(This,deep,_argc,_retval) (This)->lpVtbl->CloneNode(This,deep,_argc,_retval)
#define nsIDOMAttr_Normalize(This) (This)->lpVtbl->Normalize(This)
#define nsIDOMAttr_GetNamespaceURI(This,aNamespaceURI) (This)->lpVtbl->GetNamespaceURI(This,aNamespaceURI)
#define nsIDOMAttr_GetPrefix(This,aPrefix) (This)->lpVtbl->GetPrefix(This,aPrefix)
#define nsIDOMAttr_GetLocalName(This,aLocalName) (This)->lpVtbl->GetLocalName(This,aLocalName)
#define nsIDOMAttr_UnusedPlaceholder(This,_retval) (This)->lpVtbl->UnusedPlaceholder(This,_retval)
#define nsIDOMAttr_GetDOMBaseURI(This,aBaseURI) (This)->lpVtbl->GetDOMBaseURI(This,aBaseURI)
#define nsIDOMAttr_CompareDocumentPosition(This,other,_retval) (This)->lpVtbl->CompareDocumentPosition(This,other,_retval)
#define nsIDOMAttr_GetTextContent(This,aTextContent) (This)->lpVtbl->GetTextContent(This,aTextContent)
#define nsIDOMAttr_SetTextContent(This,aTextContent) (This)->lpVtbl->SetTextContent(This,aTextContent)
#define nsIDOMAttr_LookupPrefix(This,namespaceURI,_retval) (This)->lpVtbl->LookupPrefix(This,namespaceURI,_retval)
#define nsIDOMAttr_IsDefaultNamespace(This,namespaceURI,_retval) (This)->lpVtbl->IsDefaultNamespace(This,namespaceURI,_retval)
#define nsIDOMAttr_LookupNamespaceURI(This,prefix,_retval) (This)->lpVtbl->LookupNamespaceURI(This,prefix,_retval)
#define nsIDOMAttr_IsEqualNode(This,arg,_retval) (This)->lpVtbl->IsEqualNode(This,arg,_retval)
#define nsIDOMAttr_SetUserData(This,key,data,_retval) (This)->lpVtbl->SetUserData(This,key,data,_retval)
#define nsIDOMAttr_GetUserData(This,key,_retval) (This)->lpVtbl->GetUserData(This,key,_retval)
#define nsIDOMAttr_Contains(This,aOther,_retval) (This)->lpVtbl->Contains(This,aOther,_retval)
#define nsIDOMAttr_GetMshtmlNode(This,aMshtmlNode) (This)->lpVtbl->GetMshtmlNode(This,aMshtmlNode)
#define nsIDOMAttr_SetMshtmlNode(This,aMshtmlNode) (This)->lpVtbl->SetMshtmlNode(This,aMshtmlNode)
/*** nsIDOMAttr methods ***/
#define nsIDOMAttr_GetName(This,aName) (This)->lpVtbl->GetName(This,aName)
#define nsIDOMAttr_GetSpecified(This,aSpecified) (This)->lpVtbl->GetSpecified(This,aSpecified)
#define nsIDOMAttr_GetValue(This,aValue) (This)->lpVtbl->GetValue(This,aValue)
#define nsIDOMAttr_SetValue(This,aValue) (This)->lpVtbl->SetValue(This,aValue)
#define nsIDOMAttr_GetOwnerElement(This,aOwnerElement) (This)->lpVtbl->GetOwnerElement(This,aOwnerElement)
#define nsIDOMAttr_GetIsId(This,aIsId) (This)->lpVtbl->GetIsId(This,aIsId)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMAttr_QueryInterface(nsIDOMAttr* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMAttr_AddRef(nsIDOMAttr* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMAttr_Release(nsIDOMAttr* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMNode methods ***/
static FORCEINLINE nsresult nsIDOMAttr_GetNodeName(nsIDOMAttr* This,nsAString *aNodeName) {
    return This->lpVtbl->GetNodeName(This,aNodeName);
}
static FORCEINLINE nsresult nsIDOMAttr_GetNodeValue(nsIDOMAttr* This,nsAString *aNodeValue) {
    return This->lpVtbl->GetNodeValue(This,aNodeValue);
}
static FORCEINLINE nsresult nsIDOMAttr_SetNodeValue(nsIDOMAttr* This,const nsAString *aNodeValue) {
    return This->lpVtbl->SetNodeValue(This,aNodeValue);
}
static FORCEINLINE nsresult nsIDOMAttr_GetNodeType(nsIDOMAttr* This,UINT16 *aNodeType) {
    return This->lpVtbl->GetNodeType(This,aNodeType);
}
static FORCEINLINE nsresult nsIDOMAttr_GetParentNode(nsIDOMAttr* This,nsIDOMNode **aParentNode) {
    return This->lpVtbl->GetParentNode(This,aParentNode);
}
static FORCEINLINE nsresult nsIDOMAttr_GetParentElement(nsIDOMAttr* This,nsIDOMElement **aParentElement) {
    return This->lpVtbl->GetParentElement(This,aParentElement);
}
static FORCEINLINE nsresult nsIDOMAttr_GetChildNodes(nsIDOMAttr* This,nsIDOMNodeList **aChildNodes) {
    return This->lpVtbl->GetChildNodes(This,aChildNodes);
}
static FORCEINLINE nsresult nsIDOMAttr_GetFirstChild(nsIDOMAttr* This,nsIDOMNode **aFirstChild) {
    return This->lpVtbl->GetFirstChild(This,aFirstChild);
}
static FORCEINLINE nsresult nsIDOMAttr_GetLastChild(nsIDOMAttr* This,nsIDOMNode **aLastChild) {
    return This->lpVtbl->GetLastChild(This,aLastChild);
}
static FORCEINLINE nsresult nsIDOMAttr_GetPreviousSibling(nsIDOMAttr* This,nsIDOMNode **aPreviousSibling) {
    return This->lpVtbl->GetPreviousSibling(This,aPreviousSibling);
}
static FORCEINLINE nsresult nsIDOMAttr_GetNextSibling(nsIDOMAttr* This,nsIDOMNode **aNextSibling) {
    return This->lpVtbl->GetNextSibling(This,aNextSibling);
}
static FORCEINLINE nsresult nsIDOMAttr_GetOwnerDocument(nsIDOMAttr* This,nsIDOMDocument **aOwnerDocument) {
    return This->lpVtbl->GetOwnerDocument(This,aOwnerDocument);
}
static FORCEINLINE nsresult nsIDOMAttr_InsertBefore(nsIDOMAttr* This,nsIDOMNode *newChild,nsIDOMNode *refChild,nsIDOMNode **_retval) {
    return This->lpVtbl->InsertBefore(This,newChild,refChild,_retval);
}
static FORCEINLINE nsresult nsIDOMAttr_ReplaceChild(nsIDOMAttr* This,nsIDOMNode *newChild,nsIDOMNode *oldChild,nsIDOMNode **_retval) {
    return This->lpVtbl->ReplaceChild(This,newChild,oldChild,_retval);
}
static FORCEINLINE nsresult nsIDOMAttr_RemoveChild(nsIDOMAttr* This,nsIDOMNode *oldChild,nsIDOMNode **_retval) {
    return This->lpVtbl->RemoveChild(This,oldChild,_retval);
}
static FORCEINLINE nsresult nsIDOMAttr_AppendChild(nsIDOMAttr* This,nsIDOMNode *newChild,nsIDOMNode **_retval) {
    return This->lpVtbl->AppendChild(This,newChild,_retval);
}
static FORCEINLINE nsresult nsIDOMAttr_HasChildNodes(nsIDOMAttr* This,cpp_bool *_retval) {
    return This->lpVtbl->HasChildNodes(This,_retval);
}
static FORCEINLINE nsresult nsIDOMAttr_CloneNode(nsIDOMAttr* This,cpp_bool deep,UINT8 _argc,nsIDOMNode **_retval) {
    return This->lpVtbl->CloneNode(This,deep,_argc,_retval);
}
static FORCEINLINE nsresult nsIDOMAttr_Normalize(nsIDOMAttr* This) {
    return This->lpVtbl->Normalize(This);
}
static FORCEINLINE nsresult nsIDOMAttr_GetNamespaceURI(nsIDOMAttr* This,nsAString *aNamespaceURI) {
    return This->lpVtbl->GetNamespaceURI(This,aNamespaceURI);
}
static FORCEINLINE nsresult nsIDOMAttr_GetPrefix(nsIDOMAttr* This,nsAString *aPrefix) {
    return This->lpVtbl->GetPrefix(This,aPrefix);
}
static FORCEINLINE nsresult nsIDOMAttr_GetLocalName(nsIDOMAttr* This,nsAString *aLocalName) {
    return This->lpVtbl->GetLocalName(This,aLocalName);
}
static FORCEINLINE nsresult nsIDOMAttr_UnusedPlaceholder(nsIDOMAttr* This,cpp_bool *_retval) {
    return This->lpVtbl->UnusedPlaceholder(This,_retval);
}
static FORCEINLINE nsresult nsIDOMAttr_GetDOMBaseURI(nsIDOMAttr* This,nsAString *aBaseURI) {
    return This->lpVtbl->GetDOMBaseURI(This,aBaseURI);
}
static FORCEINLINE nsresult nsIDOMAttr_CompareDocumentPosition(nsIDOMAttr* This,nsIDOMNode *other,UINT16 *_retval) {
    return This->lpVtbl->CompareDocumentPosition(This,other,_retval);
}
static FORCEINLINE nsresult nsIDOMAttr_GetTextContent(nsIDOMAttr* This,nsAString *aTextContent) {
    return This->lpVtbl->GetTextContent(This,aTextContent);
}
static FORCEINLINE nsresult nsIDOMAttr_SetTextContent(nsIDOMAttr* This,const nsAString *aTextContent) {
    return This->lpVtbl->SetTextContent(This,aTextContent);
}
static FORCEINLINE nsresult nsIDOMAttr_LookupPrefix(nsIDOMAttr* This,const nsAString *namespaceURI,nsAString *_retval) {
    return This->lpVtbl->LookupPrefix(This,namespaceURI,_retval);
}
static FORCEINLINE nsresult nsIDOMAttr_IsDefaultNamespace(nsIDOMAttr* This,const nsAString *namespaceURI,cpp_bool *_retval) {
    return This->lpVtbl->IsDefaultNamespace(This,namespaceURI,_retval);
}
static FORCEINLINE nsresult nsIDOMAttr_LookupNamespaceURI(nsIDOMAttr* This,const nsAString *prefix,nsAString *_retval) {
    return This->lpVtbl->LookupNamespaceURI(This,prefix,_retval);
}
static FORCEINLINE nsresult nsIDOMAttr_IsEqualNode(nsIDOMAttr* This,nsIDOMNode *arg,cpp_bool *_retval) {
    return This->lpVtbl->IsEqualNode(This,arg,_retval);
}
static FORCEINLINE nsresult nsIDOMAttr_SetUserData(nsIDOMAttr* This,const nsAString *key,nsIVariant *data,nsIVariant **_retval) {
    return This->lpVtbl->SetUserData(This,key,data,_retval);
}
static FORCEINLINE nsresult nsIDOMAttr_GetUserData(nsIDOMAttr* This,const nsAString *key,nsIVariant **_retval) {
    return This->lpVtbl->GetUserData(This,key,_retval);
}
static FORCEINLINE nsresult nsIDOMAttr_Contains(nsIDOMAttr* This,nsIDOMNode *aOther,cpp_bool *_retval) {
    return This->lpVtbl->Contains(This,aOther,_retval);
}
static FORCEINLINE nsresult nsIDOMAttr_GetMshtmlNode(nsIDOMAttr* This,nsISupports **aMshtmlNode) {
    return This->lpVtbl->GetMshtmlNode(This,aMshtmlNode);
}
static FORCEINLINE nsresult nsIDOMAttr_SetMshtmlNode(nsIDOMAttr* This,nsISupports *aMshtmlNode) {
    return This->lpVtbl->SetMshtmlNode(This,aMshtmlNode);
}
/*** nsIDOMAttr methods ***/
static FORCEINLINE nsresult nsIDOMAttr_GetName(nsIDOMAttr* This,nsAString *aName) {
    return This->lpVtbl->GetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMAttr_GetSpecified(nsIDOMAttr* This,cpp_bool *aSpecified) {
    return This->lpVtbl->GetSpecified(This,aSpecified);
}
static FORCEINLINE nsresult nsIDOMAttr_GetValue(nsIDOMAttr* This,nsAString *aValue) {
    return This->lpVtbl->GetValue(This,aValue);
}
static FORCEINLINE nsresult nsIDOMAttr_SetValue(nsIDOMAttr* This,const nsAString *aValue) {
    return This->lpVtbl->SetValue(This,aValue);
}
static FORCEINLINE nsresult nsIDOMAttr_GetOwnerElement(nsIDOMAttr* This,nsIDOMElement **aOwnerElement) {
    return This->lpVtbl->GetOwnerElement(This,aOwnerElement);
}
static FORCEINLINE nsresult nsIDOMAttr_GetIsId(nsIDOMAttr* This,cpp_bool *aIsId) {
    return This->lpVtbl->GetIsId(This,aIsId);
}
#endif
#endif

#endif


#endif  /* __nsIDOMAttr_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMClientRect interface
 */
#ifndef __nsIDOMClientRect_INTERFACE_DEFINED__
#define __nsIDOMClientRect_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMClientRect, 0xb2f824c4, 0xd9d3, 0x499b, 0x8d,0x3b, 0x45,0xc8,0x24,0x54,0x97,0xc6);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("b2f824c4-d9d3-499b-8d3b-45c8245497c6")
nsIDOMClientRect : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetLeft(
        float *aLeft) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTop(
        float *aTop) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRight(
        float *aRight) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBottom(
        float *aBottom) = 0;

    virtual nsresult STDMETHODCALLTYPE GetWidth(
        float *aWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHeight(
        float *aHeight) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMClientRect, 0xb2f824c4, 0xd9d3, 0x499b, 0x8d,0x3b, 0x45,0xc8,0x24,0x54,0x97,0xc6)
#endif
#else
typedef struct nsIDOMClientRectVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMClientRect *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMClientRect *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMClientRect *This);

    /*** nsIDOMClientRect methods ***/
    nsresult (STDMETHODCALLTYPE *GetLeft)(
        nsIDOMClientRect *This,
        float *aLeft);

    nsresult (STDMETHODCALLTYPE *GetTop)(
        nsIDOMClientRect *This,
        float *aTop);

    nsresult (STDMETHODCALLTYPE *GetRight)(
        nsIDOMClientRect *This,
        float *aRight);

    nsresult (STDMETHODCALLTYPE *GetBottom)(
        nsIDOMClientRect *This,
        float *aBottom);

    nsresult (STDMETHODCALLTYPE *GetWidth)(
        nsIDOMClientRect *This,
        float *aWidth);

    nsresult (STDMETHODCALLTYPE *GetHeight)(
        nsIDOMClientRect *This,
        float *aHeight);

    END_INTERFACE
} nsIDOMClientRectVtbl;

interface nsIDOMClientRect {
    CONST_VTBL nsIDOMClientRectVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMClientRect_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMClientRect_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMClientRect_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMClientRect methods ***/
#define nsIDOMClientRect_GetLeft(This,aLeft) (This)->lpVtbl->GetLeft(This,aLeft)
#define nsIDOMClientRect_GetTop(This,aTop) (This)->lpVtbl->GetTop(This,aTop)
#define nsIDOMClientRect_GetRight(This,aRight) (This)->lpVtbl->GetRight(This,aRight)
#define nsIDOMClientRect_GetBottom(This,aBottom) (This)->lpVtbl->GetBottom(This,aBottom)
#define nsIDOMClientRect_GetWidth(This,aWidth) (This)->lpVtbl->GetWidth(This,aWidth)
#define nsIDOMClientRect_GetHeight(This,aHeight) (This)->lpVtbl->GetHeight(This,aHeight)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMClientRect_QueryInterface(nsIDOMClientRect* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMClientRect_AddRef(nsIDOMClientRect* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMClientRect_Release(nsIDOMClientRect* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMClientRect methods ***/
static FORCEINLINE nsresult nsIDOMClientRect_GetLeft(nsIDOMClientRect* This,float *aLeft) {
    return This->lpVtbl->GetLeft(This,aLeft);
}
static FORCEINLINE nsresult nsIDOMClientRect_GetTop(nsIDOMClientRect* This,float *aTop) {
    return This->lpVtbl->GetTop(This,aTop);
}
static FORCEINLINE nsresult nsIDOMClientRect_GetRight(nsIDOMClientRect* This,float *aRight) {
    return This->lpVtbl->GetRight(This,aRight);
}
static FORCEINLINE nsresult nsIDOMClientRect_GetBottom(nsIDOMClientRect* This,float *aBottom) {
    return This->lpVtbl->GetBottom(This,aBottom);
}
static FORCEINLINE nsresult nsIDOMClientRect_GetWidth(nsIDOMClientRect* This,float *aWidth) {
    return This->lpVtbl->GetWidth(This,aWidth);
}
static FORCEINLINE nsresult nsIDOMClientRect_GetHeight(nsIDOMClientRect* This,float *aHeight) {
    return This->lpVtbl->GetHeight(This,aHeight);
}
#endif
#endif

#endif


#endif  /* __nsIDOMClientRect_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMElement interface
 */
#ifndef __nsIDOMElement_INTERFACE_DEFINED__
#define __nsIDOMElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMElement, 0x6289999b, 0x1008, 0x4269, 0xb4,0x2a, 0x41,0x3e,0xc5,0xa9,0xd3,0xf4);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("6289999b-1008-4269-b42a-413ec5a9d3f4")
nsIDOMElement : public nsIDOMNode
{
    virtual nsresult STDMETHODCALLTYPE GetTagName(
        nsAString *aTagName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetId(
        nsAString *aId) = 0;

    virtual nsresult STDMETHODCALLTYPE SetId(
        const nsAString *aId) = 0;

    virtual nsresult STDMETHODCALLTYPE GetClassName(
        nsAString *aClassName) = 0;

    virtual nsresult STDMETHODCALLTYPE SetClassName(
        const nsAString *aClassName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetClassList(
        nsISupports **aClassList) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAttributes(
        nsIDOMMozNamedAttrMap **aAttributes) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAttribute(
        const nsAString *name,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAttributeNS(
        const nsAString *namespaceURI,
        const nsAString *localName,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAttribute(
        const nsAString *name,
        const nsAString *value) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAttributeNS(
        const nsAString *namespaceURI,
        const nsAString *qualifiedName,
        const nsAString *value) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveAttribute(
        const nsAString *name) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveAttributeNS(
        const nsAString *namespaceURI,
        const nsAString *localName) = 0;

    virtual nsresult STDMETHODCALLTYPE HasAttribute(
        const nsAString *name,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE HasAttributeNS(
        const nsAString *namespaceURI,
        const nsAString *localName,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE HasAttributes(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAttributeNode(
        const nsAString *name,
        nsIDOMAttr **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAttributeNode(
        nsIDOMAttr *newAttr,
        nsIDOMAttr **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveAttributeNode(
        nsIDOMAttr *oldAttr,
        nsIDOMAttr **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAttributeNodeNS(
        const nsAString *namespaceURI,
        const nsAString *localName,
        nsIDOMAttr **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAttributeNodeNS(
        nsIDOMAttr *newAttr,
        nsIDOMAttr **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetElementsByTagName(
        const nsAString *name,
        nsIDOMHTMLCollection **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetElementsByTagNameNS(
        const nsAString *namespaceURI,
        const nsAString *localName,
        nsIDOMHTMLCollection **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetElementsByClassName(
        const nsAString *classes,
        nsIDOMHTMLCollection **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetChildElements(
        nsIDOMNodeList **aChildren) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFirstElementChild(
        nsIDOMElement **aFirstElementChild) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLastElementChild(
        nsIDOMElement **aLastElementChild) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPreviousElementSibling(
        nsIDOMElement **aPreviousElementSibling) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNextElementSibling(
        nsIDOMElement **aNextElementSibling) = 0;

    virtual nsresult STDMETHODCALLTYPE GetChildElementCount(
        UINT32 *aChildElementCount) = 0;

    virtual nsresult STDMETHODCALLTYPE Remove(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetClientRects(
        nsIDOMClientRectList **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBoundingClientRect(
        nsIDOMClientRect **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScrollTop(
        LONG *aScrollTop) = 0;

    virtual nsresult STDMETHODCALLTYPE SetScrollTop(
        LONG aScrollTop) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScrollLeft(
        LONG *aScrollLeft) = 0;

    virtual nsresult STDMETHODCALLTYPE SetScrollLeft(
        LONG aScrollLeft) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScrollWidth(
        LONG *aScrollWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScrollHeight(
        LONG *aScrollHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE GetClientTop(
        LONG *aClientTop) = 0;

    virtual nsresult STDMETHODCALLTYPE GetClientLeft(
        LONG *aClientLeft) = 0;

    virtual nsresult STDMETHODCALLTYPE GetClientWidth(
        LONG *aClientWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE GetClientHeight(
        LONG *aClientHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScrollLeftMax(
        LONG *aScrollLeftMax) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScrollTopMax(
        LONG *aScrollTopMax) = 0;

    virtual nsresult STDMETHODCALLTYPE MozMatchesSelector(
        const nsAString *selector,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCapture(
        cpp_bool retargetToElement) = 0;

    virtual nsresult STDMETHODCALLTYPE ReleaseCapture(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE MozRequestFullScreen(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE MozRequestPointerLock(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE QuerySelector(
        const nsAString *selectors,
        nsIDOMElement **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE QuerySelectorAll(
        const nsAString *selectors,
        nsIDOMNodeList **_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMElement, 0x6289999b, 0x1008, 0x4269, 0xb4,0x2a, 0x41,0x3e,0xc5,0xa9,0xd3,0xf4)
#endif
#else
typedef struct nsIDOMElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMElement *This);

    /*** nsIDOMNode methods ***/
    nsresult (STDMETHODCALLTYPE *GetNodeName)(
        nsIDOMElement *This,
        nsAString *aNodeName);

    nsresult (STDMETHODCALLTYPE *GetNodeValue)(
        nsIDOMElement *This,
        nsAString *aNodeValue);

    nsresult (STDMETHODCALLTYPE *SetNodeValue)(
        nsIDOMElement *This,
        const nsAString *aNodeValue);

    nsresult (STDMETHODCALLTYPE *GetNodeType)(
        nsIDOMElement *This,
        UINT16 *aNodeType);

    nsresult (STDMETHODCALLTYPE *GetParentNode)(
        nsIDOMElement *This,
        nsIDOMNode **aParentNode);

    nsresult (STDMETHODCALLTYPE *GetParentElement)(
        nsIDOMElement *This,
        nsIDOMElement **aParentElement);

    nsresult (STDMETHODCALLTYPE *GetChildNodes)(
        nsIDOMElement *This,
        nsIDOMNodeList **aChildNodes);

    nsresult (STDMETHODCALLTYPE *GetFirstChild)(
        nsIDOMElement *This,
        nsIDOMNode **aFirstChild);

    nsresult (STDMETHODCALLTYPE *GetLastChild)(
        nsIDOMElement *This,
        nsIDOMNode **aLastChild);

    nsresult (STDMETHODCALLTYPE *GetPreviousSibling)(
        nsIDOMElement *This,
        nsIDOMNode **aPreviousSibling);

    nsresult (STDMETHODCALLTYPE *GetNextSibling)(
        nsIDOMElement *This,
        nsIDOMNode **aNextSibling);

    nsresult (STDMETHODCALLTYPE *GetOwnerDocument)(
        nsIDOMElement *This,
        nsIDOMDocument **aOwnerDocument);

    nsresult (STDMETHODCALLTYPE *InsertBefore)(
        nsIDOMElement *This,
        nsIDOMNode *newChild,
        nsIDOMNode *refChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *ReplaceChild)(
        nsIDOMElement *This,
        nsIDOMNode *newChild,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *RemoveChild)(
        nsIDOMElement *This,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *AppendChild)(
        nsIDOMElement *This,
        nsIDOMNode *newChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *HasChildNodes)(
        nsIDOMElement *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CloneNode)(
        nsIDOMElement *This,
        cpp_bool deep,
        UINT8 _argc,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *Normalize)(
        nsIDOMElement *This);

    nsresult (STDMETHODCALLTYPE *GetNamespaceURI)(
        nsIDOMElement *This,
        nsAString *aNamespaceURI);

    nsresult (STDMETHODCALLTYPE *GetPrefix)(
        nsIDOMElement *This,
        nsAString *aPrefix);

    nsresult (STDMETHODCALLTYPE *GetLocalName)(
        nsIDOMElement *This,
        nsAString *aLocalName);

    nsresult (STDMETHODCALLTYPE *UnusedPlaceholder)(
        nsIDOMElement *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetDOMBaseURI)(
        nsIDOMElement *This,
        nsAString *aBaseURI);

    nsresult (STDMETHODCALLTYPE *CompareDocumentPosition)(
        nsIDOMElement *This,
        nsIDOMNode *other,
        UINT16 *_retval);

    nsresult (STDMETHODCALLTYPE *GetTextContent)(
        nsIDOMElement *This,
        nsAString *aTextContent);

    nsresult (STDMETHODCALLTYPE *SetTextContent)(
        nsIDOMElement *This,
        const nsAString *aTextContent);

    nsresult (STDMETHODCALLTYPE *LookupPrefix)(
        nsIDOMElement *This,
        const nsAString *namespaceURI,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *IsDefaultNamespace)(
        nsIDOMElement *This,
        const nsAString *namespaceURI,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *LookupNamespaceURI)(
        nsIDOMElement *This,
        const nsAString *prefix,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *IsEqualNode)(
        nsIDOMElement *This,
        nsIDOMNode *arg,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetUserData)(
        nsIDOMElement *This,
        const nsAString *key,
        nsIVariant *data,
        nsIVariant **_retval);

    nsresult (STDMETHODCALLTYPE *GetUserData)(
        nsIDOMElement *This,
        const nsAString *key,
        nsIVariant **_retval);

    nsresult (STDMETHODCALLTYPE *Contains)(
        nsIDOMElement *This,
        nsIDOMNode *aOther,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetMshtmlNode)(
        nsIDOMElement *This,
        nsISupports **aMshtmlNode);

    nsresult (STDMETHODCALLTYPE *SetMshtmlNode)(
        nsIDOMElement *This,
        nsISupports *aMshtmlNode);

    /*** nsIDOMElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetTagName)(
        nsIDOMElement *This,
        nsAString *aTagName);

    nsresult (STDMETHODCALLTYPE *GetId)(
        nsIDOMElement *This,
        nsAString *aId);

    nsresult (STDMETHODCALLTYPE *SetId)(
        nsIDOMElement *This,
        const nsAString *aId);

    nsresult (STDMETHODCALLTYPE *GetClassName)(
        nsIDOMElement *This,
        nsAString *aClassName);

    nsresult (STDMETHODCALLTYPE *SetClassName)(
        nsIDOMElement *This,
        const nsAString *aClassName);

    nsresult (STDMETHODCALLTYPE *GetClassList)(
        nsIDOMElement *This,
        nsISupports **aClassList);

    nsresult (STDMETHODCALLTYPE *GetAttributes)(
        nsIDOMElement *This,
        nsIDOMMozNamedAttrMap **aAttributes);

    nsresult (STDMETHODCALLTYPE *GetAttribute)(
        nsIDOMElement *This,
        const nsAString *name,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *GetAttributeNS)(
        nsIDOMElement *This,
        const nsAString *namespaceURI,
        const nsAString *localName,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *SetAttribute)(
        nsIDOMElement *This,
        const nsAString *name,
        const nsAString *value);

    nsresult (STDMETHODCALLTYPE *SetAttributeNS)(
        nsIDOMElement *This,
        const nsAString *namespaceURI,
        const nsAString *qualifiedName,
        const nsAString *value);

    nsresult (STDMETHODCALLTYPE *RemoveAttribute)(
        nsIDOMElement *This,
        const nsAString *name);

    nsresult (STDMETHODCALLTYPE *RemoveAttributeNS)(
        nsIDOMElement *This,
        const nsAString *namespaceURI,
        const nsAString *localName);

    nsresult (STDMETHODCALLTYPE *HasAttribute)(
        nsIDOMElement *This,
        const nsAString *name,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *HasAttributeNS)(
        nsIDOMElement *This,
        const nsAString *namespaceURI,
        const nsAString *localName,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *HasAttributes)(
        nsIDOMElement *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetAttributeNode)(
        nsIDOMElement *This,
        const nsAString *name,
        nsIDOMAttr **_retval);

    nsresult (STDMETHODCALLTYPE *SetAttributeNode)(
        nsIDOMElement *This,
        nsIDOMAttr *newAttr,
        nsIDOMAttr **_retval);

    nsresult (STDMETHODCALLTYPE *RemoveAttributeNode)(
        nsIDOMElement *This,
        nsIDOMAttr *oldAttr,
        nsIDOMAttr **_retval);

    nsresult (STDMETHODCALLTYPE *GetAttributeNodeNS)(
        nsIDOMElement *This,
        const nsAString *namespaceURI,
        const nsAString *localName,
        nsIDOMAttr **_retval);

    nsresult (STDMETHODCALLTYPE *SetAttributeNodeNS)(
        nsIDOMElement *This,
        nsIDOMAttr *newAttr,
        nsIDOMAttr **_retval);

    nsresult (STDMETHODCALLTYPE *GetElementsByTagName)(
        nsIDOMElement *This,
        const nsAString *name,
        nsIDOMHTMLCollection **_retval);

    nsresult (STDMETHODCALLTYPE *GetElementsByTagNameNS)(
        nsIDOMElement *This,
        const nsAString *namespaceURI,
        const nsAString *localName,
        nsIDOMHTMLCollection **_retval);

    nsresult (STDMETHODCALLTYPE *GetElementsByClassName)(
        nsIDOMElement *This,
        const nsAString *classes,
        nsIDOMHTMLCollection **_retval);

    nsresult (STDMETHODCALLTYPE *GetChildElements)(
        nsIDOMElement *This,
        nsIDOMNodeList **aChildren);

    nsresult (STDMETHODCALLTYPE *GetFirstElementChild)(
        nsIDOMElement *This,
        nsIDOMElement **aFirstElementChild);

    nsresult (STDMETHODCALLTYPE *GetLastElementChild)(
        nsIDOMElement *This,
        nsIDOMElement **aLastElementChild);

    nsresult (STDMETHODCALLTYPE *GetPreviousElementSibling)(
        nsIDOMElement *This,
        nsIDOMElement **aPreviousElementSibling);

    nsresult (STDMETHODCALLTYPE *GetNextElementSibling)(
        nsIDOMElement *This,
        nsIDOMElement **aNextElementSibling);

    nsresult (STDMETHODCALLTYPE *GetChildElementCount)(
        nsIDOMElement *This,
        UINT32 *aChildElementCount);

    nsresult (STDMETHODCALLTYPE *Remove)(
        nsIDOMElement *This);

    nsresult (STDMETHODCALLTYPE *GetClientRects)(
        nsIDOMElement *This,
        nsIDOMClientRectList **_retval);

    nsresult (STDMETHODCALLTYPE *GetBoundingClientRect)(
        nsIDOMElement *This,
        nsIDOMClientRect **_retval);

    nsresult (STDMETHODCALLTYPE *GetScrollTop)(
        nsIDOMElement *This,
        LONG *aScrollTop);

    nsresult (STDMETHODCALLTYPE *SetScrollTop)(
        nsIDOMElement *This,
        LONG aScrollTop);

    nsresult (STDMETHODCALLTYPE *GetScrollLeft)(
        nsIDOMElement *This,
        LONG *aScrollLeft);

    nsresult (STDMETHODCALLTYPE *SetScrollLeft)(
        nsIDOMElement *This,
        LONG aScrollLeft);

    nsresult (STDMETHODCALLTYPE *GetScrollWidth)(
        nsIDOMElement *This,
        LONG *aScrollWidth);

    nsresult (STDMETHODCALLTYPE *GetScrollHeight)(
        nsIDOMElement *This,
        LONG *aScrollHeight);

    nsresult (STDMETHODCALLTYPE *GetClientTop)(
        nsIDOMElement *This,
        LONG *aClientTop);

    nsresult (STDMETHODCALLTYPE *GetClientLeft)(
        nsIDOMElement *This,
        LONG *aClientLeft);

    nsresult (STDMETHODCALLTYPE *GetClientWidth)(
        nsIDOMElement *This,
        LONG *aClientWidth);

    nsresult (STDMETHODCALLTYPE *GetClientHeight)(
        nsIDOMElement *This,
        LONG *aClientHeight);

    nsresult (STDMETHODCALLTYPE *GetScrollLeftMax)(
        nsIDOMElement *This,
        LONG *aScrollLeftMax);

    nsresult (STDMETHODCALLTYPE *GetScrollTopMax)(
        nsIDOMElement *This,
        LONG *aScrollTopMax);

    nsresult (STDMETHODCALLTYPE *MozMatchesSelector)(
        nsIDOMElement *This,
        const nsAString *selector,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetCapture)(
        nsIDOMElement *This,
        cpp_bool retargetToElement);

    nsresult (STDMETHODCALLTYPE *ReleaseCapture)(
        nsIDOMElement *This);

    nsresult (STDMETHODCALLTYPE *MozRequestFullScreen)(
        nsIDOMElement *This);

    nsresult (STDMETHODCALLTYPE *MozRequestPointerLock)(
        nsIDOMElement *This);

    nsresult (STDMETHODCALLTYPE *QuerySelector)(
        nsIDOMElement *This,
        const nsAString *selectors,
        nsIDOMElement **_retval);

    nsresult (STDMETHODCALLTYPE *QuerySelectorAll)(
        nsIDOMElement *This,
        const nsAString *selectors,
        nsIDOMNodeList **_retval);

    END_INTERFACE
} nsIDOMElementVtbl;

interface nsIDOMElement {
    CONST_VTBL nsIDOMElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMElement_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMNode methods ***/
#define nsIDOMElement_GetNodeName(This,aNodeName) (This)->lpVtbl->GetNodeName(This,aNodeName)
#define nsIDOMElement_GetNodeValue(This,aNodeValue) (This)->lpVtbl->GetNodeValue(This,aNodeValue)
#define nsIDOMElement_SetNodeValue(This,aNodeValue) (This)->lpVtbl->SetNodeValue(This,aNodeValue)
#define nsIDOMElement_GetNodeType(This,aNodeType) (This)->lpVtbl->GetNodeType(This,aNodeType)
#define nsIDOMElement_GetParentNode(This,aParentNode) (This)->lpVtbl->GetParentNode(This,aParentNode)
#define nsIDOMElement_GetParentElement(This,aParentElement) (This)->lpVtbl->GetParentElement(This,aParentElement)
#define nsIDOMElement_GetChildNodes(This,aChildNodes) (This)->lpVtbl->GetChildNodes(This,aChildNodes)
#define nsIDOMElement_GetFirstChild(This,aFirstChild) (This)->lpVtbl->GetFirstChild(This,aFirstChild)
#define nsIDOMElement_GetLastChild(This,aLastChild) (This)->lpVtbl->GetLastChild(This,aLastChild)
#define nsIDOMElement_GetPreviousSibling(This,aPreviousSibling) (This)->lpVtbl->GetPreviousSibling(This,aPreviousSibling)
#define nsIDOMElement_GetNextSibling(This,aNextSibling) (This)->lpVtbl->GetNextSibling(This,aNextSibling)
#define nsIDOMElement_GetOwnerDocument(This,aOwnerDocument) (This)->lpVtbl->GetOwnerDocument(This,aOwnerDocument)
#define nsIDOMElement_InsertBefore(This,newChild,refChild,_retval) (This)->lpVtbl->InsertBefore(This,newChild,refChild,_retval)
#define nsIDOMElement_ReplaceChild(This,newChild,oldChild,_retval) (This)->lpVtbl->ReplaceChild(This,newChild,oldChild,_retval)
#define nsIDOMElement_RemoveChild(This,oldChild,_retval) (This)->lpVtbl->RemoveChild(This,oldChild,_retval)
#define nsIDOMElement_AppendChild(This,newChild,_retval) (This)->lpVtbl->AppendChild(This,newChild,_retval)
#define nsIDOMElement_HasChildNodes(This,_retval) (This)->lpVtbl->HasChildNodes(This,_retval)
#define nsIDOMElement_CloneNode(This,deep,_argc,_retval) (This)->lpVtbl->CloneNode(This,deep,_argc,_retval)
#define nsIDOMElement_Normalize(This) (This)->lpVtbl->Normalize(This)
#define nsIDOMElement_GetNamespaceURI(This,aNamespaceURI) (This)->lpVtbl->GetNamespaceURI(This,aNamespaceURI)
#define nsIDOMElement_GetPrefix(This,aPrefix) (This)->lpVtbl->GetPrefix(This,aPrefix)
#define nsIDOMElement_GetLocalName(This,aLocalName) (This)->lpVtbl->GetLocalName(This,aLocalName)
#define nsIDOMElement_UnusedPlaceholder(This,_retval) (This)->lpVtbl->UnusedPlaceholder(This,_retval)
#define nsIDOMElement_GetDOMBaseURI(This,aBaseURI) (This)->lpVtbl->GetDOMBaseURI(This,aBaseURI)
#define nsIDOMElement_CompareDocumentPosition(This,other,_retval) (This)->lpVtbl->CompareDocumentPosition(This,other,_retval)
#define nsIDOMElement_GetTextContent(This,aTextContent) (This)->lpVtbl->GetTextContent(This,aTextContent)
#define nsIDOMElement_SetTextContent(This,aTextContent) (This)->lpVtbl->SetTextContent(This,aTextContent)
#define nsIDOMElement_LookupPrefix(This,namespaceURI,_retval) (This)->lpVtbl->LookupPrefix(This,namespaceURI,_retval)
#define nsIDOMElement_IsDefaultNamespace(This,namespaceURI,_retval) (This)->lpVtbl->IsDefaultNamespace(This,namespaceURI,_retval)
#define nsIDOMElement_LookupNamespaceURI(This,prefix,_retval) (This)->lpVtbl->LookupNamespaceURI(This,prefix,_retval)
#define nsIDOMElement_IsEqualNode(This,arg,_retval) (This)->lpVtbl->IsEqualNode(This,arg,_retval)
#define nsIDOMElement_SetUserData(This,key,data,_retval) (This)->lpVtbl->SetUserData(This,key,data,_retval)
#define nsIDOMElement_GetUserData(This,key,_retval) (This)->lpVtbl->GetUserData(This,key,_retval)
#define nsIDOMElement_Contains(This,aOther,_retval) (This)->lpVtbl->Contains(This,aOther,_retval)
#define nsIDOMElement_GetMshtmlNode(This,aMshtmlNode) (This)->lpVtbl->GetMshtmlNode(This,aMshtmlNode)
#define nsIDOMElement_SetMshtmlNode(This,aMshtmlNode) (This)->lpVtbl->SetMshtmlNode(This,aMshtmlNode)
/*** nsIDOMElement methods ***/
#define nsIDOMElement_GetTagName(This,aTagName) (This)->lpVtbl->GetTagName(This,aTagName)
#define nsIDOMElement_GetId(This,aId) (This)->lpVtbl->GetId(This,aId)
#define nsIDOMElement_SetId(This,aId) (This)->lpVtbl->SetId(This,aId)
#define nsIDOMElement_GetClassName(This,aClassName) (This)->lpVtbl->GetClassName(This,aClassName)
#define nsIDOMElement_SetClassName(This,aClassName) (This)->lpVtbl->SetClassName(This,aClassName)
#define nsIDOMElement_GetClassList(This,aClassList) (This)->lpVtbl->GetClassList(This,aClassList)
#define nsIDOMElement_GetAttributes(This,aAttributes) (This)->lpVtbl->GetAttributes(This,aAttributes)
#define nsIDOMElement_GetAttribute(This,name,_retval) (This)->lpVtbl->GetAttribute(This,name,_retval)
#define nsIDOMElement_GetAttributeNS(This,namespaceURI,localName,_retval) (This)->lpVtbl->GetAttributeNS(This,namespaceURI,localName,_retval)
#define nsIDOMElement_SetAttribute(This,name,value) (This)->lpVtbl->SetAttribute(This,name,value)
#define nsIDOMElement_SetAttributeNS(This,namespaceURI,qualifiedName,value) (This)->lpVtbl->SetAttributeNS(This,namespaceURI,qualifiedName,value)
#define nsIDOMElement_RemoveAttribute(This,name) (This)->lpVtbl->RemoveAttribute(This,name)
#define nsIDOMElement_RemoveAttributeNS(This,namespaceURI,localName) (This)->lpVtbl->RemoveAttributeNS(This,namespaceURI,localName)
#define nsIDOMElement_HasAttribute(This,name,_retval) (This)->lpVtbl->HasAttribute(This,name,_retval)
#define nsIDOMElement_HasAttributeNS(This,namespaceURI,localName,_retval) (This)->lpVtbl->HasAttributeNS(This,namespaceURI,localName,_retval)
#define nsIDOMElement_HasAttributes(This,_retval) (This)->lpVtbl->HasAttributes(This,_retval)
#define nsIDOMElement_GetAttributeNode(This,name,_retval) (This)->lpVtbl->GetAttributeNode(This,name,_retval)
#define nsIDOMElement_SetAttributeNode(This,newAttr,_retval) (This)->lpVtbl->SetAttributeNode(This,newAttr,_retval)
#define nsIDOMElement_RemoveAttributeNode(This,oldAttr,_retval) (This)->lpVtbl->RemoveAttributeNode(This,oldAttr,_retval)
#define nsIDOMElement_GetAttributeNodeNS(This,namespaceURI,localName,_retval) (This)->lpVtbl->GetAttributeNodeNS(This,namespaceURI,localName,_retval)
#define nsIDOMElement_SetAttributeNodeNS(This,newAttr,_retval) (This)->lpVtbl->SetAttributeNodeNS(This,newAttr,_retval)
#define nsIDOMElement_GetElementsByTagName(This,name,_retval) (This)->lpVtbl->GetElementsByTagName(This,name,_retval)
#define nsIDOMElement_GetElementsByTagNameNS(This,namespaceURI,localName,_retval) (This)->lpVtbl->GetElementsByTagNameNS(This,namespaceURI,localName,_retval)
#define nsIDOMElement_GetElementsByClassName(This,classes,_retval) (This)->lpVtbl->GetElementsByClassName(This,classes,_retval)
#define nsIDOMElement_GetChildElements(This,aChildren) (This)->lpVtbl->GetChildElements(This,aChildren)
#define nsIDOMElement_GetFirstElementChild(This,aFirstElementChild) (This)->lpVtbl->GetFirstElementChild(This,aFirstElementChild)
#define nsIDOMElement_GetLastElementChild(This,aLastElementChild) (This)->lpVtbl->GetLastElementChild(This,aLastElementChild)
#define nsIDOMElement_GetPreviousElementSibling(This,aPreviousElementSibling) (This)->lpVtbl->GetPreviousElementSibling(This,aPreviousElementSibling)
#define nsIDOMElement_GetNextElementSibling(This,aNextElementSibling) (This)->lpVtbl->GetNextElementSibling(This,aNextElementSibling)
#define nsIDOMElement_GetChildElementCount(This,aChildElementCount) (This)->lpVtbl->GetChildElementCount(This,aChildElementCount)
#define nsIDOMElement_Remove(This) (This)->lpVtbl->Remove(This)
#define nsIDOMElement_GetClientRects(This,_retval) (This)->lpVtbl->GetClientRects(This,_retval)
#define nsIDOMElement_GetBoundingClientRect(This,_retval) (This)->lpVtbl->GetBoundingClientRect(This,_retval)
#define nsIDOMElement_GetScrollTop(This,aScrollTop) (This)->lpVtbl->GetScrollTop(This,aScrollTop)
#define nsIDOMElement_SetScrollTop(This,aScrollTop) (This)->lpVtbl->SetScrollTop(This,aScrollTop)
#define nsIDOMElement_GetScrollLeft(This,aScrollLeft) (This)->lpVtbl->GetScrollLeft(This,aScrollLeft)
#define nsIDOMElement_SetScrollLeft(This,aScrollLeft) (This)->lpVtbl->SetScrollLeft(This,aScrollLeft)
#define nsIDOMElement_GetScrollWidth(This,aScrollWidth) (This)->lpVtbl->GetScrollWidth(This,aScrollWidth)
#define nsIDOMElement_GetScrollHeight(This,aScrollHeight) (This)->lpVtbl->GetScrollHeight(This,aScrollHeight)
#define nsIDOMElement_GetClientTop(This,aClientTop) (This)->lpVtbl->GetClientTop(This,aClientTop)
#define nsIDOMElement_GetClientLeft(This,aClientLeft) (This)->lpVtbl->GetClientLeft(This,aClientLeft)
#define nsIDOMElement_GetClientWidth(This,aClientWidth) (This)->lpVtbl->GetClientWidth(This,aClientWidth)
#define nsIDOMElement_GetClientHeight(This,aClientHeight) (This)->lpVtbl->GetClientHeight(This,aClientHeight)
#define nsIDOMElement_GetScrollLeftMax(This,aScrollLeftMax) (This)->lpVtbl->GetScrollLeftMax(This,aScrollLeftMax)
#define nsIDOMElement_GetScrollTopMax(This,aScrollTopMax) (This)->lpVtbl->GetScrollTopMax(This,aScrollTopMax)
#define nsIDOMElement_MozMatchesSelector(This,selector,_retval) (This)->lpVtbl->MozMatchesSelector(This,selector,_retval)
#define nsIDOMElement_SetCapture(This,retargetToElement) (This)->lpVtbl->SetCapture(This,retargetToElement)
#define nsIDOMElement_ReleaseCapture(This) (This)->lpVtbl->ReleaseCapture(This)
#define nsIDOMElement_MozRequestFullScreen(This) (This)->lpVtbl->MozRequestFullScreen(This)
#define nsIDOMElement_MozRequestPointerLock(This) (This)->lpVtbl->MozRequestPointerLock(This)
#define nsIDOMElement_QuerySelector(This,selectors,_retval) (This)->lpVtbl->QuerySelector(This,selectors,_retval)
#define nsIDOMElement_QuerySelectorAll(This,selectors,_retval) (This)->lpVtbl->QuerySelectorAll(This,selectors,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMElement_QueryInterface(nsIDOMElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMElement_AddRef(nsIDOMElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMElement_Release(nsIDOMElement* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMNode methods ***/
static FORCEINLINE nsresult nsIDOMElement_GetNodeName(nsIDOMElement* This,nsAString *aNodeName) {
    return This->lpVtbl->GetNodeName(This,aNodeName);
}
static FORCEINLINE nsresult nsIDOMElement_GetNodeValue(nsIDOMElement* This,nsAString *aNodeValue) {
    return This->lpVtbl->GetNodeValue(This,aNodeValue);
}
static FORCEINLINE nsresult nsIDOMElement_SetNodeValue(nsIDOMElement* This,const nsAString *aNodeValue) {
    return This->lpVtbl->SetNodeValue(This,aNodeValue);
}
static FORCEINLINE nsresult nsIDOMElement_GetNodeType(nsIDOMElement* This,UINT16 *aNodeType) {
    return This->lpVtbl->GetNodeType(This,aNodeType);
}
static FORCEINLINE nsresult nsIDOMElement_GetParentNode(nsIDOMElement* This,nsIDOMNode **aParentNode) {
    return This->lpVtbl->GetParentNode(This,aParentNode);
}
static FORCEINLINE nsresult nsIDOMElement_GetParentElement(nsIDOMElement* This,nsIDOMElement **aParentElement) {
    return This->lpVtbl->GetParentElement(This,aParentElement);
}
static FORCEINLINE nsresult nsIDOMElement_GetChildNodes(nsIDOMElement* This,nsIDOMNodeList **aChildNodes) {
    return This->lpVtbl->GetChildNodes(This,aChildNodes);
}
static FORCEINLINE nsresult nsIDOMElement_GetFirstChild(nsIDOMElement* This,nsIDOMNode **aFirstChild) {
    return This->lpVtbl->GetFirstChild(This,aFirstChild);
}
static FORCEINLINE nsresult nsIDOMElement_GetLastChild(nsIDOMElement* This,nsIDOMNode **aLastChild) {
    return This->lpVtbl->GetLastChild(This,aLastChild);
}
static FORCEINLINE nsresult nsIDOMElement_GetPreviousSibling(nsIDOMElement* This,nsIDOMNode **aPreviousSibling) {
    return This->lpVtbl->GetPreviousSibling(This,aPreviousSibling);
}
static FORCEINLINE nsresult nsIDOMElement_GetNextSibling(nsIDOMElement* This,nsIDOMNode **aNextSibling) {
    return This->lpVtbl->GetNextSibling(This,aNextSibling);
}
static FORCEINLINE nsresult nsIDOMElement_GetOwnerDocument(nsIDOMElement* This,nsIDOMDocument **aOwnerDocument) {
    return This->lpVtbl->GetOwnerDocument(This,aOwnerDocument);
}
static FORCEINLINE nsresult nsIDOMElement_InsertBefore(nsIDOMElement* This,nsIDOMNode *newChild,nsIDOMNode *refChild,nsIDOMNode **_retval) {
    return This->lpVtbl->InsertBefore(This,newChild,refChild,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_ReplaceChild(nsIDOMElement* This,nsIDOMNode *newChild,nsIDOMNode *oldChild,nsIDOMNode **_retval) {
    return This->lpVtbl->ReplaceChild(This,newChild,oldChild,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_RemoveChild(nsIDOMElement* This,nsIDOMNode *oldChild,nsIDOMNode **_retval) {
    return This->lpVtbl->RemoveChild(This,oldChild,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_AppendChild(nsIDOMElement* This,nsIDOMNode *newChild,nsIDOMNode **_retval) {
    return This->lpVtbl->AppendChild(This,newChild,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_HasChildNodes(nsIDOMElement* This,cpp_bool *_retval) {
    return This->lpVtbl->HasChildNodes(This,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_CloneNode(nsIDOMElement* This,cpp_bool deep,UINT8 _argc,nsIDOMNode **_retval) {
    return This->lpVtbl->CloneNode(This,deep,_argc,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_Normalize(nsIDOMElement* This) {
    return This->lpVtbl->Normalize(This);
}
static FORCEINLINE nsresult nsIDOMElement_GetNamespaceURI(nsIDOMElement* This,nsAString *aNamespaceURI) {
    return This->lpVtbl->GetNamespaceURI(This,aNamespaceURI);
}
static FORCEINLINE nsresult nsIDOMElement_GetPrefix(nsIDOMElement* This,nsAString *aPrefix) {
    return This->lpVtbl->GetPrefix(This,aPrefix);
}
static FORCEINLINE nsresult nsIDOMElement_GetLocalName(nsIDOMElement* This,nsAString *aLocalName) {
    return This->lpVtbl->GetLocalName(This,aLocalName);
}
static FORCEINLINE nsresult nsIDOMElement_UnusedPlaceholder(nsIDOMElement* This,cpp_bool *_retval) {
    return This->lpVtbl->UnusedPlaceholder(This,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_GetDOMBaseURI(nsIDOMElement* This,nsAString *aBaseURI) {
    return This->lpVtbl->GetDOMBaseURI(This,aBaseURI);
}
static FORCEINLINE nsresult nsIDOMElement_CompareDocumentPosition(nsIDOMElement* This,nsIDOMNode *other,UINT16 *_retval) {
    return This->lpVtbl->CompareDocumentPosition(This,other,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_GetTextContent(nsIDOMElement* This,nsAString *aTextContent) {
    return This->lpVtbl->GetTextContent(This,aTextContent);
}
static FORCEINLINE nsresult nsIDOMElement_SetTextContent(nsIDOMElement* This,const nsAString *aTextContent) {
    return This->lpVtbl->SetTextContent(This,aTextContent);
}
static FORCEINLINE nsresult nsIDOMElement_LookupPrefix(nsIDOMElement* This,const nsAString *namespaceURI,nsAString *_retval) {
    return This->lpVtbl->LookupPrefix(This,namespaceURI,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_IsDefaultNamespace(nsIDOMElement* This,const nsAString *namespaceURI,cpp_bool *_retval) {
    return This->lpVtbl->IsDefaultNamespace(This,namespaceURI,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_LookupNamespaceURI(nsIDOMElement* This,const nsAString *prefix,nsAString *_retval) {
    return This->lpVtbl->LookupNamespaceURI(This,prefix,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_IsEqualNode(nsIDOMElement* This,nsIDOMNode *arg,cpp_bool *_retval) {
    return This->lpVtbl->IsEqualNode(This,arg,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_SetUserData(nsIDOMElement* This,const nsAString *key,nsIVariant *data,nsIVariant **_retval) {
    return This->lpVtbl->SetUserData(This,key,data,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_GetUserData(nsIDOMElement* This,const nsAString *key,nsIVariant **_retval) {
    return This->lpVtbl->GetUserData(This,key,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_Contains(nsIDOMElement* This,nsIDOMNode *aOther,cpp_bool *_retval) {
    return This->lpVtbl->Contains(This,aOther,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_GetMshtmlNode(nsIDOMElement* This,nsISupports **aMshtmlNode) {
    return This->lpVtbl->GetMshtmlNode(This,aMshtmlNode);
}
static FORCEINLINE nsresult nsIDOMElement_SetMshtmlNode(nsIDOMElement* This,nsISupports *aMshtmlNode) {
    return This->lpVtbl->SetMshtmlNode(This,aMshtmlNode);
}
/*** nsIDOMElement methods ***/
static FORCEINLINE nsresult nsIDOMElement_GetTagName(nsIDOMElement* This,nsAString *aTagName) {
    return This->lpVtbl->GetTagName(This,aTagName);
}
static FORCEINLINE nsresult nsIDOMElement_GetId(nsIDOMElement* This,nsAString *aId) {
    return This->lpVtbl->GetId(This,aId);
}
static FORCEINLINE nsresult nsIDOMElement_SetId(nsIDOMElement* This,const nsAString *aId) {
    return This->lpVtbl->SetId(This,aId);
}
static FORCEINLINE nsresult nsIDOMElement_GetClassName(nsIDOMElement* This,nsAString *aClassName) {
    return This->lpVtbl->GetClassName(This,aClassName);
}
static FORCEINLINE nsresult nsIDOMElement_SetClassName(nsIDOMElement* This,const nsAString *aClassName) {
    return This->lpVtbl->SetClassName(This,aClassName);
}
static FORCEINLINE nsresult nsIDOMElement_GetClassList(nsIDOMElement* This,nsISupports **aClassList) {
    return This->lpVtbl->GetClassList(This,aClassList);
}
static FORCEINLINE nsresult nsIDOMElement_GetAttributes(nsIDOMElement* This,nsIDOMMozNamedAttrMap **aAttributes) {
    return This->lpVtbl->GetAttributes(This,aAttributes);
}
static FORCEINLINE nsresult nsIDOMElement_GetAttribute(nsIDOMElement* This,const nsAString *name,nsAString *_retval) {
    return This->lpVtbl->GetAttribute(This,name,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_GetAttributeNS(nsIDOMElement* This,const nsAString *namespaceURI,const nsAString *localName,nsAString *_retval) {
    return This->lpVtbl->GetAttributeNS(This,namespaceURI,localName,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_SetAttribute(nsIDOMElement* This,const nsAString *name,const nsAString *value) {
    return This->lpVtbl->SetAttribute(This,name,value);
}
static FORCEINLINE nsresult nsIDOMElement_SetAttributeNS(nsIDOMElement* This,const nsAString *namespaceURI,const nsAString *qualifiedName,const nsAString *value) {
    return This->lpVtbl->SetAttributeNS(This,namespaceURI,qualifiedName,value);
}
static FORCEINLINE nsresult nsIDOMElement_RemoveAttribute(nsIDOMElement* This,const nsAString *name) {
    return This->lpVtbl->RemoveAttribute(This,name);
}
static FORCEINLINE nsresult nsIDOMElement_RemoveAttributeNS(nsIDOMElement* This,const nsAString *namespaceURI,const nsAString *localName) {
    return This->lpVtbl->RemoveAttributeNS(This,namespaceURI,localName);
}
static FORCEINLINE nsresult nsIDOMElement_HasAttribute(nsIDOMElement* This,const nsAString *name,cpp_bool *_retval) {
    return This->lpVtbl->HasAttribute(This,name,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_HasAttributeNS(nsIDOMElement* This,const nsAString *namespaceURI,const nsAString *localName,cpp_bool *_retval) {
    return This->lpVtbl->HasAttributeNS(This,namespaceURI,localName,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_HasAttributes(nsIDOMElement* This,cpp_bool *_retval) {
    return This->lpVtbl->HasAttributes(This,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_GetAttributeNode(nsIDOMElement* This,const nsAString *name,nsIDOMAttr **_retval) {
    return This->lpVtbl->GetAttributeNode(This,name,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_SetAttributeNode(nsIDOMElement* This,nsIDOMAttr *newAttr,nsIDOMAttr **_retval) {
    return This->lpVtbl->SetAttributeNode(This,newAttr,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_RemoveAttributeNode(nsIDOMElement* This,nsIDOMAttr *oldAttr,nsIDOMAttr **_retval) {
    return This->lpVtbl->RemoveAttributeNode(This,oldAttr,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_GetAttributeNodeNS(nsIDOMElement* This,const nsAString *namespaceURI,const nsAString *localName,nsIDOMAttr **_retval) {
    return This->lpVtbl->GetAttributeNodeNS(This,namespaceURI,localName,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_SetAttributeNodeNS(nsIDOMElement* This,nsIDOMAttr *newAttr,nsIDOMAttr **_retval) {
    return This->lpVtbl->SetAttributeNodeNS(This,newAttr,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_GetElementsByTagName(nsIDOMElement* This,const nsAString *name,nsIDOMHTMLCollection **_retval) {
    return This->lpVtbl->GetElementsByTagName(This,name,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_GetElementsByTagNameNS(nsIDOMElement* This,const nsAString *namespaceURI,const nsAString *localName,nsIDOMHTMLCollection **_retval) {
    return This->lpVtbl->GetElementsByTagNameNS(This,namespaceURI,localName,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_GetElementsByClassName(nsIDOMElement* This,const nsAString *classes,nsIDOMHTMLCollection **_retval) {
    return This->lpVtbl->GetElementsByClassName(This,classes,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_GetChildElements(nsIDOMElement* This,nsIDOMNodeList **aChildren) {
    return This->lpVtbl->GetChildElements(This,aChildren);
}
static FORCEINLINE nsresult nsIDOMElement_GetFirstElementChild(nsIDOMElement* This,nsIDOMElement **aFirstElementChild) {
    return This->lpVtbl->GetFirstElementChild(This,aFirstElementChild);
}
static FORCEINLINE nsresult nsIDOMElement_GetLastElementChild(nsIDOMElement* This,nsIDOMElement **aLastElementChild) {
    return This->lpVtbl->GetLastElementChild(This,aLastElementChild);
}
static FORCEINLINE nsresult nsIDOMElement_GetPreviousElementSibling(nsIDOMElement* This,nsIDOMElement **aPreviousElementSibling) {
    return This->lpVtbl->GetPreviousElementSibling(This,aPreviousElementSibling);
}
static FORCEINLINE nsresult nsIDOMElement_GetNextElementSibling(nsIDOMElement* This,nsIDOMElement **aNextElementSibling) {
    return This->lpVtbl->GetNextElementSibling(This,aNextElementSibling);
}
static FORCEINLINE nsresult nsIDOMElement_GetChildElementCount(nsIDOMElement* This,UINT32 *aChildElementCount) {
    return This->lpVtbl->GetChildElementCount(This,aChildElementCount);
}
static FORCEINLINE nsresult nsIDOMElement_Remove(nsIDOMElement* This) {
    return This->lpVtbl->Remove(This);
}
static FORCEINLINE nsresult nsIDOMElement_GetClientRects(nsIDOMElement* This,nsIDOMClientRectList **_retval) {
    return This->lpVtbl->GetClientRects(This,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_GetBoundingClientRect(nsIDOMElement* This,nsIDOMClientRect **_retval) {
    return This->lpVtbl->GetBoundingClientRect(This,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_GetScrollTop(nsIDOMElement* This,LONG *aScrollTop) {
    return This->lpVtbl->GetScrollTop(This,aScrollTop);
}
static FORCEINLINE nsresult nsIDOMElement_SetScrollTop(nsIDOMElement* This,LONG aScrollTop) {
    return This->lpVtbl->SetScrollTop(This,aScrollTop);
}
static FORCEINLINE nsresult nsIDOMElement_GetScrollLeft(nsIDOMElement* This,LONG *aScrollLeft) {
    return This->lpVtbl->GetScrollLeft(This,aScrollLeft);
}
static FORCEINLINE nsresult nsIDOMElement_SetScrollLeft(nsIDOMElement* This,LONG aScrollLeft) {
    return This->lpVtbl->SetScrollLeft(This,aScrollLeft);
}
static FORCEINLINE nsresult nsIDOMElement_GetScrollWidth(nsIDOMElement* This,LONG *aScrollWidth) {
    return This->lpVtbl->GetScrollWidth(This,aScrollWidth);
}
static FORCEINLINE nsresult nsIDOMElement_GetScrollHeight(nsIDOMElement* This,LONG *aScrollHeight) {
    return This->lpVtbl->GetScrollHeight(This,aScrollHeight);
}
static FORCEINLINE nsresult nsIDOMElement_GetClientTop(nsIDOMElement* This,LONG *aClientTop) {
    return This->lpVtbl->GetClientTop(This,aClientTop);
}
static FORCEINLINE nsresult nsIDOMElement_GetClientLeft(nsIDOMElement* This,LONG *aClientLeft) {
    return This->lpVtbl->GetClientLeft(This,aClientLeft);
}
static FORCEINLINE nsresult nsIDOMElement_GetClientWidth(nsIDOMElement* This,LONG *aClientWidth) {
    return This->lpVtbl->GetClientWidth(This,aClientWidth);
}
static FORCEINLINE nsresult nsIDOMElement_GetClientHeight(nsIDOMElement* This,LONG *aClientHeight) {
    return This->lpVtbl->GetClientHeight(This,aClientHeight);
}
static FORCEINLINE nsresult nsIDOMElement_GetScrollLeftMax(nsIDOMElement* This,LONG *aScrollLeftMax) {
    return This->lpVtbl->GetScrollLeftMax(This,aScrollLeftMax);
}
static FORCEINLINE nsresult nsIDOMElement_GetScrollTopMax(nsIDOMElement* This,LONG *aScrollTopMax) {
    return This->lpVtbl->GetScrollTopMax(This,aScrollTopMax);
}
static FORCEINLINE nsresult nsIDOMElement_MozMatchesSelector(nsIDOMElement* This,const nsAString *selector,cpp_bool *_retval) {
    return This->lpVtbl->MozMatchesSelector(This,selector,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_SetCapture(nsIDOMElement* This,cpp_bool retargetToElement) {
    return This->lpVtbl->SetCapture(This,retargetToElement);
}
static FORCEINLINE nsresult nsIDOMElement_ReleaseCapture(nsIDOMElement* This) {
    return This->lpVtbl->ReleaseCapture(This);
}
static FORCEINLINE nsresult nsIDOMElement_MozRequestFullScreen(nsIDOMElement* This) {
    return This->lpVtbl->MozRequestFullScreen(This);
}
static FORCEINLINE nsresult nsIDOMElement_MozRequestPointerLock(nsIDOMElement* This) {
    return This->lpVtbl->MozRequestPointerLock(This);
}
static FORCEINLINE nsresult nsIDOMElement_QuerySelector(nsIDOMElement* This,const nsAString *selectors,nsIDOMElement **_retval) {
    return This->lpVtbl->QuerySelector(This,selectors,_retval);
}
static FORCEINLINE nsresult nsIDOMElement_QuerySelectorAll(nsIDOMElement* This,const nsAString *selectors,nsIDOMNodeList **_retval) {
    return This->lpVtbl->QuerySelectorAll(This,selectors,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIDOMElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMElementCSSInlineStyle interface
 */
#ifndef __nsIDOMElementCSSInlineStyle_INTERFACE_DEFINED__
#define __nsIDOMElementCSSInlineStyle_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMElementCSSInlineStyle, 0x99715845, 0x95fc, 0x4a56, 0xaa,0x53, 0x21,0x4b,0x65,0xc2,0x6e,0x22);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("99715845-95fc-4a56-aa53-214b65c26e22")
nsIDOMElementCSSInlineStyle : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetStyle(
        nsIDOMCSSStyleDeclaration **aStyle) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMElementCSSInlineStyle, 0x99715845, 0x95fc, 0x4a56, 0xaa,0x53, 0x21,0x4b,0x65,0xc2,0x6e,0x22)
#endif
#else
typedef struct nsIDOMElementCSSInlineStyleVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMElementCSSInlineStyle *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMElementCSSInlineStyle *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMElementCSSInlineStyle *This);

    /*** nsIDOMElementCSSInlineStyle methods ***/
    nsresult (STDMETHODCALLTYPE *GetStyle)(
        nsIDOMElementCSSInlineStyle *This,
        nsIDOMCSSStyleDeclaration **aStyle);

    END_INTERFACE
} nsIDOMElementCSSInlineStyleVtbl;

interface nsIDOMElementCSSInlineStyle {
    CONST_VTBL nsIDOMElementCSSInlineStyleVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMElementCSSInlineStyle_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMElementCSSInlineStyle_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMElementCSSInlineStyle_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMElementCSSInlineStyle methods ***/
#define nsIDOMElementCSSInlineStyle_GetStyle(This,aStyle) (This)->lpVtbl->GetStyle(This,aStyle)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMElementCSSInlineStyle_QueryInterface(nsIDOMElementCSSInlineStyle* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMElementCSSInlineStyle_AddRef(nsIDOMElementCSSInlineStyle* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMElementCSSInlineStyle_Release(nsIDOMElementCSSInlineStyle* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMElementCSSInlineStyle methods ***/
static FORCEINLINE nsresult nsIDOMElementCSSInlineStyle_GetStyle(nsIDOMElementCSSInlineStyle* This,nsIDOMCSSStyleDeclaration **aStyle) {
    return This->lpVtbl->GetStyle(This,aStyle);
}
#endif
#endif

#endif


#endif  /* __nsIDOMElementCSSInlineStyle_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLElement interface
 */
#ifndef __nsIDOMHTMLElement_INTERFACE_DEFINED__
#define __nsIDOMHTMLElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLElement, 0xb0c42392, 0xd0e7, 0x4f6a, 0xbe,0xb5, 0xa6,0x98,0xce,0x64,0x89,0x45);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("b0c42392-d0e7-4f6a-beb5-a698ce648945")
nsIDOMHTMLElement : public nsIDOMElement
{
    virtual nsresult STDMETHODCALLTYPE GetTitle(
        nsAString *aTitle) = 0;

    virtual nsresult STDMETHODCALLTYPE SetTitle(
        const nsAString *aTitle) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLang(
        nsAString *aLang) = 0;

    virtual nsresult STDMETHODCALLTYPE SetLang(
        const nsAString *aLang) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDir(
        nsAString *aDir) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDir(
        const nsAString *aDir) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDataset(
        nsISupports **aDataset) = 0;

    virtual nsresult STDMETHODCALLTYPE GetItemScope(
        cpp_bool *aItemScope) = 0;

    virtual nsresult STDMETHODCALLTYPE SetItemScope(
        cpp_bool aItemScope) = 0;

    virtual nsresult STDMETHODCALLTYPE GetItemType(
        nsIVariant **aItemType) = 0;

    virtual nsresult STDMETHODCALLTYPE SetItemType(
        nsIVariant *aItemType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetItemId(
        nsAString *aItemId) = 0;

    virtual nsresult STDMETHODCALLTYPE SetItemId(
        const nsAString *aItemId) = 0;

    virtual nsresult STDMETHODCALLTYPE GetProperties(
        nsISupports **aProperties) = 0;

    virtual nsresult STDMETHODCALLTYPE GetItemValue(
        nsIVariant **aItemValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetItemValue(
        nsIVariant *aItemValue) = 0;

    virtual nsresult STDMETHODCALLTYPE GetItemProp(
        nsIVariant **aItemProp) = 0;

    virtual nsresult STDMETHODCALLTYPE SetItemProp(
        nsIVariant *aItemProp) = 0;

    virtual nsresult STDMETHODCALLTYPE GetItemRef(
        nsIVariant **aItemRef) = 0;

    virtual nsresult STDMETHODCALLTYPE SetItemRef(
        nsIVariant *aItemRef) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHidden(
        cpp_bool *aHidden) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHidden(
        cpp_bool aHidden) = 0;

    virtual nsresult STDMETHODCALLTYPE Click(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTabIndex(
        LONG *aTabIndex) = 0;

    virtual nsresult STDMETHODCALLTYPE SetTabIndex(
        LONG aTabIndex) = 0;

    virtual nsresult STDMETHODCALLTYPE Focus(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE Blur(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAccessKey(
        nsAString *aAccessKey) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAccessKey(
        const nsAString *aAccessKey) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAccessKeyLabel(
        nsAString *aAccessKeyLabel) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDraggable(
        cpp_bool *aDraggable) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDraggable(
        cpp_bool aDraggable) = 0;

    virtual nsresult STDMETHODCALLTYPE GetContentEditable(
        nsAString *aContentEditable) = 0;

    virtual nsresult STDMETHODCALLTYPE SetContentEditable(
        const nsAString *aContentEditable) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsContentEditable(
        cpp_bool *aIsContentEditable) = 0;

    virtual nsresult STDMETHODCALLTYPE GetContextMenu(
        nsIDOMHTMLMenuElement **aContextMenu) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSpellcheck(
        cpp_bool *aSpellcheck) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSpellcheck(
        cpp_bool aSpellcheck) = 0;

    virtual nsresult STDMETHODCALLTYPE GetInnerHTML(
        nsAString *aInnerHTML) = 0;

    virtual nsresult STDMETHODCALLTYPE SetInnerHTML(
        const nsAString *aInnerHTML) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOuterHTML(
        nsAString *aInnerHTML) = 0;

    virtual nsresult STDMETHODCALLTYPE SetOuterHTML(
        const nsAString *aInnerHTML) = 0;

    virtual nsresult STDMETHODCALLTYPE InsertAdjacentHTML(
        const nsAString *position,
        const nsAString *text) = 0;

    virtual nsresult STDMETHODCALLTYPE ScrollIntoView(
        cpp_bool top,
        UINT8 _argc) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOffsetParent(
        nsIDOMElement **aOffsetParent) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOffsetTop(
        LONG *aOffsetTop) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOffsetLeft(
        LONG *aOffsetLeft) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOffsetWidth(
        LONG *aOffsetWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOffsetHeight(
        LONG *aOffsetHeight) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLElement, 0xb0c42392, 0xd0e7, 0x4f6a, 0xbe,0xb5, 0xa6,0x98,0xce,0x64,0x89,0x45)
#endif
#else
typedef struct nsIDOMHTMLElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLElement *This);

    /*** nsIDOMNode methods ***/
    nsresult (STDMETHODCALLTYPE *GetNodeName)(
        nsIDOMHTMLElement *This,
        nsAString *aNodeName);

    nsresult (STDMETHODCALLTYPE *GetNodeValue)(
        nsIDOMHTMLElement *This,
        nsAString *aNodeValue);

    nsresult (STDMETHODCALLTYPE *SetNodeValue)(
        nsIDOMHTMLElement *This,
        const nsAString *aNodeValue);

    nsresult (STDMETHODCALLTYPE *GetNodeType)(
        nsIDOMHTMLElement *This,
        UINT16 *aNodeType);

    nsresult (STDMETHODCALLTYPE *GetParentNode)(
        nsIDOMHTMLElement *This,
        nsIDOMNode **aParentNode);

    nsresult (STDMETHODCALLTYPE *GetParentElement)(
        nsIDOMHTMLElement *This,
        nsIDOMElement **aParentElement);

    nsresult (STDMETHODCALLTYPE *GetChildNodes)(
        nsIDOMHTMLElement *This,
        nsIDOMNodeList **aChildNodes);

    nsresult (STDMETHODCALLTYPE *GetFirstChild)(
        nsIDOMHTMLElement *This,
        nsIDOMNode **aFirstChild);

    nsresult (STDMETHODCALLTYPE *GetLastChild)(
        nsIDOMHTMLElement *This,
        nsIDOMNode **aLastChild);

    nsresult (STDMETHODCALLTYPE *GetPreviousSibling)(
        nsIDOMHTMLElement *This,
        nsIDOMNode **aPreviousSibling);

    nsresult (STDMETHODCALLTYPE *GetNextSibling)(
        nsIDOMHTMLElement *This,
        nsIDOMNode **aNextSibling);

    nsresult (STDMETHODCALLTYPE *GetOwnerDocument)(
        nsIDOMHTMLElement *This,
        nsIDOMDocument **aOwnerDocument);

    nsresult (STDMETHODCALLTYPE *InsertBefore)(
        nsIDOMHTMLElement *This,
        nsIDOMNode *newChild,
        nsIDOMNode *refChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *ReplaceChild)(
        nsIDOMHTMLElement *This,
        nsIDOMNode *newChild,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *RemoveChild)(
        nsIDOMHTMLElement *This,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *AppendChild)(
        nsIDOMHTMLElement *This,
        nsIDOMNode *newChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *HasChildNodes)(
        nsIDOMHTMLElement *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CloneNode)(
        nsIDOMHTMLElement *This,
        cpp_bool deep,
        UINT8 _argc,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *Normalize)(
        nsIDOMHTMLElement *This);

    nsresult (STDMETHODCALLTYPE *GetNamespaceURI)(
        nsIDOMHTMLElement *This,
        nsAString *aNamespaceURI);

    nsresult (STDMETHODCALLTYPE *GetPrefix)(
        nsIDOMHTMLElement *This,
        nsAString *aPrefix);

    nsresult (STDMETHODCALLTYPE *GetLocalName)(
        nsIDOMHTMLElement *This,
        nsAString *aLocalName);

    nsresult (STDMETHODCALLTYPE *UnusedPlaceholder)(
        nsIDOMHTMLElement *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetDOMBaseURI)(
        nsIDOMHTMLElement *This,
        nsAString *aBaseURI);

    nsresult (STDMETHODCALLTYPE *CompareDocumentPosition)(
        nsIDOMHTMLElement *This,
        nsIDOMNode *other,
        UINT16 *_retval);

    nsresult (STDMETHODCALLTYPE *GetTextContent)(
        nsIDOMHTMLElement *This,
        nsAString *aTextContent);

    nsresult (STDMETHODCALLTYPE *SetTextContent)(
        nsIDOMHTMLElement *This,
        const nsAString *aTextContent);

    nsresult (STDMETHODCALLTYPE *LookupPrefix)(
        nsIDOMHTMLElement *This,
        const nsAString *namespaceURI,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *IsDefaultNamespace)(
        nsIDOMHTMLElement *This,
        const nsAString *namespaceURI,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *LookupNamespaceURI)(
        nsIDOMHTMLElement *This,
        const nsAString *prefix,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *IsEqualNode)(
        nsIDOMHTMLElement *This,
        nsIDOMNode *arg,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetUserData)(
        nsIDOMHTMLElement *This,
        const nsAString *key,
        nsIVariant *data,
        nsIVariant **_retval);

    nsresult (STDMETHODCALLTYPE *GetUserData)(
        nsIDOMHTMLElement *This,
        const nsAString *key,
        nsIVariant **_retval);

    nsresult (STDMETHODCALLTYPE *Contains)(
        nsIDOMHTMLElement *This,
        nsIDOMNode *aOther,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetMshtmlNode)(
        nsIDOMHTMLElement *This,
        nsISupports **aMshtmlNode);

    nsresult (STDMETHODCALLTYPE *SetMshtmlNode)(
        nsIDOMHTMLElement *This,
        nsISupports *aMshtmlNode);

    /*** nsIDOMElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetTagName)(
        nsIDOMHTMLElement *This,
        nsAString *aTagName);

    nsresult (STDMETHODCALLTYPE *GetId)(
        nsIDOMHTMLElement *This,
        nsAString *aId);

    nsresult (STDMETHODCALLTYPE *SetId)(
        nsIDOMHTMLElement *This,
        const nsAString *aId);

    nsresult (STDMETHODCALLTYPE *GetClassName)(
        nsIDOMHTMLElement *This,
        nsAString *aClassName);

    nsresult (STDMETHODCALLTYPE *SetClassName)(
        nsIDOMHTMLElement *This,
        const nsAString *aClassName);

    nsresult (STDMETHODCALLTYPE *GetClassList)(
        nsIDOMHTMLElement *This,
        nsISupports **aClassList);

    nsresult (STDMETHODCALLTYPE *GetAttributes)(
        nsIDOMHTMLElement *This,
        nsIDOMMozNamedAttrMap **aAttributes);

    nsresult (STDMETHODCALLTYPE *GetAttribute)(
        nsIDOMHTMLElement *This,
        const nsAString *name,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *GetAttributeNS)(
        nsIDOMHTMLElement *This,
        const nsAString *namespaceURI,
        const nsAString *localName,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *SetAttribute)(
        nsIDOMHTMLElement *This,
        const nsAString *name,
        const nsAString *value);

    nsresult (STDMETHODCALLTYPE *SetAttributeNS)(
        nsIDOMHTMLElement *This,
        const nsAString *namespaceURI,
        const nsAString *qualifiedName,
        const nsAString *value);

    nsresult (STDMETHODCALLTYPE *RemoveAttribute)(
        nsIDOMHTMLElement *This,
        const nsAString *name);

    nsresult (STDMETHODCALLTYPE *RemoveAttributeNS)(
        nsIDOMHTMLElement *This,
        const nsAString *namespaceURI,
        const nsAString *localName);

    nsresult (STDMETHODCALLTYPE *HasAttribute)(
        nsIDOMHTMLElement *This,
        const nsAString *name,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *HasAttributeNS)(
        nsIDOMHTMLElement *This,
        const nsAString *namespaceURI,
        const nsAString *localName,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *HasAttributes)(
        nsIDOMHTMLElement *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetAttributeNode)(
        nsIDOMHTMLElement *This,
        const nsAString *name,
        nsIDOMAttr **_retval);

    nsresult (STDMETHODCALLTYPE *SetAttributeNode)(
        nsIDOMHTMLElement *This,
        nsIDOMAttr *newAttr,
        nsIDOMAttr **_retval);

    nsresult (STDMETHODCALLTYPE *RemoveAttributeNode)(
        nsIDOMHTMLElement *This,
        nsIDOMAttr *oldAttr,
        nsIDOMAttr **_retval);

    nsresult (STDMETHODCALLTYPE *GetAttributeNodeNS)(
        nsIDOMHTMLElement *This,
        const nsAString *namespaceURI,
        const nsAString *localName,
        nsIDOMAttr **_retval);

    nsresult (STDMETHODCALLTYPE *SetAttributeNodeNS)(
        nsIDOMHTMLElement *This,
        nsIDOMAttr *newAttr,
        nsIDOMAttr **_retval);

    nsresult (STDMETHODCALLTYPE *GetElementsByTagName)(
        nsIDOMHTMLElement *This,
        const nsAString *name,
        nsIDOMHTMLCollection **_retval);

    nsresult (STDMETHODCALLTYPE *GetElementsByTagNameNS)(
        nsIDOMHTMLElement *This,
        const nsAString *namespaceURI,
        const nsAString *localName,
        nsIDOMHTMLCollection **_retval);

    nsresult (STDMETHODCALLTYPE *GetElementsByClassName)(
        nsIDOMHTMLElement *This,
        const nsAString *classes,
        nsIDOMHTMLCollection **_retval);

    nsresult (STDMETHODCALLTYPE *GetChildElements)(
        nsIDOMHTMLElement *This,
        nsIDOMNodeList **aChildren);

    nsresult (STDMETHODCALLTYPE *GetFirstElementChild)(
        nsIDOMHTMLElement *This,
        nsIDOMElement **aFirstElementChild);

    nsresult (STDMETHODCALLTYPE *GetLastElementChild)(
        nsIDOMHTMLElement *This,
        nsIDOMElement **aLastElementChild);

    nsresult (STDMETHODCALLTYPE *GetPreviousElementSibling)(
        nsIDOMHTMLElement *This,
        nsIDOMElement **aPreviousElementSibling);

    nsresult (STDMETHODCALLTYPE *GetNextElementSibling)(
        nsIDOMHTMLElement *This,
        nsIDOMElement **aNextElementSibling);

    nsresult (STDMETHODCALLTYPE *GetChildElementCount)(
        nsIDOMHTMLElement *This,
        UINT32 *aChildElementCount);

    nsresult (STDMETHODCALLTYPE *Remove)(
        nsIDOMHTMLElement *This);

    nsresult (STDMETHODCALLTYPE *GetClientRects)(
        nsIDOMHTMLElement *This,
        nsIDOMClientRectList **_retval);

    nsresult (STDMETHODCALLTYPE *GetBoundingClientRect)(
        nsIDOMHTMLElement *This,
        nsIDOMClientRect **_retval);

    nsresult (STDMETHODCALLTYPE *GetScrollTop)(
        nsIDOMHTMLElement *This,
        LONG *aScrollTop);

    nsresult (STDMETHODCALLTYPE *SetScrollTop)(
        nsIDOMHTMLElement *This,
        LONG aScrollTop);

    nsresult (STDMETHODCALLTYPE *GetScrollLeft)(
        nsIDOMHTMLElement *This,
        LONG *aScrollLeft);

    nsresult (STDMETHODCALLTYPE *SetScrollLeft)(
        nsIDOMHTMLElement *This,
        LONG aScrollLeft);

    nsresult (STDMETHODCALLTYPE *GetScrollWidth)(
        nsIDOMHTMLElement *This,
        LONG *aScrollWidth);

    nsresult (STDMETHODCALLTYPE *GetScrollHeight)(
        nsIDOMHTMLElement *This,
        LONG *aScrollHeight);

    nsresult (STDMETHODCALLTYPE *GetClientTop)(
        nsIDOMHTMLElement *This,
        LONG *aClientTop);

    nsresult (STDMETHODCALLTYPE *GetClientLeft)(
        nsIDOMHTMLElement *This,
        LONG *aClientLeft);

    nsresult (STDMETHODCALLTYPE *GetClientWidth)(
        nsIDOMHTMLElement *This,
        LONG *aClientWidth);

    nsresult (STDMETHODCALLTYPE *GetClientHeight)(
        nsIDOMHTMLElement *This,
        LONG *aClientHeight);

    nsresult (STDMETHODCALLTYPE *GetScrollLeftMax)(
        nsIDOMHTMLElement *This,
        LONG *aScrollLeftMax);

    nsresult (STDMETHODCALLTYPE *GetScrollTopMax)(
        nsIDOMHTMLElement *This,
        LONG *aScrollTopMax);

    nsresult (STDMETHODCALLTYPE *MozMatchesSelector)(
        nsIDOMHTMLElement *This,
        const nsAString *selector,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetCapture)(
        nsIDOMHTMLElement *This,
        cpp_bool retargetToElement);

    nsresult (STDMETHODCALLTYPE *ReleaseCapture)(
        nsIDOMHTMLElement *This);

    nsresult (STDMETHODCALLTYPE *MozRequestFullScreen)(
        nsIDOMHTMLElement *This);

    nsresult (STDMETHODCALLTYPE *MozRequestPointerLock)(
        nsIDOMHTMLElement *This);

    nsresult (STDMETHODCALLTYPE *QuerySelector)(
        nsIDOMHTMLElement *This,
        const nsAString *selectors,
        nsIDOMElement **_retval);

    nsresult (STDMETHODCALLTYPE *QuerySelectorAll)(
        nsIDOMHTMLElement *This,
        const nsAString *selectors,
        nsIDOMNodeList **_retval);

    /*** nsIDOMHTMLElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetTitle)(
        nsIDOMHTMLElement *This,
        nsAString *aTitle);

    nsresult (STDMETHODCALLTYPE *SetTitle)(
        nsIDOMHTMLElement *This,
        const nsAString *aTitle);

    nsresult (STDMETHODCALLTYPE *GetLang)(
        nsIDOMHTMLElement *This,
        nsAString *aLang);

    nsresult (STDMETHODCALLTYPE *SetLang)(
        nsIDOMHTMLElement *This,
        const nsAString *aLang);

    nsresult (STDMETHODCALLTYPE *GetDir)(
        nsIDOMHTMLElement *This,
        nsAString *aDir);

    nsresult (STDMETHODCALLTYPE *SetDir)(
        nsIDOMHTMLElement *This,
        const nsAString *aDir);

    nsresult (STDMETHODCALLTYPE *GetDataset)(
        nsIDOMHTMLElement *This,
        nsISupports **aDataset);

    nsresult (STDMETHODCALLTYPE *GetItemScope)(
        nsIDOMHTMLElement *This,
        cpp_bool *aItemScope);

    nsresult (STDMETHODCALLTYPE *SetItemScope)(
        nsIDOMHTMLElement *This,
        cpp_bool aItemScope);

    nsresult (STDMETHODCALLTYPE *GetItemType)(
        nsIDOMHTMLElement *This,
        nsIVariant **aItemType);

    nsresult (STDMETHODCALLTYPE *SetItemType)(
        nsIDOMHTMLElement *This,
        nsIVariant *aItemType);

    nsresult (STDMETHODCALLTYPE *GetItemId)(
        nsIDOMHTMLElement *This,
        nsAString *aItemId);

    nsresult (STDMETHODCALLTYPE *SetItemId)(
        nsIDOMHTMLElement *This,
        const nsAString *aItemId);

    nsresult (STDMETHODCALLTYPE *GetProperties)(
        nsIDOMHTMLElement *This,
        nsISupports **aProperties);

    nsresult (STDMETHODCALLTYPE *GetItemValue)(
        nsIDOMHTMLElement *This,
        nsIVariant **aItemValue);

    nsresult (STDMETHODCALLTYPE *SetItemValue)(
        nsIDOMHTMLElement *This,
        nsIVariant *aItemValue);

    nsresult (STDMETHODCALLTYPE *GetItemProp)(
        nsIDOMHTMLElement *This,
        nsIVariant **aItemProp);

    nsresult (STDMETHODCALLTYPE *SetItemProp)(
        nsIDOMHTMLElement *This,
        nsIVariant *aItemProp);

    nsresult (STDMETHODCALLTYPE *GetItemRef)(
        nsIDOMHTMLElement *This,
        nsIVariant **aItemRef);

    nsresult (STDMETHODCALLTYPE *SetItemRef)(
        nsIDOMHTMLElement *This,
        nsIVariant *aItemRef);

    nsresult (STDMETHODCALLTYPE *GetHidden)(
        nsIDOMHTMLElement *This,
        cpp_bool *aHidden);

    nsresult (STDMETHODCALLTYPE *SetHidden)(
        nsIDOMHTMLElement *This,
        cpp_bool aHidden);

    nsresult (STDMETHODCALLTYPE *Click)(
        nsIDOMHTMLElement *This);

    nsresult (STDMETHODCALLTYPE *GetTabIndex)(
        nsIDOMHTMLElement *This,
        LONG *aTabIndex);

    nsresult (STDMETHODCALLTYPE *SetTabIndex)(
        nsIDOMHTMLElement *This,
        LONG aTabIndex);

    nsresult (STDMETHODCALLTYPE *Focus)(
        nsIDOMHTMLElement *This);

    nsresult (STDMETHODCALLTYPE *Blur)(
        nsIDOMHTMLElement *This);

    nsresult (STDMETHODCALLTYPE *GetAccessKey)(
        nsIDOMHTMLElement *This,
        nsAString *aAccessKey);

    nsresult (STDMETHODCALLTYPE *SetAccessKey)(
        nsIDOMHTMLElement *This,
        const nsAString *aAccessKey);

    nsresult (STDMETHODCALLTYPE *GetAccessKeyLabel)(
        nsIDOMHTMLElement *This,
        nsAString *aAccessKeyLabel);

    nsresult (STDMETHODCALLTYPE *GetDraggable)(
        nsIDOMHTMLElement *This,
        cpp_bool *aDraggable);

    nsresult (STDMETHODCALLTYPE *SetDraggable)(
        nsIDOMHTMLElement *This,
        cpp_bool aDraggable);

    nsresult (STDMETHODCALLTYPE *GetContentEditable)(
        nsIDOMHTMLElement *This,
        nsAString *aContentEditable);

    nsresult (STDMETHODCALLTYPE *SetContentEditable)(
        nsIDOMHTMLElement *This,
        const nsAString *aContentEditable);

    nsresult (STDMETHODCALLTYPE *GetIsContentEditable)(
        nsIDOMHTMLElement *This,
        cpp_bool *aIsContentEditable);

    nsresult (STDMETHODCALLTYPE *GetContextMenu)(
        nsIDOMHTMLElement *This,
        nsIDOMHTMLMenuElement **aContextMenu);

    nsresult (STDMETHODCALLTYPE *GetSpellcheck)(
        nsIDOMHTMLElement *This,
        cpp_bool *aSpellcheck);

    nsresult (STDMETHODCALLTYPE *SetSpellcheck)(
        nsIDOMHTMLElement *This,
        cpp_bool aSpellcheck);

    nsresult (STDMETHODCALLTYPE *GetInnerHTML)(
        nsIDOMHTMLElement *This,
        nsAString *aInnerHTML);

    nsresult (STDMETHODCALLTYPE *SetInnerHTML)(
        nsIDOMHTMLElement *This,
        const nsAString *aInnerHTML);

    nsresult (STDMETHODCALLTYPE *GetOuterHTML)(
        nsIDOMHTMLElement *This,
        nsAString *aInnerHTML);

    nsresult (STDMETHODCALLTYPE *SetOuterHTML)(
        nsIDOMHTMLElement *This,
        const nsAString *aInnerHTML);

    nsresult (STDMETHODCALLTYPE *InsertAdjacentHTML)(
        nsIDOMHTMLElement *This,
        const nsAString *position,
        const nsAString *text);

    nsresult (STDMETHODCALLTYPE *ScrollIntoView)(
        nsIDOMHTMLElement *This,
        cpp_bool top,
        UINT8 _argc);

    nsresult (STDMETHODCALLTYPE *GetOffsetParent)(
        nsIDOMHTMLElement *This,
        nsIDOMElement **aOffsetParent);

    nsresult (STDMETHODCALLTYPE *GetOffsetTop)(
        nsIDOMHTMLElement *This,
        LONG *aOffsetTop);

    nsresult (STDMETHODCALLTYPE *GetOffsetLeft)(
        nsIDOMHTMLElement *This,
        LONG *aOffsetLeft);

    nsresult (STDMETHODCALLTYPE *GetOffsetWidth)(
        nsIDOMHTMLElement *This,
        LONG *aOffsetWidth);

    nsresult (STDMETHODCALLTYPE *GetOffsetHeight)(
        nsIDOMHTMLElement *This,
        LONG *aOffsetHeight);

    END_INTERFACE
} nsIDOMHTMLElementVtbl;

interface nsIDOMHTMLElement {
    CONST_VTBL nsIDOMHTMLElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLElement_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMNode methods ***/
#define nsIDOMHTMLElement_GetNodeName(This,aNodeName) (This)->lpVtbl->GetNodeName(This,aNodeName)
#define nsIDOMHTMLElement_GetNodeValue(This,aNodeValue) (This)->lpVtbl->GetNodeValue(This,aNodeValue)
#define nsIDOMHTMLElement_SetNodeValue(This,aNodeValue) (This)->lpVtbl->SetNodeValue(This,aNodeValue)
#define nsIDOMHTMLElement_GetNodeType(This,aNodeType) (This)->lpVtbl->GetNodeType(This,aNodeType)
#define nsIDOMHTMLElement_GetParentNode(This,aParentNode) (This)->lpVtbl->GetParentNode(This,aParentNode)
#define nsIDOMHTMLElement_GetParentElement(This,aParentElement) (This)->lpVtbl->GetParentElement(This,aParentElement)
#define nsIDOMHTMLElement_GetChildNodes(This,aChildNodes) (This)->lpVtbl->GetChildNodes(This,aChildNodes)
#define nsIDOMHTMLElement_GetFirstChild(This,aFirstChild) (This)->lpVtbl->GetFirstChild(This,aFirstChild)
#define nsIDOMHTMLElement_GetLastChild(This,aLastChild) (This)->lpVtbl->GetLastChild(This,aLastChild)
#define nsIDOMHTMLElement_GetPreviousSibling(This,aPreviousSibling) (This)->lpVtbl->GetPreviousSibling(This,aPreviousSibling)
#define nsIDOMHTMLElement_GetNextSibling(This,aNextSibling) (This)->lpVtbl->GetNextSibling(This,aNextSibling)
#define nsIDOMHTMLElement_GetOwnerDocument(This,aOwnerDocument) (This)->lpVtbl->GetOwnerDocument(This,aOwnerDocument)
#define nsIDOMHTMLElement_InsertBefore(This,newChild,refChild,_retval) (This)->lpVtbl->InsertBefore(This,newChild,refChild,_retval)
#define nsIDOMHTMLElement_ReplaceChild(This,newChild,oldChild,_retval) (This)->lpVtbl->ReplaceChild(This,newChild,oldChild,_retval)
#define nsIDOMHTMLElement_RemoveChild(This,oldChild,_retval) (This)->lpVtbl->RemoveChild(This,oldChild,_retval)
#define nsIDOMHTMLElement_AppendChild(This,newChild,_retval) (This)->lpVtbl->AppendChild(This,newChild,_retval)
#define nsIDOMHTMLElement_HasChildNodes(This,_retval) (This)->lpVtbl->HasChildNodes(This,_retval)
#define nsIDOMHTMLElement_CloneNode(This,deep,_argc,_retval) (This)->lpVtbl->CloneNode(This,deep,_argc,_retval)
#define nsIDOMHTMLElement_Normalize(This) (This)->lpVtbl->Normalize(This)
#define nsIDOMHTMLElement_GetNamespaceURI(This,aNamespaceURI) (This)->lpVtbl->GetNamespaceURI(This,aNamespaceURI)
#define nsIDOMHTMLElement_GetPrefix(This,aPrefix) (This)->lpVtbl->GetPrefix(This,aPrefix)
#define nsIDOMHTMLElement_GetLocalName(This,aLocalName) (This)->lpVtbl->GetLocalName(This,aLocalName)
#define nsIDOMHTMLElement_UnusedPlaceholder(This,_retval) (This)->lpVtbl->UnusedPlaceholder(This,_retval)
#define nsIDOMHTMLElement_GetDOMBaseURI(This,aBaseURI) (This)->lpVtbl->GetDOMBaseURI(This,aBaseURI)
#define nsIDOMHTMLElement_CompareDocumentPosition(This,other,_retval) (This)->lpVtbl->CompareDocumentPosition(This,other,_retval)
#define nsIDOMHTMLElement_GetTextContent(This,aTextContent) (This)->lpVtbl->GetTextContent(This,aTextContent)
#define nsIDOMHTMLElement_SetTextContent(This,aTextContent) (This)->lpVtbl->SetTextContent(This,aTextContent)
#define nsIDOMHTMLElement_LookupPrefix(This,namespaceURI,_retval) (This)->lpVtbl->LookupPrefix(This,namespaceURI,_retval)
#define nsIDOMHTMLElement_IsDefaultNamespace(This,namespaceURI,_retval) (This)->lpVtbl->IsDefaultNamespace(This,namespaceURI,_retval)
#define nsIDOMHTMLElement_LookupNamespaceURI(This,prefix,_retval) (This)->lpVtbl->LookupNamespaceURI(This,prefix,_retval)
#define nsIDOMHTMLElement_IsEqualNode(This,arg,_retval) (This)->lpVtbl->IsEqualNode(This,arg,_retval)
#define nsIDOMHTMLElement_SetUserData(This,key,data,_retval) (This)->lpVtbl->SetUserData(This,key,data,_retval)
#define nsIDOMHTMLElement_GetUserData(This,key,_retval) (This)->lpVtbl->GetUserData(This,key,_retval)
#define nsIDOMHTMLElement_Contains(This,aOther,_retval) (This)->lpVtbl->Contains(This,aOther,_retval)
#define nsIDOMHTMLElement_GetMshtmlNode(This,aMshtmlNode) (This)->lpVtbl->GetMshtmlNode(This,aMshtmlNode)
#define nsIDOMHTMLElement_SetMshtmlNode(This,aMshtmlNode) (This)->lpVtbl->SetMshtmlNode(This,aMshtmlNode)
/*** nsIDOMElement methods ***/
#define nsIDOMHTMLElement_GetTagName(This,aTagName) (This)->lpVtbl->GetTagName(This,aTagName)
#define nsIDOMHTMLElement_GetId(This,aId) (This)->lpVtbl->GetId(This,aId)
#define nsIDOMHTMLElement_SetId(This,aId) (This)->lpVtbl->SetId(This,aId)
#define nsIDOMHTMLElement_GetClassName(This,aClassName) (This)->lpVtbl->GetClassName(This,aClassName)
#define nsIDOMHTMLElement_SetClassName(This,aClassName) (This)->lpVtbl->SetClassName(This,aClassName)
#define nsIDOMHTMLElement_GetClassList(This,aClassList) (This)->lpVtbl->GetClassList(This,aClassList)
#define nsIDOMHTMLElement_GetAttributes(This,aAttributes) (This)->lpVtbl->GetAttributes(This,aAttributes)
#define nsIDOMHTMLElement_GetAttribute(This,name,_retval) (This)->lpVtbl->GetAttribute(This,name,_retval)
#define nsIDOMHTMLElement_GetAttributeNS(This,namespaceURI,localName,_retval) (This)->lpVtbl->GetAttributeNS(This,namespaceURI,localName,_retval)
#define nsIDOMHTMLElement_SetAttribute(This,name,value) (This)->lpVtbl->SetAttribute(This,name,value)
#define nsIDOMHTMLElement_SetAttributeNS(This,namespaceURI,qualifiedName,value) (This)->lpVtbl->SetAttributeNS(This,namespaceURI,qualifiedName,value)
#define nsIDOMHTMLElement_RemoveAttribute(This,name) (This)->lpVtbl->RemoveAttribute(This,name)
#define nsIDOMHTMLElement_RemoveAttributeNS(This,namespaceURI,localName) (This)->lpVtbl->RemoveAttributeNS(This,namespaceURI,localName)
#define nsIDOMHTMLElement_HasAttribute(This,name,_retval) (This)->lpVtbl->HasAttribute(This,name,_retval)
#define nsIDOMHTMLElement_HasAttributeNS(This,namespaceURI,localName,_retval) (This)->lpVtbl->HasAttributeNS(This,namespaceURI,localName,_retval)
#define nsIDOMHTMLElement_HasAttributes(This,_retval) (This)->lpVtbl->HasAttributes(This,_retval)
#define nsIDOMHTMLElement_GetAttributeNode(This,name,_retval) (This)->lpVtbl->GetAttributeNode(This,name,_retval)
#define nsIDOMHTMLElement_SetAttributeNode(This,newAttr,_retval) (This)->lpVtbl->SetAttributeNode(This,newAttr,_retval)
#define nsIDOMHTMLElement_RemoveAttributeNode(This,oldAttr,_retval) (This)->lpVtbl->RemoveAttributeNode(This,oldAttr,_retval)
#define nsIDOMHTMLElement_GetAttributeNodeNS(This,namespaceURI,localName,_retval) (This)->lpVtbl->GetAttributeNodeNS(This,namespaceURI,localName,_retval)
#define nsIDOMHTMLElement_SetAttributeNodeNS(This,newAttr,_retval) (This)->lpVtbl->SetAttributeNodeNS(This,newAttr,_retval)
#define nsIDOMHTMLElement_GetElementsByTagName(This,name,_retval) (This)->lpVtbl->GetElementsByTagName(This,name,_retval)
#define nsIDOMHTMLElement_GetElementsByTagNameNS(This,namespaceURI,localName,_retval) (This)->lpVtbl->GetElementsByTagNameNS(This,namespaceURI,localName,_retval)
#define nsIDOMHTMLElement_GetElementsByClassName(This,classes,_retval) (This)->lpVtbl->GetElementsByClassName(This,classes,_retval)
#define nsIDOMHTMLElement_GetChildElements(This,aChildren) (This)->lpVtbl->GetChildElements(This,aChildren)
#define nsIDOMHTMLElement_GetFirstElementChild(This,aFirstElementChild) (This)->lpVtbl->GetFirstElementChild(This,aFirstElementChild)
#define nsIDOMHTMLElement_GetLastElementChild(This,aLastElementChild) (This)->lpVtbl->GetLastElementChild(This,aLastElementChild)
#define nsIDOMHTMLElement_GetPreviousElementSibling(This,aPreviousElementSibling) (This)->lpVtbl->GetPreviousElementSibling(This,aPreviousElementSibling)
#define nsIDOMHTMLElement_GetNextElementSibling(This,aNextElementSibling) (This)->lpVtbl->GetNextElementSibling(This,aNextElementSibling)
#define nsIDOMHTMLElement_GetChildElementCount(This,aChildElementCount) (This)->lpVtbl->GetChildElementCount(This,aChildElementCount)
#define nsIDOMHTMLElement_Remove(This) (This)->lpVtbl->Remove(This)
#define nsIDOMHTMLElement_GetClientRects(This,_retval) (This)->lpVtbl->GetClientRects(This,_retval)
#define nsIDOMHTMLElement_GetBoundingClientRect(This,_retval) (This)->lpVtbl->GetBoundingClientRect(This,_retval)
#define nsIDOMHTMLElement_GetScrollTop(This,aScrollTop) (This)->lpVtbl->GetScrollTop(This,aScrollTop)
#define nsIDOMHTMLElement_SetScrollTop(This,aScrollTop) (This)->lpVtbl->SetScrollTop(This,aScrollTop)
#define nsIDOMHTMLElement_GetScrollLeft(This,aScrollLeft) (This)->lpVtbl->GetScrollLeft(This,aScrollLeft)
#define nsIDOMHTMLElement_SetScrollLeft(This,aScrollLeft) (This)->lpVtbl->SetScrollLeft(This,aScrollLeft)
#define nsIDOMHTMLElement_GetScrollWidth(This,aScrollWidth) (This)->lpVtbl->GetScrollWidth(This,aScrollWidth)
#define nsIDOMHTMLElement_GetScrollHeight(This,aScrollHeight) (This)->lpVtbl->GetScrollHeight(This,aScrollHeight)
#define nsIDOMHTMLElement_GetClientTop(This,aClientTop) (This)->lpVtbl->GetClientTop(This,aClientTop)
#define nsIDOMHTMLElement_GetClientLeft(This,aClientLeft) (This)->lpVtbl->GetClientLeft(This,aClientLeft)
#define nsIDOMHTMLElement_GetClientWidth(This,aClientWidth) (This)->lpVtbl->GetClientWidth(This,aClientWidth)
#define nsIDOMHTMLElement_GetClientHeight(This,aClientHeight) (This)->lpVtbl->GetClientHeight(This,aClientHeight)
#define nsIDOMHTMLElement_GetScrollLeftMax(This,aScrollLeftMax) (This)->lpVtbl->GetScrollLeftMax(This,aScrollLeftMax)
#define nsIDOMHTMLElement_GetScrollTopMax(This,aScrollTopMax) (This)->lpVtbl->GetScrollTopMax(This,aScrollTopMax)
#define nsIDOMHTMLElement_MozMatchesSelector(This,selector,_retval) (This)->lpVtbl->MozMatchesSelector(This,selector,_retval)
#define nsIDOMHTMLElement_SetCapture(This,retargetToElement) (This)->lpVtbl->SetCapture(This,retargetToElement)
#define nsIDOMHTMLElement_ReleaseCapture(This) (This)->lpVtbl->ReleaseCapture(This)
#define nsIDOMHTMLElement_MozRequestFullScreen(This) (This)->lpVtbl->MozRequestFullScreen(This)
#define nsIDOMHTMLElement_MozRequestPointerLock(This) (This)->lpVtbl->MozRequestPointerLock(This)
#define nsIDOMHTMLElement_QuerySelector(This,selectors,_retval) (This)->lpVtbl->QuerySelector(This,selectors,_retval)
#define nsIDOMHTMLElement_QuerySelectorAll(This,selectors,_retval) (This)->lpVtbl->QuerySelectorAll(This,selectors,_retval)
/*** nsIDOMHTMLElement methods ***/
#define nsIDOMHTMLElement_GetTitle(This,aTitle) (This)->lpVtbl->GetTitle(This,aTitle)
#define nsIDOMHTMLElement_SetTitle(This,aTitle) (This)->lpVtbl->SetTitle(This,aTitle)
#define nsIDOMHTMLElement_GetLang(This,aLang) (This)->lpVtbl->GetLang(This,aLang)
#define nsIDOMHTMLElement_SetLang(This,aLang) (This)->lpVtbl->SetLang(This,aLang)
#define nsIDOMHTMLElement_GetDir(This,aDir) (This)->lpVtbl->GetDir(This,aDir)
#define nsIDOMHTMLElement_SetDir(This,aDir) (This)->lpVtbl->SetDir(This,aDir)
#define nsIDOMHTMLElement_GetDataset(This,aDataset) (This)->lpVtbl->GetDataset(This,aDataset)
#define nsIDOMHTMLElement_GetItemScope(This,aItemScope) (This)->lpVtbl->GetItemScope(This,aItemScope)
#define nsIDOMHTMLElement_SetItemScope(This,aItemScope) (This)->lpVtbl->SetItemScope(This,aItemScope)
#define nsIDOMHTMLElement_GetItemType(This,aItemType) (This)->lpVtbl->GetItemType(This,aItemType)
#define nsIDOMHTMLElement_SetItemType(This,aItemType) (This)->lpVtbl->SetItemType(This,aItemType)
#define nsIDOMHTMLElement_GetItemId(This,aItemId) (This)->lpVtbl->GetItemId(This,aItemId)
#define nsIDOMHTMLElement_SetItemId(This,aItemId) (This)->lpVtbl->SetItemId(This,aItemId)
#define nsIDOMHTMLElement_GetProperties(This,aProperties) (This)->lpVtbl->GetProperties(This,aProperties)
#define nsIDOMHTMLElement_GetItemValue(This,aItemValue) (This)->lpVtbl->GetItemValue(This,aItemValue)
#define nsIDOMHTMLElement_SetItemValue(This,aItemValue) (This)->lpVtbl->SetItemValue(This,aItemValue)
#define nsIDOMHTMLElement_GetItemProp(This,aItemProp) (This)->lpVtbl->GetItemProp(This,aItemProp)
#define nsIDOMHTMLElement_SetItemProp(This,aItemProp) (This)->lpVtbl->SetItemProp(This,aItemProp)
#define nsIDOMHTMLElement_GetItemRef(This,aItemRef) (This)->lpVtbl->GetItemRef(This,aItemRef)
#define nsIDOMHTMLElement_SetItemRef(This,aItemRef) (This)->lpVtbl->SetItemRef(This,aItemRef)
#define nsIDOMHTMLElement_GetHidden(This,aHidden) (This)->lpVtbl->GetHidden(This,aHidden)
#define nsIDOMHTMLElement_SetHidden(This,aHidden) (This)->lpVtbl->SetHidden(This,aHidden)
#define nsIDOMHTMLElement_Click(This) (This)->lpVtbl->Click(This)
#define nsIDOMHTMLElement_GetTabIndex(This,aTabIndex) (This)->lpVtbl->GetTabIndex(This,aTabIndex)
#define nsIDOMHTMLElement_SetTabIndex(This,aTabIndex) (This)->lpVtbl->SetTabIndex(This,aTabIndex)
#define nsIDOMHTMLElement_Focus(This) (This)->lpVtbl->Focus(This)
#define nsIDOMHTMLElement_Blur(This) (This)->lpVtbl->Blur(This)
#define nsIDOMHTMLElement_GetAccessKey(This,aAccessKey) (This)->lpVtbl->GetAccessKey(This,aAccessKey)
#define nsIDOMHTMLElement_SetAccessKey(This,aAccessKey) (This)->lpVtbl->SetAccessKey(This,aAccessKey)
#define nsIDOMHTMLElement_GetAccessKeyLabel(This,aAccessKeyLabel) (This)->lpVtbl->GetAccessKeyLabel(This,aAccessKeyLabel)
#define nsIDOMHTMLElement_GetDraggable(This,aDraggable) (This)->lpVtbl->GetDraggable(This,aDraggable)
#define nsIDOMHTMLElement_SetDraggable(This,aDraggable) (This)->lpVtbl->SetDraggable(This,aDraggable)
#define nsIDOMHTMLElement_GetContentEditable(This,aContentEditable) (This)->lpVtbl->GetContentEditable(This,aContentEditable)
#define nsIDOMHTMLElement_SetContentEditable(This,aContentEditable) (This)->lpVtbl->SetContentEditable(This,aContentEditable)
#define nsIDOMHTMLElement_GetIsContentEditable(This,aIsContentEditable) (This)->lpVtbl->GetIsContentEditable(This,aIsContentEditable)
#define nsIDOMHTMLElement_GetContextMenu(This,aContextMenu) (This)->lpVtbl->GetContextMenu(This,aContextMenu)
#define nsIDOMHTMLElement_GetSpellcheck(This,aSpellcheck) (This)->lpVtbl->GetSpellcheck(This,aSpellcheck)
#define nsIDOMHTMLElement_SetSpellcheck(This,aSpellcheck) (This)->lpVtbl->SetSpellcheck(This,aSpellcheck)
#define nsIDOMHTMLElement_GetInnerHTML(This,aInnerHTML) (This)->lpVtbl->GetInnerHTML(This,aInnerHTML)
#define nsIDOMHTMLElement_SetInnerHTML(This,aInnerHTML) (This)->lpVtbl->SetInnerHTML(This,aInnerHTML)
#define nsIDOMHTMLElement_GetOuterHTML(This,aInnerHTML) (This)->lpVtbl->GetOuterHTML(This,aInnerHTML)
#define nsIDOMHTMLElement_SetOuterHTML(This,aInnerHTML) (This)->lpVtbl->SetOuterHTML(This,aInnerHTML)
#define nsIDOMHTMLElement_InsertAdjacentHTML(This,position,text) (This)->lpVtbl->InsertAdjacentHTML(This,position,text)
#define nsIDOMHTMLElement_ScrollIntoView(This,top,_argc) (This)->lpVtbl->ScrollIntoView(This,top,_argc)
#define nsIDOMHTMLElement_GetOffsetParent(This,aOffsetParent) (This)->lpVtbl->GetOffsetParent(This,aOffsetParent)
#define nsIDOMHTMLElement_GetOffsetTop(This,aOffsetTop) (This)->lpVtbl->GetOffsetTop(This,aOffsetTop)
#define nsIDOMHTMLElement_GetOffsetLeft(This,aOffsetLeft) (This)->lpVtbl->GetOffsetLeft(This,aOffsetLeft)
#define nsIDOMHTMLElement_GetOffsetWidth(This,aOffsetWidth) (This)->lpVtbl->GetOffsetWidth(This,aOffsetWidth)
#define nsIDOMHTMLElement_GetOffsetHeight(This,aOffsetHeight) (This)->lpVtbl->GetOffsetHeight(This,aOffsetHeight)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLElement_QueryInterface(nsIDOMHTMLElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLElement_AddRef(nsIDOMHTMLElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLElement_Release(nsIDOMHTMLElement* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMNode methods ***/
static FORCEINLINE nsresult nsIDOMHTMLElement_GetNodeName(nsIDOMHTMLElement* This,nsAString *aNodeName) {
    return This->lpVtbl->GetNodeName(This,aNodeName);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetNodeValue(nsIDOMHTMLElement* This,nsAString *aNodeValue) {
    return This->lpVtbl->GetNodeValue(This,aNodeValue);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetNodeValue(nsIDOMHTMLElement* This,const nsAString *aNodeValue) {
    return This->lpVtbl->SetNodeValue(This,aNodeValue);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetNodeType(nsIDOMHTMLElement* This,UINT16 *aNodeType) {
    return This->lpVtbl->GetNodeType(This,aNodeType);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetParentNode(nsIDOMHTMLElement* This,nsIDOMNode **aParentNode) {
    return This->lpVtbl->GetParentNode(This,aParentNode);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetParentElement(nsIDOMHTMLElement* This,nsIDOMElement **aParentElement) {
    return This->lpVtbl->GetParentElement(This,aParentElement);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetChildNodes(nsIDOMHTMLElement* This,nsIDOMNodeList **aChildNodes) {
    return This->lpVtbl->GetChildNodes(This,aChildNodes);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetFirstChild(nsIDOMHTMLElement* This,nsIDOMNode **aFirstChild) {
    return This->lpVtbl->GetFirstChild(This,aFirstChild);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetLastChild(nsIDOMHTMLElement* This,nsIDOMNode **aLastChild) {
    return This->lpVtbl->GetLastChild(This,aLastChild);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetPreviousSibling(nsIDOMHTMLElement* This,nsIDOMNode **aPreviousSibling) {
    return This->lpVtbl->GetPreviousSibling(This,aPreviousSibling);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetNextSibling(nsIDOMHTMLElement* This,nsIDOMNode **aNextSibling) {
    return This->lpVtbl->GetNextSibling(This,aNextSibling);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetOwnerDocument(nsIDOMHTMLElement* This,nsIDOMDocument **aOwnerDocument) {
    return This->lpVtbl->GetOwnerDocument(This,aOwnerDocument);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_InsertBefore(nsIDOMHTMLElement* This,nsIDOMNode *newChild,nsIDOMNode *refChild,nsIDOMNode **_retval) {
    return This->lpVtbl->InsertBefore(This,newChild,refChild,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_ReplaceChild(nsIDOMHTMLElement* This,nsIDOMNode *newChild,nsIDOMNode *oldChild,nsIDOMNode **_retval) {
    return This->lpVtbl->ReplaceChild(This,newChild,oldChild,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_RemoveChild(nsIDOMHTMLElement* This,nsIDOMNode *oldChild,nsIDOMNode **_retval) {
    return This->lpVtbl->RemoveChild(This,oldChild,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_AppendChild(nsIDOMHTMLElement* This,nsIDOMNode *newChild,nsIDOMNode **_retval) {
    return This->lpVtbl->AppendChild(This,newChild,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_HasChildNodes(nsIDOMHTMLElement* This,cpp_bool *_retval) {
    return This->lpVtbl->HasChildNodes(This,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_CloneNode(nsIDOMHTMLElement* This,cpp_bool deep,UINT8 _argc,nsIDOMNode **_retval) {
    return This->lpVtbl->CloneNode(This,deep,_argc,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_Normalize(nsIDOMHTMLElement* This) {
    return This->lpVtbl->Normalize(This);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetNamespaceURI(nsIDOMHTMLElement* This,nsAString *aNamespaceURI) {
    return This->lpVtbl->GetNamespaceURI(This,aNamespaceURI);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetPrefix(nsIDOMHTMLElement* This,nsAString *aPrefix) {
    return This->lpVtbl->GetPrefix(This,aPrefix);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetLocalName(nsIDOMHTMLElement* This,nsAString *aLocalName) {
    return This->lpVtbl->GetLocalName(This,aLocalName);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_UnusedPlaceholder(nsIDOMHTMLElement* This,cpp_bool *_retval) {
    return This->lpVtbl->UnusedPlaceholder(This,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetDOMBaseURI(nsIDOMHTMLElement* This,nsAString *aBaseURI) {
    return This->lpVtbl->GetDOMBaseURI(This,aBaseURI);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_CompareDocumentPosition(nsIDOMHTMLElement* This,nsIDOMNode *other,UINT16 *_retval) {
    return This->lpVtbl->CompareDocumentPosition(This,other,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetTextContent(nsIDOMHTMLElement* This,nsAString *aTextContent) {
    return This->lpVtbl->GetTextContent(This,aTextContent);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetTextContent(nsIDOMHTMLElement* This,const nsAString *aTextContent) {
    return This->lpVtbl->SetTextContent(This,aTextContent);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_LookupPrefix(nsIDOMHTMLElement* This,const nsAString *namespaceURI,nsAString *_retval) {
    return This->lpVtbl->LookupPrefix(This,namespaceURI,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_IsDefaultNamespace(nsIDOMHTMLElement* This,const nsAString *namespaceURI,cpp_bool *_retval) {
    return This->lpVtbl->IsDefaultNamespace(This,namespaceURI,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_LookupNamespaceURI(nsIDOMHTMLElement* This,const nsAString *prefix,nsAString *_retval) {
    return This->lpVtbl->LookupNamespaceURI(This,prefix,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_IsEqualNode(nsIDOMHTMLElement* This,nsIDOMNode *arg,cpp_bool *_retval) {
    return This->lpVtbl->IsEqualNode(This,arg,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetUserData(nsIDOMHTMLElement* This,const nsAString *key,nsIVariant *data,nsIVariant **_retval) {
    return This->lpVtbl->SetUserData(This,key,data,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetUserData(nsIDOMHTMLElement* This,const nsAString *key,nsIVariant **_retval) {
    return This->lpVtbl->GetUserData(This,key,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_Contains(nsIDOMHTMLElement* This,nsIDOMNode *aOther,cpp_bool *_retval) {
    return This->lpVtbl->Contains(This,aOther,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetMshtmlNode(nsIDOMHTMLElement* This,nsISupports **aMshtmlNode) {
    return This->lpVtbl->GetMshtmlNode(This,aMshtmlNode);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetMshtmlNode(nsIDOMHTMLElement* This,nsISupports *aMshtmlNode) {
    return This->lpVtbl->SetMshtmlNode(This,aMshtmlNode);
}
/*** nsIDOMElement methods ***/
static FORCEINLINE nsresult nsIDOMHTMLElement_GetTagName(nsIDOMHTMLElement* This,nsAString *aTagName) {
    return This->lpVtbl->GetTagName(This,aTagName);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetId(nsIDOMHTMLElement* This,nsAString *aId) {
    return This->lpVtbl->GetId(This,aId);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetId(nsIDOMHTMLElement* This,const nsAString *aId) {
    return This->lpVtbl->SetId(This,aId);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetClassName(nsIDOMHTMLElement* This,nsAString *aClassName) {
    return This->lpVtbl->GetClassName(This,aClassName);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetClassName(nsIDOMHTMLElement* This,const nsAString *aClassName) {
    return This->lpVtbl->SetClassName(This,aClassName);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetClassList(nsIDOMHTMLElement* This,nsISupports **aClassList) {
    return This->lpVtbl->GetClassList(This,aClassList);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetAttributes(nsIDOMHTMLElement* This,nsIDOMMozNamedAttrMap **aAttributes) {
    return This->lpVtbl->GetAttributes(This,aAttributes);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetAttribute(nsIDOMHTMLElement* This,const nsAString *name,nsAString *_retval) {
    return This->lpVtbl->GetAttribute(This,name,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetAttributeNS(nsIDOMHTMLElement* This,const nsAString *namespaceURI,const nsAString *localName,nsAString *_retval) {
    return This->lpVtbl->GetAttributeNS(This,namespaceURI,localName,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetAttribute(nsIDOMHTMLElement* This,const nsAString *name,const nsAString *value) {
    return This->lpVtbl->SetAttribute(This,name,value);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetAttributeNS(nsIDOMHTMLElement* This,const nsAString *namespaceURI,const nsAString *qualifiedName,const nsAString *value) {
    return This->lpVtbl->SetAttributeNS(This,namespaceURI,qualifiedName,value);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_RemoveAttribute(nsIDOMHTMLElement* This,const nsAString *name) {
    return This->lpVtbl->RemoveAttribute(This,name);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_RemoveAttributeNS(nsIDOMHTMLElement* This,const nsAString *namespaceURI,const nsAString *localName) {
    return This->lpVtbl->RemoveAttributeNS(This,namespaceURI,localName);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_HasAttribute(nsIDOMHTMLElement* This,const nsAString *name,cpp_bool *_retval) {
    return This->lpVtbl->HasAttribute(This,name,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_HasAttributeNS(nsIDOMHTMLElement* This,const nsAString *namespaceURI,const nsAString *localName,cpp_bool *_retval) {
    return This->lpVtbl->HasAttributeNS(This,namespaceURI,localName,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_HasAttributes(nsIDOMHTMLElement* This,cpp_bool *_retval) {
    return This->lpVtbl->HasAttributes(This,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetAttributeNode(nsIDOMHTMLElement* This,const nsAString *name,nsIDOMAttr **_retval) {
    return This->lpVtbl->GetAttributeNode(This,name,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetAttributeNode(nsIDOMHTMLElement* This,nsIDOMAttr *newAttr,nsIDOMAttr **_retval) {
    return This->lpVtbl->SetAttributeNode(This,newAttr,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_RemoveAttributeNode(nsIDOMHTMLElement* This,nsIDOMAttr *oldAttr,nsIDOMAttr **_retval) {
    return This->lpVtbl->RemoveAttributeNode(This,oldAttr,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetAttributeNodeNS(nsIDOMHTMLElement* This,const nsAString *namespaceURI,const nsAString *localName,nsIDOMAttr **_retval) {
    return This->lpVtbl->GetAttributeNodeNS(This,namespaceURI,localName,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetAttributeNodeNS(nsIDOMHTMLElement* This,nsIDOMAttr *newAttr,nsIDOMAttr **_retval) {
    return This->lpVtbl->SetAttributeNodeNS(This,newAttr,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetElementsByTagName(nsIDOMHTMLElement* This,const nsAString *name,nsIDOMHTMLCollection **_retval) {
    return This->lpVtbl->GetElementsByTagName(This,name,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetElementsByTagNameNS(nsIDOMHTMLElement* This,const nsAString *namespaceURI,const nsAString *localName,nsIDOMHTMLCollection **_retval) {
    return This->lpVtbl->GetElementsByTagNameNS(This,namespaceURI,localName,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetElementsByClassName(nsIDOMHTMLElement* This,const nsAString *classes,nsIDOMHTMLCollection **_retval) {
    return This->lpVtbl->GetElementsByClassName(This,classes,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetChildElements(nsIDOMHTMLElement* This,nsIDOMNodeList **aChildren) {
    return This->lpVtbl->GetChildElements(This,aChildren);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetFirstElementChild(nsIDOMHTMLElement* This,nsIDOMElement **aFirstElementChild) {
    return This->lpVtbl->GetFirstElementChild(This,aFirstElementChild);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetLastElementChild(nsIDOMHTMLElement* This,nsIDOMElement **aLastElementChild) {
    return This->lpVtbl->GetLastElementChild(This,aLastElementChild);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetPreviousElementSibling(nsIDOMHTMLElement* This,nsIDOMElement **aPreviousElementSibling) {
    return This->lpVtbl->GetPreviousElementSibling(This,aPreviousElementSibling);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetNextElementSibling(nsIDOMHTMLElement* This,nsIDOMElement **aNextElementSibling) {
    return This->lpVtbl->GetNextElementSibling(This,aNextElementSibling);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetChildElementCount(nsIDOMHTMLElement* This,UINT32 *aChildElementCount) {
    return This->lpVtbl->GetChildElementCount(This,aChildElementCount);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_Remove(nsIDOMHTMLElement* This) {
    return This->lpVtbl->Remove(This);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetClientRects(nsIDOMHTMLElement* This,nsIDOMClientRectList **_retval) {
    return This->lpVtbl->GetClientRects(This,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetBoundingClientRect(nsIDOMHTMLElement* This,nsIDOMClientRect **_retval) {
    return This->lpVtbl->GetBoundingClientRect(This,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetScrollTop(nsIDOMHTMLElement* This,LONG *aScrollTop) {
    return This->lpVtbl->GetScrollTop(This,aScrollTop);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetScrollTop(nsIDOMHTMLElement* This,LONG aScrollTop) {
    return This->lpVtbl->SetScrollTop(This,aScrollTop);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetScrollLeft(nsIDOMHTMLElement* This,LONG *aScrollLeft) {
    return This->lpVtbl->GetScrollLeft(This,aScrollLeft);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetScrollLeft(nsIDOMHTMLElement* This,LONG aScrollLeft) {
    return This->lpVtbl->SetScrollLeft(This,aScrollLeft);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetScrollWidth(nsIDOMHTMLElement* This,LONG *aScrollWidth) {
    return This->lpVtbl->GetScrollWidth(This,aScrollWidth);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetScrollHeight(nsIDOMHTMLElement* This,LONG *aScrollHeight) {
    return This->lpVtbl->GetScrollHeight(This,aScrollHeight);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetClientTop(nsIDOMHTMLElement* This,LONG *aClientTop) {
    return This->lpVtbl->GetClientTop(This,aClientTop);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetClientLeft(nsIDOMHTMLElement* This,LONG *aClientLeft) {
    return This->lpVtbl->GetClientLeft(This,aClientLeft);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetClientWidth(nsIDOMHTMLElement* This,LONG *aClientWidth) {
    return This->lpVtbl->GetClientWidth(This,aClientWidth);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetClientHeight(nsIDOMHTMLElement* This,LONG *aClientHeight) {
    return This->lpVtbl->GetClientHeight(This,aClientHeight);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetScrollLeftMax(nsIDOMHTMLElement* This,LONG *aScrollLeftMax) {
    return This->lpVtbl->GetScrollLeftMax(This,aScrollLeftMax);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetScrollTopMax(nsIDOMHTMLElement* This,LONG *aScrollTopMax) {
    return This->lpVtbl->GetScrollTopMax(This,aScrollTopMax);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_MozMatchesSelector(nsIDOMHTMLElement* This,const nsAString *selector,cpp_bool *_retval) {
    return This->lpVtbl->MozMatchesSelector(This,selector,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetCapture(nsIDOMHTMLElement* This,cpp_bool retargetToElement) {
    return This->lpVtbl->SetCapture(This,retargetToElement);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_ReleaseCapture(nsIDOMHTMLElement* This) {
    return This->lpVtbl->ReleaseCapture(This);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_MozRequestFullScreen(nsIDOMHTMLElement* This) {
    return This->lpVtbl->MozRequestFullScreen(This);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_MozRequestPointerLock(nsIDOMHTMLElement* This) {
    return This->lpVtbl->MozRequestPointerLock(This);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_QuerySelector(nsIDOMHTMLElement* This,const nsAString *selectors,nsIDOMElement **_retval) {
    return This->lpVtbl->QuerySelector(This,selectors,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_QuerySelectorAll(nsIDOMHTMLElement* This,const nsAString *selectors,nsIDOMNodeList **_retval) {
    return This->lpVtbl->QuerySelectorAll(This,selectors,_retval);
}
/*** nsIDOMHTMLElement methods ***/
static FORCEINLINE nsresult nsIDOMHTMLElement_GetTitle(nsIDOMHTMLElement* This,nsAString *aTitle) {
    return This->lpVtbl->GetTitle(This,aTitle);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetTitle(nsIDOMHTMLElement* This,const nsAString *aTitle) {
    return This->lpVtbl->SetTitle(This,aTitle);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetLang(nsIDOMHTMLElement* This,nsAString *aLang) {
    return This->lpVtbl->GetLang(This,aLang);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetLang(nsIDOMHTMLElement* This,const nsAString *aLang) {
    return This->lpVtbl->SetLang(This,aLang);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetDir(nsIDOMHTMLElement* This,nsAString *aDir) {
    return This->lpVtbl->GetDir(This,aDir);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetDir(nsIDOMHTMLElement* This,const nsAString *aDir) {
    return This->lpVtbl->SetDir(This,aDir);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetDataset(nsIDOMHTMLElement* This,nsISupports **aDataset) {
    return This->lpVtbl->GetDataset(This,aDataset);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetItemScope(nsIDOMHTMLElement* This,cpp_bool *aItemScope) {
    return This->lpVtbl->GetItemScope(This,aItemScope);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetItemScope(nsIDOMHTMLElement* This,cpp_bool aItemScope) {
    return This->lpVtbl->SetItemScope(This,aItemScope);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetItemType(nsIDOMHTMLElement* This,nsIVariant **aItemType) {
    return This->lpVtbl->GetItemType(This,aItemType);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetItemType(nsIDOMHTMLElement* This,nsIVariant *aItemType) {
    return This->lpVtbl->SetItemType(This,aItemType);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetItemId(nsIDOMHTMLElement* This,nsAString *aItemId) {
    return This->lpVtbl->GetItemId(This,aItemId);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetItemId(nsIDOMHTMLElement* This,const nsAString *aItemId) {
    return This->lpVtbl->SetItemId(This,aItemId);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetProperties(nsIDOMHTMLElement* This,nsISupports **aProperties) {
    return This->lpVtbl->GetProperties(This,aProperties);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetItemValue(nsIDOMHTMLElement* This,nsIVariant **aItemValue) {
    return This->lpVtbl->GetItemValue(This,aItemValue);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetItemValue(nsIDOMHTMLElement* This,nsIVariant *aItemValue) {
    return This->lpVtbl->SetItemValue(This,aItemValue);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetItemProp(nsIDOMHTMLElement* This,nsIVariant **aItemProp) {
    return This->lpVtbl->GetItemProp(This,aItemProp);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetItemProp(nsIDOMHTMLElement* This,nsIVariant *aItemProp) {
    return This->lpVtbl->SetItemProp(This,aItemProp);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetItemRef(nsIDOMHTMLElement* This,nsIVariant **aItemRef) {
    return This->lpVtbl->GetItemRef(This,aItemRef);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetItemRef(nsIDOMHTMLElement* This,nsIVariant *aItemRef) {
    return This->lpVtbl->SetItemRef(This,aItemRef);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetHidden(nsIDOMHTMLElement* This,cpp_bool *aHidden) {
    return This->lpVtbl->GetHidden(This,aHidden);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetHidden(nsIDOMHTMLElement* This,cpp_bool aHidden) {
    return This->lpVtbl->SetHidden(This,aHidden);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_Click(nsIDOMHTMLElement* This) {
    return This->lpVtbl->Click(This);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetTabIndex(nsIDOMHTMLElement* This,LONG *aTabIndex) {
    return This->lpVtbl->GetTabIndex(This,aTabIndex);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetTabIndex(nsIDOMHTMLElement* This,LONG aTabIndex) {
    return This->lpVtbl->SetTabIndex(This,aTabIndex);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_Focus(nsIDOMHTMLElement* This) {
    return This->lpVtbl->Focus(This);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_Blur(nsIDOMHTMLElement* This) {
    return This->lpVtbl->Blur(This);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetAccessKey(nsIDOMHTMLElement* This,nsAString *aAccessKey) {
    return This->lpVtbl->GetAccessKey(This,aAccessKey);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetAccessKey(nsIDOMHTMLElement* This,const nsAString *aAccessKey) {
    return This->lpVtbl->SetAccessKey(This,aAccessKey);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetAccessKeyLabel(nsIDOMHTMLElement* This,nsAString *aAccessKeyLabel) {
    return This->lpVtbl->GetAccessKeyLabel(This,aAccessKeyLabel);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetDraggable(nsIDOMHTMLElement* This,cpp_bool *aDraggable) {
    return This->lpVtbl->GetDraggable(This,aDraggable);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetDraggable(nsIDOMHTMLElement* This,cpp_bool aDraggable) {
    return This->lpVtbl->SetDraggable(This,aDraggable);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetContentEditable(nsIDOMHTMLElement* This,nsAString *aContentEditable) {
    return This->lpVtbl->GetContentEditable(This,aContentEditable);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetContentEditable(nsIDOMHTMLElement* This,const nsAString *aContentEditable) {
    return This->lpVtbl->SetContentEditable(This,aContentEditable);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetIsContentEditable(nsIDOMHTMLElement* This,cpp_bool *aIsContentEditable) {
    return This->lpVtbl->GetIsContentEditable(This,aIsContentEditable);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetContextMenu(nsIDOMHTMLElement* This,nsIDOMHTMLMenuElement **aContextMenu) {
    return This->lpVtbl->GetContextMenu(This,aContextMenu);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetSpellcheck(nsIDOMHTMLElement* This,cpp_bool *aSpellcheck) {
    return This->lpVtbl->GetSpellcheck(This,aSpellcheck);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetSpellcheck(nsIDOMHTMLElement* This,cpp_bool aSpellcheck) {
    return This->lpVtbl->SetSpellcheck(This,aSpellcheck);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetInnerHTML(nsIDOMHTMLElement* This,nsAString *aInnerHTML) {
    return This->lpVtbl->GetInnerHTML(This,aInnerHTML);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetInnerHTML(nsIDOMHTMLElement* This,const nsAString *aInnerHTML) {
    return This->lpVtbl->SetInnerHTML(This,aInnerHTML);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetOuterHTML(nsIDOMHTMLElement* This,nsAString *aInnerHTML) {
    return This->lpVtbl->GetOuterHTML(This,aInnerHTML);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_SetOuterHTML(nsIDOMHTMLElement* This,const nsAString *aInnerHTML) {
    return This->lpVtbl->SetOuterHTML(This,aInnerHTML);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_InsertAdjacentHTML(nsIDOMHTMLElement* This,const nsAString *position,const nsAString *text) {
    return This->lpVtbl->InsertAdjacentHTML(This,position,text);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_ScrollIntoView(nsIDOMHTMLElement* This,cpp_bool top,UINT8 _argc) {
    return This->lpVtbl->ScrollIntoView(This,top,_argc);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetOffsetParent(nsIDOMHTMLElement* This,nsIDOMElement **aOffsetParent) {
    return This->lpVtbl->GetOffsetParent(This,aOffsetParent);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetOffsetTop(nsIDOMHTMLElement* This,LONG *aOffsetTop) {
    return This->lpVtbl->GetOffsetTop(This,aOffsetTop);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetOffsetLeft(nsIDOMHTMLElement* This,LONG *aOffsetLeft) {
    return This->lpVtbl->GetOffsetLeft(This,aOffsetLeft);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetOffsetWidth(nsIDOMHTMLElement* This,LONG *aOffsetWidth) {
    return This->lpVtbl->GetOffsetWidth(This,aOffsetWidth);
}
static FORCEINLINE nsresult nsIDOMHTMLElement_GetOffsetHeight(nsIDOMHTMLElement* This,LONG *aOffsetHeight) {
    return This->lpVtbl->GetOffsetHeight(This,aOffsetHeight);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLHeadElement interface
 */
#ifndef __nsIDOMHTMLHeadElement_INTERFACE_DEFINED__
#define __nsIDOMHTMLHeadElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLHeadElement, 0x59b80014, 0x00f5, 0x412d, 0x84,0x6f, 0x72,0x54,0x94,0x12,0x2d,0x42);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("59b80014-00f5-412d-846f-725494122d42")
nsIDOMHTMLHeadElement : public nsISupports
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLHeadElement, 0x59b80014, 0x00f5, 0x412d, 0x84,0x6f, 0x72,0x54,0x94,0x12,0x2d,0x42)
#endif
#else
typedef struct nsIDOMHTMLHeadElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLHeadElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLHeadElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLHeadElement *This);

    END_INTERFACE
} nsIDOMHTMLHeadElementVtbl;

interface nsIDOMHTMLHeadElement {
    CONST_VTBL nsIDOMHTMLHeadElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLHeadElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLHeadElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLHeadElement_Release(This) (This)->lpVtbl->Release(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLHeadElement_QueryInterface(nsIDOMHTMLHeadElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLHeadElement_AddRef(nsIDOMHTMLHeadElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLHeadElement_Release(nsIDOMHTMLHeadElement* This) {
    return This->lpVtbl->Release(This);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLHeadElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLMetaElement interface
 */
#ifndef __nsIDOMHTMLMetaElement_INTERFACE_DEFINED__
#define __nsIDOMHTMLMetaElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLMetaElement, 0x2a3f789e, 0x0667, 0x464f, 0xa8,0xd7, 0x6f,0x58,0x51,0x34,0x43,0xd9);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("2a3f789e-0667-464f-a8d7-6f58513443d9")
nsIDOMHTMLMetaElement : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetContent(
        nsAString *aContent) = 0;

    virtual nsresult STDMETHODCALLTYPE SetContent(
        const nsAString *aContent) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHttpEquiv(
        nsAString *aHttpEquiv) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHttpEquiv(
        const nsAString *aHttpEquiv) = 0;

    virtual nsresult STDMETHODCALLTYPE GetName(
        nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE SetName(
        const nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScheme(
        nsAString *aScheme) = 0;

    virtual nsresult STDMETHODCALLTYPE SetScheme(
        const nsAString *aScheme) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLMetaElement, 0x2a3f789e, 0x0667, 0x464f, 0xa8,0xd7, 0x6f,0x58,0x51,0x34,0x43,0xd9)
#endif
#else
typedef struct nsIDOMHTMLMetaElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLMetaElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLMetaElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLMetaElement *This);

    /*** nsIDOMHTMLMetaElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetContent)(
        nsIDOMHTMLMetaElement *This,
        nsAString *aContent);

    nsresult (STDMETHODCALLTYPE *SetContent)(
        nsIDOMHTMLMetaElement *This,
        const nsAString *aContent);

    nsresult (STDMETHODCALLTYPE *GetHttpEquiv)(
        nsIDOMHTMLMetaElement *This,
        nsAString *aHttpEquiv);

    nsresult (STDMETHODCALLTYPE *SetHttpEquiv)(
        nsIDOMHTMLMetaElement *This,
        const nsAString *aHttpEquiv);

    nsresult (STDMETHODCALLTYPE *GetName)(
        nsIDOMHTMLMetaElement *This,
        nsAString *aName);

    nsresult (STDMETHODCALLTYPE *SetName)(
        nsIDOMHTMLMetaElement *This,
        const nsAString *aName);

    nsresult (STDMETHODCALLTYPE *GetScheme)(
        nsIDOMHTMLMetaElement *This,
        nsAString *aScheme);

    nsresult (STDMETHODCALLTYPE *SetScheme)(
        nsIDOMHTMLMetaElement *This,
        const nsAString *aScheme);

    END_INTERFACE
} nsIDOMHTMLMetaElementVtbl;

interface nsIDOMHTMLMetaElement {
    CONST_VTBL nsIDOMHTMLMetaElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLMetaElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLMetaElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLMetaElement_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMHTMLMetaElement methods ***/
#define nsIDOMHTMLMetaElement_GetContent(This,aContent) (This)->lpVtbl->GetContent(This,aContent)
#define nsIDOMHTMLMetaElement_SetContent(This,aContent) (This)->lpVtbl->SetContent(This,aContent)
#define nsIDOMHTMLMetaElement_GetHttpEquiv(This,aHttpEquiv) (This)->lpVtbl->GetHttpEquiv(This,aHttpEquiv)
#define nsIDOMHTMLMetaElement_SetHttpEquiv(This,aHttpEquiv) (This)->lpVtbl->SetHttpEquiv(This,aHttpEquiv)
#define nsIDOMHTMLMetaElement_GetName(This,aName) (This)->lpVtbl->GetName(This,aName)
#define nsIDOMHTMLMetaElement_SetName(This,aName) (This)->lpVtbl->SetName(This,aName)
#define nsIDOMHTMLMetaElement_GetScheme(This,aScheme) (This)->lpVtbl->GetScheme(This,aScheme)
#define nsIDOMHTMLMetaElement_SetScheme(This,aScheme) (This)->lpVtbl->SetScheme(This,aScheme)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLMetaElement_QueryInterface(nsIDOMHTMLMetaElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLMetaElement_AddRef(nsIDOMHTMLMetaElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLMetaElement_Release(nsIDOMHTMLMetaElement* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMHTMLMetaElement methods ***/
static FORCEINLINE nsresult nsIDOMHTMLMetaElement_GetContent(nsIDOMHTMLMetaElement* This,nsAString *aContent) {
    return This->lpVtbl->GetContent(This,aContent);
}
static FORCEINLINE nsresult nsIDOMHTMLMetaElement_SetContent(nsIDOMHTMLMetaElement* This,const nsAString *aContent) {
    return This->lpVtbl->SetContent(This,aContent);
}
static FORCEINLINE nsresult nsIDOMHTMLMetaElement_GetHttpEquiv(nsIDOMHTMLMetaElement* This,nsAString *aHttpEquiv) {
    return This->lpVtbl->GetHttpEquiv(This,aHttpEquiv);
}
static FORCEINLINE nsresult nsIDOMHTMLMetaElement_SetHttpEquiv(nsIDOMHTMLMetaElement* This,const nsAString *aHttpEquiv) {
    return This->lpVtbl->SetHttpEquiv(This,aHttpEquiv);
}
static FORCEINLINE nsresult nsIDOMHTMLMetaElement_GetName(nsIDOMHTMLMetaElement* This,nsAString *aName) {
    return This->lpVtbl->GetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMHTMLMetaElement_SetName(nsIDOMHTMLMetaElement* This,const nsAString *aName) {
    return This->lpVtbl->SetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMHTMLMetaElement_GetScheme(nsIDOMHTMLMetaElement* This,nsAString *aScheme) {
    return This->lpVtbl->GetScheme(This,aScheme);
}
static FORCEINLINE nsresult nsIDOMHTMLMetaElement_SetScheme(nsIDOMHTMLMetaElement* This,const nsAString *aScheme) {
    return This->lpVtbl->SetScheme(This,aScheme);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLMetaElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMCharacterData interface
 */
#ifndef __nsIDOMCharacterData_INTERFACE_DEFINED__
#define __nsIDOMCharacterData_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMCharacterData, 0x4109a2d2, 0xe7af, 0x445d, 0xbb,0x72, 0xc7,0xc9,0xb8,0x75,0xf3,0x5e);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("4109a2d2-e7af-445d-bb72-c7c9b875f35e")
nsIDOMCharacterData : public nsIDOMNode
{
    virtual nsresult STDMETHODCALLTYPE GetData(
        nsAString *aData) = 0;

    virtual nsresult STDMETHODCALLTYPE SetData(
        const nsAString *aData) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLength(
        UINT32 *aLength) = 0;

    virtual nsresult STDMETHODCALLTYPE SubstringData(
        UINT32 offset,
        UINT32 count,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE AppendData(
        const nsAString *arg) = 0;

    virtual nsresult STDMETHODCALLTYPE InsertData(
        UINT32 offset,
        const nsAString *arg) = 0;

    virtual nsresult STDMETHODCALLTYPE DeleteData(
        UINT32 offset,
        UINT32 count) = 0;

    virtual nsresult STDMETHODCALLTYPE ReplaceData(
        UINT32 offset,
        UINT32 count,
        const nsAString *arg) = 0;

    virtual nsresult STDMETHODCALLTYPE Remove(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMCharacterData, 0x4109a2d2, 0xe7af, 0x445d, 0xbb,0x72, 0xc7,0xc9,0xb8,0x75,0xf3,0x5e)
#endif
#else
typedef struct nsIDOMCharacterDataVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMCharacterData *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMCharacterData *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMCharacterData *This);

    /*** nsIDOMNode methods ***/
    nsresult (STDMETHODCALLTYPE *GetNodeName)(
        nsIDOMCharacterData *This,
        nsAString *aNodeName);

    nsresult (STDMETHODCALLTYPE *GetNodeValue)(
        nsIDOMCharacterData *This,
        nsAString *aNodeValue);

    nsresult (STDMETHODCALLTYPE *SetNodeValue)(
        nsIDOMCharacterData *This,
        const nsAString *aNodeValue);

    nsresult (STDMETHODCALLTYPE *GetNodeType)(
        nsIDOMCharacterData *This,
        UINT16 *aNodeType);

    nsresult (STDMETHODCALLTYPE *GetParentNode)(
        nsIDOMCharacterData *This,
        nsIDOMNode **aParentNode);

    nsresult (STDMETHODCALLTYPE *GetParentElement)(
        nsIDOMCharacterData *This,
        nsIDOMElement **aParentElement);

    nsresult (STDMETHODCALLTYPE *GetChildNodes)(
        nsIDOMCharacterData *This,
        nsIDOMNodeList **aChildNodes);

    nsresult (STDMETHODCALLTYPE *GetFirstChild)(
        nsIDOMCharacterData *This,
        nsIDOMNode **aFirstChild);

    nsresult (STDMETHODCALLTYPE *GetLastChild)(
        nsIDOMCharacterData *This,
        nsIDOMNode **aLastChild);

    nsresult (STDMETHODCALLTYPE *GetPreviousSibling)(
        nsIDOMCharacterData *This,
        nsIDOMNode **aPreviousSibling);

    nsresult (STDMETHODCALLTYPE *GetNextSibling)(
        nsIDOMCharacterData *This,
        nsIDOMNode **aNextSibling);

    nsresult (STDMETHODCALLTYPE *GetOwnerDocument)(
        nsIDOMCharacterData *This,
        nsIDOMDocument **aOwnerDocument);

    nsresult (STDMETHODCALLTYPE *InsertBefore)(
        nsIDOMCharacterData *This,
        nsIDOMNode *newChild,
        nsIDOMNode *refChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *ReplaceChild)(
        nsIDOMCharacterData *This,
        nsIDOMNode *newChild,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *RemoveChild)(
        nsIDOMCharacterData *This,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *AppendChild)(
        nsIDOMCharacterData *This,
        nsIDOMNode *newChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *HasChildNodes)(
        nsIDOMCharacterData *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CloneNode)(
        nsIDOMCharacterData *This,
        cpp_bool deep,
        UINT8 _argc,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *Normalize)(
        nsIDOMCharacterData *This);

    nsresult (STDMETHODCALLTYPE *GetNamespaceURI)(
        nsIDOMCharacterData *This,
        nsAString *aNamespaceURI);

    nsresult (STDMETHODCALLTYPE *GetPrefix)(
        nsIDOMCharacterData *This,
        nsAString *aPrefix);

    nsresult (STDMETHODCALLTYPE *GetLocalName)(
        nsIDOMCharacterData *This,
        nsAString *aLocalName);

    nsresult (STDMETHODCALLTYPE *UnusedPlaceholder)(
        nsIDOMCharacterData *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetDOMBaseURI)(
        nsIDOMCharacterData *This,
        nsAString *aBaseURI);

    nsresult (STDMETHODCALLTYPE *CompareDocumentPosition)(
        nsIDOMCharacterData *This,
        nsIDOMNode *other,
        UINT16 *_retval);

    nsresult (STDMETHODCALLTYPE *GetTextContent)(
        nsIDOMCharacterData *This,
        nsAString *aTextContent);

    nsresult (STDMETHODCALLTYPE *SetTextContent)(
        nsIDOMCharacterData *This,
        const nsAString *aTextContent);

    nsresult (STDMETHODCALLTYPE *LookupPrefix)(
        nsIDOMCharacterData *This,
        const nsAString *namespaceURI,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *IsDefaultNamespace)(
        nsIDOMCharacterData *This,
        const nsAString *namespaceURI,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *LookupNamespaceURI)(
        nsIDOMCharacterData *This,
        const nsAString *prefix,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *IsEqualNode)(
        nsIDOMCharacterData *This,
        nsIDOMNode *arg,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetUserData)(
        nsIDOMCharacterData *This,
        const nsAString *key,
        nsIVariant *data,
        nsIVariant **_retval);

    nsresult (STDMETHODCALLTYPE *GetUserData)(
        nsIDOMCharacterData *This,
        const nsAString *key,
        nsIVariant **_retval);

    nsresult (STDMETHODCALLTYPE *Contains)(
        nsIDOMCharacterData *This,
        nsIDOMNode *aOther,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetMshtmlNode)(
        nsIDOMCharacterData *This,
        nsISupports **aMshtmlNode);

    nsresult (STDMETHODCALLTYPE *SetMshtmlNode)(
        nsIDOMCharacterData *This,
        nsISupports *aMshtmlNode);

    /*** nsIDOMCharacterData methods ***/
    nsresult (STDMETHODCALLTYPE *GetData)(
        nsIDOMCharacterData *This,
        nsAString *aData);

    nsresult (STDMETHODCALLTYPE *SetData)(
        nsIDOMCharacterData *This,
        const nsAString *aData);

    nsresult (STDMETHODCALLTYPE *GetLength)(
        nsIDOMCharacterData *This,
        UINT32 *aLength);

    nsresult (STDMETHODCALLTYPE *SubstringData)(
        nsIDOMCharacterData *This,
        UINT32 offset,
        UINT32 count,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *AppendData)(
        nsIDOMCharacterData *This,
        const nsAString *arg);

    nsresult (STDMETHODCALLTYPE *InsertData)(
        nsIDOMCharacterData *This,
        UINT32 offset,
        const nsAString *arg);

    nsresult (STDMETHODCALLTYPE *DeleteData)(
        nsIDOMCharacterData *This,
        UINT32 offset,
        UINT32 count);

    nsresult (STDMETHODCALLTYPE *ReplaceData)(
        nsIDOMCharacterData *This,
        UINT32 offset,
        UINT32 count,
        const nsAString *arg);

    nsresult (STDMETHODCALLTYPE *Remove)(
        nsIDOMCharacterData *This);

    END_INTERFACE
} nsIDOMCharacterDataVtbl;

interface nsIDOMCharacterData {
    CONST_VTBL nsIDOMCharacterDataVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMCharacterData_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMCharacterData_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMCharacterData_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMNode methods ***/
#define nsIDOMCharacterData_GetNodeName(This,aNodeName) (This)->lpVtbl->GetNodeName(This,aNodeName)
#define nsIDOMCharacterData_GetNodeValue(This,aNodeValue) (This)->lpVtbl->GetNodeValue(This,aNodeValue)
#define nsIDOMCharacterData_SetNodeValue(This,aNodeValue) (This)->lpVtbl->SetNodeValue(This,aNodeValue)
#define nsIDOMCharacterData_GetNodeType(This,aNodeType) (This)->lpVtbl->GetNodeType(This,aNodeType)
#define nsIDOMCharacterData_GetParentNode(This,aParentNode) (This)->lpVtbl->GetParentNode(This,aParentNode)
#define nsIDOMCharacterData_GetParentElement(This,aParentElement) (This)->lpVtbl->GetParentElement(This,aParentElement)
#define nsIDOMCharacterData_GetChildNodes(This,aChildNodes) (This)->lpVtbl->GetChildNodes(This,aChildNodes)
#define nsIDOMCharacterData_GetFirstChild(This,aFirstChild) (This)->lpVtbl->GetFirstChild(This,aFirstChild)
#define nsIDOMCharacterData_GetLastChild(This,aLastChild) (This)->lpVtbl->GetLastChild(This,aLastChild)
#define nsIDOMCharacterData_GetPreviousSibling(This,aPreviousSibling) (This)->lpVtbl->GetPreviousSibling(This,aPreviousSibling)
#define nsIDOMCharacterData_GetNextSibling(This,aNextSibling) (This)->lpVtbl->GetNextSibling(This,aNextSibling)
#define nsIDOMCharacterData_GetOwnerDocument(This,aOwnerDocument) (This)->lpVtbl->GetOwnerDocument(This,aOwnerDocument)
#define nsIDOMCharacterData_InsertBefore(This,newChild,refChild,_retval) (This)->lpVtbl->InsertBefore(This,newChild,refChild,_retval)
#define nsIDOMCharacterData_ReplaceChild(This,newChild,oldChild,_retval) (This)->lpVtbl->ReplaceChild(This,newChild,oldChild,_retval)
#define nsIDOMCharacterData_RemoveChild(This,oldChild,_retval) (This)->lpVtbl->RemoveChild(This,oldChild,_retval)
#define nsIDOMCharacterData_AppendChild(This,newChild,_retval) (This)->lpVtbl->AppendChild(This,newChild,_retval)
#define nsIDOMCharacterData_HasChildNodes(This,_retval) (This)->lpVtbl->HasChildNodes(This,_retval)
#define nsIDOMCharacterData_CloneNode(This,deep,_argc,_retval) (This)->lpVtbl->CloneNode(This,deep,_argc,_retval)
#define nsIDOMCharacterData_Normalize(This) (This)->lpVtbl->Normalize(This)
#define nsIDOMCharacterData_GetNamespaceURI(This,aNamespaceURI) (This)->lpVtbl->GetNamespaceURI(This,aNamespaceURI)
#define nsIDOMCharacterData_GetPrefix(This,aPrefix) (This)->lpVtbl->GetPrefix(This,aPrefix)
#define nsIDOMCharacterData_GetLocalName(This,aLocalName) (This)->lpVtbl->GetLocalName(This,aLocalName)
#define nsIDOMCharacterData_UnusedPlaceholder(This,_retval) (This)->lpVtbl->UnusedPlaceholder(This,_retval)
#define nsIDOMCharacterData_GetDOMBaseURI(This,aBaseURI) (This)->lpVtbl->GetDOMBaseURI(This,aBaseURI)
#define nsIDOMCharacterData_CompareDocumentPosition(This,other,_retval) (This)->lpVtbl->CompareDocumentPosition(This,other,_retval)
#define nsIDOMCharacterData_GetTextContent(This,aTextContent) (This)->lpVtbl->GetTextContent(This,aTextContent)
#define nsIDOMCharacterData_SetTextContent(This,aTextContent) (This)->lpVtbl->SetTextContent(This,aTextContent)
#define nsIDOMCharacterData_LookupPrefix(This,namespaceURI,_retval) (This)->lpVtbl->LookupPrefix(This,namespaceURI,_retval)
#define nsIDOMCharacterData_IsDefaultNamespace(This,namespaceURI,_retval) (This)->lpVtbl->IsDefaultNamespace(This,namespaceURI,_retval)
#define nsIDOMCharacterData_LookupNamespaceURI(This,prefix,_retval) (This)->lpVtbl->LookupNamespaceURI(This,prefix,_retval)
#define nsIDOMCharacterData_IsEqualNode(This,arg,_retval) (This)->lpVtbl->IsEqualNode(This,arg,_retval)
#define nsIDOMCharacterData_SetUserData(This,key,data,_retval) (This)->lpVtbl->SetUserData(This,key,data,_retval)
#define nsIDOMCharacterData_GetUserData(This,key,_retval) (This)->lpVtbl->GetUserData(This,key,_retval)
#define nsIDOMCharacterData_Contains(This,aOther,_retval) (This)->lpVtbl->Contains(This,aOther,_retval)
#define nsIDOMCharacterData_GetMshtmlNode(This,aMshtmlNode) (This)->lpVtbl->GetMshtmlNode(This,aMshtmlNode)
#define nsIDOMCharacterData_SetMshtmlNode(This,aMshtmlNode) (This)->lpVtbl->SetMshtmlNode(This,aMshtmlNode)
/*** nsIDOMCharacterData methods ***/
#define nsIDOMCharacterData_GetData(This,aData) (This)->lpVtbl->GetData(This,aData)
#define nsIDOMCharacterData_SetData(This,aData) (This)->lpVtbl->SetData(This,aData)
#define nsIDOMCharacterData_GetLength(This,aLength) (This)->lpVtbl->GetLength(This,aLength)
#define nsIDOMCharacterData_SubstringData(This,offset,count,_retval) (This)->lpVtbl->SubstringData(This,offset,count,_retval)
#define nsIDOMCharacterData_AppendData(This,arg) (This)->lpVtbl->AppendData(This,arg)
#define nsIDOMCharacterData_InsertData(This,offset,arg) (This)->lpVtbl->InsertData(This,offset,arg)
#define nsIDOMCharacterData_DeleteData(This,offset,count) (This)->lpVtbl->DeleteData(This,offset,count)
#define nsIDOMCharacterData_ReplaceData(This,offset,count,arg) (This)->lpVtbl->ReplaceData(This,offset,count,arg)
#define nsIDOMCharacterData_Remove(This) (This)->lpVtbl->Remove(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMCharacterData_QueryInterface(nsIDOMCharacterData* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMCharacterData_AddRef(nsIDOMCharacterData* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMCharacterData_Release(nsIDOMCharacterData* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMNode methods ***/
static FORCEINLINE nsresult nsIDOMCharacterData_GetNodeName(nsIDOMCharacterData* This,nsAString *aNodeName) {
    return This->lpVtbl->GetNodeName(This,aNodeName);
}
static FORCEINLINE nsresult nsIDOMCharacterData_GetNodeValue(nsIDOMCharacterData* This,nsAString *aNodeValue) {
    return This->lpVtbl->GetNodeValue(This,aNodeValue);
}
static FORCEINLINE nsresult nsIDOMCharacterData_SetNodeValue(nsIDOMCharacterData* This,const nsAString *aNodeValue) {
    return This->lpVtbl->SetNodeValue(This,aNodeValue);
}
static FORCEINLINE nsresult nsIDOMCharacterData_GetNodeType(nsIDOMCharacterData* This,UINT16 *aNodeType) {
    return This->lpVtbl->GetNodeType(This,aNodeType);
}
static FORCEINLINE nsresult nsIDOMCharacterData_GetParentNode(nsIDOMCharacterData* This,nsIDOMNode **aParentNode) {
    return This->lpVtbl->GetParentNode(This,aParentNode);
}
static FORCEINLINE nsresult nsIDOMCharacterData_GetParentElement(nsIDOMCharacterData* This,nsIDOMElement **aParentElement) {
    return This->lpVtbl->GetParentElement(This,aParentElement);
}
static FORCEINLINE nsresult nsIDOMCharacterData_GetChildNodes(nsIDOMCharacterData* This,nsIDOMNodeList **aChildNodes) {
    return This->lpVtbl->GetChildNodes(This,aChildNodes);
}
static FORCEINLINE nsresult nsIDOMCharacterData_GetFirstChild(nsIDOMCharacterData* This,nsIDOMNode **aFirstChild) {
    return This->lpVtbl->GetFirstChild(This,aFirstChild);
}
static FORCEINLINE nsresult nsIDOMCharacterData_GetLastChild(nsIDOMCharacterData* This,nsIDOMNode **aLastChild) {
    return This->lpVtbl->GetLastChild(This,aLastChild);
}
static FORCEINLINE nsresult nsIDOMCharacterData_GetPreviousSibling(nsIDOMCharacterData* This,nsIDOMNode **aPreviousSibling) {
    return This->lpVtbl->GetPreviousSibling(This,aPreviousSibling);
}
static FORCEINLINE nsresult nsIDOMCharacterData_GetNextSibling(nsIDOMCharacterData* This,nsIDOMNode **aNextSibling) {
    return This->lpVtbl->GetNextSibling(This,aNextSibling);
}
static FORCEINLINE nsresult nsIDOMCharacterData_GetOwnerDocument(nsIDOMCharacterData* This,nsIDOMDocument **aOwnerDocument) {
    return This->lpVtbl->GetOwnerDocument(This,aOwnerDocument);
}
static FORCEINLINE nsresult nsIDOMCharacterData_InsertBefore(nsIDOMCharacterData* This,nsIDOMNode *newChild,nsIDOMNode *refChild,nsIDOMNode **_retval) {
    return This->lpVtbl->InsertBefore(This,newChild,refChild,_retval);
}
static FORCEINLINE nsresult nsIDOMCharacterData_ReplaceChild(nsIDOMCharacterData* This,nsIDOMNode *newChild,nsIDOMNode *oldChild,nsIDOMNode **_retval) {
    return This->lpVtbl->ReplaceChild(This,newChild,oldChild,_retval);
}
static FORCEINLINE nsresult nsIDOMCharacterData_RemoveChild(nsIDOMCharacterData* This,nsIDOMNode *oldChild,nsIDOMNode **_retval) {
    return This->lpVtbl->RemoveChild(This,oldChild,_retval);
}
static FORCEINLINE nsresult nsIDOMCharacterData_AppendChild(nsIDOMCharacterData* This,nsIDOMNode *newChild,nsIDOMNode **_retval) {
    return This->lpVtbl->AppendChild(This,newChild,_retval);
}
static FORCEINLINE nsresult nsIDOMCharacterData_HasChildNodes(nsIDOMCharacterData* This,cpp_bool *_retval) {
    return This->lpVtbl->HasChildNodes(This,_retval);
}
static FORCEINLINE nsresult nsIDOMCharacterData_CloneNode(nsIDOMCharacterData* This,cpp_bool deep,UINT8 _argc,nsIDOMNode **_retval) {
    return This->lpVtbl->CloneNode(This,deep,_argc,_retval);
}
static FORCEINLINE nsresult nsIDOMCharacterData_Normalize(nsIDOMCharacterData* This) {
    return This->lpVtbl->Normalize(This);
}
static FORCEINLINE nsresult nsIDOMCharacterData_GetNamespaceURI(nsIDOMCharacterData* This,nsAString *aNamespaceURI) {
    return This->lpVtbl->GetNamespaceURI(This,aNamespaceURI);
}
static FORCEINLINE nsresult nsIDOMCharacterData_GetPrefix(nsIDOMCharacterData* This,nsAString *aPrefix) {
    return This->lpVtbl->GetPrefix(This,aPrefix);
}
static FORCEINLINE nsresult nsIDOMCharacterData_GetLocalName(nsIDOMCharacterData* This,nsAString *aLocalName) {
    return This->lpVtbl->GetLocalName(This,aLocalName);
}
static FORCEINLINE nsresult nsIDOMCharacterData_UnusedPlaceholder(nsIDOMCharacterData* This,cpp_bool *_retval) {
    return This->lpVtbl->UnusedPlaceholder(This,_retval);
}
static FORCEINLINE nsresult nsIDOMCharacterData_GetDOMBaseURI(nsIDOMCharacterData* This,nsAString *aBaseURI) {
    return This->lpVtbl->GetDOMBaseURI(This,aBaseURI);
}
static FORCEINLINE nsresult nsIDOMCharacterData_CompareDocumentPosition(nsIDOMCharacterData* This,nsIDOMNode *other,UINT16 *_retval) {
    return This->lpVtbl->CompareDocumentPosition(This,other,_retval);
}
static FORCEINLINE nsresult nsIDOMCharacterData_GetTextContent(nsIDOMCharacterData* This,nsAString *aTextContent) {
    return This->lpVtbl->GetTextContent(This,aTextContent);
}
static FORCEINLINE nsresult nsIDOMCharacterData_SetTextContent(nsIDOMCharacterData* This,const nsAString *aTextContent) {
    return This->lpVtbl->SetTextContent(This,aTextContent);
}
static FORCEINLINE nsresult nsIDOMCharacterData_LookupPrefix(nsIDOMCharacterData* This,const nsAString *namespaceURI,nsAString *_retval) {
    return This->lpVtbl->LookupPrefix(This,namespaceURI,_retval);
}
static FORCEINLINE nsresult nsIDOMCharacterData_IsDefaultNamespace(nsIDOMCharacterData* This,const nsAString *namespaceURI,cpp_bool *_retval) {
    return This->lpVtbl->IsDefaultNamespace(This,namespaceURI,_retval);
}
static FORCEINLINE nsresult nsIDOMCharacterData_LookupNamespaceURI(nsIDOMCharacterData* This,const nsAString *prefix,nsAString *_retval) {
    return This->lpVtbl->LookupNamespaceURI(This,prefix,_retval);
}
static FORCEINLINE nsresult nsIDOMCharacterData_IsEqualNode(nsIDOMCharacterData* This,nsIDOMNode *arg,cpp_bool *_retval) {
    return This->lpVtbl->IsEqualNode(This,arg,_retval);
}
static FORCEINLINE nsresult nsIDOMCharacterData_SetUserData(nsIDOMCharacterData* This,const nsAString *key,nsIVariant *data,nsIVariant **_retval) {
    return This->lpVtbl->SetUserData(This,key,data,_retval);
}
static FORCEINLINE nsresult nsIDOMCharacterData_GetUserData(nsIDOMCharacterData* This,const nsAString *key,nsIVariant **_retval) {
    return This->lpVtbl->GetUserData(This,key,_retval);
}
static FORCEINLINE nsresult nsIDOMCharacterData_Contains(nsIDOMCharacterData* This,nsIDOMNode *aOther,cpp_bool *_retval) {
    return This->lpVtbl->Contains(This,aOther,_retval);
}
static FORCEINLINE nsresult nsIDOMCharacterData_GetMshtmlNode(nsIDOMCharacterData* This,nsISupports **aMshtmlNode) {
    return This->lpVtbl->GetMshtmlNode(This,aMshtmlNode);
}
static FORCEINLINE nsresult nsIDOMCharacterData_SetMshtmlNode(nsIDOMCharacterData* This,nsISupports *aMshtmlNode) {
    return This->lpVtbl->SetMshtmlNode(This,aMshtmlNode);
}
/*** nsIDOMCharacterData methods ***/
static FORCEINLINE nsresult nsIDOMCharacterData_GetData(nsIDOMCharacterData* This,nsAString *aData) {
    return This->lpVtbl->GetData(This,aData);
}
static FORCEINLINE nsresult nsIDOMCharacterData_SetData(nsIDOMCharacterData* This,const nsAString *aData) {
    return This->lpVtbl->SetData(This,aData);
}
static FORCEINLINE nsresult nsIDOMCharacterData_GetLength(nsIDOMCharacterData* This,UINT32 *aLength) {
    return This->lpVtbl->GetLength(This,aLength);
}
static FORCEINLINE nsresult nsIDOMCharacterData_SubstringData(nsIDOMCharacterData* This,UINT32 offset,UINT32 count,nsAString *_retval) {
    return This->lpVtbl->SubstringData(This,offset,count,_retval);
}
static FORCEINLINE nsresult nsIDOMCharacterData_AppendData(nsIDOMCharacterData* This,const nsAString *arg) {
    return This->lpVtbl->AppendData(This,arg);
}
static FORCEINLINE nsresult nsIDOMCharacterData_InsertData(nsIDOMCharacterData* This,UINT32 offset,const nsAString *arg) {
    return This->lpVtbl->InsertData(This,offset,arg);
}
static FORCEINLINE nsresult nsIDOMCharacterData_DeleteData(nsIDOMCharacterData* This,UINT32 offset,UINT32 count) {
    return This->lpVtbl->DeleteData(This,offset,count);
}
static FORCEINLINE nsresult nsIDOMCharacterData_ReplaceData(nsIDOMCharacterData* This,UINT32 offset,UINT32 count,const nsAString *arg) {
    return This->lpVtbl->ReplaceData(This,offset,count,arg);
}
static FORCEINLINE nsresult nsIDOMCharacterData_Remove(nsIDOMCharacterData* This) {
    return This->lpVtbl->Remove(This);
}
#endif
#endif

#endif


#endif  /* __nsIDOMCharacterData_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMText interface
 */
#ifndef __nsIDOMText_INTERFACE_DEFINED__
#define __nsIDOMText_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMText, 0x67273994, 0x6aff, 0x4091, 0x9d,0xe9, 0xb7,0x88,0xa2,0x49,0xf7,0x83);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("67273994-6aff-4091-9de9-b788a249f783")
nsIDOMText : public nsIDOMCharacterData
{
    virtual nsresult STDMETHODCALLTYPE SplitText(
        UINT32 offset,
        nsIDOMText **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetWholeText(
        nsAString *aWholeText) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMText, 0x67273994, 0x6aff, 0x4091, 0x9d,0xe9, 0xb7,0x88,0xa2,0x49,0xf7,0x83)
#endif
#else
typedef struct nsIDOMTextVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMText *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMText *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMText *This);

    /*** nsIDOMNode methods ***/
    nsresult (STDMETHODCALLTYPE *GetNodeName)(
        nsIDOMText *This,
        nsAString *aNodeName);

    nsresult (STDMETHODCALLTYPE *GetNodeValue)(
        nsIDOMText *This,
        nsAString *aNodeValue);

    nsresult (STDMETHODCALLTYPE *SetNodeValue)(
        nsIDOMText *This,
        const nsAString *aNodeValue);

    nsresult (STDMETHODCALLTYPE *GetNodeType)(
        nsIDOMText *This,
        UINT16 *aNodeType);

    nsresult (STDMETHODCALLTYPE *GetParentNode)(
        nsIDOMText *This,
        nsIDOMNode **aParentNode);

    nsresult (STDMETHODCALLTYPE *GetParentElement)(
        nsIDOMText *This,
        nsIDOMElement **aParentElement);

    nsresult (STDMETHODCALLTYPE *GetChildNodes)(
        nsIDOMText *This,
        nsIDOMNodeList **aChildNodes);

    nsresult (STDMETHODCALLTYPE *GetFirstChild)(
        nsIDOMText *This,
        nsIDOMNode **aFirstChild);

    nsresult (STDMETHODCALLTYPE *GetLastChild)(
        nsIDOMText *This,
        nsIDOMNode **aLastChild);

    nsresult (STDMETHODCALLTYPE *GetPreviousSibling)(
        nsIDOMText *This,
        nsIDOMNode **aPreviousSibling);

    nsresult (STDMETHODCALLTYPE *GetNextSibling)(
        nsIDOMText *This,
        nsIDOMNode **aNextSibling);

    nsresult (STDMETHODCALLTYPE *GetOwnerDocument)(
        nsIDOMText *This,
        nsIDOMDocument **aOwnerDocument);

    nsresult (STDMETHODCALLTYPE *InsertBefore)(
        nsIDOMText *This,
        nsIDOMNode *newChild,
        nsIDOMNode *refChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *ReplaceChild)(
        nsIDOMText *This,
        nsIDOMNode *newChild,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *RemoveChild)(
        nsIDOMText *This,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *AppendChild)(
        nsIDOMText *This,
        nsIDOMNode *newChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *HasChildNodes)(
        nsIDOMText *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CloneNode)(
        nsIDOMText *This,
        cpp_bool deep,
        UINT8 _argc,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *Normalize)(
        nsIDOMText *This);

    nsresult (STDMETHODCALLTYPE *GetNamespaceURI)(
        nsIDOMText *This,
        nsAString *aNamespaceURI);

    nsresult (STDMETHODCALLTYPE *GetPrefix)(
        nsIDOMText *This,
        nsAString *aPrefix);

    nsresult (STDMETHODCALLTYPE *GetLocalName)(
        nsIDOMText *This,
        nsAString *aLocalName);

    nsresult (STDMETHODCALLTYPE *UnusedPlaceholder)(
        nsIDOMText *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetDOMBaseURI)(
        nsIDOMText *This,
        nsAString *aBaseURI);

    nsresult (STDMETHODCALLTYPE *CompareDocumentPosition)(
        nsIDOMText *This,
        nsIDOMNode *other,
        UINT16 *_retval);

    nsresult (STDMETHODCALLTYPE *GetTextContent)(
        nsIDOMText *This,
        nsAString *aTextContent);

    nsresult (STDMETHODCALLTYPE *SetTextContent)(
        nsIDOMText *This,
        const nsAString *aTextContent);

    nsresult (STDMETHODCALLTYPE *LookupPrefix)(
        nsIDOMText *This,
        const nsAString *namespaceURI,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *IsDefaultNamespace)(
        nsIDOMText *This,
        const nsAString *namespaceURI,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *LookupNamespaceURI)(
        nsIDOMText *This,
        const nsAString *prefix,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *IsEqualNode)(
        nsIDOMText *This,
        nsIDOMNode *arg,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetUserData)(
        nsIDOMText *This,
        const nsAString *key,
        nsIVariant *data,
        nsIVariant **_retval);

    nsresult (STDMETHODCALLTYPE *GetUserData)(
        nsIDOMText *This,
        const nsAString *key,
        nsIVariant **_retval);

    nsresult (STDMETHODCALLTYPE *Contains)(
        nsIDOMText *This,
        nsIDOMNode *aOther,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetMshtmlNode)(
        nsIDOMText *This,
        nsISupports **aMshtmlNode);

    nsresult (STDMETHODCALLTYPE *SetMshtmlNode)(
        nsIDOMText *This,
        nsISupports *aMshtmlNode);

    /*** nsIDOMCharacterData methods ***/
    nsresult (STDMETHODCALLTYPE *GetData)(
        nsIDOMText *This,
        nsAString *aData);

    nsresult (STDMETHODCALLTYPE *SetData)(
        nsIDOMText *This,
        const nsAString *aData);

    nsresult (STDMETHODCALLTYPE *GetLength)(
        nsIDOMText *This,
        UINT32 *aLength);

    nsresult (STDMETHODCALLTYPE *SubstringData)(
        nsIDOMText *This,
        UINT32 offset,
        UINT32 count,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *AppendData)(
        nsIDOMText *This,
        const nsAString *arg);

    nsresult (STDMETHODCALLTYPE *InsertData)(
        nsIDOMText *This,
        UINT32 offset,
        const nsAString *arg);

    nsresult (STDMETHODCALLTYPE *DeleteData)(
        nsIDOMText *This,
        UINT32 offset,
        UINT32 count);

    nsresult (STDMETHODCALLTYPE *ReplaceData)(
        nsIDOMText *This,
        UINT32 offset,
        UINT32 count,
        const nsAString *arg);

    nsresult (STDMETHODCALLTYPE *Remove)(
        nsIDOMText *This);

    /*** nsIDOMText methods ***/
    nsresult (STDMETHODCALLTYPE *SplitText)(
        nsIDOMText *This,
        UINT32 offset,
        nsIDOMText **_retval);

    nsresult (STDMETHODCALLTYPE *GetWholeText)(
        nsIDOMText *This,
        nsAString *aWholeText);

    END_INTERFACE
} nsIDOMTextVtbl;

interface nsIDOMText {
    CONST_VTBL nsIDOMTextVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMText_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMText_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMText_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMNode methods ***/
#define nsIDOMText_GetNodeName(This,aNodeName) (This)->lpVtbl->GetNodeName(This,aNodeName)
#define nsIDOMText_GetNodeValue(This,aNodeValue) (This)->lpVtbl->GetNodeValue(This,aNodeValue)
#define nsIDOMText_SetNodeValue(This,aNodeValue) (This)->lpVtbl->SetNodeValue(This,aNodeValue)
#define nsIDOMText_GetNodeType(This,aNodeType) (This)->lpVtbl->GetNodeType(This,aNodeType)
#define nsIDOMText_GetParentNode(This,aParentNode) (This)->lpVtbl->GetParentNode(This,aParentNode)
#define nsIDOMText_GetParentElement(This,aParentElement) (This)->lpVtbl->GetParentElement(This,aParentElement)
#define nsIDOMText_GetChildNodes(This,aChildNodes) (This)->lpVtbl->GetChildNodes(This,aChildNodes)
#define nsIDOMText_GetFirstChild(This,aFirstChild) (This)->lpVtbl->GetFirstChild(This,aFirstChild)
#define nsIDOMText_GetLastChild(This,aLastChild) (This)->lpVtbl->GetLastChild(This,aLastChild)
#define nsIDOMText_GetPreviousSibling(This,aPreviousSibling) (This)->lpVtbl->GetPreviousSibling(This,aPreviousSibling)
#define nsIDOMText_GetNextSibling(This,aNextSibling) (This)->lpVtbl->GetNextSibling(This,aNextSibling)
#define nsIDOMText_GetOwnerDocument(This,aOwnerDocument) (This)->lpVtbl->GetOwnerDocument(This,aOwnerDocument)
#define nsIDOMText_InsertBefore(This,newChild,refChild,_retval) (This)->lpVtbl->InsertBefore(This,newChild,refChild,_retval)
#define nsIDOMText_ReplaceChild(This,newChild,oldChild,_retval) (This)->lpVtbl->ReplaceChild(This,newChild,oldChild,_retval)
#define nsIDOMText_RemoveChild(This,oldChild,_retval) (This)->lpVtbl->RemoveChild(This,oldChild,_retval)
#define nsIDOMText_AppendChild(This,newChild,_retval) (This)->lpVtbl->AppendChild(This,newChild,_retval)
#define nsIDOMText_HasChildNodes(This,_retval) (This)->lpVtbl->HasChildNodes(This,_retval)
#define nsIDOMText_CloneNode(This,deep,_argc,_retval) (This)->lpVtbl->CloneNode(This,deep,_argc,_retval)
#define nsIDOMText_Normalize(This) (This)->lpVtbl->Normalize(This)
#define nsIDOMText_GetNamespaceURI(This,aNamespaceURI) (This)->lpVtbl->GetNamespaceURI(This,aNamespaceURI)
#define nsIDOMText_GetPrefix(This,aPrefix) (This)->lpVtbl->GetPrefix(This,aPrefix)
#define nsIDOMText_GetLocalName(This,aLocalName) (This)->lpVtbl->GetLocalName(This,aLocalName)
#define nsIDOMText_UnusedPlaceholder(This,_retval) (This)->lpVtbl->UnusedPlaceholder(This,_retval)
#define nsIDOMText_GetDOMBaseURI(This,aBaseURI) (This)->lpVtbl->GetDOMBaseURI(This,aBaseURI)
#define nsIDOMText_CompareDocumentPosition(This,other,_retval) (This)->lpVtbl->CompareDocumentPosition(This,other,_retval)
#define nsIDOMText_GetTextContent(This,aTextContent) (This)->lpVtbl->GetTextContent(This,aTextContent)
#define nsIDOMText_SetTextContent(This,aTextContent) (This)->lpVtbl->SetTextContent(This,aTextContent)
#define nsIDOMText_LookupPrefix(This,namespaceURI,_retval) (This)->lpVtbl->LookupPrefix(This,namespaceURI,_retval)
#define nsIDOMText_IsDefaultNamespace(This,namespaceURI,_retval) (This)->lpVtbl->IsDefaultNamespace(This,namespaceURI,_retval)
#define nsIDOMText_LookupNamespaceURI(This,prefix,_retval) (This)->lpVtbl->LookupNamespaceURI(This,prefix,_retval)
#define nsIDOMText_IsEqualNode(This,arg,_retval) (This)->lpVtbl->IsEqualNode(This,arg,_retval)
#define nsIDOMText_SetUserData(This,key,data,_retval) (This)->lpVtbl->SetUserData(This,key,data,_retval)
#define nsIDOMText_GetUserData(This,key,_retval) (This)->lpVtbl->GetUserData(This,key,_retval)
#define nsIDOMText_Contains(This,aOther,_retval) (This)->lpVtbl->Contains(This,aOther,_retval)
#define nsIDOMText_GetMshtmlNode(This,aMshtmlNode) (This)->lpVtbl->GetMshtmlNode(This,aMshtmlNode)
#define nsIDOMText_SetMshtmlNode(This,aMshtmlNode) (This)->lpVtbl->SetMshtmlNode(This,aMshtmlNode)
/*** nsIDOMCharacterData methods ***/
#define nsIDOMText_GetData(This,aData) (This)->lpVtbl->GetData(This,aData)
#define nsIDOMText_SetData(This,aData) (This)->lpVtbl->SetData(This,aData)
#define nsIDOMText_GetLength(This,aLength) (This)->lpVtbl->GetLength(This,aLength)
#define nsIDOMText_SubstringData(This,offset,count,_retval) (This)->lpVtbl->SubstringData(This,offset,count,_retval)
#define nsIDOMText_AppendData(This,arg) (This)->lpVtbl->AppendData(This,arg)
#define nsIDOMText_InsertData(This,offset,arg) (This)->lpVtbl->InsertData(This,offset,arg)
#define nsIDOMText_DeleteData(This,offset,count) (This)->lpVtbl->DeleteData(This,offset,count)
#define nsIDOMText_ReplaceData(This,offset,count,arg) (This)->lpVtbl->ReplaceData(This,offset,count,arg)
#define nsIDOMText_Remove(This) (This)->lpVtbl->Remove(This)
/*** nsIDOMText methods ***/
#define nsIDOMText_SplitText(This,offset,_retval) (This)->lpVtbl->SplitText(This,offset,_retval)
#define nsIDOMText_GetWholeText(This,aWholeText) (This)->lpVtbl->GetWholeText(This,aWholeText)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMText_QueryInterface(nsIDOMText* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMText_AddRef(nsIDOMText* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMText_Release(nsIDOMText* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMNode methods ***/
static FORCEINLINE nsresult nsIDOMText_GetNodeName(nsIDOMText* This,nsAString *aNodeName) {
    return This->lpVtbl->GetNodeName(This,aNodeName);
}
static FORCEINLINE nsresult nsIDOMText_GetNodeValue(nsIDOMText* This,nsAString *aNodeValue) {
    return This->lpVtbl->GetNodeValue(This,aNodeValue);
}
static FORCEINLINE nsresult nsIDOMText_SetNodeValue(nsIDOMText* This,const nsAString *aNodeValue) {
    return This->lpVtbl->SetNodeValue(This,aNodeValue);
}
static FORCEINLINE nsresult nsIDOMText_GetNodeType(nsIDOMText* This,UINT16 *aNodeType) {
    return This->lpVtbl->GetNodeType(This,aNodeType);
}
static FORCEINLINE nsresult nsIDOMText_GetParentNode(nsIDOMText* This,nsIDOMNode **aParentNode) {
    return This->lpVtbl->GetParentNode(This,aParentNode);
}
static FORCEINLINE nsresult nsIDOMText_GetParentElement(nsIDOMText* This,nsIDOMElement **aParentElement) {
    return This->lpVtbl->GetParentElement(This,aParentElement);
}
static FORCEINLINE nsresult nsIDOMText_GetChildNodes(nsIDOMText* This,nsIDOMNodeList **aChildNodes) {
    return This->lpVtbl->GetChildNodes(This,aChildNodes);
}
static FORCEINLINE nsresult nsIDOMText_GetFirstChild(nsIDOMText* This,nsIDOMNode **aFirstChild) {
    return This->lpVtbl->GetFirstChild(This,aFirstChild);
}
static FORCEINLINE nsresult nsIDOMText_GetLastChild(nsIDOMText* This,nsIDOMNode **aLastChild) {
    return This->lpVtbl->GetLastChild(This,aLastChild);
}
static FORCEINLINE nsresult nsIDOMText_GetPreviousSibling(nsIDOMText* This,nsIDOMNode **aPreviousSibling) {
    return This->lpVtbl->GetPreviousSibling(This,aPreviousSibling);
}
static FORCEINLINE nsresult nsIDOMText_GetNextSibling(nsIDOMText* This,nsIDOMNode **aNextSibling) {
    return This->lpVtbl->GetNextSibling(This,aNextSibling);
}
static FORCEINLINE nsresult nsIDOMText_GetOwnerDocument(nsIDOMText* This,nsIDOMDocument **aOwnerDocument) {
    return This->lpVtbl->GetOwnerDocument(This,aOwnerDocument);
}
static FORCEINLINE nsresult nsIDOMText_InsertBefore(nsIDOMText* This,nsIDOMNode *newChild,nsIDOMNode *refChild,nsIDOMNode **_retval) {
    return This->lpVtbl->InsertBefore(This,newChild,refChild,_retval);
}
static FORCEINLINE nsresult nsIDOMText_ReplaceChild(nsIDOMText* This,nsIDOMNode *newChild,nsIDOMNode *oldChild,nsIDOMNode **_retval) {
    return This->lpVtbl->ReplaceChild(This,newChild,oldChild,_retval);
}
static FORCEINLINE nsresult nsIDOMText_RemoveChild(nsIDOMText* This,nsIDOMNode *oldChild,nsIDOMNode **_retval) {
    return This->lpVtbl->RemoveChild(This,oldChild,_retval);
}
static FORCEINLINE nsresult nsIDOMText_AppendChild(nsIDOMText* This,nsIDOMNode *newChild,nsIDOMNode **_retval) {
    return This->lpVtbl->AppendChild(This,newChild,_retval);
}
static FORCEINLINE nsresult nsIDOMText_HasChildNodes(nsIDOMText* This,cpp_bool *_retval) {
    return This->lpVtbl->HasChildNodes(This,_retval);
}
static FORCEINLINE nsresult nsIDOMText_CloneNode(nsIDOMText* This,cpp_bool deep,UINT8 _argc,nsIDOMNode **_retval) {
    return This->lpVtbl->CloneNode(This,deep,_argc,_retval);
}
static FORCEINLINE nsresult nsIDOMText_Normalize(nsIDOMText* This) {
    return This->lpVtbl->Normalize(This);
}
static FORCEINLINE nsresult nsIDOMText_GetNamespaceURI(nsIDOMText* This,nsAString *aNamespaceURI) {
    return This->lpVtbl->GetNamespaceURI(This,aNamespaceURI);
}
static FORCEINLINE nsresult nsIDOMText_GetPrefix(nsIDOMText* This,nsAString *aPrefix) {
    return This->lpVtbl->GetPrefix(This,aPrefix);
}
static FORCEINLINE nsresult nsIDOMText_GetLocalName(nsIDOMText* This,nsAString *aLocalName) {
    return This->lpVtbl->GetLocalName(This,aLocalName);
}
static FORCEINLINE nsresult nsIDOMText_UnusedPlaceholder(nsIDOMText* This,cpp_bool *_retval) {
    return This->lpVtbl->UnusedPlaceholder(This,_retval);
}
static FORCEINLINE nsresult nsIDOMText_GetDOMBaseURI(nsIDOMText* This,nsAString *aBaseURI) {
    return This->lpVtbl->GetDOMBaseURI(This,aBaseURI);
}
static FORCEINLINE nsresult nsIDOMText_CompareDocumentPosition(nsIDOMText* This,nsIDOMNode *other,UINT16 *_retval) {
    return This->lpVtbl->CompareDocumentPosition(This,other,_retval);
}
static FORCEINLINE nsresult nsIDOMText_GetTextContent(nsIDOMText* This,nsAString *aTextContent) {
    return This->lpVtbl->GetTextContent(This,aTextContent);
}
static FORCEINLINE nsresult nsIDOMText_SetTextContent(nsIDOMText* This,const nsAString *aTextContent) {
    return This->lpVtbl->SetTextContent(This,aTextContent);
}
static FORCEINLINE nsresult nsIDOMText_LookupPrefix(nsIDOMText* This,const nsAString *namespaceURI,nsAString *_retval) {
    return This->lpVtbl->LookupPrefix(This,namespaceURI,_retval);
}
static FORCEINLINE nsresult nsIDOMText_IsDefaultNamespace(nsIDOMText* This,const nsAString *namespaceURI,cpp_bool *_retval) {
    return This->lpVtbl->IsDefaultNamespace(This,namespaceURI,_retval);
}
static FORCEINLINE nsresult nsIDOMText_LookupNamespaceURI(nsIDOMText* This,const nsAString *prefix,nsAString *_retval) {
    return This->lpVtbl->LookupNamespaceURI(This,prefix,_retval);
}
static FORCEINLINE nsresult nsIDOMText_IsEqualNode(nsIDOMText* This,nsIDOMNode *arg,cpp_bool *_retval) {
    return This->lpVtbl->IsEqualNode(This,arg,_retval);
}
static FORCEINLINE nsresult nsIDOMText_SetUserData(nsIDOMText* This,const nsAString *key,nsIVariant *data,nsIVariant **_retval) {
    return This->lpVtbl->SetUserData(This,key,data,_retval);
}
static FORCEINLINE nsresult nsIDOMText_GetUserData(nsIDOMText* This,const nsAString *key,nsIVariant **_retval) {
    return This->lpVtbl->GetUserData(This,key,_retval);
}
static FORCEINLINE nsresult nsIDOMText_Contains(nsIDOMText* This,nsIDOMNode *aOther,cpp_bool *_retval) {
    return This->lpVtbl->Contains(This,aOther,_retval);
}
static FORCEINLINE nsresult nsIDOMText_GetMshtmlNode(nsIDOMText* This,nsISupports **aMshtmlNode) {
    return This->lpVtbl->GetMshtmlNode(This,aMshtmlNode);
}
static FORCEINLINE nsresult nsIDOMText_SetMshtmlNode(nsIDOMText* This,nsISupports *aMshtmlNode) {
    return This->lpVtbl->SetMshtmlNode(This,aMshtmlNode);
}
/*** nsIDOMCharacterData methods ***/
static FORCEINLINE nsresult nsIDOMText_GetData(nsIDOMText* This,nsAString *aData) {
    return This->lpVtbl->GetData(This,aData);
}
static FORCEINLINE nsresult nsIDOMText_SetData(nsIDOMText* This,const nsAString *aData) {
    return This->lpVtbl->SetData(This,aData);
}
static FORCEINLINE nsresult nsIDOMText_GetLength(nsIDOMText* This,UINT32 *aLength) {
    return This->lpVtbl->GetLength(This,aLength);
}
static FORCEINLINE nsresult nsIDOMText_SubstringData(nsIDOMText* This,UINT32 offset,UINT32 count,nsAString *_retval) {
    return This->lpVtbl->SubstringData(This,offset,count,_retval);
}
static FORCEINLINE nsresult nsIDOMText_AppendData(nsIDOMText* This,const nsAString *arg) {
    return This->lpVtbl->AppendData(This,arg);
}
static FORCEINLINE nsresult nsIDOMText_InsertData(nsIDOMText* This,UINT32 offset,const nsAString *arg) {
    return This->lpVtbl->InsertData(This,offset,arg);
}
static FORCEINLINE nsresult nsIDOMText_DeleteData(nsIDOMText* This,UINT32 offset,UINT32 count) {
    return This->lpVtbl->DeleteData(This,offset,count);
}
static FORCEINLINE nsresult nsIDOMText_ReplaceData(nsIDOMText* This,UINT32 offset,UINT32 count,const nsAString *arg) {
    return This->lpVtbl->ReplaceData(This,offset,count,arg);
}
static FORCEINLINE nsresult nsIDOMText_Remove(nsIDOMText* This) {
    return This->lpVtbl->Remove(This);
}
/*** nsIDOMText methods ***/
static FORCEINLINE nsresult nsIDOMText_SplitText(nsIDOMText* This,UINT32 offset,nsIDOMText **_retval) {
    return This->lpVtbl->SplitText(This,offset,_retval);
}
static FORCEINLINE nsresult nsIDOMText_GetWholeText(nsIDOMText* This,nsAString *aWholeText) {
    return This->lpVtbl->GetWholeText(This,aWholeText);
}
#endif
#endif

#endif


#endif  /* __nsIDOMText_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMComment interface
 */
#ifndef __nsIDOMComment_INTERFACE_DEFINED__
#define __nsIDOMComment_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMComment, 0xe7866ff8, 0xb7fc, 0x494f, 0x87,0xc0, 0xfb,0x01,0x7d,0x8a,0x4d,0x30);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("e7866ff8-b7fc-494f-87c0-fb017d8a4d30")
nsIDOMComment : public nsIDOMCharacterData
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMComment, 0xe7866ff8, 0xb7fc, 0x494f, 0x87,0xc0, 0xfb,0x01,0x7d,0x8a,0x4d,0x30)
#endif
#else
typedef struct nsIDOMCommentVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMComment *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMComment *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMComment *This);

    /*** nsIDOMNode methods ***/
    nsresult (STDMETHODCALLTYPE *GetNodeName)(
        nsIDOMComment *This,
        nsAString *aNodeName);

    nsresult (STDMETHODCALLTYPE *GetNodeValue)(
        nsIDOMComment *This,
        nsAString *aNodeValue);

    nsresult (STDMETHODCALLTYPE *SetNodeValue)(
        nsIDOMComment *This,
        const nsAString *aNodeValue);

    nsresult (STDMETHODCALLTYPE *GetNodeType)(
        nsIDOMComment *This,
        UINT16 *aNodeType);

    nsresult (STDMETHODCALLTYPE *GetParentNode)(
        nsIDOMComment *This,
        nsIDOMNode **aParentNode);

    nsresult (STDMETHODCALLTYPE *GetParentElement)(
        nsIDOMComment *This,
        nsIDOMElement **aParentElement);

    nsresult (STDMETHODCALLTYPE *GetChildNodes)(
        nsIDOMComment *This,
        nsIDOMNodeList **aChildNodes);

    nsresult (STDMETHODCALLTYPE *GetFirstChild)(
        nsIDOMComment *This,
        nsIDOMNode **aFirstChild);

    nsresult (STDMETHODCALLTYPE *GetLastChild)(
        nsIDOMComment *This,
        nsIDOMNode **aLastChild);

    nsresult (STDMETHODCALLTYPE *GetPreviousSibling)(
        nsIDOMComment *This,
        nsIDOMNode **aPreviousSibling);

    nsresult (STDMETHODCALLTYPE *GetNextSibling)(
        nsIDOMComment *This,
        nsIDOMNode **aNextSibling);

    nsresult (STDMETHODCALLTYPE *GetOwnerDocument)(
        nsIDOMComment *This,
        nsIDOMDocument **aOwnerDocument);

    nsresult (STDMETHODCALLTYPE *InsertBefore)(
        nsIDOMComment *This,
        nsIDOMNode *newChild,
        nsIDOMNode *refChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *ReplaceChild)(
        nsIDOMComment *This,
        nsIDOMNode *newChild,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *RemoveChild)(
        nsIDOMComment *This,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *AppendChild)(
        nsIDOMComment *This,
        nsIDOMNode *newChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *HasChildNodes)(
        nsIDOMComment *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CloneNode)(
        nsIDOMComment *This,
        cpp_bool deep,
        UINT8 _argc,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *Normalize)(
        nsIDOMComment *This);

    nsresult (STDMETHODCALLTYPE *GetNamespaceURI)(
        nsIDOMComment *This,
        nsAString *aNamespaceURI);

    nsresult (STDMETHODCALLTYPE *GetPrefix)(
        nsIDOMComment *This,
        nsAString *aPrefix);

    nsresult (STDMETHODCALLTYPE *GetLocalName)(
        nsIDOMComment *This,
        nsAString *aLocalName);

    nsresult (STDMETHODCALLTYPE *UnusedPlaceholder)(
        nsIDOMComment *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetDOMBaseURI)(
        nsIDOMComment *This,
        nsAString *aBaseURI);

    nsresult (STDMETHODCALLTYPE *CompareDocumentPosition)(
        nsIDOMComment *This,
        nsIDOMNode *other,
        UINT16 *_retval);

    nsresult (STDMETHODCALLTYPE *GetTextContent)(
        nsIDOMComment *This,
        nsAString *aTextContent);

    nsresult (STDMETHODCALLTYPE *SetTextContent)(
        nsIDOMComment *This,
        const nsAString *aTextContent);

    nsresult (STDMETHODCALLTYPE *LookupPrefix)(
        nsIDOMComment *This,
        const nsAString *namespaceURI,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *IsDefaultNamespace)(
        nsIDOMComment *This,
        const nsAString *namespaceURI,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *LookupNamespaceURI)(
        nsIDOMComment *This,
        const nsAString *prefix,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *IsEqualNode)(
        nsIDOMComment *This,
        nsIDOMNode *arg,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetUserData)(
        nsIDOMComment *This,
        const nsAString *key,
        nsIVariant *data,
        nsIVariant **_retval);

    nsresult (STDMETHODCALLTYPE *GetUserData)(
        nsIDOMComment *This,
        const nsAString *key,
        nsIVariant **_retval);

    nsresult (STDMETHODCALLTYPE *Contains)(
        nsIDOMComment *This,
        nsIDOMNode *aOther,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetMshtmlNode)(
        nsIDOMComment *This,
        nsISupports **aMshtmlNode);

    nsresult (STDMETHODCALLTYPE *SetMshtmlNode)(
        nsIDOMComment *This,
        nsISupports *aMshtmlNode);

    /*** nsIDOMCharacterData methods ***/
    nsresult (STDMETHODCALLTYPE *GetData)(
        nsIDOMComment *This,
        nsAString *aData);

    nsresult (STDMETHODCALLTYPE *SetData)(
        nsIDOMComment *This,
        const nsAString *aData);

    nsresult (STDMETHODCALLTYPE *GetLength)(
        nsIDOMComment *This,
        UINT32 *aLength);

    nsresult (STDMETHODCALLTYPE *SubstringData)(
        nsIDOMComment *This,
        UINT32 offset,
        UINT32 count,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *AppendData)(
        nsIDOMComment *This,
        const nsAString *arg);

    nsresult (STDMETHODCALLTYPE *InsertData)(
        nsIDOMComment *This,
        UINT32 offset,
        const nsAString *arg);

    nsresult (STDMETHODCALLTYPE *DeleteData)(
        nsIDOMComment *This,
        UINT32 offset,
        UINT32 count);

    nsresult (STDMETHODCALLTYPE *ReplaceData)(
        nsIDOMComment *This,
        UINT32 offset,
        UINT32 count,
        const nsAString *arg);

    nsresult (STDMETHODCALLTYPE *Remove)(
        nsIDOMComment *This);

    END_INTERFACE
} nsIDOMCommentVtbl;

interface nsIDOMComment {
    CONST_VTBL nsIDOMCommentVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMComment_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMComment_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMComment_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMNode methods ***/
#define nsIDOMComment_GetNodeName(This,aNodeName) (This)->lpVtbl->GetNodeName(This,aNodeName)
#define nsIDOMComment_GetNodeValue(This,aNodeValue) (This)->lpVtbl->GetNodeValue(This,aNodeValue)
#define nsIDOMComment_SetNodeValue(This,aNodeValue) (This)->lpVtbl->SetNodeValue(This,aNodeValue)
#define nsIDOMComment_GetNodeType(This,aNodeType) (This)->lpVtbl->GetNodeType(This,aNodeType)
#define nsIDOMComment_GetParentNode(This,aParentNode) (This)->lpVtbl->GetParentNode(This,aParentNode)
#define nsIDOMComment_GetParentElement(This,aParentElement) (This)->lpVtbl->GetParentElement(This,aParentElement)
#define nsIDOMComment_GetChildNodes(This,aChildNodes) (This)->lpVtbl->GetChildNodes(This,aChildNodes)
#define nsIDOMComment_GetFirstChild(This,aFirstChild) (This)->lpVtbl->GetFirstChild(This,aFirstChild)
#define nsIDOMComment_GetLastChild(This,aLastChild) (This)->lpVtbl->GetLastChild(This,aLastChild)
#define nsIDOMComment_GetPreviousSibling(This,aPreviousSibling) (This)->lpVtbl->GetPreviousSibling(This,aPreviousSibling)
#define nsIDOMComment_GetNextSibling(This,aNextSibling) (This)->lpVtbl->GetNextSibling(This,aNextSibling)
#define nsIDOMComment_GetOwnerDocument(This,aOwnerDocument) (This)->lpVtbl->GetOwnerDocument(This,aOwnerDocument)
#define nsIDOMComment_InsertBefore(This,newChild,refChild,_retval) (This)->lpVtbl->InsertBefore(This,newChild,refChild,_retval)
#define nsIDOMComment_ReplaceChild(This,newChild,oldChild,_retval) (This)->lpVtbl->ReplaceChild(This,newChild,oldChild,_retval)
#define nsIDOMComment_RemoveChild(This,oldChild,_retval) (This)->lpVtbl->RemoveChild(This,oldChild,_retval)
#define nsIDOMComment_AppendChild(This,newChild,_retval) (This)->lpVtbl->AppendChild(This,newChild,_retval)
#define nsIDOMComment_HasChildNodes(This,_retval) (This)->lpVtbl->HasChildNodes(This,_retval)
#define nsIDOMComment_CloneNode(This,deep,_argc,_retval) (This)->lpVtbl->CloneNode(This,deep,_argc,_retval)
#define nsIDOMComment_Normalize(This) (This)->lpVtbl->Normalize(This)
#define nsIDOMComment_GetNamespaceURI(This,aNamespaceURI) (This)->lpVtbl->GetNamespaceURI(This,aNamespaceURI)
#define nsIDOMComment_GetPrefix(This,aPrefix) (This)->lpVtbl->GetPrefix(This,aPrefix)
#define nsIDOMComment_GetLocalName(This,aLocalName) (This)->lpVtbl->GetLocalName(This,aLocalName)
#define nsIDOMComment_UnusedPlaceholder(This,_retval) (This)->lpVtbl->UnusedPlaceholder(This,_retval)
#define nsIDOMComment_GetDOMBaseURI(This,aBaseURI) (This)->lpVtbl->GetDOMBaseURI(This,aBaseURI)
#define nsIDOMComment_CompareDocumentPosition(This,other,_retval) (This)->lpVtbl->CompareDocumentPosition(This,other,_retval)
#define nsIDOMComment_GetTextContent(This,aTextContent) (This)->lpVtbl->GetTextContent(This,aTextContent)
#define nsIDOMComment_SetTextContent(This,aTextContent) (This)->lpVtbl->SetTextContent(This,aTextContent)
#define nsIDOMComment_LookupPrefix(This,namespaceURI,_retval) (This)->lpVtbl->LookupPrefix(This,namespaceURI,_retval)
#define nsIDOMComment_IsDefaultNamespace(This,namespaceURI,_retval) (This)->lpVtbl->IsDefaultNamespace(This,namespaceURI,_retval)
#define nsIDOMComment_LookupNamespaceURI(This,prefix,_retval) (This)->lpVtbl->LookupNamespaceURI(This,prefix,_retval)
#define nsIDOMComment_IsEqualNode(This,arg,_retval) (This)->lpVtbl->IsEqualNode(This,arg,_retval)
#define nsIDOMComment_SetUserData(This,key,data,_retval) (This)->lpVtbl->SetUserData(This,key,data,_retval)
#define nsIDOMComment_GetUserData(This,key,_retval) (This)->lpVtbl->GetUserData(This,key,_retval)
#define nsIDOMComment_Contains(This,aOther,_retval) (This)->lpVtbl->Contains(This,aOther,_retval)
#define nsIDOMComment_GetMshtmlNode(This,aMshtmlNode) (This)->lpVtbl->GetMshtmlNode(This,aMshtmlNode)
#define nsIDOMComment_SetMshtmlNode(This,aMshtmlNode) (This)->lpVtbl->SetMshtmlNode(This,aMshtmlNode)
/*** nsIDOMCharacterData methods ***/
#define nsIDOMComment_GetData(This,aData) (This)->lpVtbl->GetData(This,aData)
#define nsIDOMComment_SetData(This,aData) (This)->lpVtbl->SetData(This,aData)
#define nsIDOMComment_GetLength(This,aLength) (This)->lpVtbl->GetLength(This,aLength)
#define nsIDOMComment_SubstringData(This,offset,count,_retval) (This)->lpVtbl->SubstringData(This,offset,count,_retval)
#define nsIDOMComment_AppendData(This,arg) (This)->lpVtbl->AppendData(This,arg)
#define nsIDOMComment_InsertData(This,offset,arg) (This)->lpVtbl->InsertData(This,offset,arg)
#define nsIDOMComment_DeleteData(This,offset,count) (This)->lpVtbl->DeleteData(This,offset,count)
#define nsIDOMComment_ReplaceData(This,offset,count,arg) (This)->lpVtbl->ReplaceData(This,offset,count,arg)
#define nsIDOMComment_Remove(This) (This)->lpVtbl->Remove(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMComment_QueryInterface(nsIDOMComment* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMComment_AddRef(nsIDOMComment* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMComment_Release(nsIDOMComment* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMNode methods ***/
static FORCEINLINE nsresult nsIDOMComment_GetNodeName(nsIDOMComment* This,nsAString *aNodeName) {
    return This->lpVtbl->GetNodeName(This,aNodeName);
}
static FORCEINLINE nsresult nsIDOMComment_GetNodeValue(nsIDOMComment* This,nsAString *aNodeValue) {
    return This->lpVtbl->GetNodeValue(This,aNodeValue);
}
static FORCEINLINE nsresult nsIDOMComment_SetNodeValue(nsIDOMComment* This,const nsAString *aNodeValue) {
    return This->lpVtbl->SetNodeValue(This,aNodeValue);
}
static FORCEINLINE nsresult nsIDOMComment_GetNodeType(nsIDOMComment* This,UINT16 *aNodeType) {
    return This->lpVtbl->GetNodeType(This,aNodeType);
}
static FORCEINLINE nsresult nsIDOMComment_GetParentNode(nsIDOMComment* This,nsIDOMNode **aParentNode) {
    return This->lpVtbl->GetParentNode(This,aParentNode);
}
static FORCEINLINE nsresult nsIDOMComment_GetParentElement(nsIDOMComment* This,nsIDOMElement **aParentElement) {
    return This->lpVtbl->GetParentElement(This,aParentElement);
}
static FORCEINLINE nsresult nsIDOMComment_GetChildNodes(nsIDOMComment* This,nsIDOMNodeList **aChildNodes) {
    return This->lpVtbl->GetChildNodes(This,aChildNodes);
}
static FORCEINLINE nsresult nsIDOMComment_GetFirstChild(nsIDOMComment* This,nsIDOMNode **aFirstChild) {
    return This->lpVtbl->GetFirstChild(This,aFirstChild);
}
static FORCEINLINE nsresult nsIDOMComment_GetLastChild(nsIDOMComment* This,nsIDOMNode **aLastChild) {
    return This->lpVtbl->GetLastChild(This,aLastChild);
}
static FORCEINLINE nsresult nsIDOMComment_GetPreviousSibling(nsIDOMComment* This,nsIDOMNode **aPreviousSibling) {
    return This->lpVtbl->GetPreviousSibling(This,aPreviousSibling);
}
static FORCEINLINE nsresult nsIDOMComment_GetNextSibling(nsIDOMComment* This,nsIDOMNode **aNextSibling) {
    return This->lpVtbl->GetNextSibling(This,aNextSibling);
}
static FORCEINLINE nsresult nsIDOMComment_GetOwnerDocument(nsIDOMComment* This,nsIDOMDocument **aOwnerDocument) {
    return This->lpVtbl->GetOwnerDocument(This,aOwnerDocument);
}
static FORCEINLINE nsresult nsIDOMComment_InsertBefore(nsIDOMComment* This,nsIDOMNode *newChild,nsIDOMNode *refChild,nsIDOMNode **_retval) {
    return This->lpVtbl->InsertBefore(This,newChild,refChild,_retval);
}
static FORCEINLINE nsresult nsIDOMComment_ReplaceChild(nsIDOMComment* This,nsIDOMNode *newChild,nsIDOMNode *oldChild,nsIDOMNode **_retval) {
    return This->lpVtbl->ReplaceChild(This,newChild,oldChild,_retval);
}
static FORCEINLINE nsresult nsIDOMComment_RemoveChild(nsIDOMComment* This,nsIDOMNode *oldChild,nsIDOMNode **_retval) {
    return This->lpVtbl->RemoveChild(This,oldChild,_retval);
}
static FORCEINLINE nsresult nsIDOMComment_AppendChild(nsIDOMComment* This,nsIDOMNode *newChild,nsIDOMNode **_retval) {
    return This->lpVtbl->AppendChild(This,newChild,_retval);
}
static FORCEINLINE nsresult nsIDOMComment_HasChildNodes(nsIDOMComment* This,cpp_bool *_retval) {
    return This->lpVtbl->HasChildNodes(This,_retval);
}
static FORCEINLINE nsresult nsIDOMComment_CloneNode(nsIDOMComment* This,cpp_bool deep,UINT8 _argc,nsIDOMNode **_retval) {
    return This->lpVtbl->CloneNode(This,deep,_argc,_retval);
}
static FORCEINLINE nsresult nsIDOMComment_Normalize(nsIDOMComment* This) {
    return This->lpVtbl->Normalize(This);
}
static FORCEINLINE nsresult nsIDOMComment_GetNamespaceURI(nsIDOMComment* This,nsAString *aNamespaceURI) {
    return This->lpVtbl->GetNamespaceURI(This,aNamespaceURI);
}
static FORCEINLINE nsresult nsIDOMComment_GetPrefix(nsIDOMComment* This,nsAString *aPrefix) {
    return This->lpVtbl->GetPrefix(This,aPrefix);
}
static FORCEINLINE nsresult nsIDOMComment_GetLocalName(nsIDOMComment* This,nsAString *aLocalName) {
    return This->lpVtbl->GetLocalName(This,aLocalName);
}
static FORCEINLINE nsresult nsIDOMComment_UnusedPlaceholder(nsIDOMComment* This,cpp_bool *_retval) {
    return This->lpVtbl->UnusedPlaceholder(This,_retval);
}
static FORCEINLINE nsresult nsIDOMComment_GetDOMBaseURI(nsIDOMComment* This,nsAString *aBaseURI) {
    return This->lpVtbl->GetDOMBaseURI(This,aBaseURI);
}
static FORCEINLINE nsresult nsIDOMComment_CompareDocumentPosition(nsIDOMComment* This,nsIDOMNode *other,UINT16 *_retval) {
    return This->lpVtbl->CompareDocumentPosition(This,other,_retval);
}
static FORCEINLINE nsresult nsIDOMComment_GetTextContent(nsIDOMComment* This,nsAString *aTextContent) {
    return This->lpVtbl->GetTextContent(This,aTextContent);
}
static FORCEINLINE nsresult nsIDOMComment_SetTextContent(nsIDOMComment* This,const nsAString *aTextContent) {
    return This->lpVtbl->SetTextContent(This,aTextContent);
}
static FORCEINLINE nsresult nsIDOMComment_LookupPrefix(nsIDOMComment* This,const nsAString *namespaceURI,nsAString *_retval) {
    return This->lpVtbl->LookupPrefix(This,namespaceURI,_retval);
}
static FORCEINLINE nsresult nsIDOMComment_IsDefaultNamespace(nsIDOMComment* This,const nsAString *namespaceURI,cpp_bool *_retval) {
    return This->lpVtbl->IsDefaultNamespace(This,namespaceURI,_retval);
}
static FORCEINLINE nsresult nsIDOMComment_LookupNamespaceURI(nsIDOMComment* This,const nsAString *prefix,nsAString *_retval) {
    return This->lpVtbl->LookupNamespaceURI(This,prefix,_retval);
}
static FORCEINLINE nsresult nsIDOMComment_IsEqualNode(nsIDOMComment* This,nsIDOMNode *arg,cpp_bool *_retval) {
    return This->lpVtbl->IsEqualNode(This,arg,_retval);
}
static FORCEINLINE nsresult nsIDOMComment_SetUserData(nsIDOMComment* This,const nsAString *key,nsIVariant *data,nsIVariant **_retval) {
    return This->lpVtbl->SetUserData(This,key,data,_retval);
}
static FORCEINLINE nsresult nsIDOMComment_GetUserData(nsIDOMComment* This,const nsAString *key,nsIVariant **_retval) {
    return This->lpVtbl->GetUserData(This,key,_retval);
}
static FORCEINLINE nsresult nsIDOMComment_Contains(nsIDOMComment* This,nsIDOMNode *aOther,cpp_bool *_retval) {
    return This->lpVtbl->Contains(This,aOther,_retval);
}
static FORCEINLINE nsresult nsIDOMComment_GetMshtmlNode(nsIDOMComment* This,nsISupports **aMshtmlNode) {
    return This->lpVtbl->GetMshtmlNode(This,aMshtmlNode);
}
static FORCEINLINE nsresult nsIDOMComment_SetMshtmlNode(nsIDOMComment* This,nsISupports *aMshtmlNode) {
    return This->lpVtbl->SetMshtmlNode(This,aMshtmlNode);
}
/*** nsIDOMCharacterData methods ***/
static FORCEINLINE nsresult nsIDOMComment_GetData(nsIDOMComment* This,nsAString *aData) {
    return This->lpVtbl->GetData(This,aData);
}
static FORCEINLINE nsresult nsIDOMComment_SetData(nsIDOMComment* This,const nsAString *aData) {
    return This->lpVtbl->SetData(This,aData);
}
static FORCEINLINE nsresult nsIDOMComment_GetLength(nsIDOMComment* This,UINT32 *aLength) {
    return This->lpVtbl->GetLength(This,aLength);
}
static FORCEINLINE nsresult nsIDOMComment_SubstringData(nsIDOMComment* This,UINT32 offset,UINT32 count,nsAString *_retval) {
    return This->lpVtbl->SubstringData(This,offset,count,_retval);
}
static FORCEINLINE nsresult nsIDOMComment_AppendData(nsIDOMComment* This,const nsAString *arg) {
    return This->lpVtbl->AppendData(This,arg);
}
static FORCEINLINE nsresult nsIDOMComment_InsertData(nsIDOMComment* This,UINT32 offset,const nsAString *arg) {
    return This->lpVtbl->InsertData(This,offset,arg);
}
static FORCEINLINE nsresult nsIDOMComment_DeleteData(nsIDOMComment* This,UINT32 offset,UINT32 count) {
    return This->lpVtbl->DeleteData(This,offset,count);
}
static FORCEINLINE nsresult nsIDOMComment_ReplaceData(nsIDOMComment* This,UINT32 offset,UINT32 count,const nsAString *arg) {
    return This->lpVtbl->ReplaceData(This,offset,count,arg);
}
static FORCEINLINE nsresult nsIDOMComment_Remove(nsIDOMComment* This) {
    return This->lpVtbl->Remove(This);
}
#endif
#endif

#endif


#endif  /* __nsIDOMComment_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMDocumentType interface
 */
#ifndef __nsIDOMDocumentType_INTERFACE_DEFINED__
#define __nsIDOMDocumentType_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMDocumentType, 0xcd7467b9, 0x0f26, 0x4787, 0xa3,0x59, 0x66,0xe8,0x0b,0xa8,0xdb,0x92);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("cd7467b9-0f26-4787-a359-66e80ba8db92")
nsIDOMDocumentType : public nsIDOMNode
{
    virtual nsresult STDMETHODCALLTYPE GetName(
        nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPublicId(
        nsAString *aPublicId) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSystemId(
        nsAString *aSystemId) = 0;

    virtual nsresult STDMETHODCALLTYPE GetInternalSubset(
        nsAString *aInternalSubset) = 0;

    virtual nsresult STDMETHODCALLTYPE MozRemove(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMDocumentType, 0xcd7467b9, 0x0f26, 0x4787, 0xa3,0x59, 0x66,0xe8,0x0b,0xa8,0xdb,0x92)
#endif
#else
typedef struct nsIDOMDocumentTypeVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMDocumentType *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMDocumentType *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMDocumentType *This);

    /*** nsIDOMNode methods ***/
    nsresult (STDMETHODCALLTYPE *GetNodeName)(
        nsIDOMDocumentType *This,
        nsAString *aNodeName);

    nsresult (STDMETHODCALLTYPE *GetNodeValue)(
        nsIDOMDocumentType *This,
        nsAString *aNodeValue);

    nsresult (STDMETHODCALLTYPE *SetNodeValue)(
        nsIDOMDocumentType *This,
        const nsAString *aNodeValue);

    nsresult (STDMETHODCALLTYPE *GetNodeType)(
        nsIDOMDocumentType *This,
        UINT16 *aNodeType);

    nsresult (STDMETHODCALLTYPE *GetParentNode)(
        nsIDOMDocumentType *This,
        nsIDOMNode **aParentNode);

    nsresult (STDMETHODCALLTYPE *GetParentElement)(
        nsIDOMDocumentType *This,
        nsIDOMElement **aParentElement);

    nsresult (STDMETHODCALLTYPE *GetChildNodes)(
        nsIDOMDocumentType *This,
        nsIDOMNodeList **aChildNodes);

    nsresult (STDMETHODCALLTYPE *GetFirstChild)(
        nsIDOMDocumentType *This,
        nsIDOMNode **aFirstChild);

    nsresult (STDMETHODCALLTYPE *GetLastChild)(
        nsIDOMDocumentType *This,
        nsIDOMNode **aLastChild);

    nsresult (STDMETHODCALLTYPE *GetPreviousSibling)(
        nsIDOMDocumentType *This,
        nsIDOMNode **aPreviousSibling);

    nsresult (STDMETHODCALLTYPE *GetNextSibling)(
        nsIDOMDocumentType *This,
        nsIDOMNode **aNextSibling);

    nsresult (STDMETHODCALLTYPE *GetOwnerDocument)(
        nsIDOMDocumentType *This,
        nsIDOMDocument **aOwnerDocument);

    nsresult (STDMETHODCALLTYPE *InsertBefore)(
        nsIDOMDocumentType *This,
        nsIDOMNode *newChild,
        nsIDOMNode *refChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *ReplaceChild)(
        nsIDOMDocumentType *This,
        nsIDOMNode *newChild,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *RemoveChild)(
        nsIDOMDocumentType *This,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *AppendChild)(
        nsIDOMDocumentType *This,
        nsIDOMNode *newChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *HasChildNodes)(
        nsIDOMDocumentType *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CloneNode)(
        nsIDOMDocumentType *This,
        cpp_bool deep,
        UINT8 _argc,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *Normalize)(
        nsIDOMDocumentType *This);

    nsresult (STDMETHODCALLTYPE *GetNamespaceURI)(
        nsIDOMDocumentType *This,
        nsAString *aNamespaceURI);

    nsresult (STDMETHODCALLTYPE *GetPrefix)(
        nsIDOMDocumentType *This,
        nsAString *aPrefix);

    nsresult (STDMETHODCALLTYPE *GetLocalName)(
        nsIDOMDocumentType *This,
        nsAString *aLocalName);

    nsresult (STDMETHODCALLTYPE *UnusedPlaceholder)(
        nsIDOMDocumentType *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetDOMBaseURI)(
        nsIDOMDocumentType *This,
        nsAString *aBaseURI);

    nsresult (STDMETHODCALLTYPE *CompareDocumentPosition)(
        nsIDOMDocumentType *This,
        nsIDOMNode *other,
        UINT16 *_retval);

    nsresult (STDMETHODCALLTYPE *GetTextContent)(
        nsIDOMDocumentType *This,
        nsAString *aTextContent);

    nsresult (STDMETHODCALLTYPE *SetTextContent)(
        nsIDOMDocumentType *This,
        const nsAString *aTextContent);

    nsresult (STDMETHODCALLTYPE *LookupPrefix)(
        nsIDOMDocumentType *This,
        const nsAString *namespaceURI,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *IsDefaultNamespace)(
        nsIDOMDocumentType *This,
        const nsAString *namespaceURI,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *LookupNamespaceURI)(
        nsIDOMDocumentType *This,
        const nsAString *prefix,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *IsEqualNode)(
        nsIDOMDocumentType *This,
        nsIDOMNode *arg,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetUserData)(
        nsIDOMDocumentType *This,
        const nsAString *key,
        nsIVariant *data,
        nsIVariant **_retval);

    nsresult (STDMETHODCALLTYPE *GetUserData)(
        nsIDOMDocumentType *This,
        const nsAString *key,
        nsIVariant **_retval);

    nsresult (STDMETHODCALLTYPE *Contains)(
        nsIDOMDocumentType *This,
        nsIDOMNode *aOther,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetMshtmlNode)(
        nsIDOMDocumentType *This,
        nsISupports **aMshtmlNode);

    nsresult (STDMETHODCALLTYPE *SetMshtmlNode)(
        nsIDOMDocumentType *This,
        nsISupports *aMshtmlNode);

    /*** nsIDOMDocumentType methods ***/
    nsresult (STDMETHODCALLTYPE *GetName)(
        nsIDOMDocumentType *This,
        nsAString *aName);

    nsresult (STDMETHODCALLTYPE *GetPublicId)(
        nsIDOMDocumentType *This,
        nsAString *aPublicId);

    nsresult (STDMETHODCALLTYPE *GetSystemId)(
        nsIDOMDocumentType *This,
        nsAString *aSystemId);

    nsresult (STDMETHODCALLTYPE *GetInternalSubset)(
        nsIDOMDocumentType *This,
        nsAString *aInternalSubset);

    nsresult (STDMETHODCALLTYPE *MozRemove)(
        nsIDOMDocumentType *This);

    END_INTERFACE
} nsIDOMDocumentTypeVtbl;

interface nsIDOMDocumentType {
    CONST_VTBL nsIDOMDocumentTypeVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMDocumentType_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMDocumentType_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMDocumentType_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMNode methods ***/
#define nsIDOMDocumentType_GetNodeName(This,aNodeName) (This)->lpVtbl->GetNodeName(This,aNodeName)
#define nsIDOMDocumentType_GetNodeValue(This,aNodeValue) (This)->lpVtbl->GetNodeValue(This,aNodeValue)
#define nsIDOMDocumentType_SetNodeValue(This,aNodeValue) (This)->lpVtbl->SetNodeValue(This,aNodeValue)
#define nsIDOMDocumentType_GetNodeType(This,aNodeType) (This)->lpVtbl->GetNodeType(This,aNodeType)
#define nsIDOMDocumentType_GetParentNode(This,aParentNode) (This)->lpVtbl->GetParentNode(This,aParentNode)
#define nsIDOMDocumentType_GetParentElement(This,aParentElement) (This)->lpVtbl->GetParentElement(This,aParentElement)
#define nsIDOMDocumentType_GetChildNodes(This,aChildNodes) (This)->lpVtbl->GetChildNodes(This,aChildNodes)
#define nsIDOMDocumentType_GetFirstChild(This,aFirstChild) (This)->lpVtbl->GetFirstChild(This,aFirstChild)
#define nsIDOMDocumentType_GetLastChild(This,aLastChild) (This)->lpVtbl->GetLastChild(This,aLastChild)
#define nsIDOMDocumentType_GetPreviousSibling(This,aPreviousSibling) (This)->lpVtbl->GetPreviousSibling(This,aPreviousSibling)
#define nsIDOMDocumentType_GetNextSibling(This,aNextSibling) (This)->lpVtbl->GetNextSibling(This,aNextSibling)
#define nsIDOMDocumentType_GetOwnerDocument(This,aOwnerDocument) (This)->lpVtbl->GetOwnerDocument(This,aOwnerDocument)
#define nsIDOMDocumentType_InsertBefore(This,newChild,refChild,_retval) (This)->lpVtbl->InsertBefore(This,newChild,refChild,_retval)
#define nsIDOMDocumentType_ReplaceChild(This,newChild,oldChild,_retval) (This)->lpVtbl->ReplaceChild(This,newChild,oldChild,_retval)
#define nsIDOMDocumentType_RemoveChild(This,oldChild,_retval) (This)->lpVtbl->RemoveChild(This,oldChild,_retval)
#define nsIDOMDocumentType_AppendChild(This,newChild,_retval) (This)->lpVtbl->AppendChild(This,newChild,_retval)
#define nsIDOMDocumentType_HasChildNodes(This,_retval) (This)->lpVtbl->HasChildNodes(This,_retval)
#define nsIDOMDocumentType_CloneNode(This,deep,_argc,_retval) (This)->lpVtbl->CloneNode(This,deep,_argc,_retval)
#define nsIDOMDocumentType_Normalize(This) (This)->lpVtbl->Normalize(This)
#define nsIDOMDocumentType_GetNamespaceURI(This,aNamespaceURI) (This)->lpVtbl->GetNamespaceURI(This,aNamespaceURI)
#define nsIDOMDocumentType_GetPrefix(This,aPrefix) (This)->lpVtbl->GetPrefix(This,aPrefix)
#define nsIDOMDocumentType_GetLocalName(This,aLocalName) (This)->lpVtbl->GetLocalName(This,aLocalName)
#define nsIDOMDocumentType_UnusedPlaceholder(This,_retval) (This)->lpVtbl->UnusedPlaceholder(This,_retval)
#define nsIDOMDocumentType_GetDOMBaseURI(This,aBaseURI) (This)->lpVtbl->GetDOMBaseURI(This,aBaseURI)
#define nsIDOMDocumentType_CompareDocumentPosition(This,other,_retval) (This)->lpVtbl->CompareDocumentPosition(This,other,_retval)
#define nsIDOMDocumentType_GetTextContent(This,aTextContent) (This)->lpVtbl->GetTextContent(This,aTextContent)
#define nsIDOMDocumentType_SetTextContent(This,aTextContent) (This)->lpVtbl->SetTextContent(This,aTextContent)
#define nsIDOMDocumentType_LookupPrefix(This,namespaceURI,_retval) (This)->lpVtbl->LookupPrefix(This,namespaceURI,_retval)
#define nsIDOMDocumentType_IsDefaultNamespace(This,namespaceURI,_retval) (This)->lpVtbl->IsDefaultNamespace(This,namespaceURI,_retval)
#define nsIDOMDocumentType_LookupNamespaceURI(This,prefix,_retval) (This)->lpVtbl->LookupNamespaceURI(This,prefix,_retval)
#define nsIDOMDocumentType_IsEqualNode(This,arg,_retval) (This)->lpVtbl->IsEqualNode(This,arg,_retval)
#define nsIDOMDocumentType_SetUserData(This,key,data,_retval) (This)->lpVtbl->SetUserData(This,key,data,_retval)
#define nsIDOMDocumentType_GetUserData(This,key,_retval) (This)->lpVtbl->GetUserData(This,key,_retval)
#define nsIDOMDocumentType_Contains(This,aOther,_retval) (This)->lpVtbl->Contains(This,aOther,_retval)
#define nsIDOMDocumentType_GetMshtmlNode(This,aMshtmlNode) (This)->lpVtbl->GetMshtmlNode(This,aMshtmlNode)
#define nsIDOMDocumentType_SetMshtmlNode(This,aMshtmlNode) (This)->lpVtbl->SetMshtmlNode(This,aMshtmlNode)
/*** nsIDOMDocumentType methods ***/
#define nsIDOMDocumentType_GetName(This,aName) (This)->lpVtbl->GetName(This,aName)
#define nsIDOMDocumentType_GetPublicId(This,aPublicId) (This)->lpVtbl->GetPublicId(This,aPublicId)
#define nsIDOMDocumentType_GetSystemId(This,aSystemId) (This)->lpVtbl->GetSystemId(This,aSystemId)
#define nsIDOMDocumentType_GetInternalSubset(This,aInternalSubset) (This)->lpVtbl->GetInternalSubset(This,aInternalSubset)
#define nsIDOMDocumentType_MozRemove(This) (This)->lpVtbl->MozRemove(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMDocumentType_QueryInterface(nsIDOMDocumentType* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMDocumentType_AddRef(nsIDOMDocumentType* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMDocumentType_Release(nsIDOMDocumentType* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMNode methods ***/
static FORCEINLINE nsresult nsIDOMDocumentType_GetNodeName(nsIDOMDocumentType* This,nsAString *aNodeName) {
    return This->lpVtbl->GetNodeName(This,aNodeName);
}
static FORCEINLINE nsresult nsIDOMDocumentType_GetNodeValue(nsIDOMDocumentType* This,nsAString *aNodeValue) {
    return This->lpVtbl->GetNodeValue(This,aNodeValue);
}
static FORCEINLINE nsresult nsIDOMDocumentType_SetNodeValue(nsIDOMDocumentType* This,const nsAString *aNodeValue) {
    return This->lpVtbl->SetNodeValue(This,aNodeValue);
}
static FORCEINLINE nsresult nsIDOMDocumentType_GetNodeType(nsIDOMDocumentType* This,UINT16 *aNodeType) {
    return This->lpVtbl->GetNodeType(This,aNodeType);
}
static FORCEINLINE nsresult nsIDOMDocumentType_GetParentNode(nsIDOMDocumentType* This,nsIDOMNode **aParentNode) {
    return This->lpVtbl->GetParentNode(This,aParentNode);
}
static FORCEINLINE nsresult nsIDOMDocumentType_GetParentElement(nsIDOMDocumentType* This,nsIDOMElement **aParentElement) {
    return This->lpVtbl->GetParentElement(This,aParentElement);
}
static FORCEINLINE nsresult nsIDOMDocumentType_GetChildNodes(nsIDOMDocumentType* This,nsIDOMNodeList **aChildNodes) {
    return This->lpVtbl->GetChildNodes(This,aChildNodes);
}
static FORCEINLINE nsresult nsIDOMDocumentType_GetFirstChild(nsIDOMDocumentType* This,nsIDOMNode **aFirstChild) {
    return This->lpVtbl->GetFirstChild(This,aFirstChild);
}
static FORCEINLINE nsresult nsIDOMDocumentType_GetLastChild(nsIDOMDocumentType* This,nsIDOMNode **aLastChild) {
    return This->lpVtbl->GetLastChild(This,aLastChild);
}
static FORCEINLINE nsresult nsIDOMDocumentType_GetPreviousSibling(nsIDOMDocumentType* This,nsIDOMNode **aPreviousSibling) {
    return This->lpVtbl->GetPreviousSibling(This,aPreviousSibling);
}
static FORCEINLINE nsresult nsIDOMDocumentType_GetNextSibling(nsIDOMDocumentType* This,nsIDOMNode **aNextSibling) {
    return This->lpVtbl->GetNextSibling(This,aNextSibling);
}
static FORCEINLINE nsresult nsIDOMDocumentType_GetOwnerDocument(nsIDOMDocumentType* This,nsIDOMDocument **aOwnerDocument) {
    return This->lpVtbl->GetOwnerDocument(This,aOwnerDocument);
}
static FORCEINLINE nsresult nsIDOMDocumentType_InsertBefore(nsIDOMDocumentType* This,nsIDOMNode *newChild,nsIDOMNode *refChild,nsIDOMNode **_retval) {
    return This->lpVtbl->InsertBefore(This,newChild,refChild,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentType_ReplaceChild(nsIDOMDocumentType* This,nsIDOMNode *newChild,nsIDOMNode *oldChild,nsIDOMNode **_retval) {
    return This->lpVtbl->ReplaceChild(This,newChild,oldChild,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentType_RemoveChild(nsIDOMDocumentType* This,nsIDOMNode *oldChild,nsIDOMNode **_retval) {
    return This->lpVtbl->RemoveChild(This,oldChild,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentType_AppendChild(nsIDOMDocumentType* This,nsIDOMNode *newChild,nsIDOMNode **_retval) {
    return This->lpVtbl->AppendChild(This,newChild,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentType_HasChildNodes(nsIDOMDocumentType* This,cpp_bool *_retval) {
    return This->lpVtbl->HasChildNodes(This,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentType_CloneNode(nsIDOMDocumentType* This,cpp_bool deep,UINT8 _argc,nsIDOMNode **_retval) {
    return This->lpVtbl->CloneNode(This,deep,_argc,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentType_Normalize(nsIDOMDocumentType* This) {
    return This->lpVtbl->Normalize(This);
}
static FORCEINLINE nsresult nsIDOMDocumentType_GetNamespaceURI(nsIDOMDocumentType* This,nsAString *aNamespaceURI) {
    return This->lpVtbl->GetNamespaceURI(This,aNamespaceURI);
}
static FORCEINLINE nsresult nsIDOMDocumentType_GetPrefix(nsIDOMDocumentType* This,nsAString *aPrefix) {
    return This->lpVtbl->GetPrefix(This,aPrefix);
}
static FORCEINLINE nsresult nsIDOMDocumentType_GetLocalName(nsIDOMDocumentType* This,nsAString *aLocalName) {
    return This->lpVtbl->GetLocalName(This,aLocalName);
}
static FORCEINLINE nsresult nsIDOMDocumentType_UnusedPlaceholder(nsIDOMDocumentType* This,cpp_bool *_retval) {
    return This->lpVtbl->UnusedPlaceholder(This,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentType_GetDOMBaseURI(nsIDOMDocumentType* This,nsAString *aBaseURI) {
    return This->lpVtbl->GetDOMBaseURI(This,aBaseURI);
}
static FORCEINLINE nsresult nsIDOMDocumentType_CompareDocumentPosition(nsIDOMDocumentType* This,nsIDOMNode *other,UINT16 *_retval) {
    return This->lpVtbl->CompareDocumentPosition(This,other,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentType_GetTextContent(nsIDOMDocumentType* This,nsAString *aTextContent) {
    return This->lpVtbl->GetTextContent(This,aTextContent);
}
static FORCEINLINE nsresult nsIDOMDocumentType_SetTextContent(nsIDOMDocumentType* This,const nsAString *aTextContent) {
    return This->lpVtbl->SetTextContent(This,aTextContent);
}
static FORCEINLINE nsresult nsIDOMDocumentType_LookupPrefix(nsIDOMDocumentType* This,const nsAString *namespaceURI,nsAString *_retval) {
    return This->lpVtbl->LookupPrefix(This,namespaceURI,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentType_IsDefaultNamespace(nsIDOMDocumentType* This,const nsAString *namespaceURI,cpp_bool *_retval) {
    return This->lpVtbl->IsDefaultNamespace(This,namespaceURI,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentType_LookupNamespaceURI(nsIDOMDocumentType* This,const nsAString *prefix,nsAString *_retval) {
    return This->lpVtbl->LookupNamespaceURI(This,prefix,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentType_IsEqualNode(nsIDOMDocumentType* This,nsIDOMNode *arg,cpp_bool *_retval) {
    return This->lpVtbl->IsEqualNode(This,arg,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentType_SetUserData(nsIDOMDocumentType* This,const nsAString *key,nsIVariant *data,nsIVariant **_retval) {
    return This->lpVtbl->SetUserData(This,key,data,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentType_GetUserData(nsIDOMDocumentType* This,const nsAString *key,nsIVariant **_retval) {
    return This->lpVtbl->GetUserData(This,key,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentType_Contains(nsIDOMDocumentType* This,nsIDOMNode *aOther,cpp_bool *_retval) {
    return This->lpVtbl->Contains(This,aOther,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentType_GetMshtmlNode(nsIDOMDocumentType* This,nsISupports **aMshtmlNode) {
    return This->lpVtbl->GetMshtmlNode(This,aMshtmlNode);
}
static FORCEINLINE nsresult nsIDOMDocumentType_SetMshtmlNode(nsIDOMDocumentType* This,nsISupports *aMshtmlNode) {
    return This->lpVtbl->SetMshtmlNode(This,aMshtmlNode);
}
/*** nsIDOMDocumentType methods ***/
static FORCEINLINE nsresult nsIDOMDocumentType_GetName(nsIDOMDocumentType* This,nsAString *aName) {
    return This->lpVtbl->GetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMDocumentType_GetPublicId(nsIDOMDocumentType* This,nsAString *aPublicId) {
    return This->lpVtbl->GetPublicId(This,aPublicId);
}
static FORCEINLINE nsresult nsIDOMDocumentType_GetSystemId(nsIDOMDocumentType* This,nsAString *aSystemId) {
    return This->lpVtbl->GetSystemId(This,aSystemId);
}
static FORCEINLINE nsresult nsIDOMDocumentType_GetInternalSubset(nsIDOMDocumentType* This,nsAString *aInternalSubset) {
    return This->lpVtbl->GetInternalSubset(This,aInternalSubset);
}
static FORCEINLINE nsresult nsIDOMDocumentType_MozRemove(nsIDOMDocumentType* This) {
    return This->lpVtbl->MozRemove(This);
}
#endif
#endif

#endif


#endif  /* __nsIDOMDocumentType_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMDocumentFragment interface
 */
#ifndef __nsIDOMDocumentFragment_INTERFACE_DEFINED__
#define __nsIDOMDocumentFragment_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMDocumentFragment, 0x48eb8d72, 0x95bb, 0x402e, 0xa8,0xfc, 0xf2,0xb1,0x87,0xab,0xcb,0xdb);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("48eb8d72-95bb-402e-a8fc-f2b187abcbdb")
nsIDOMDocumentFragment : public nsIDOMNode
{
    virtual nsresult STDMETHODCALLTYPE QuerySelector(
        const nsAString *selectors,
        nsIDOMElement **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE QuerySelectorAll(
        const nsAString *selectors,
        nsIDOMNodeList **_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMDocumentFragment, 0x48eb8d72, 0x95bb, 0x402e, 0xa8,0xfc, 0xf2,0xb1,0x87,0xab,0xcb,0xdb)
#endif
#else
typedef struct nsIDOMDocumentFragmentVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMDocumentFragment *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMDocumentFragment *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMDocumentFragment *This);

    /*** nsIDOMNode methods ***/
    nsresult (STDMETHODCALLTYPE *GetNodeName)(
        nsIDOMDocumentFragment *This,
        nsAString *aNodeName);

    nsresult (STDMETHODCALLTYPE *GetNodeValue)(
        nsIDOMDocumentFragment *This,
        nsAString *aNodeValue);

    nsresult (STDMETHODCALLTYPE *SetNodeValue)(
        nsIDOMDocumentFragment *This,
        const nsAString *aNodeValue);

    nsresult (STDMETHODCALLTYPE *GetNodeType)(
        nsIDOMDocumentFragment *This,
        UINT16 *aNodeType);

    nsresult (STDMETHODCALLTYPE *GetParentNode)(
        nsIDOMDocumentFragment *This,
        nsIDOMNode **aParentNode);

    nsresult (STDMETHODCALLTYPE *GetParentElement)(
        nsIDOMDocumentFragment *This,
        nsIDOMElement **aParentElement);

    nsresult (STDMETHODCALLTYPE *GetChildNodes)(
        nsIDOMDocumentFragment *This,
        nsIDOMNodeList **aChildNodes);

    nsresult (STDMETHODCALLTYPE *GetFirstChild)(
        nsIDOMDocumentFragment *This,
        nsIDOMNode **aFirstChild);

    nsresult (STDMETHODCALLTYPE *GetLastChild)(
        nsIDOMDocumentFragment *This,
        nsIDOMNode **aLastChild);

    nsresult (STDMETHODCALLTYPE *GetPreviousSibling)(
        nsIDOMDocumentFragment *This,
        nsIDOMNode **aPreviousSibling);

    nsresult (STDMETHODCALLTYPE *GetNextSibling)(
        nsIDOMDocumentFragment *This,
        nsIDOMNode **aNextSibling);

    nsresult (STDMETHODCALLTYPE *GetOwnerDocument)(
        nsIDOMDocumentFragment *This,
        nsIDOMDocument **aOwnerDocument);

    nsresult (STDMETHODCALLTYPE *InsertBefore)(
        nsIDOMDocumentFragment *This,
        nsIDOMNode *newChild,
        nsIDOMNode *refChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *ReplaceChild)(
        nsIDOMDocumentFragment *This,
        nsIDOMNode *newChild,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *RemoveChild)(
        nsIDOMDocumentFragment *This,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *AppendChild)(
        nsIDOMDocumentFragment *This,
        nsIDOMNode *newChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *HasChildNodes)(
        nsIDOMDocumentFragment *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CloneNode)(
        nsIDOMDocumentFragment *This,
        cpp_bool deep,
        UINT8 _argc,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *Normalize)(
        nsIDOMDocumentFragment *This);

    nsresult (STDMETHODCALLTYPE *GetNamespaceURI)(
        nsIDOMDocumentFragment *This,
        nsAString *aNamespaceURI);

    nsresult (STDMETHODCALLTYPE *GetPrefix)(
        nsIDOMDocumentFragment *This,
        nsAString *aPrefix);

    nsresult (STDMETHODCALLTYPE *GetLocalName)(
        nsIDOMDocumentFragment *This,
        nsAString *aLocalName);

    nsresult (STDMETHODCALLTYPE *UnusedPlaceholder)(
        nsIDOMDocumentFragment *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetDOMBaseURI)(
        nsIDOMDocumentFragment *This,
        nsAString *aBaseURI);

    nsresult (STDMETHODCALLTYPE *CompareDocumentPosition)(
        nsIDOMDocumentFragment *This,
        nsIDOMNode *other,
        UINT16 *_retval);

    nsresult (STDMETHODCALLTYPE *GetTextContent)(
        nsIDOMDocumentFragment *This,
        nsAString *aTextContent);

    nsresult (STDMETHODCALLTYPE *SetTextContent)(
        nsIDOMDocumentFragment *This,
        const nsAString *aTextContent);

    nsresult (STDMETHODCALLTYPE *LookupPrefix)(
        nsIDOMDocumentFragment *This,
        const nsAString *namespaceURI,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *IsDefaultNamespace)(
        nsIDOMDocumentFragment *This,
        const nsAString *namespaceURI,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *LookupNamespaceURI)(
        nsIDOMDocumentFragment *This,
        const nsAString *prefix,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *IsEqualNode)(
        nsIDOMDocumentFragment *This,
        nsIDOMNode *arg,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetUserData)(
        nsIDOMDocumentFragment *This,
        const nsAString *key,
        nsIVariant *data,
        nsIVariant **_retval);

    nsresult (STDMETHODCALLTYPE *GetUserData)(
        nsIDOMDocumentFragment *This,
        const nsAString *key,
        nsIVariant **_retval);

    nsresult (STDMETHODCALLTYPE *Contains)(
        nsIDOMDocumentFragment *This,
        nsIDOMNode *aOther,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetMshtmlNode)(
        nsIDOMDocumentFragment *This,
        nsISupports **aMshtmlNode);

    nsresult (STDMETHODCALLTYPE *SetMshtmlNode)(
        nsIDOMDocumentFragment *This,
        nsISupports *aMshtmlNode);

    /*** nsIDOMDocumentFragment methods ***/
    nsresult (STDMETHODCALLTYPE *QuerySelector)(
        nsIDOMDocumentFragment *This,
        const nsAString *selectors,
        nsIDOMElement **_retval);

    nsresult (STDMETHODCALLTYPE *QuerySelectorAll)(
        nsIDOMDocumentFragment *This,
        const nsAString *selectors,
        nsIDOMNodeList **_retval);

    END_INTERFACE
} nsIDOMDocumentFragmentVtbl;

interface nsIDOMDocumentFragment {
    CONST_VTBL nsIDOMDocumentFragmentVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMDocumentFragment_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMDocumentFragment_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMDocumentFragment_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMNode methods ***/
#define nsIDOMDocumentFragment_GetNodeName(This,aNodeName) (This)->lpVtbl->GetNodeName(This,aNodeName)
#define nsIDOMDocumentFragment_GetNodeValue(This,aNodeValue) (This)->lpVtbl->GetNodeValue(This,aNodeValue)
#define nsIDOMDocumentFragment_SetNodeValue(This,aNodeValue) (This)->lpVtbl->SetNodeValue(This,aNodeValue)
#define nsIDOMDocumentFragment_GetNodeType(This,aNodeType) (This)->lpVtbl->GetNodeType(This,aNodeType)
#define nsIDOMDocumentFragment_GetParentNode(This,aParentNode) (This)->lpVtbl->GetParentNode(This,aParentNode)
#define nsIDOMDocumentFragment_GetParentElement(This,aParentElement) (This)->lpVtbl->GetParentElement(This,aParentElement)
#define nsIDOMDocumentFragment_GetChildNodes(This,aChildNodes) (This)->lpVtbl->GetChildNodes(This,aChildNodes)
#define nsIDOMDocumentFragment_GetFirstChild(This,aFirstChild) (This)->lpVtbl->GetFirstChild(This,aFirstChild)
#define nsIDOMDocumentFragment_GetLastChild(This,aLastChild) (This)->lpVtbl->GetLastChild(This,aLastChild)
#define nsIDOMDocumentFragment_GetPreviousSibling(This,aPreviousSibling) (This)->lpVtbl->GetPreviousSibling(This,aPreviousSibling)
#define nsIDOMDocumentFragment_GetNextSibling(This,aNextSibling) (This)->lpVtbl->GetNextSibling(This,aNextSibling)
#define nsIDOMDocumentFragment_GetOwnerDocument(This,aOwnerDocument) (This)->lpVtbl->GetOwnerDocument(This,aOwnerDocument)
#define nsIDOMDocumentFragment_InsertBefore(This,newChild,refChild,_retval) (This)->lpVtbl->InsertBefore(This,newChild,refChild,_retval)
#define nsIDOMDocumentFragment_ReplaceChild(This,newChild,oldChild,_retval) (This)->lpVtbl->ReplaceChild(This,newChild,oldChild,_retval)
#define nsIDOMDocumentFragment_RemoveChild(This,oldChild,_retval) (This)->lpVtbl->RemoveChild(This,oldChild,_retval)
#define nsIDOMDocumentFragment_AppendChild(This,newChild,_retval) (This)->lpVtbl->AppendChild(This,newChild,_retval)
#define nsIDOMDocumentFragment_HasChildNodes(This,_retval) (This)->lpVtbl->HasChildNodes(This,_retval)
#define nsIDOMDocumentFragment_CloneNode(This,deep,_argc,_retval) (This)->lpVtbl->CloneNode(This,deep,_argc,_retval)
#define nsIDOMDocumentFragment_Normalize(This) (This)->lpVtbl->Normalize(This)
#define nsIDOMDocumentFragment_GetNamespaceURI(This,aNamespaceURI) (This)->lpVtbl->GetNamespaceURI(This,aNamespaceURI)
#define nsIDOMDocumentFragment_GetPrefix(This,aPrefix) (This)->lpVtbl->GetPrefix(This,aPrefix)
#define nsIDOMDocumentFragment_GetLocalName(This,aLocalName) (This)->lpVtbl->GetLocalName(This,aLocalName)
#define nsIDOMDocumentFragment_UnusedPlaceholder(This,_retval) (This)->lpVtbl->UnusedPlaceholder(This,_retval)
#define nsIDOMDocumentFragment_GetDOMBaseURI(This,aBaseURI) (This)->lpVtbl->GetDOMBaseURI(This,aBaseURI)
#define nsIDOMDocumentFragment_CompareDocumentPosition(This,other,_retval) (This)->lpVtbl->CompareDocumentPosition(This,other,_retval)
#define nsIDOMDocumentFragment_GetTextContent(This,aTextContent) (This)->lpVtbl->GetTextContent(This,aTextContent)
#define nsIDOMDocumentFragment_SetTextContent(This,aTextContent) (This)->lpVtbl->SetTextContent(This,aTextContent)
#define nsIDOMDocumentFragment_LookupPrefix(This,namespaceURI,_retval) (This)->lpVtbl->LookupPrefix(This,namespaceURI,_retval)
#define nsIDOMDocumentFragment_IsDefaultNamespace(This,namespaceURI,_retval) (This)->lpVtbl->IsDefaultNamespace(This,namespaceURI,_retval)
#define nsIDOMDocumentFragment_LookupNamespaceURI(This,prefix,_retval) (This)->lpVtbl->LookupNamespaceURI(This,prefix,_retval)
#define nsIDOMDocumentFragment_IsEqualNode(This,arg,_retval) (This)->lpVtbl->IsEqualNode(This,arg,_retval)
#define nsIDOMDocumentFragment_SetUserData(This,key,data,_retval) (This)->lpVtbl->SetUserData(This,key,data,_retval)
#define nsIDOMDocumentFragment_GetUserData(This,key,_retval) (This)->lpVtbl->GetUserData(This,key,_retval)
#define nsIDOMDocumentFragment_Contains(This,aOther,_retval) (This)->lpVtbl->Contains(This,aOther,_retval)
#define nsIDOMDocumentFragment_GetMshtmlNode(This,aMshtmlNode) (This)->lpVtbl->GetMshtmlNode(This,aMshtmlNode)
#define nsIDOMDocumentFragment_SetMshtmlNode(This,aMshtmlNode) (This)->lpVtbl->SetMshtmlNode(This,aMshtmlNode)
/*** nsIDOMDocumentFragment methods ***/
#define nsIDOMDocumentFragment_QuerySelector(This,selectors,_retval) (This)->lpVtbl->QuerySelector(This,selectors,_retval)
#define nsIDOMDocumentFragment_QuerySelectorAll(This,selectors,_retval) (This)->lpVtbl->QuerySelectorAll(This,selectors,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMDocumentFragment_QueryInterface(nsIDOMDocumentFragment* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMDocumentFragment_AddRef(nsIDOMDocumentFragment* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMDocumentFragment_Release(nsIDOMDocumentFragment* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMNode methods ***/
static FORCEINLINE nsresult nsIDOMDocumentFragment_GetNodeName(nsIDOMDocumentFragment* This,nsAString *aNodeName) {
    return This->lpVtbl->GetNodeName(This,aNodeName);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_GetNodeValue(nsIDOMDocumentFragment* This,nsAString *aNodeValue) {
    return This->lpVtbl->GetNodeValue(This,aNodeValue);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_SetNodeValue(nsIDOMDocumentFragment* This,const nsAString *aNodeValue) {
    return This->lpVtbl->SetNodeValue(This,aNodeValue);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_GetNodeType(nsIDOMDocumentFragment* This,UINT16 *aNodeType) {
    return This->lpVtbl->GetNodeType(This,aNodeType);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_GetParentNode(nsIDOMDocumentFragment* This,nsIDOMNode **aParentNode) {
    return This->lpVtbl->GetParentNode(This,aParentNode);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_GetParentElement(nsIDOMDocumentFragment* This,nsIDOMElement **aParentElement) {
    return This->lpVtbl->GetParentElement(This,aParentElement);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_GetChildNodes(nsIDOMDocumentFragment* This,nsIDOMNodeList **aChildNodes) {
    return This->lpVtbl->GetChildNodes(This,aChildNodes);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_GetFirstChild(nsIDOMDocumentFragment* This,nsIDOMNode **aFirstChild) {
    return This->lpVtbl->GetFirstChild(This,aFirstChild);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_GetLastChild(nsIDOMDocumentFragment* This,nsIDOMNode **aLastChild) {
    return This->lpVtbl->GetLastChild(This,aLastChild);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_GetPreviousSibling(nsIDOMDocumentFragment* This,nsIDOMNode **aPreviousSibling) {
    return This->lpVtbl->GetPreviousSibling(This,aPreviousSibling);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_GetNextSibling(nsIDOMDocumentFragment* This,nsIDOMNode **aNextSibling) {
    return This->lpVtbl->GetNextSibling(This,aNextSibling);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_GetOwnerDocument(nsIDOMDocumentFragment* This,nsIDOMDocument **aOwnerDocument) {
    return This->lpVtbl->GetOwnerDocument(This,aOwnerDocument);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_InsertBefore(nsIDOMDocumentFragment* This,nsIDOMNode *newChild,nsIDOMNode *refChild,nsIDOMNode **_retval) {
    return This->lpVtbl->InsertBefore(This,newChild,refChild,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_ReplaceChild(nsIDOMDocumentFragment* This,nsIDOMNode *newChild,nsIDOMNode *oldChild,nsIDOMNode **_retval) {
    return This->lpVtbl->ReplaceChild(This,newChild,oldChild,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_RemoveChild(nsIDOMDocumentFragment* This,nsIDOMNode *oldChild,nsIDOMNode **_retval) {
    return This->lpVtbl->RemoveChild(This,oldChild,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_AppendChild(nsIDOMDocumentFragment* This,nsIDOMNode *newChild,nsIDOMNode **_retval) {
    return This->lpVtbl->AppendChild(This,newChild,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_HasChildNodes(nsIDOMDocumentFragment* This,cpp_bool *_retval) {
    return This->lpVtbl->HasChildNodes(This,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_CloneNode(nsIDOMDocumentFragment* This,cpp_bool deep,UINT8 _argc,nsIDOMNode **_retval) {
    return This->lpVtbl->CloneNode(This,deep,_argc,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_Normalize(nsIDOMDocumentFragment* This) {
    return This->lpVtbl->Normalize(This);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_GetNamespaceURI(nsIDOMDocumentFragment* This,nsAString *aNamespaceURI) {
    return This->lpVtbl->GetNamespaceURI(This,aNamespaceURI);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_GetPrefix(nsIDOMDocumentFragment* This,nsAString *aPrefix) {
    return This->lpVtbl->GetPrefix(This,aPrefix);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_GetLocalName(nsIDOMDocumentFragment* This,nsAString *aLocalName) {
    return This->lpVtbl->GetLocalName(This,aLocalName);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_UnusedPlaceholder(nsIDOMDocumentFragment* This,cpp_bool *_retval) {
    return This->lpVtbl->UnusedPlaceholder(This,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_GetDOMBaseURI(nsIDOMDocumentFragment* This,nsAString *aBaseURI) {
    return This->lpVtbl->GetDOMBaseURI(This,aBaseURI);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_CompareDocumentPosition(nsIDOMDocumentFragment* This,nsIDOMNode *other,UINT16 *_retval) {
    return This->lpVtbl->CompareDocumentPosition(This,other,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_GetTextContent(nsIDOMDocumentFragment* This,nsAString *aTextContent) {
    return This->lpVtbl->GetTextContent(This,aTextContent);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_SetTextContent(nsIDOMDocumentFragment* This,const nsAString *aTextContent) {
    return This->lpVtbl->SetTextContent(This,aTextContent);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_LookupPrefix(nsIDOMDocumentFragment* This,const nsAString *namespaceURI,nsAString *_retval) {
    return This->lpVtbl->LookupPrefix(This,namespaceURI,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_IsDefaultNamespace(nsIDOMDocumentFragment* This,const nsAString *namespaceURI,cpp_bool *_retval) {
    return This->lpVtbl->IsDefaultNamespace(This,namespaceURI,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_LookupNamespaceURI(nsIDOMDocumentFragment* This,const nsAString *prefix,nsAString *_retval) {
    return This->lpVtbl->LookupNamespaceURI(This,prefix,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_IsEqualNode(nsIDOMDocumentFragment* This,nsIDOMNode *arg,cpp_bool *_retval) {
    return This->lpVtbl->IsEqualNode(This,arg,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_SetUserData(nsIDOMDocumentFragment* This,const nsAString *key,nsIVariant *data,nsIVariant **_retval) {
    return This->lpVtbl->SetUserData(This,key,data,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_GetUserData(nsIDOMDocumentFragment* This,const nsAString *key,nsIVariant **_retval) {
    return This->lpVtbl->GetUserData(This,key,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_Contains(nsIDOMDocumentFragment* This,nsIDOMNode *aOther,cpp_bool *_retval) {
    return This->lpVtbl->Contains(This,aOther,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_GetMshtmlNode(nsIDOMDocumentFragment* This,nsISupports **aMshtmlNode) {
    return This->lpVtbl->GetMshtmlNode(This,aMshtmlNode);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_SetMshtmlNode(nsIDOMDocumentFragment* This,nsISupports *aMshtmlNode) {
    return This->lpVtbl->SetMshtmlNode(This,aMshtmlNode);
}
/*** nsIDOMDocumentFragment methods ***/
static FORCEINLINE nsresult nsIDOMDocumentFragment_QuerySelector(nsIDOMDocumentFragment* This,const nsAString *selectors,nsIDOMElement **_retval) {
    return This->lpVtbl->QuerySelector(This,selectors,_retval);
}
static FORCEINLINE nsresult nsIDOMDocumentFragment_QuerySelectorAll(nsIDOMDocumentFragment* This,const nsAString *selectors,nsIDOMNodeList **_retval) {
    return This->lpVtbl->QuerySelectorAll(This,selectors,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIDOMDocumentFragment_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMDocument interface
 */
#ifndef __nsIDOMDocument_INTERFACE_DEFINED__
#define __nsIDOMDocument_INTERFACE_DEFINED__

#undef CreateEvent
DEFINE_GUID(IID_nsIDOMDocument, 0xb15fa0f4, 0x97c1, 0x4388, 0xaf,0x62, 0x2c,0xef,0xf7,0xa8,0x9b,0xdf);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("b15fa0f4-97c1-4388-af62-2ceff7a89bdf")
nsIDOMDocument : public nsIDOMNode
{
    virtual nsresult STDMETHODCALLTYPE GetDoctype(
        nsIDOMDocumentType **aDoctype) = 0;

    virtual nsresult STDMETHODCALLTYPE GetImplementation(
        nsIDOMDOMImplementation **aImplementation) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDocumentElement(
        nsIDOMElement **aDocumentElement) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateElement(
        const nsAString *tagName,
        nsIDOMElement **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateDocumentFragment(
        nsIDOMDocumentFragment **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateTextNode(
        const nsAString *data,
        nsIDOMText **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateComment(
        const nsAString *data,
        nsIDOMComment **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateCDATASection(
        const nsAString *data,
        nsIDOMCDATASection **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateProcessingInstruction(
        const nsAString *target,
        const nsAString *data,
        nsIDOMProcessingInstruction **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateAttribute(
        const nsAString *name,
        nsIDOMAttr **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetElementsByTagName(
        const nsAString *tagname,
        nsIDOMNodeList **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE ImportNode(
        nsIDOMNode *importedNode,
        cpp_bool deep,
        UINT8 _argc,
        nsIDOMNode **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateElementNS(
        const nsAString *namespaceURI,
        const nsAString *qualifiedName,
        nsIDOMElement **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateAttributeNS(
        const nsAString *namespaceURI,
        const nsAString *qualifiedName,
        nsIDOMAttr **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetElementsByTagNameNS(
        const nsAString *namespaceURI,
        const nsAString *localName,
        nsIDOMNodeList **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetElementById(
        const nsAString *elementId,
        nsIDOMElement **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetInputEncoding(
        nsAString *aInputEncoding) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDocumentURI(
        nsAString *aDocumentURI) = 0;

    virtual nsresult STDMETHODCALLTYPE GetURL(
        nsAString *aURL) = 0;

    virtual nsresult STDMETHODCALLTYPE AdoptNode(
        nsIDOMNode *source,
        nsIDOMNode **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateRange(
        nsIDOMRange **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateNodeIterator(
        nsIDOMNode *root,
        UINT32 whatToShow,
        nsIDOMNodeFilter *filter,
        UINT8 _argc,
        nsIDOMNodeIterator **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateTreeWalker(
        nsIDOMNode *root,
        UINT32 whatToShow,
        nsIDOMNodeFilter *filter,
        UINT8 _argc,
        nsIDOMTreeWalker **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateEvent(
        const nsAString *eventType,
        nsIDOMEvent **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDefaultView(
        mozIDOMWindowProxy **aDefaultView) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCharacterSet(
        nsAString *aCharacterSet) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDir(
        nsAString *aDir) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDir(
        const nsAString *aDir) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLocation(
        nsIDOMLocation **aLocation) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTitle(
        nsAString *aTitle) = 0;

    virtual nsresult STDMETHODCALLTYPE SetTitle(
        const nsAString *aTitle) = 0;

    virtual nsresult STDMETHODCALLTYPE GetReadyState(
        nsAString *aReadyState) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLastModified(
        nsAString *aLastModified) = 0;

    virtual nsresult STDMETHODCALLTYPE GetReferrer(
        nsAString *aReferrer) = 0;

    virtual nsresult STDMETHODCALLTYPE HasFocus(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetActiveElement(
        nsIDOMElement **aActiveElement) = 0;

    virtual nsresult STDMETHODCALLTYPE GetElementsByClassName(
        const nsAString *classes,
        nsIDOMNodeList **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetStyleSheets(
        nsIDOMStyleSheetList **aStyleSheets) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPreferredStyleSheetSet(
        nsAString *aPreferredStyleSheetSet) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSelectedStyleSheetSet(
        nsAString *aSelectedStyleSheetSet) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSelectedStyleSheetSet(
        const nsAString *aSelectedStyleSheetSet) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLastStyleSheetSet(
        nsAString *aLastStyleSheetSet) = 0;

    virtual nsresult STDMETHODCALLTYPE GetStyleSheetSets(
        nsISupports **aStyleSheetSets) = 0;

    virtual nsresult STDMETHODCALLTYPE EnableStyleSheetsForSet(
        const nsAString *name) = 0;

    virtual nsresult STDMETHODCALLTYPE ElementFromPoint(
        float x,
        float y,
        nsIDOMElement **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetContentType(
        nsAString *aContentType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMozSyntheticDocument(
        cpp_bool *aMozSyntheticDocument) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCurrentScript(
        nsIDOMElement **aCurrentScript) = 0;

    virtual nsresult STDMETHODCALLTYPE ReleaseCapture(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE MozSetImageElement(
        const nsAString *aImageElementId,
        nsIDOMElement *aImageElement) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMozFullScreenElement(
        nsIDOMElement **aMozFullScreenElement) = 0;

    virtual nsresult STDMETHODCALLTYPE MozCancelFullScreen(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMozFullScreen(
        cpp_bool *aMozFullScreen) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMozFullScreenEnabled(
        cpp_bool *aMozFullScreenEnabled) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMozPointerLockElement(
        nsIDOMElement **aMozPointerLockElement) = 0;

    virtual nsresult STDMETHODCALLTYPE CaretPositionFromPoint(
        float x,
        float y,
        nsISupports **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE MozExitPointerLock(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHidden(
        cpp_bool *aHidden) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMozHidden(
        cpp_bool *aMozHidden) = 0;

    virtual nsresult STDMETHODCALLTYPE GetVisibilityState(
        nsAString *aVisibilityState) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMozVisibilityState(
        nsAString *aMozVisibilityState) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCompatMode(
        nsAString *aCompatMode) = 0;

    virtual nsresult STDMETHODCALLTYPE QuerySelector(
        const nsAString *selectors,
        nsIDOMElement **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE QuerySelectorAll(
        const nsAString *selectors,
        nsIDOMNodeList **_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMDocument, 0xb15fa0f4, 0x97c1, 0x4388, 0xaf,0x62, 0x2c,0xef,0xf7,0xa8,0x9b,0xdf)
#endif
#else
typedef struct nsIDOMDocumentVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMDocument *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMDocument *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMDocument *This);

    /*** nsIDOMNode methods ***/
    nsresult (STDMETHODCALLTYPE *GetNodeName)(
        nsIDOMDocument *This,
        nsAString *aNodeName);

    nsresult (STDMETHODCALLTYPE *GetNodeValue)(
        nsIDOMDocument *This,
        nsAString *aNodeValue);

    nsresult (STDMETHODCALLTYPE *SetNodeValue)(
        nsIDOMDocument *This,
        const nsAString *aNodeValue);

    nsresult (STDMETHODCALLTYPE *GetNodeType)(
        nsIDOMDocument *This,
        UINT16 *aNodeType);

    nsresult (STDMETHODCALLTYPE *GetParentNode)(
        nsIDOMDocument *This,
        nsIDOMNode **aParentNode);

    nsresult (STDMETHODCALLTYPE *GetParentElement)(
        nsIDOMDocument *This,
        nsIDOMElement **aParentElement);

    nsresult (STDMETHODCALLTYPE *GetChildNodes)(
        nsIDOMDocument *This,
        nsIDOMNodeList **aChildNodes);

    nsresult (STDMETHODCALLTYPE *GetFirstChild)(
        nsIDOMDocument *This,
        nsIDOMNode **aFirstChild);

    nsresult (STDMETHODCALLTYPE *GetLastChild)(
        nsIDOMDocument *This,
        nsIDOMNode **aLastChild);

    nsresult (STDMETHODCALLTYPE *GetPreviousSibling)(
        nsIDOMDocument *This,
        nsIDOMNode **aPreviousSibling);

    nsresult (STDMETHODCALLTYPE *GetNextSibling)(
        nsIDOMDocument *This,
        nsIDOMNode **aNextSibling);

    nsresult (STDMETHODCALLTYPE *GetOwnerDocument)(
        nsIDOMDocument *This,
        nsIDOMDocument **aOwnerDocument);

    nsresult (STDMETHODCALLTYPE *InsertBefore)(
        nsIDOMDocument *This,
        nsIDOMNode *newChild,
        nsIDOMNode *refChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *ReplaceChild)(
        nsIDOMDocument *This,
        nsIDOMNode *newChild,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *RemoveChild)(
        nsIDOMDocument *This,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *AppendChild)(
        nsIDOMDocument *This,
        nsIDOMNode *newChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *HasChildNodes)(
        nsIDOMDocument *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CloneNode)(
        nsIDOMDocument *This,
        cpp_bool deep,
        UINT8 _argc,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *Normalize)(
        nsIDOMDocument *This);

    nsresult (STDMETHODCALLTYPE *GetNamespaceURI)(
        nsIDOMDocument *This,
        nsAString *aNamespaceURI);

    nsresult (STDMETHODCALLTYPE *GetPrefix)(
        nsIDOMDocument *This,
        nsAString *aPrefix);

    nsresult (STDMETHODCALLTYPE *GetLocalName)(
        nsIDOMDocument *This,
        nsAString *aLocalName);

    nsresult (STDMETHODCALLTYPE *UnusedPlaceholder)(
        nsIDOMDocument *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetDOMBaseURI)(
        nsIDOMDocument *This,
        nsAString *aBaseURI);

    nsresult (STDMETHODCALLTYPE *CompareDocumentPosition)(
        nsIDOMDocument *This,
        nsIDOMNode *other,
        UINT16 *_retval);

    nsresult (STDMETHODCALLTYPE *GetTextContent)(
        nsIDOMDocument *This,
        nsAString *aTextContent);

    nsresult (STDMETHODCALLTYPE *SetTextContent)(
        nsIDOMDocument *This,
        const nsAString *aTextContent);

    nsresult (STDMETHODCALLTYPE *LookupPrefix)(
        nsIDOMDocument *This,
        const nsAString *namespaceURI,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *IsDefaultNamespace)(
        nsIDOMDocument *This,
        const nsAString *namespaceURI,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *LookupNamespaceURI)(
        nsIDOMDocument *This,
        const nsAString *prefix,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *IsEqualNode)(
        nsIDOMDocument *This,
        nsIDOMNode *arg,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetUserData)(
        nsIDOMDocument *This,
        const nsAString *key,
        nsIVariant *data,
        nsIVariant **_retval);

    nsresult (STDMETHODCALLTYPE *GetUserData)(
        nsIDOMDocument *This,
        const nsAString *key,
        nsIVariant **_retval);

    nsresult (STDMETHODCALLTYPE *Contains)(
        nsIDOMDocument *This,
        nsIDOMNode *aOther,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetMshtmlNode)(
        nsIDOMDocument *This,
        nsISupports **aMshtmlNode);

    nsresult (STDMETHODCALLTYPE *SetMshtmlNode)(
        nsIDOMDocument *This,
        nsISupports *aMshtmlNode);

    /*** nsIDOMDocument methods ***/
    nsresult (STDMETHODCALLTYPE *GetDoctype)(
        nsIDOMDocument *This,
        nsIDOMDocumentType **aDoctype);

    nsresult (STDMETHODCALLTYPE *GetImplementation)(
        nsIDOMDocument *This,
        nsIDOMDOMImplementation **aImplementation);

    nsresult (STDMETHODCALLTYPE *GetDocumentElement)(
        nsIDOMDocument *This,
        nsIDOMElement **aDocumentElement);

    nsresult (STDMETHODCALLTYPE *CreateElement)(
        nsIDOMDocument *This,
        const nsAString *tagName,
        nsIDOMElement **_retval);

    nsresult (STDMETHODCALLTYPE *CreateDocumentFragment)(
        nsIDOMDocument *This,
        nsIDOMDocumentFragment **_retval);

    nsresult (STDMETHODCALLTYPE *CreateTextNode)(
        nsIDOMDocument *This,
        const nsAString *data,
        nsIDOMText **_retval);

    nsresult (STDMETHODCALLTYPE *CreateComment)(
        nsIDOMDocument *This,
        const nsAString *data,
        nsIDOMComment **_retval);

    nsresult (STDMETHODCALLTYPE *CreateCDATASection)(
        nsIDOMDocument *This,
        const nsAString *data,
        nsIDOMCDATASection **_retval);

    nsresult (STDMETHODCALLTYPE *CreateProcessingInstruction)(
        nsIDOMDocument *This,
        const nsAString *target,
        const nsAString *data,
        nsIDOMProcessingInstruction **_retval);

    nsresult (STDMETHODCALLTYPE *CreateAttribute)(
        nsIDOMDocument *This,
        const nsAString *name,
        nsIDOMAttr **_retval);

    nsresult (STDMETHODCALLTYPE *GetElementsByTagName)(
        nsIDOMDocument *This,
        const nsAString *tagname,
        nsIDOMNodeList **_retval);

    nsresult (STDMETHODCALLTYPE *ImportNode)(
        nsIDOMDocument *This,
        nsIDOMNode *importedNode,
        cpp_bool deep,
        UINT8 _argc,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *CreateElementNS)(
        nsIDOMDocument *This,
        const nsAString *namespaceURI,
        const nsAString *qualifiedName,
        nsIDOMElement **_retval);

    nsresult (STDMETHODCALLTYPE *CreateAttributeNS)(
        nsIDOMDocument *This,
        const nsAString *namespaceURI,
        const nsAString *qualifiedName,
        nsIDOMAttr **_retval);

    nsresult (STDMETHODCALLTYPE *GetElementsByTagNameNS)(
        nsIDOMDocument *This,
        const nsAString *namespaceURI,
        const nsAString *localName,
        nsIDOMNodeList **_retval);

    nsresult (STDMETHODCALLTYPE *GetElementById)(
        nsIDOMDocument *This,
        const nsAString *elementId,
        nsIDOMElement **_retval);

    nsresult (STDMETHODCALLTYPE *GetInputEncoding)(
        nsIDOMDocument *This,
        nsAString *aInputEncoding);

    nsresult (STDMETHODCALLTYPE *GetDocumentURI)(
        nsIDOMDocument *This,
        nsAString *aDocumentURI);

    nsresult (STDMETHODCALLTYPE *GetURL)(
        nsIDOMDocument *This,
        nsAString *aURL);

    nsresult (STDMETHODCALLTYPE *AdoptNode)(
        nsIDOMDocument *This,
        nsIDOMNode *source,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *CreateRange)(
        nsIDOMDocument *This,
        nsIDOMRange **_retval);

    nsresult (STDMETHODCALLTYPE *CreateNodeIterator)(
        nsIDOMDocument *This,
        nsIDOMNode *root,
        UINT32 whatToShow,
        nsIDOMNodeFilter *filter,
        UINT8 _argc,
        nsIDOMNodeIterator **_retval);

    nsresult (STDMETHODCALLTYPE *CreateTreeWalker)(
        nsIDOMDocument *This,
        nsIDOMNode *root,
        UINT32 whatToShow,
        nsIDOMNodeFilter *filter,
        UINT8 _argc,
        nsIDOMTreeWalker **_retval);

    nsresult (STDMETHODCALLTYPE *CreateEvent)(
        nsIDOMDocument *This,
        const nsAString *eventType,
        nsIDOMEvent **_retval);

    nsresult (STDMETHODCALLTYPE *GetDefaultView)(
        nsIDOMDocument *This,
        mozIDOMWindowProxy **aDefaultView);

    nsresult (STDMETHODCALLTYPE *GetCharacterSet)(
        nsIDOMDocument *This,
        nsAString *aCharacterSet);

    nsresult (STDMETHODCALLTYPE *GetDir)(
        nsIDOMDocument *This,
        nsAString *aDir);

    nsresult (STDMETHODCALLTYPE *SetDir)(
        nsIDOMDocument *This,
        const nsAString *aDir);

    nsresult (STDMETHODCALLTYPE *GetLocation)(
        nsIDOMDocument *This,
        nsIDOMLocation **aLocation);

    nsresult (STDMETHODCALLTYPE *GetTitle)(
        nsIDOMDocument *This,
        nsAString *aTitle);

    nsresult (STDMETHODCALLTYPE *SetTitle)(
        nsIDOMDocument *This,
        const nsAString *aTitle);

    nsresult (STDMETHODCALLTYPE *GetReadyState)(
        nsIDOMDocument *This,
        nsAString *aReadyState);

    nsresult (STDMETHODCALLTYPE *GetLastModified)(
        nsIDOMDocument *This,
        nsAString *aLastModified);

    nsresult (STDMETHODCALLTYPE *GetReferrer)(
        nsIDOMDocument *This,
        nsAString *aReferrer);

    nsresult (STDMETHODCALLTYPE *HasFocus)(
        nsIDOMDocument *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetActiveElement)(
        nsIDOMDocument *This,
        nsIDOMElement **aActiveElement);

    nsresult (STDMETHODCALLTYPE *GetElementsByClassName)(
        nsIDOMDocument *This,
        const nsAString *classes,
        nsIDOMNodeList **_retval);

    nsresult (STDMETHODCALLTYPE *GetStyleSheets)(
        nsIDOMDocument *This,
        nsIDOMStyleSheetList **aStyleSheets);

    nsresult (STDMETHODCALLTYPE *GetPreferredStyleSheetSet)(
        nsIDOMDocument *This,
        nsAString *aPreferredStyleSheetSet);

    nsresult (STDMETHODCALLTYPE *GetSelectedStyleSheetSet)(
        nsIDOMDocument *This,
        nsAString *aSelectedStyleSheetSet);

    nsresult (STDMETHODCALLTYPE *SetSelectedStyleSheetSet)(
        nsIDOMDocument *This,
        const nsAString *aSelectedStyleSheetSet);

    nsresult (STDMETHODCALLTYPE *GetLastStyleSheetSet)(
        nsIDOMDocument *This,
        nsAString *aLastStyleSheetSet);

    nsresult (STDMETHODCALLTYPE *GetStyleSheetSets)(
        nsIDOMDocument *This,
        nsISupports **aStyleSheetSets);

    nsresult (STDMETHODCALLTYPE *EnableStyleSheetsForSet)(
        nsIDOMDocument *This,
        const nsAString *name);

    nsresult (STDMETHODCALLTYPE *ElementFromPoint)(
        nsIDOMDocument *This,
        float x,
        float y,
        nsIDOMElement **_retval);

    nsresult (STDMETHODCALLTYPE *GetContentType)(
        nsIDOMDocument *This,
        nsAString *aContentType);

    nsresult (STDMETHODCALLTYPE *GetMozSyntheticDocument)(
        nsIDOMDocument *This,
        cpp_bool *aMozSyntheticDocument);

    nsresult (STDMETHODCALLTYPE *GetCurrentScript)(
        nsIDOMDocument *This,
        nsIDOMElement **aCurrentScript);

    nsresult (STDMETHODCALLTYPE *ReleaseCapture)(
        nsIDOMDocument *This);

    nsresult (STDMETHODCALLTYPE *MozSetImageElement)(
        nsIDOMDocument *This,
        const nsAString *aImageElementId,
        nsIDOMElement *aImageElement);

    nsresult (STDMETHODCALLTYPE *GetMozFullScreenElement)(
        nsIDOMDocument *This,
        nsIDOMElement **aMozFullScreenElement);

    nsresult (STDMETHODCALLTYPE *MozCancelFullScreen)(
        nsIDOMDocument *This);

    nsresult (STDMETHODCALLTYPE *GetMozFullScreen)(
        nsIDOMDocument *This,
        cpp_bool *aMozFullScreen);

    nsresult (STDMETHODCALLTYPE *GetMozFullScreenEnabled)(
        nsIDOMDocument *This,
        cpp_bool *aMozFullScreenEnabled);

    nsresult (STDMETHODCALLTYPE *GetMozPointerLockElement)(
        nsIDOMDocument *This,
        nsIDOMElement **aMozPointerLockElement);

    nsresult (STDMETHODCALLTYPE *CaretPositionFromPoint)(
        nsIDOMDocument *This,
        float x,
        float y,
        nsISupports **_retval);

    nsresult (STDMETHODCALLTYPE *MozExitPointerLock)(
        nsIDOMDocument *This);

    nsresult (STDMETHODCALLTYPE *GetHidden)(
        nsIDOMDocument *This,
        cpp_bool *aHidden);

    nsresult (STDMETHODCALLTYPE *GetMozHidden)(
        nsIDOMDocument *This,
        cpp_bool *aMozHidden);

    nsresult (STDMETHODCALLTYPE *GetVisibilityState)(
        nsIDOMDocument *This,
        nsAString *aVisibilityState);

    nsresult (STDMETHODCALLTYPE *GetMozVisibilityState)(
        nsIDOMDocument *This,
        nsAString *aMozVisibilityState);

    nsresult (STDMETHODCALLTYPE *GetCompatMode)(
        nsIDOMDocument *This,
        nsAString *aCompatMode);

    nsresult (STDMETHODCALLTYPE *QuerySelector)(
        nsIDOMDocument *This,
        const nsAString *selectors,
        nsIDOMElement **_retval);

    nsresult (STDMETHODCALLTYPE *QuerySelectorAll)(
        nsIDOMDocument *This,
        const nsAString *selectors,
        nsIDOMNodeList **_retval);

    END_INTERFACE
} nsIDOMDocumentVtbl;

interface nsIDOMDocument {
    CONST_VTBL nsIDOMDocumentVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMDocument_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMDocument_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMDocument_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMNode methods ***/
#define nsIDOMDocument_GetNodeName(This,aNodeName) (This)->lpVtbl->GetNodeName(This,aNodeName)
#define nsIDOMDocument_GetNodeValue(This,aNodeValue) (This)->lpVtbl->GetNodeValue(This,aNodeValue)
#define nsIDOMDocument_SetNodeValue(This,aNodeValue) (This)->lpVtbl->SetNodeValue(This,aNodeValue)
#define nsIDOMDocument_GetNodeType(This,aNodeType) (This)->lpVtbl->GetNodeType(This,aNodeType)
#define nsIDOMDocument_GetParentNode(This,aParentNode) (This)->lpVtbl->GetParentNode(This,aParentNode)
#define nsIDOMDocument_GetParentElement(This,aParentElement) (This)->lpVtbl->GetParentElement(This,aParentElement)
#define nsIDOMDocument_GetChildNodes(This,aChildNodes) (This)->lpVtbl->GetChildNodes(This,aChildNodes)
#define nsIDOMDocument_GetFirstChild(This,aFirstChild) (This)->lpVtbl->GetFirstChild(This,aFirstChild)
#define nsIDOMDocument_GetLastChild(This,aLastChild) (This)->lpVtbl->GetLastChild(This,aLastChild)
#define nsIDOMDocument_GetPreviousSibling(This,aPreviousSibling) (This)->lpVtbl->GetPreviousSibling(This,aPreviousSibling)
#define nsIDOMDocument_GetNextSibling(This,aNextSibling) (This)->lpVtbl->GetNextSibling(This,aNextSibling)
#define nsIDOMDocument_GetOwnerDocument(This,aOwnerDocument) (This)->lpVtbl->GetOwnerDocument(This,aOwnerDocument)
#define nsIDOMDocument_InsertBefore(This,newChild,refChild,_retval) (This)->lpVtbl->InsertBefore(This,newChild,refChild,_retval)
#define nsIDOMDocument_ReplaceChild(This,newChild,oldChild,_retval) (This)->lpVtbl->ReplaceChild(This,newChild,oldChild,_retval)
#define nsIDOMDocument_RemoveChild(This,oldChild,_retval) (This)->lpVtbl->RemoveChild(This,oldChild,_retval)
#define nsIDOMDocument_AppendChild(This,newChild,_retval) (This)->lpVtbl->AppendChild(This,newChild,_retval)
#define nsIDOMDocument_HasChildNodes(This,_retval) (This)->lpVtbl->HasChildNodes(This,_retval)
#define nsIDOMDocument_CloneNode(This,deep,_argc,_retval) (This)->lpVtbl->CloneNode(This,deep,_argc,_retval)
#define nsIDOMDocument_Normalize(This) (This)->lpVtbl->Normalize(This)
#define nsIDOMDocument_GetNamespaceURI(This,aNamespaceURI) (This)->lpVtbl->GetNamespaceURI(This,aNamespaceURI)
#define nsIDOMDocument_GetPrefix(This,aPrefix) (This)->lpVtbl->GetPrefix(This,aPrefix)
#define nsIDOMDocument_GetLocalName(This,aLocalName) (This)->lpVtbl->GetLocalName(This,aLocalName)
#define nsIDOMDocument_UnusedPlaceholder(This,_retval) (This)->lpVtbl->UnusedPlaceholder(This,_retval)
#define nsIDOMDocument_GetDOMBaseURI(This,aBaseURI) (This)->lpVtbl->GetDOMBaseURI(This,aBaseURI)
#define nsIDOMDocument_CompareDocumentPosition(This,other,_retval) (This)->lpVtbl->CompareDocumentPosition(This,other,_retval)
#define nsIDOMDocument_GetTextContent(This,aTextContent) (This)->lpVtbl->GetTextContent(This,aTextContent)
#define nsIDOMDocument_SetTextContent(This,aTextContent) (This)->lpVtbl->SetTextContent(This,aTextContent)
#define nsIDOMDocument_LookupPrefix(This,namespaceURI,_retval) (This)->lpVtbl->LookupPrefix(This,namespaceURI,_retval)
#define nsIDOMDocument_IsDefaultNamespace(This,namespaceURI,_retval) (This)->lpVtbl->IsDefaultNamespace(This,namespaceURI,_retval)
#define nsIDOMDocument_LookupNamespaceURI(This,prefix,_retval) (This)->lpVtbl->LookupNamespaceURI(This,prefix,_retval)
#define nsIDOMDocument_IsEqualNode(This,arg,_retval) (This)->lpVtbl->IsEqualNode(This,arg,_retval)
#define nsIDOMDocument_SetUserData(This,key,data,_retval) (This)->lpVtbl->SetUserData(This,key,data,_retval)
#define nsIDOMDocument_GetUserData(This,key,_retval) (This)->lpVtbl->GetUserData(This,key,_retval)
#define nsIDOMDocument_Contains(This,aOther,_retval) (This)->lpVtbl->Contains(This,aOther,_retval)
#define nsIDOMDocument_GetMshtmlNode(This,aMshtmlNode) (This)->lpVtbl->GetMshtmlNode(This,aMshtmlNode)
#define nsIDOMDocument_SetMshtmlNode(This,aMshtmlNode) (This)->lpVtbl->SetMshtmlNode(This,aMshtmlNode)
/*** nsIDOMDocument methods ***/
#define nsIDOMDocument_GetDoctype(This,aDoctype) (This)->lpVtbl->GetDoctype(This,aDoctype)
#define nsIDOMDocument_GetImplementation(This,aImplementation) (This)->lpVtbl->GetImplementation(This,aImplementation)
#define nsIDOMDocument_GetDocumentElement(This,aDocumentElement) (This)->lpVtbl->GetDocumentElement(This,aDocumentElement)
#define nsIDOMDocument_CreateElement(This,tagName,_retval) (This)->lpVtbl->CreateElement(This,tagName,_retval)
#define nsIDOMDocument_CreateDocumentFragment(This,_retval) (This)->lpVtbl->CreateDocumentFragment(This,_retval)
#define nsIDOMDocument_CreateTextNode(This,data,_retval) (This)->lpVtbl->CreateTextNode(This,data,_retval)
#define nsIDOMDocument_CreateComment(This,data,_retval) (This)->lpVtbl->CreateComment(This,data,_retval)
#define nsIDOMDocument_CreateCDATASection(This,data,_retval) (This)->lpVtbl->CreateCDATASection(This,data,_retval)
#define nsIDOMDocument_CreateProcessingInstruction(This,target,data,_retval) (This)->lpVtbl->CreateProcessingInstruction(This,target,data,_retval)
#define nsIDOMDocument_CreateAttribute(This,name,_retval) (This)->lpVtbl->CreateAttribute(This,name,_retval)
#define nsIDOMDocument_GetElementsByTagName(This,tagname,_retval) (This)->lpVtbl->GetElementsByTagName(This,tagname,_retval)
#define nsIDOMDocument_ImportNode(This,importedNode,deep,_argc,_retval) (This)->lpVtbl->ImportNode(This,importedNode,deep,_argc,_retval)
#define nsIDOMDocument_CreateElementNS(This,namespaceURI,qualifiedName,_retval) (This)->lpVtbl->CreateElementNS(This,namespaceURI,qualifiedName,_retval)
#define nsIDOMDocument_CreateAttributeNS(This,namespaceURI,qualifiedName,_retval) (This)->lpVtbl->CreateAttributeNS(This,namespaceURI,qualifiedName,_retval)
#define nsIDOMDocument_GetElementsByTagNameNS(This,namespaceURI,localName,_retval) (This)->lpVtbl->GetElementsByTagNameNS(This,namespaceURI,localName,_retval)
#define nsIDOMDocument_GetElementById(This,elementId,_retval) (This)->lpVtbl->GetElementById(This,elementId,_retval)
#define nsIDOMDocument_GetInputEncoding(This,aInputEncoding) (This)->lpVtbl->GetInputEncoding(This,aInputEncoding)
#define nsIDOMDocument_GetDocumentURI(This,aDocumentURI) (This)->lpVtbl->GetDocumentURI(This,aDocumentURI)
#define nsIDOMDocument_GetURL(This,aURL) (This)->lpVtbl->GetURL(This,aURL)
#define nsIDOMDocument_AdoptNode(This,source,_retval) (This)->lpVtbl->AdoptNode(This,source,_retval)
#define nsIDOMDocument_CreateRange(This,_retval) (This)->lpVtbl->CreateRange(This,_retval)
#define nsIDOMDocument_CreateNodeIterator(This,root,whatToShow,filter,_argc,_retval) (This)->lpVtbl->CreateNodeIterator(This,root,whatToShow,filter,_argc,_retval)
#define nsIDOMDocument_CreateTreeWalker(This,root,whatToShow,filter,_argc,_retval) (This)->lpVtbl->CreateTreeWalker(This,root,whatToShow,filter,_argc,_retval)
#define nsIDOMDocument_CreateEvent(This,eventType,_retval) (This)->lpVtbl->CreateEvent(This,eventType,_retval)
#define nsIDOMDocument_GetDefaultView(This,aDefaultView) (This)->lpVtbl->GetDefaultView(This,aDefaultView)
#define nsIDOMDocument_GetCharacterSet(This,aCharacterSet) (This)->lpVtbl->GetCharacterSet(This,aCharacterSet)
#define nsIDOMDocument_GetDir(This,aDir) (This)->lpVtbl->GetDir(This,aDir)
#define nsIDOMDocument_SetDir(This,aDir) (This)->lpVtbl->SetDir(This,aDir)
#define nsIDOMDocument_GetLocation(This,aLocation) (This)->lpVtbl->GetLocation(This,aLocation)
#define nsIDOMDocument_GetTitle(This,aTitle) (This)->lpVtbl->GetTitle(This,aTitle)
#define nsIDOMDocument_SetTitle(This,aTitle) (This)->lpVtbl->SetTitle(This,aTitle)
#define nsIDOMDocument_GetReadyState(This,aReadyState) (This)->lpVtbl->GetReadyState(This,aReadyState)
#define nsIDOMDocument_GetLastModified(This,aLastModified) (This)->lpVtbl->GetLastModified(This,aLastModified)
#define nsIDOMDocument_GetReferrer(This,aReferrer) (This)->lpVtbl->GetReferrer(This,aReferrer)
#define nsIDOMDocument_HasFocus(This,_retval) (This)->lpVtbl->HasFocus(This,_retval)
#define nsIDOMDocument_GetActiveElement(This,aActiveElement) (This)->lpVtbl->GetActiveElement(This,aActiveElement)
#define nsIDOMDocument_GetElementsByClassName(This,classes,_retval) (This)->lpVtbl->GetElementsByClassName(This,classes,_retval)
#define nsIDOMDocument_GetStyleSheets(This,aStyleSheets) (This)->lpVtbl->GetStyleSheets(This,aStyleSheets)
#define nsIDOMDocument_GetPreferredStyleSheetSet(This,aPreferredStyleSheetSet) (This)->lpVtbl->GetPreferredStyleSheetSet(This,aPreferredStyleSheetSet)
#define nsIDOMDocument_GetSelectedStyleSheetSet(This,aSelectedStyleSheetSet) (This)->lpVtbl->GetSelectedStyleSheetSet(This,aSelectedStyleSheetSet)
#define nsIDOMDocument_SetSelectedStyleSheetSet(This,aSelectedStyleSheetSet) (This)->lpVtbl->SetSelectedStyleSheetSet(This,aSelectedStyleSheetSet)
#define nsIDOMDocument_GetLastStyleSheetSet(This,aLastStyleSheetSet) (This)->lpVtbl->GetLastStyleSheetSet(This,aLastStyleSheetSet)
#define nsIDOMDocument_GetStyleSheetSets(This,aStyleSheetSets) (This)->lpVtbl->GetStyleSheetSets(This,aStyleSheetSets)
#define nsIDOMDocument_EnableStyleSheetsForSet(This,name) (This)->lpVtbl->EnableStyleSheetsForSet(This,name)
#define nsIDOMDocument_ElementFromPoint(This,x,y,_retval) (This)->lpVtbl->ElementFromPoint(This,x,y,_retval)
#define nsIDOMDocument_GetContentType(This,aContentType) (This)->lpVtbl->GetContentType(This,aContentType)
#define nsIDOMDocument_GetMozSyntheticDocument(This,aMozSyntheticDocument) (This)->lpVtbl->GetMozSyntheticDocument(This,aMozSyntheticDocument)
#define nsIDOMDocument_GetCurrentScript(This,aCurrentScript) (This)->lpVtbl->GetCurrentScript(This,aCurrentScript)
#define nsIDOMDocument_ReleaseCapture(This) (This)->lpVtbl->ReleaseCapture(This)
#define nsIDOMDocument_MozSetImageElement(This,aImageElementId,aImageElement) (This)->lpVtbl->MozSetImageElement(This,aImageElementId,aImageElement)
#define nsIDOMDocument_GetMozFullScreenElement(This,aMozFullScreenElement) (This)->lpVtbl->GetMozFullScreenElement(This,aMozFullScreenElement)
#define nsIDOMDocument_MozCancelFullScreen(This) (This)->lpVtbl->MozCancelFullScreen(This)
#define nsIDOMDocument_GetMozFullScreen(This,aMozFullScreen) (This)->lpVtbl->GetMozFullScreen(This,aMozFullScreen)
#define nsIDOMDocument_GetMozFullScreenEnabled(This,aMozFullScreenEnabled) (This)->lpVtbl->GetMozFullScreenEnabled(This,aMozFullScreenEnabled)
#define nsIDOMDocument_GetMozPointerLockElement(This,aMozPointerLockElement) (This)->lpVtbl->GetMozPointerLockElement(This,aMozPointerLockElement)
#define nsIDOMDocument_CaretPositionFromPoint(This,x,y,_retval) (This)->lpVtbl->CaretPositionFromPoint(This,x,y,_retval)
#define nsIDOMDocument_MozExitPointerLock(This) (This)->lpVtbl->MozExitPointerLock(This)
#define nsIDOMDocument_GetHidden(This,aHidden) (This)->lpVtbl->GetHidden(This,aHidden)
#define nsIDOMDocument_GetMozHidden(This,aMozHidden) (This)->lpVtbl->GetMozHidden(This,aMozHidden)
#define nsIDOMDocument_GetVisibilityState(This,aVisibilityState) (This)->lpVtbl->GetVisibilityState(This,aVisibilityState)
#define nsIDOMDocument_GetMozVisibilityState(This,aMozVisibilityState) (This)->lpVtbl->GetMozVisibilityState(This,aMozVisibilityState)
#define nsIDOMDocument_GetCompatMode(This,aCompatMode) (This)->lpVtbl->GetCompatMode(This,aCompatMode)
#define nsIDOMDocument_QuerySelector(This,selectors,_retval) (This)->lpVtbl->QuerySelector(This,selectors,_retval)
#define nsIDOMDocument_QuerySelectorAll(This,selectors,_retval) (This)->lpVtbl->QuerySelectorAll(This,selectors,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMDocument_QueryInterface(nsIDOMDocument* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMDocument_AddRef(nsIDOMDocument* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMDocument_Release(nsIDOMDocument* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMNode methods ***/
static FORCEINLINE nsresult nsIDOMDocument_GetNodeName(nsIDOMDocument* This,nsAString *aNodeName) {
    return This->lpVtbl->GetNodeName(This,aNodeName);
}
static FORCEINLINE nsresult nsIDOMDocument_GetNodeValue(nsIDOMDocument* This,nsAString *aNodeValue) {
    return This->lpVtbl->GetNodeValue(This,aNodeValue);
}
static FORCEINLINE nsresult nsIDOMDocument_SetNodeValue(nsIDOMDocument* This,const nsAString *aNodeValue) {
    return This->lpVtbl->SetNodeValue(This,aNodeValue);
}
static FORCEINLINE nsresult nsIDOMDocument_GetNodeType(nsIDOMDocument* This,UINT16 *aNodeType) {
    return This->lpVtbl->GetNodeType(This,aNodeType);
}
static FORCEINLINE nsresult nsIDOMDocument_GetParentNode(nsIDOMDocument* This,nsIDOMNode **aParentNode) {
    return This->lpVtbl->GetParentNode(This,aParentNode);
}
static FORCEINLINE nsresult nsIDOMDocument_GetParentElement(nsIDOMDocument* This,nsIDOMElement **aParentElement) {
    return This->lpVtbl->GetParentElement(This,aParentElement);
}
static FORCEINLINE nsresult nsIDOMDocument_GetChildNodes(nsIDOMDocument* This,nsIDOMNodeList **aChildNodes) {
    return This->lpVtbl->GetChildNodes(This,aChildNodes);
}
static FORCEINLINE nsresult nsIDOMDocument_GetFirstChild(nsIDOMDocument* This,nsIDOMNode **aFirstChild) {
    return This->lpVtbl->GetFirstChild(This,aFirstChild);
}
static FORCEINLINE nsresult nsIDOMDocument_GetLastChild(nsIDOMDocument* This,nsIDOMNode **aLastChild) {
    return This->lpVtbl->GetLastChild(This,aLastChild);
}
static FORCEINLINE nsresult nsIDOMDocument_GetPreviousSibling(nsIDOMDocument* This,nsIDOMNode **aPreviousSibling) {
    return This->lpVtbl->GetPreviousSibling(This,aPreviousSibling);
}
static FORCEINLINE nsresult nsIDOMDocument_GetNextSibling(nsIDOMDocument* This,nsIDOMNode **aNextSibling) {
    return This->lpVtbl->GetNextSibling(This,aNextSibling);
}
static FORCEINLINE nsresult nsIDOMDocument_GetOwnerDocument(nsIDOMDocument* This,nsIDOMDocument **aOwnerDocument) {
    return This->lpVtbl->GetOwnerDocument(This,aOwnerDocument);
}
static FORCEINLINE nsresult nsIDOMDocument_InsertBefore(nsIDOMDocument* This,nsIDOMNode *newChild,nsIDOMNode *refChild,nsIDOMNode **_retval) {
    return This->lpVtbl->InsertBefore(This,newChild,refChild,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_ReplaceChild(nsIDOMDocument* This,nsIDOMNode *newChild,nsIDOMNode *oldChild,nsIDOMNode **_retval) {
    return This->lpVtbl->ReplaceChild(This,newChild,oldChild,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_RemoveChild(nsIDOMDocument* This,nsIDOMNode *oldChild,nsIDOMNode **_retval) {
    return This->lpVtbl->RemoveChild(This,oldChild,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_AppendChild(nsIDOMDocument* This,nsIDOMNode *newChild,nsIDOMNode **_retval) {
    return This->lpVtbl->AppendChild(This,newChild,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_HasChildNodes(nsIDOMDocument* This,cpp_bool *_retval) {
    return This->lpVtbl->HasChildNodes(This,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_CloneNode(nsIDOMDocument* This,cpp_bool deep,UINT8 _argc,nsIDOMNode **_retval) {
    return This->lpVtbl->CloneNode(This,deep,_argc,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_Normalize(nsIDOMDocument* This) {
    return This->lpVtbl->Normalize(This);
}
static FORCEINLINE nsresult nsIDOMDocument_GetNamespaceURI(nsIDOMDocument* This,nsAString *aNamespaceURI) {
    return This->lpVtbl->GetNamespaceURI(This,aNamespaceURI);
}
static FORCEINLINE nsresult nsIDOMDocument_GetPrefix(nsIDOMDocument* This,nsAString *aPrefix) {
    return This->lpVtbl->GetPrefix(This,aPrefix);
}
static FORCEINLINE nsresult nsIDOMDocument_GetLocalName(nsIDOMDocument* This,nsAString *aLocalName) {
    return This->lpVtbl->GetLocalName(This,aLocalName);
}
static FORCEINLINE nsresult nsIDOMDocument_UnusedPlaceholder(nsIDOMDocument* This,cpp_bool *_retval) {
    return This->lpVtbl->UnusedPlaceholder(This,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_GetDOMBaseURI(nsIDOMDocument* This,nsAString *aBaseURI) {
    return This->lpVtbl->GetDOMBaseURI(This,aBaseURI);
}
static FORCEINLINE nsresult nsIDOMDocument_CompareDocumentPosition(nsIDOMDocument* This,nsIDOMNode *other,UINT16 *_retval) {
    return This->lpVtbl->CompareDocumentPosition(This,other,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_GetTextContent(nsIDOMDocument* This,nsAString *aTextContent) {
    return This->lpVtbl->GetTextContent(This,aTextContent);
}
static FORCEINLINE nsresult nsIDOMDocument_SetTextContent(nsIDOMDocument* This,const nsAString *aTextContent) {
    return This->lpVtbl->SetTextContent(This,aTextContent);
}
static FORCEINLINE nsresult nsIDOMDocument_LookupPrefix(nsIDOMDocument* This,const nsAString *namespaceURI,nsAString *_retval) {
    return This->lpVtbl->LookupPrefix(This,namespaceURI,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_IsDefaultNamespace(nsIDOMDocument* This,const nsAString *namespaceURI,cpp_bool *_retval) {
    return This->lpVtbl->IsDefaultNamespace(This,namespaceURI,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_LookupNamespaceURI(nsIDOMDocument* This,const nsAString *prefix,nsAString *_retval) {
    return This->lpVtbl->LookupNamespaceURI(This,prefix,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_IsEqualNode(nsIDOMDocument* This,nsIDOMNode *arg,cpp_bool *_retval) {
    return This->lpVtbl->IsEqualNode(This,arg,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_SetUserData(nsIDOMDocument* This,const nsAString *key,nsIVariant *data,nsIVariant **_retval) {
    return This->lpVtbl->SetUserData(This,key,data,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_GetUserData(nsIDOMDocument* This,const nsAString *key,nsIVariant **_retval) {
    return This->lpVtbl->GetUserData(This,key,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_Contains(nsIDOMDocument* This,nsIDOMNode *aOther,cpp_bool *_retval) {
    return This->lpVtbl->Contains(This,aOther,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_GetMshtmlNode(nsIDOMDocument* This,nsISupports **aMshtmlNode) {
    return This->lpVtbl->GetMshtmlNode(This,aMshtmlNode);
}
static FORCEINLINE nsresult nsIDOMDocument_SetMshtmlNode(nsIDOMDocument* This,nsISupports *aMshtmlNode) {
    return This->lpVtbl->SetMshtmlNode(This,aMshtmlNode);
}
/*** nsIDOMDocument methods ***/
static FORCEINLINE nsresult nsIDOMDocument_GetDoctype(nsIDOMDocument* This,nsIDOMDocumentType **aDoctype) {
    return This->lpVtbl->GetDoctype(This,aDoctype);
}
static FORCEINLINE nsresult nsIDOMDocument_GetImplementation(nsIDOMDocument* This,nsIDOMDOMImplementation **aImplementation) {
    return This->lpVtbl->GetImplementation(This,aImplementation);
}
static FORCEINLINE nsresult nsIDOMDocument_GetDocumentElement(nsIDOMDocument* This,nsIDOMElement **aDocumentElement) {
    return This->lpVtbl->GetDocumentElement(This,aDocumentElement);
}
static FORCEINLINE nsresult nsIDOMDocument_CreateElement(nsIDOMDocument* This,const nsAString *tagName,nsIDOMElement **_retval) {
    return This->lpVtbl->CreateElement(This,tagName,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_CreateDocumentFragment(nsIDOMDocument* This,nsIDOMDocumentFragment **_retval) {
    return This->lpVtbl->CreateDocumentFragment(This,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_CreateTextNode(nsIDOMDocument* This,const nsAString *data,nsIDOMText **_retval) {
    return This->lpVtbl->CreateTextNode(This,data,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_CreateComment(nsIDOMDocument* This,const nsAString *data,nsIDOMComment **_retval) {
    return This->lpVtbl->CreateComment(This,data,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_CreateCDATASection(nsIDOMDocument* This,const nsAString *data,nsIDOMCDATASection **_retval) {
    return This->lpVtbl->CreateCDATASection(This,data,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_CreateProcessingInstruction(nsIDOMDocument* This,const nsAString *target,const nsAString *data,nsIDOMProcessingInstruction **_retval) {
    return This->lpVtbl->CreateProcessingInstruction(This,target,data,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_CreateAttribute(nsIDOMDocument* This,const nsAString *name,nsIDOMAttr **_retval) {
    return This->lpVtbl->CreateAttribute(This,name,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_GetElementsByTagName(nsIDOMDocument* This,const nsAString *tagname,nsIDOMNodeList **_retval) {
    return This->lpVtbl->GetElementsByTagName(This,tagname,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_ImportNode(nsIDOMDocument* This,nsIDOMNode *importedNode,cpp_bool deep,UINT8 _argc,nsIDOMNode **_retval) {
    return This->lpVtbl->ImportNode(This,importedNode,deep,_argc,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_CreateElementNS(nsIDOMDocument* This,const nsAString *namespaceURI,const nsAString *qualifiedName,nsIDOMElement **_retval) {
    return This->lpVtbl->CreateElementNS(This,namespaceURI,qualifiedName,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_CreateAttributeNS(nsIDOMDocument* This,const nsAString *namespaceURI,const nsAString *qualifiedName,nsIDOMAttr **_retval) {
    return This->lpVtbl->CreateAttributeNS(This,namespaceURI,qualifiedName,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_GetElementsByTagNameNS(nsIDOMDocument* This,const nsAString *namespaceURI,const nsAString *localName,nsIDOMNodeList **_retval) {
    return This->lpVtbl->GetElementsByTagNameNS(This,namespaceURI,localName,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_GetElementById(nsIDOMDocument* This,const nsAString *elementId,nsIDOMElement **_retval) {
    return This->lpVtbl->GetElementById(This,elementId,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_GetInputEncoding(nsIDOMDocument* This,nsAString *aInputEncoding) {
    return This->lpVtbl->GetInputEncoding(This,aInputEncoding);
}
static FORCEINLINE nsresult nsIDOMDocument_GetDocumentURI(nsIDOMDocument* This,nsAString *aDocumentURI) {
    return This->lpVtbl->GetDocumentURI(This,aDocumentURI);
}
static FORCEINLINE nsresult nsIDOMDocument_GetURL(nsIDOMDocument* This,nsAString *aURL) {
    return This->lpVtbl->GetURL(This,aURL);
}
static FORCEINLINE nsresult nsIDOMDocument_AdoptNode(nsIDOMDocument* This,nsIDOMNode *source,nsIDOMNode **_retval) {
    return This->lpVtbl->AdoptNode(This,source,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_CreateRange(nsIDOMDocument* This,nsIDOMRange **_retval) {
    return This->lpVtbl->CreateRange(This,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_CreateNodeIterator(nsIDOMDocument* This,nsIDOMNode *root,UINT32 whatToShow,nsIDOMNodeFilter *filter,UINT8 _argc,nsIDOMNodeIterator **_retval) {
    return This->lpVtbl->CreateNodeIterator(This,root,whatToShow,filter,_argc,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_CreateTreeWalker(nsIDOMDocument* This,nsIDOMNode *root,UINT32 whatToShow,nsIDOMNodeFilter *filter,UINT8 _argc,nsIDOMTreeWalker **_retval) {
    return This->lpVtbl->CreateTreeWalker(This,root,whatToShow,filter,_argc,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_CreateEvent(nsIDOMDocument* This,const nsAString *eventType,nsIDOMEvent **_retval) {
    return This->lpVtbl->CreateEvent(This,eventType,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_GetDefaultView(nsIDOMDocument* This,mozIDOMWindowProxy **aDefaultView) {
    return This->lpVtbl->GetDefaultView(This,aDefaultView);
}
static FORCEINLINE nsresult nsIDOMDocument_GetCharacterSet(nsIDOMDocument* This,nsAString *aCharacterSet) {
    return This->lpVtbl->GetCharacterSet(This,aCharacterSet);
}
static FORCEINLINE nsresult nsIDOMDocument_GetDir(nsIDOMDocument* This,nsAString *aDir) {
    return This->lpVtbl->GetDir(This,aDir);
}
static FORCEINLINE nsresult nsIDOMDocument_SetDir(nsIDOMDocument* This,const nsAString *aDir) {
    return This->lpVtbl->SetDir(This,aDir);
}
static FORCEINLINE nsresult nsIDOMDocument_GetLocation(nsIDOMDocument* This,nsIDOMLocation **aLocation) {
    return This->lpVtbl->GetLocation(This,aLocation);
}
static FORCEINLINE nsresult nsIDOMDocument_GetTitle(nsIDOMDocument* This,nsAString *aTitle) {
    return This->lpVtbl->GetTitle(This,aTitle);
}
static FORCEINLINE nsresult nsIDOMDocument_SetTitle(nsIDOMDocument* This,const nsAString *aTitle) {
    return This->lpVtbl->SetTitle(This,aTitle);
}
static FORCEINLINE nsresult nsIDOMDocument_GetReadyState(nsIDOMDocument* This,nsAString *aReadyState) {
    return This->lpVtbl->GetReadyState(This,aReadyState);
}
static FORCEINLINE nsresult nsIDOMDocument_GetLastModified(nsIDOMDocument* This,nsAString *aLastModified) {
    return This->lpVtbl->GetLastModified(This,aLastModified);
}
static FORCEINLINE nsresult nsIDOMDocument_GetReferrer(nsIDOMDocument* This,nsAString *aReferrer) {
    return This->lpVtbl->GetReferrer(This,aReferrer);
}
static FORCEINLINE nsresult nsIDOMDocument_HasFocus(nsIDOMDocument* This,cpp_bool *_retval) {
    return This->lpVtbl->HasFocus(This,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_GetActiveElement(nsIDOMDocument* This,nsIDOMElement **aActiveElement) {
    return This->lpVtbl->GetActiveElement(This,aActiveElement);
}
static FORCEINLINE nsresult nsIDOMDocument_GetElementsByClassName(nsIDOMDocument* This,const nsAString *classes,nsIDOMNodeList **_retval) {
    return This->lpVtbl->GetElementsByClassName(This,classes,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_GetStyleSheets(nsIDOMDocument* This,nsIDOMStyleSheetList **aStyleSheets) {
    return This->lpVtbl->GetStyleSheets(This,aStyleSheets);
}
static FORCEINLINE nsresult nsIDOMDocument_GetPreferredStyleSheetSet(nsIDOMDocument* This,nsAString *aPreferredStyleSheetSet) {
    return This->lpVtbl->GetPreferredStyleSheetSet(This,aPreferredStyleSheetSet);
}
static FORCEINLINE nsresult nsIDOMDocument_GetSelectedStyleSheetSet(nsIDOMDocument* This,nsAString *aSelectedStyleSheetSet) {
    return This->lpVtbl->GetSelectedStyleSheetSet(This,aSelectedStyleSheetSet);
}
static FORCEINLINE nsresult nsIDOMDocument_SetSelectedStyleSheetSet(nsIDOMDocument* This,const nsAString *aSelectedStyleSheetSet) {
    return This->lpVtbl->SetSelectedStyleSheetSet(This,aSelectedStyleSheetSet);
}
static FORCEINLINE nsresult nsIDOMDocument_GetLastStyleSheetSet(nsIDOMDocument* This,nsAString *aLastStyleSheetSet) {
    return This->lpVtbl->GetLastStyleSheetSet(This,aLastStyleSheetSet);
}
static FORCEINLINE nsresult nsIDOMDocument_GetStyleSheetSets(nsIDOMDocument* This,nsISupports **aStyleSheetSets) {
    return This->lpVtbl->GetStyleSheetSets(This,aStyleSheetSets);
}
static FORCEINLINE nsresult nsIDOMDocument_EnableStyleSheetsForSet(nsIDOMDocument* This,const nsAString *name) {
    return This->lpVtbl->EnableStyleSheetsForSet(This,name);
}
static FORCEINLINE nsresult nsIDOMDocument_ElementFromPoint(nsIDOMDocument* This,float x,float y,nsIDOMElement **_retval) {
    return This->lpVtbl->ElementFromPoint(This,x,y,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_GetContentType(nsIDOMDocument* This,nsAString *aContentType) {
    return This->lpVtbl->GetContentType(This,aContentType);
}
static FORCEINLINE nsresult nsIDOMDocument_GetMozSyntheticDocument(nsIDOMDocument* This,cpp_bool *aMozSyntheticDocument) {
    return This->lpVtbl->GetMozSyntheticDocument(This,aMozSyntheticDocument);
}
static FORCEINLINE nsresult nsIDOMDocument_GetCurrentScript(nsIDOMDocument* This,nsIDOMElement **aCurrentScript) {
    return This->lpVtbl->GetCurrentScript(This,aCurrentScript);
}
static FORCEINLINE nsresult nsIDOMDocument_ReleaseCapture(nsIDOMDocument* This) {
    return This->lpVtbl->ReleaseCapture(This);
}
static FORCEINLINE nsresult nsIDOMDocument_MozSetImageElement(nsIDOMDocument* This,const nsAString *aImageElementId,nsIDOMElement *aImageElement) {
    return This->lpVtbl->MozSetImageElement(This,aImageElementId,aImageElement);
}
static FORCEINLINE nsresult nsIDOMDocument_GetMozFullScreenElement(nsIDOMDocument* This,nsIDOMElement **aMozFullScreenElement) {
    return This->lpVtbl->GetMozFullScreenElement(This,aMozFullScreenElement);
}
static FORCEINLINE nsresult nsIDOMDocument_MozCancelFullScreen(nsIDOMDocument* This) {
    return This->lpVtbl->MozCancelFullScreen(This);
}
static FORCEINLINE nsresult nsIDOMDocument_GetMozFullScreen(nsIDOMDocument* This,cpp_bool *aMozFullScreen) {
    return This->lpVtbl->GetMozFullScreen(This,aMozFullScreen);
}
static FORCEINLINE nsresult nsIDOMDocument_GetMozFullScreenEnabled(nsIDOMDocument* This,cpp_bool *aMozFullScreenEnabled) {
    return This->lpVtbl->GetMozFullScreenEnabled(This,aMozFullScreenEnabled);
}
static FORCEINLINE nsresult nsIDOMDocument_GetMozPointerLockElement(nsIDOMDocument* This,nsIDOMElement **aMozPointerLockElement) {
    return This->lpVtbl->GetMozPointerLockElement(This,aMozPointerLockElement);
}
static FORCEINLINE nsresult nsIDOMDocument_CaretPositionFromPoint(nsIDOMDocument* This,float x,float y,nsISupports **_retval) {
    return This->lpVtbl->CaretPositionFromPoint(This,x,y,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_MozExitPointerLock(nsIDOMDocument* This) {
    return This->lpVtbl->MozExitPointerLock(This);
}
static FORCEINLINE nsresult nsIDOMDocument_GetHidden(nsIDOMDocument* This,cpp_bool *aHidden) {
    return This->lpVtbl->GetHidden(This,aHidden);
}
static FORCEINLINE nsresult nsIDOMDocument_GetMozHidden(nsIDOMDocument* This,cpp_bool *aMozHidden) {
    return This->lpVtbl->GetMozHidden(This,aMozHidden);
}
static FORCEINLINE nsresult nsIDOMDocument_GetVisibilityState(nsIDOMDocument* This,nsAString *aVisibilityState) {
    return This->lpVtbl->GetVisibilityState(This,aVisibilityState);
}
static FORCEINLINE nsresult nsIDOMDocument_GetMozVisibilityState(nsIDOMDocument* This,nsAString *aMozVisibilityState) {
    return This->lpVtbl->GetMozVisibilityState(This,aMozVisibilityState);
}
static FORCEINLINE nsresult nsIDOMDocument_GetCompatMode(nsIDOMDocument* This,nsAString *aCompatMode) {
    return This->lpVtbl->GetCompatMode(This,aCompatMode);
}
static FORCEINLINE nsresult nsIDOMDocument_QuerySelector(nsIDOMDocument* This,const nsAString *selectors,nsIDOMElement **_retval) {
    return This->lpVtbl->QuerySelector(This,selectors,_retval);
}
static FORCEINLINE nsresult nsIDOMDocument_QuerySelectorAll(nsIDOMDocument* This,const nsAString *selectors,nsIDOMNodeList **_retval) {
    return This->lpVtbl->QuerySelectorAll(This,selectors,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIDOMDocument_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLDocument interface
 */
#ifndef __nsIDOMHTMLDocument_INTERFACE_DEFINED__
#define __nsIDOMHTMLDocument_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLDocument, 0xcd31e61f, 0xcfc2, 0x4b91, 0x93,0x85, 0x17,0xb6,0xa2,0xd0,0x63,0x3d);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("cd31e61f-cfc2-4b91-9385-17b6a2d0633d")
nsIDOMHTMLDocument : public nsIDOMDocument
{
    virtual nsresult STDMETHODCALLTYPE GetDomain(
        nsAString *aDomain) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDomain(
        const nsAString *aDomain) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCookie(
        nsAString *aCookie) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCookie(
        const nsAString *aCookie) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHead(
        nsIDOMHTMLHeadElement **aHead) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBody(
        nsIDOMHTMLElement **aBody) = 0;

    virtual nsresult STDMETHODCALLTYPE SetBody(
        nsIDOMHTMLElement *aBody) = 0;

    virtual nsresult STDMETHODCALLTYPE GetImages(
        nsIDOMHTMLCollection **aImages) = 0;

    virtual nsresult STDMETHODCALLTYPE GetEmbeds(
        nsIDOMHTMLCollection **aEmbeds) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPlugins(
        nsIDOMHTMLCollection **aPlugins) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLinks(
        nsIDOMHTMLCollection **aLinks) = 0;

    virtual nsresult STDMETHODCALLTYPE GetForms(
        nsIDOMHTMLCollection **aForms) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScripts(
        nsIDOMHTMLCollection **aScripts) = 0;

    virtual nsresult STDMETHODCALLTYPE GetElementsByName(
        const nsAString *elementName,
        nsIDOMNodeList **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetItems(
        const nsAString *types,
        nsIDOMNodeList **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Open(
        const nsAString *aContentTypeOrUrl,
        const nsAString *aReplaceOrName,
        const nsAString *aFeatures,
        JSContext *cx,
        UINT8 _argc,
        nsISupports **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Close(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE Write(
        const nsAString *text,
        JSContext *cx) = 0;

    virtual nsresult STDMETHODCALLTYPE Writeln(
        const nsAString *text,
        JSContext *cx) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDesignMode(
        nsAString *aDesignMode) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDesignMode(
        const nsAString *aDesignMode) = 0;

    virtual nsresult STDMETHODCALLTYPE ExecCommand(
        const nsAString *commandID,
        cpp_bool doShowUI,
        const nsAString *value,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE QueryCommandEnabled(
        const nsAString *commandID,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE QueryCommandIndeterm(
        const nsAString *commandID,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE QueryCommandState(
        const nsAString *commandID,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE QueryCommandSupported(
        const nsAString *commandID,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE QueryCommandValue(
        const nsAString *commandID,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFgColor(
        nsAString *aFgColor) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFgColor(
        const nsAString *aFgColor) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBgColor(
        nsAString *aBgColor) = 0;

    virtual nsresult STDMETHODCALLTYPE SetBgColor(
        const nsAString *aBgColor) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLinkColor(
        nsAString *aLinkColor) = 0;

    virtual nsresult STDMETHODCALLTYPE SetLinkColor(
        const nsAString *aLinkColor) = 0;

    virtual nsresult STDMETHODCALLTYPE GetVlinkColor(
        nsAString *aVlinkColor) = 0;

    virtual nsresult STDMETHODCALLTYPE SetVlinkColor(
        const nsAString *aVlinkColor) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAlinkColor(
        nsAString *aAlinkColor) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAlinkColor(
        const nsAString *aAlinkColor) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAnchors(
        nsIDOMHTMLCollection **aAnchors) = 0;

    virtual nsresult STDMETHODCALLTYPE GetApplets(
        nsIDOMHTMLCollection **aApplets) = 0;

    virtual nsresult STDMETHODCALLTYPE Clear(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSelection(
        nsISelection **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CaptureEvents(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE ReleaseEvents(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLDocument, 0xcd31e61f, 0xcfc2, 0x4b91, 0x93,0x85, 0x17,0xb6,0xa2,0xd0,0x63,0x3d)
#endif
#else
typedef struct nsIDOMHTMLDocumentVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLDocument *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLDocument *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLDocument *This);

    /*** nsIDOMNode methods ***/
    nsresult (STDMETHODCALLTYPE *GetNodeName)(
        nsIDOMHTMLDocument *This,
        nsAString *aNodeName);

    nsresult (STDMETHODCALLTYPE *GetNodeValue)(
        nsIDOMHTMLDocument *This,
        nsAString *aNodeValue);

    nsresult (STDMETHODCALLTYPE *SetNodeValue)(
        nsIDOMHTMLDocument *This,
        const nsAString *aNodeValue);

    nsresult (STDMETHODCALLTYPE *GetNodeType)(
        nsIDOMHTMLDocument *This,
        UINT16 *aNodeType);

    nsresult (STDMETHODCALLTYPE *GetParentNode)(
        nsIDOMHTMLDocument *This,
        nsIDOMNode **aParentNode);

    nsresult (STDMETHODCALLTYPE *GetParentElement)(
        nsIDOMHTMLDocument *This,
        nsIDOMElement **aParentElement);

    nsresult (STDMETHODCALLTYPE *GetChildNodes)(
        nsIDOMHTMLDocument *This,
        nsIDOMNodeList **aChildNodes);

    nsresult (STDMETHODCALLTYPE *GetFirstChild)(
        nsIDOMHTMLDocument *This,
        nsIDOMNode **aFirstChild);

    nsresult (STDMETHODCALLTYPE *GetLastChild)(
        nsIDOMHTMLDocument *This,
        nsIDOMNode **aLastChild);

    nsresult (STDMETHODCALLTYPE *GetPreviousSibling)(
        nsIDOMHTMLDocument *This,
        nsIDOMNode **aPreviousSibling);

    nsresult (STDMETHODCALLTYPE *GetNextSibling)(
        nsIDOMHTMLDocument *This,
        nsIDOMNode **aNextSibling);

    nsresult (STDMETHODCALLTYPE *GetOwnerDocument)(
        nsIDOMHTMLDocument *This,
        nsIDOMDocument **aOwnerDocument);

    nsresult (STDMETHODCALLTYPE *InsertBefore)(
        nsIDOMHTMLDocument *This,
        nsIDOMNode *newChild,
        nsIDOMNode *refChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *ReplaceChild)(
        nsIDOMHTMLDocument *This,
        nsIDOMNode *newChild,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *RemoveChild)(
        nsIDOMHTMLDocument *This,
        nsIDOMNode *oldChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *AppendChild)(
        nsIDOMHTMLDocument *This,
        nsIDOMNode *newChild,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *HasChildNodes)(
        nsIDOMHTMLDocument *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CloneNode)(
        nsIDOMHTMLDocument *This,
        cpp_bool deep,
        UINT8 _argc,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *Normalize)(
        nsIDOMHTMLDocument *This);

    nsresult (STDMETHODCALLTYPE *GetNamespaceURI)(
        nsIDOMHTMLDocument *This,
        nsAString *aNamespaceURI);

    nsresult (STDMETHODCALLTYPE *GetPrefix)(
        nsIDOMHTMLDocument *This,
        nsAString *aPrefix);

    nsresult (STDMETHODCALLTYPE *GetLocalName)(
        nsIDOMHTMLDocument *This,
        nsAString *aLocalName);

    nsresult (STDMETHODCALLTYPE *UnusedPlaceholder)(
        nsIDOMHTMLDocument *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetDOMBaseURI)(
        nsIDOMHTMLDocument *This,
        nsAString *aBaseURI);

    nsresult (STDMETHODCALLTYPE *CompareDocumentPosition)(
        nsIDOMHTMLDocument *This,
        nsIDOMNode *other,
        UINT16 *_retval);

    nsresult (STDMETHODCALLTYPE *GetTextContent)(
        nsIDOMHTMLDocument *This,
        nsAString *aTextContent);

    nsresult (STDMETHODCALLTYPE *SetTextContent)(
        nsIDOMHTMLDocument *This,
        const nsAString *aTextContent);

    nsresult (STDMETHODCALLTYPE *LookupPrefix)(
        nsIDOMHTMLDocument *This,
        const nsAString *namespaceURI,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *IsDefaultNamespace)(
        nsIDOMHTMLDocument *This,
        const nsAString *namespaceURI,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *LookupNamespaceURI)(
        nsIDOMHTMLDocument *This,
        const nsAString *prefix,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *IsEqualNode)(
        nsIDOMHTMLDocument *This,
        nsIDOMNode *arg,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetUserData)(
        nsIDOMHTMLDocument *This,
        const nsAString *key,
        nsIVariant *data,
        nsIVariant **_retval);

    nsresult (STDMETHODCALLTYPE *GetUserData)(
        nsIDOMHTMLDocument *This,
        const nsAString *key,
        nsIVariant **_retval);

    nsresult (STDMETHODCALLTYPE *Contains)(
        nsIDOMHTMLDocument *This,
        nsIDOMNode *aOther,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetMshtmlNode)(
        nsIDOMHTMLDocument *This,
        nsISupports **aMshtmlNode);

    nsresult (STDMETHODCALLTYPE *SetMshtmlNode)(
        nsIDOMHTMLDocument *This,
        nsISupports *aMshtmlNode);

    /*** nsIDOMDocument methods ***/
    nsresult (STDMETHODCALLTYPE *GetDoctype)(
        nsIDOMHTMLDocument *This,
        nsIDOMDocumentType **aDoctype);

    nsresult (STDMETHODCALLTYPE *GetImplementation)(
        nsIDOMHTMLDocument *This,
        nsIDOMDOMImplementation **aImplementation);

    nsresult (STDMETHODCALLTYPE *GetDocumentElement)(
        nsIDOMHTMLDocument *This,
        nsIDOMElement **aDocumentElement);

    nsresult (STDMETHODCALLTYPE *CreateElement)(
        nsIDOMHTMLDocument *This,
        const nsAString *tagName,
        nsIDOMElement **_retval);

    nsresult (STDMETHODCALLTYPE *CreateDocumentFragment)(
        nsIDOMHTMLDocument *This,
        nsIDOMDocumentFragment **_retval);

    nsresult (STDMETHODCALLTYPE *CreateTextNode)(
        nsIDOMHTMLDocument *This,
        const nsAString *data,
        nsIDOMText **_retval);

    nsresult (STDMETHODCALLTYPE *CreateComment)(
        nsIDOMHTMLDocument *This,
        const nsAString *data,
        nsIDOMComment **_retval);

    nsresult (STDMETHODCALLTYPE *CreateCDATASection)(
        nsIDOMHTMLDocument *This,
        const nsAString *data,
        nsIDOMCDATASection **_retval);

    nsresult (STDMETHODCALLTYPE *CreateProcessingInstruction)(
        nsIDOMHTMLDocument *This,
        const nsAString *target,
        const nsAString *data,
        nsIDOMProcessingInstruction **_retval);

    nsresult (STDMETHODCALLTYPE *CreateAttribute)(
        nsIDOMHTMLDocument *This,
        const nsAString *name,
        nsIDOMAttr **_retval);

    nsresult (STDMETHODCALLTYPE *GetElementsByTagName)(
        nsIDOMHTMLDocument *This,
        const nsAString *tagname,
        nsIDOMNodeList **_retval);

    nsresult (STDMETHODCALLTYPE *ImportNode)(
        nsIDOMHTMLDocument *This,
        nsIDOMNode *importedNode,
        cpp_bool deep,
        UINT8 _argc,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *CreateElementNS)(
        nsIDOMHTMLDocument *This,
        const nsAString *namespaceURI,
        const nsAString *qualifiedName,
        nsIDOMElement **_retval);

    nsresult (STDMETHODCALLTYPE *CreateAttributeNS)(
        nsIDOMHTMLDocument *This,
        const nsAString *namespaceURI,
        const nsAString *qualifiedName,
        nsIDOMAttr **_retval);

    nsresult (STDMETHODCALLTYPE *GetElementsByTagNameNS)(
        nsIDOMHTMLDocument *This,
        const nsAString *namespaceURI,
        const nsAString *localName,
        nsIDOMNodeList **_retval);

    nsresult (STDMETHODCALLTYPE *GetElementById)(
        nsIDOMHTMLDocument *This,
        const nsAString *elementId,
        nsIDOMElement **_retval);

    nsresult (STDMETHODCALLTYPE *GetInputEncoding)(
        nsIDOMHTMLDocument *This,
        nsAString *aInputEncoding);

    nsresult (STDMETHODCALLTYPE *GetDocumentURI)(
        nsIDOMHTMLDocument *This,
        nsAString *aDocumentURI);

    nsresult (STDMETHODCALLTYPE *GetURL)(
        nsIDOMHTMLDocument *This,
        nsAString *aURL);

    nsresult (STDMETHODCALLTYPE *AdoptNode)(
        nsIDOMHTMLDocument *This,
        nsIDOMNode *source,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *CreateRange)(
        nsIDOMHTMLDocument *This,
        nsIDOMRange **_retval);

    nsresult (STDMETHODCALLTYPE *CreateNodeIterator)(
        nsIDOMHTMLDocument *This,
        nsIDOMNode *root,
        UINT32 whatToShow,
        nsIDOMNodeFilter *filter,
        UINT8 _argc,
        nsIDOMNodeIterator **_retval);

    nsresult (STDMETHODCALLTYPE *CreateTreeWalker)(
        nsIDOMHTMLDocument *This,
        nsIDOMNode *root,
        UINT32 whatToShow,
        nsIDOMNodeFilter *filter,
        UINT8 _argc,
        nsIDOMTreeWalker **_retval);

    nsresult (STDMETHODCALLTYPE *CreateEvent)(
        nsIDOMHTMLDocument *This,
        const nsAString *eventType,
        nsIDOMEvent **_retval);

    nsresult (STDMETHODCALLTYPE *GetDefaultView)(
        nsIDOMHTMLDocument *This,
        mozIDOMWindowProxy **aDefaultView);

    nsresult (STDMETHODCALLTYPE *GetCharacterSet)(
        nsIDOMHTMLDocument *This,
        nsAString *aCharacterSet);

    nsresult (STDMETHODCALLTYPE *GetDir)(
        nsIDOMHTMLDocument *This,
        nsAString *aDir);

    nsresult (STDMETHODCALLTYPE *SetDir)(
        nsIDOMHTMLDocument *This,
        const nsAString *aDir);

    nsresult (STDMETHODCALLTYPE *GetLocation)(
        nsIDOMHTMLDocument *This,
        nsIDOMLocation **aLocation);

    nsresult (STDMETHODCALLTYPE *GetTitle)(
        nsIDOMHTMLDocument *This,
        nsAString *aTitle);

    nsresult (STDMETHODCALLTYPE *SetTitle)(
        nsIDOMHTMLDocument *This,
        const nsAString *aTitle);

    nsresult (STDMETHODCALLTYPE *GetReadyState)(
        nsIDOMHTMLDocument *This,
        nsAString *aReadyState);

    nsresult (STDMETHODCALLTYPE *GetLastModified)(
        nsIDOMHTMLDocument *This,
        nsAString *aLastModified);

    nsresult (STDMETHODCALLTYPE *GetReferrer)(
        nsIDOMHTMLDocument *This,
        nsAString *aReferrer);

    nsresult (STDMETHODCALLTYPE *HasFocus)(
        nsIDOMHTMLDocument *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetActiveElement)(
        nsIDOMHTMLDocument *This,
        nsIDOMElement **aActiveElement);

    nsresult (STDMETHODCALLTYPE *GetElementsByClassName)(
        nsIDOMHTMLDocument *This,
        const nsAString *classes,
        nsIDOMNodeList **_retval);

    nsresult (STDMETHODCALLTYPE *GetStyleSheets)(
        nsIDOMHTMLDocument *This,
        nsIDOMStyleSheetList **aStyleSheets);

    nsresult (STDMETHODCALLTYPE *GetPreferredStyleSheetSet)(
        nsIDOMHTMLDocument *This,
        nsAString *aPreferredStyleSheetSet);

    nsresult (STDMETHODCALLTYPE *GetSelectedStyleSheetSet)(
        nsIDOMHTMLDocument *This,
        nsAString *aSelectedStyleSheetSet);

    nsresult (STDMETHODCALLTYPE *SetSelectedStyleSheetSet)(
        nsIDOMHTMLDocument *This,
        const nsAString *aSelectedStyleSheetSet);

    nsresult (STDMETHODCALLTYPE *GetLastStyleSheetSet)(
        nsIDOMHTMLDocument *This,
        nsAString *aLastStyleSheetSet);

    nsresult (STDMETHODCALLTYPE *GetStyleSheetSets)(
        nsIDOMHTMLDocument *This,
        nsISupports **aStyleSheetSets);

    nsresult (STDMETHODCALLTYPE *EnableStyleSheetsForSet)(
        nsIDOMHTMLDocument *This,
        const nsAString *name);

    nsresult (STDMETHODCALLTYPE *ElementFromPoint)(
        nsIDOMHTMLDocument *This,
        float x,
        float y,
        nsIDOMElement **_retval);

    nsresult (STDMETHODCALLTYPE *GetContentType)(
        nsIDOMHTMLDocument *This,
        nsAString *aContentType);

    nsresult (STDMETHODCALLTYPE *GetMozSyntheticDocument)(
        nsIDOMHTMLDocument *This,
        cpp_bool *aMozSyntheticDocument);

    nsresult (STDMETHODCALLTYPE *GetCurrentScript)(
        nsIDOMHTMLDocument *This,
        nsIDOMElement **aCurrentScript);

    nsresult (STDMETHODCALLTYPE *ReleaseCapture)(
        nsIDOMHTMLDocument *This);

    nsresult (STDMETHODCALLTYPE *MozSetImageElement)(
        nsIDOMHTMLDocument *This,
        const nsAString *aImageElementId,
        nsIDOMElement *aImageElement);

    nsresult (STDMETHODCALLTYPE *GetMozFullScreenElement)(
        nsIDOMHTMLDocument *This,
        nsIDOMElement **aMozFullScreenElement);

    nsresult (STDMETHODCALLTYPE *MozCancelFullScreen)(
        nsIDOMHTMLDocument *This);

    nsresult (STDMETHODCALLTYPE *GetMozFullScreen)(
        nsIDOMHTMLDocument *This,
        cpp_bool *aMozFullScreen);

    nsresult (STDMETHODCALLTYPE *GetMozFullScreenEnabled)(
        nsIDOMHTMLDocument *This,
        cpp_bool *aMozFullScreenEnabled);

    nsresult (STDMETHODCALLTYPE *GetMozPointerLockElement)(
        nsIDOMHTMLDocument *This,
        nsIDOMElement **aMozPointerLockElement);

    nsresult (STDMETHODCALLTYPE *CaretPositionFromPoint)(
        nsIDOMHTMLDocument *This,
        float x,
        float y,
        nsISupports **_retval);

    nsresult (STDMETHODCALLTYPE *MozExitPointerLock)(
        nsIDOMHTMLDocument *This);

    nsresult (STDMETHODCALLTYPE *GetHidden)(
        nsIDOMHTMLDocument *This,
        cpp_bool *aHidden);

    nsresult (STDMETHODCALLTYPE *GetMozHidden)(
        nsIDOMHTMLDocument *This,
        cpp_bool *aMozHidden);

    nsresult (STDMETHODCALLTYPE *GetVisibilityState)(
        nsIDOMHTMLDocument *This,
        nsAString *aVisibilityState);

    nsresult (STDMETHODCALLTYPE *GetMozVisibilityState)(
        nsIDOMHTMLDocument *This,
        nsAString *aMozVisibilityState);

    nsresult (STDMETHODCALLTYPE *GetCompatMode)(
        nsIDOMHTMLDocument *This,
        nsAString *aCompatMode);

    nsresult (STDMETHODCALLTYPE *QuerySelector)(
        nsIDOMHTMLDocument *This,
        const nsAString *selectors,
        nsIDOMElement **_retval);

    nsresult (STDMETHODCALLTYPE *QuerySelectorAll)(
        nsIDOMHTMLDocument *This,
        const nsAString *selectors,
        nsIDOMNodeList **_retval);

    /*** nsIDOMHTMLDocument methods ***/
    nsresult (STDMETHODCALLTYPE *GetDomain)(
        nsIDOMHTMLDocument *This,
        nsAString *aDomain);

    nsresult (STDMETHODCALLTYPE *SetDomain)(
        nsIDOMHTMLDocument *This,
        const nsAString *aDomain);

    nsresult (STDMETHODCALLTYPE *GetCookie)(
        nsIDOMHTMLDocument *This,
        nsAString *aCookie);

    nsresult (STDMETHODCALLTYPE *SetCookie)(
        nsIDOMHTMLDocument *This,
        const nsAString *aCookie);

    nsresult (STDMETHODCALLTYPE *GetHead)(
        nsIDOMHTMLDocument *This,
        nsIDOMHTMLHeadElement **aHead);

    nsresult (STDMETHODCALLTYPE *GetBody)(
        nsIDOMHTMLDocument *This,
        nsIDOMHTMLElement **aBody);

    nsresult (STDMETHODCALLTYPE *SetBody)(
        nsIDOMHTMLDocument *This,
        nsIDOMHTMLElement *aBody);

    nsresult (STDMETHODCALLTYPE *GetImages)(
        nsIDOMHTMLDocument *This,
        nsIDOMHTMLCollection **aImages);

    nsresult (STDMETHODCALLTYPE *GetEmbeds)(
        nsIDOMHTMLDocument *This,
        nsIDOMHTMLCollection **aEmbeds);

    nsresult (STDMETHODCALLTYPE *GetPlugins)(
        nsIDOMHTMLDocument *This,
        nsIDOMHTMLCollection **aPlugins);

    nsresult (STDMETHODCALLTYPE *GetLinks)(
        nsIDOMHTMLDocument *This,
        nsIDOMHTMLCollection **aLinks);

    nsresult (STDMETHODCALLTYPE *GetForms)(
        nsIDOMHTMLDocument *This,
        nsIDOMHTMLCollection **aForms);

    nsresult (STDMETHODCALLTYPE *GetScripts)(
        nsIDOMHTMLDocument *This,
        nsIDOMHTMLCollection **aScripts);

    nsresult (STDMETHODCALLTYPE *GetElementsByName)(
        nsIDOMHTMLDocument *This,
        const nsAString *elementName,
        nsIDOMNodeList **_retval);

    nsresult (STDMETHODCALLTYPE *GetItems)(
        nsIDOMHTMLDocument *This,
        const nsAString *types,
        nsIDOMNodeList **_retval);

    nsresult (STDMETHODCALLTYPE *Open)(
        nsIDOMHTMLDocument *This,
        const nsAString *aContentTypeOrUrl,
        const nsAString *aReplaceOrName,
        const nsAString *aFeatures,
        JSContext *cx,
        UINT8 _argc,
        nsISupports **_retval);

    nsresult (STDMETHODCALLTYPE *Close)(
        nsIDOMHTMLDocument *This);

    nsresult (STDMETHODCALLTYPE *Write)(
        nsIDOMHTMLDocument *This,
        const nsAString *text,
        JSContext *cx);

    nsresult (STDMETHODCALLTYPE *Writeln)(
        nsIDOMHTMLDocument *This,
        const nsAString *text,
        JSContext *cx);

    nsresult (STDMETHODCALLTYPE *GetDesignMode)(
        nsIDOMHTMLDocument *This,
        nsAString *aDesignMode);

    nsresult (STDMETHODCALLTYPE *SetDesignMode)(
        nsIDOMHTMLDocument *This,
        const nsAString *aDesignMode);

    nsresult (STDMETHODCALLTYPE *ExecCommand)(
        nsIDOMHTMLDocument *This,
        const nsAString *commandID,
        cpp_bool doShowUI,
        const nsAString *value,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *QueryCommandEnabled)(
        nsIDOMHTMLDocument *This,
        const nsAString *commandID,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *QueryCommandIndeterm)(
        nsIDOMHTMLDocument *This,
        const nsAString *commandID,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *QueryCommandState)(
        nsIDOMHTMLDocument *This,
        const nsAString *commandID,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *QueryCommandSupported)(
        nsIDOMHTMLDocument *This,
        const nsAString *commandID,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *QueryCommandValue)(
        nsIDOMHTMLDocument *This,
        const nsAString *commandID,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *GetFgColor)(
        nsIDOMHTMLDocument *This,
        nsAString *aFgColor);

    nsresult (STDMETHODCALLTYPE *SetFgColor)(
        nsIDOMHTMLDocument *This,
        const nsAString *aFgColor);

    nsresult (STDMETHODCALLTYPE *GetBgColor)(
        nsIDOMHTMLDocument *This,
        nsAString *aBgColor);

    nsresult (STDMETHODCALLTYPE *SetBgColor)(
        nsIDOMHTMLDocument *This,
        const nsAString *aBgColor);

    nsresult (STDMETHODCALLTYPE *GetLinkColor)(
        nsIDOMHTMLDocument *This,
        nsAString *aLinkColor);

    nsresult (STDMETHODCALLTYPE *SetLinkColor)(
        nsIDOMHTMLDocument *This,
        const nsAString *aLinkColor);

    nsresult (STDMETHODCALLTYPE *GetVlinkColor)(
        nsIDOMHTMLDocument *This,
        nsAString *aVlinkColor);

    nsresult (STDMETHODCALLTYPE *SetVlinkColor)(
        nsIDOMHTMLDocument *This,
        const nsAString *aVlinkColor);

    nsresult (STDMETHODCALLTYPE *GetAlinkColor)(
        nsIDOMHTMLDocument *This,
        nsAString *aAlinkColor);

    nsresult (STDMETHODCALLTYPE *SetAlinkColor)(
        nsIDOMHTMLDocument *This,
        const nsAString *aAlinkColor);

    nsresult (STDMETHODCALLTYPE *GetAnchors)(
        nsIDOMHTMLDocument *This,
        nsIDOMHTMLCollection **aAnchors);

    nsresult (STDMETHODCALLTYPE *GetApplets)(
        nsIDOMHTMLDocument *This,
        nsIDOMHTMLCollection **aApplets);

    nsresult (STDMETHODCALLTYPE *Clear)(
        nsIDOMHTMLDocument *This);

    nsresult (STDMETHODCALLTYPE *GetSelection)(
        nsIDOMHTMLDocument *This,
        nsISelection **_retval);

    nsresult (STDMETHODCALLTYPE *CaptureEvents)(
        nsIDOMHTMLDocument *This);

    nsresult (STDMETHODCALLTYPE *ReleaseEvents)(
        nsIDOMHTMLDocument *This);

    END_INTERFACE
} nsIDOMHTMLDocumentVtbl;

interface nsIDOMHTMLDocument {
    CONST_VTBL nsIDOMHTMLDocumentVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLDocument_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLDocument_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLDocument_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMNode methods ***/
#define nsIDOMHTMLDocument_GetNodeName(This,aNodeName) (This)->lpVtbl->GetNodeName(This,aNodeName)
#define nsIDOMHTMLDocument_GetNodeValue(This,aNodeValue) (This)->lpVtbl->GetNodeValue(This,aNodeValue)
#define nsIDOMHTMLDocument_SetNodeValue(This,aNodeValue) (This)->lpVtbl->SetNodeValue(This,aNodeValue)
#define nsIDOMHTMLDocument_GetNodeType(This,aNodeType) (This)->lpVtbl->GetNodeType(This,aNodeType)
#define nsIDOMHTMLDocument_GetParentNode(This,aParentNode) (This)->lpVtbl->GetParentNode(This,aParentNode)
#define nsIDOMHTMLDocument_GetParentElement(This,aParentElement) (This)->lpVtbl->GetParentElement(This,aParentElement)
#define nsIDOMHTMLDocument_GetChildNodes(This,aChildNodes) (This)->lpVtbl->GetChildNodes(This,aChildNodes)
#define nsIDOMHTMLDocument_GetFirstChild(This,aFirstChild) (This)->lpVtbl->GetFirstChild(This,aFirstChild)
#define nsIDOMHTMLDocument_GetLastChild(This,aLastChild) (This)->lpVtbl->GetLastChild(This,aLastChild)
#define nsIDOMHTMLDocument_GetPreviousSibling(This,aPreviousSibling) (This)->lpVtbl->GetPreviousSibling(This,aPreviousSibling)
#define nsIDOMHTMLDocument_GetNextSibling(This,aNextSibling) (This)->lpVtbl->GetNextSibling(This,aNextSibling)
#define nsIDOMHTMLDocument_GetOwnerDocument(This,aOwnerDocument) (This)->lpVtbl->GetOwnerDocument(This,aOwnerDocument)
#define nsIDOMHTMLDocument_InsertBefore(This,newChild,refChild,_retval) (This)->lpVtbl->InsertBefore(This,newChild,refChild,_retval)
#define nsIDOMHTMLDocument_ReplaceChild(This,newChild,oldChild,_retval) (This)->lpVtbl->ReplaceChild(This,newChild,oldChild,_retval)
#define nsIDOMHTMLDocument_RemoveChild(This,oldChild,_retval) (This)->lpVtbl->RemoveChild(This,oldChild,_retval)
#define nsIDOMHTMLDocument_AppendChild(This,newChild,_retval) (This)->lpVtbl->AppendChild(This,newChild,_retval)
#define nsIDOMHTMLDocument_HasChildNodes(This,_retval) (This)->lpVtbl->HasChildNodes(This,_retval)
#define nsIDOMHTMLDocument_CloneNode(This,deep,_argc,_retval) (This)->lpVtbl->CloneNode(This,deep,_argc,_retval)
#define nsIDOMHTMLDocument_Normalize(This) (This)->lpVtbl->Normalize(This)
#define nsIDOMHTMLDocument_GetNamespaceURI(This,aNamespaceURI) (This)->lpVtbl->GetNamespaceURI(This,aNamespaceURI)
#define nsIDOMHTMLDocument_GetPrefix(This,aPrefix) (This)->lpVtbl->GetPrefix(This,aPrefix)
#define nsIDOMHTMLDocument_GetLocalName(This,aLocalName) (This)->lpVtbl->GetLocalName(This,aLocalName)
#define nsIDOMHTMLDocument_UnusedPlaceholder(This,_retval) (This)->lpVtbl->UnusedPlaceholder(This,_retval)
#define nsIDOMHTMLDocument_GetDOMBaseURI(This,aBaseURI) (This)->lpVtbl->GetDOMBaseURI(This,aBaseURI)
#define nsIDOMHTMLDocument_CompareDocumentPosition(This,other,_retval) (This)->lpVtbl->CompareDocumentPosition(This,other,_retval)
#define nsIDOMHTMLDocument_GetTextContent(This,aTextContent) (This)->lpVtbl->GetTextContent(This,aTextContent)
#define nsIDOMHTMLDocument_SetTextContent(This,aTextContent) (This)->lpVtbl->SetTextContent(This,aTextContent)
#define nsIDOMHTMLDocument_LookupPrefix(This,namespaceURI,_retval) (This)->lpVtbl->LookupPrefix(This,namespaceURI,_retval)
#define nsIDOMHTMLDocument_IsDefaultNamespace(This,namespaceURI,_retval) (This)->lpVtbl->IsDefaultNamespace(This,namespaceURI,_retval)
#define nsIDOMHTMLDocument_LookupNamespaceURI(This,prefix,_retval) (This)->lpVtbl->LookupNamespaceURI(This,prefix,_retval)
#define nsIDOMHTMLDocument_IsEqualNode(This,arg,_retval) (This)->lpVtbl->IsEqualNode(This,arg,_retval)
#define nsIDOMHTMLDocument_SetUserData(This,key,data,_retval) (This)->lpVtbl->SetUserData(This,key,data,_retval)
#define nsIDOMHTMLDocument_GetUserData(This,key,_retval) (This)->lpVtbl->GetUserData(This,key,_retval)
#define nsIDOMHTMLDocument_Contains(This,aOther,_retval) (This)->lpVtbl->Contains(This,aOther,_retval)
#define nsIDOMHTMLDocument_GetMshtmlNode(This,aMshtmlNode) (This)->lpVtbl->GetMshtmlNode(This,aMshtmlNode)
#define nsIDOMHTMLDocument_SetMshtmlNode(This,aMshtmlNode) (This)->lpVtbl->SetMshtmlNode(This,aMshtmlNode)
/*** nsIDOMDocument methods ***/
#define nsIDOMHTMLDocument_GetDoctype(This,aDoctype) (This)->lpVtbl->GetDoctype(This,aDoctype)
#define nsIDOMHTMLDocument_GetImplementation(This,aImplementation) (This)->lpVtbl->GetImplementation(This,aImplementation)
#define nsIDOMHTMLDocument_GetDocumentElement(This,aDocumentElement) (This)->lpVtbl->GetDocumentElement(This,aDocumentElement)
#define nsIDOMHTMLDocument_CreateElement(This,tagName,_retval) (This)->lpVtbl->CreateElement(This,tagName,_retval)
#define nsIDOMHTMLDocument_CreateDocumentFragment(This,_retval) (This)->lpVtbl->CreateDocumentFragment(This,_retval)
#define nsIDOMHTMLDocument_CreateTextNode(This,data,_retval) (This)->lpVtbl->CreateTextNode(This,data,_retval)
#define nsIDOMHTMLDocument_CreateComment(This,data,_retval) (This)->lpVtbl->CreateComment(This,data,_retval)
#define nsIDOMHTMLDocument_CreateCDATASection(This,data,_retval) (This)->lpVtbl->CreateCDATASection(This,data,_retval)
#define nsIDOMHTMLDocument_CreateProcessingInstruction(This,target,data,_retval) (This)->lpVtbl->CreateProcessingInstruction(This,target,data,_retval)
#define nsIDOMHTMLDocument_CreateAttribute(This,name,_retval) (This)->lpVtbl->CreateAttribute(This,name,_retval)
#define nsIDOMHTMLDocument_GetElementsByTagName(This,tagname,_retval) (This)->lpVtbl->GetElementsByTagName(This,tagname,_retval)
#define nsIDOMHTMLDocument_ImportNode(This,importedNode,deep,_argc,_retval) (This)->lpVtbl->ImportNode(This,importedNode,deep,_argc,_retval)
#define nsIDOMHTMLDocument_CreateElementNS(This,namespaceURI,qualifiedName,_retval) (This)->lpVtbl->CreateElementNS(This,namespaceURI,qualifiedName,_retval)
#define nsIDOMHTMLDocument_CreateAttributeNS(This,namespaceURI,qualifiedName,_retval) (This)->lpVtbl->CreateAttributeNS(This,namespaceURI,qualifiedName,_retval)
#define nsIDOMHTMLDocument_GetElementsByTagNameNS(This,namespaceURI,localName,_retval) (This)->lpVtbl->GetElementsByTagNameNS(This,namespaceURI,localName,_retval)
#define nsIDOMHTMLDocument_GetElementById(This,elementId,_retval) (This)->lpVtbl->GetElementById(This,elementId,_retval)
#define nsIDOMHTMLDocument_GetInputEncoding(This,aInputEncoding) (This)->lpVtbl->GetInputEncoding(This,aInputEncoding)
#define nsIDOMHTMLDocument_GetDocumentURI(This,aDocumentURI) (This)->lpVtbl->GetDocumentURI(This,aDocumentURI)
#define nsIDOMHTMLDocument_GetURL(This,aURL) (This)->lpVtbl->GetURL(This,aURL)
#define nsIDOMHTMLDocument_AdoptNode(This,source,_retval) (This)->lpVtbl->AdoptNode(This,source,_retval)
#define nsIDOMHTMLDocument_CreateRange(This,_retval) (This)->lpVtbl->CreateRange(This,_retval)
#define nsIDOMHTMLDocument_CreateNodeIterator(This,root,whatToShow,filter,_argc,_retval) (This)->lpVtbl->CreateNodeIterator(This,root,whatToShow,filter,_argc,_retval)
#define nsIDOMHTMLDocument_CreateTreeWalker(This,root,whatToShow,filter,_argc,_retval) (This)->lpVtbl->CreateTreeWalker(This,root,whatToShow,filter,_argc,_retval)
#define nsIDOMHTMLDocument_CreateEvent(This,eventType,_retval) (This)->lpVtbl->CreateEvent(This,eventType,_retval)
#define nsIDOMHTMLDocument_GetDefaultView(This,aDefaultView) (This)->lpVtbl->GetDefaultView(This,aDefaultView)
#define nsIDOMHTMLDocument_GetCharacterSet(This,aCharacterSet) (This)->lpVtbl->GetCharacterSet(This,aCharacterSet)
#define nsIDOMHTMLDocument_GetDir(This,aDir) (This)->lpVtbl->GetDir(This,aDir)
#define nsIDOMHTMLDocument_SetDir(This,aDir) (This)->lpVtbl->SetDir(This,aDir)
#define nsIDOMHTMLDocument_GetLocation(This,aLocation) (This)->lpVtbl->GetLocation(This,aLocation)
#define nsIDOMHTMLDocument_GetTitle(This,aTitle) (This)->lpVtbl->GetTitle(This,aTitle)
#define nsIDOMHTMLDocument_SetTitle(This,aTitle) (This)->lpVtbl->SetTitle(This,aTitle)
#define nsIDOMHTMLDocument_GetReadyState(This,aReadyState) (This)->lpVtbl->GetReadyState(This,aReadyState)
#define nsIDOMHTMLDocument_GetLastModified(This,aLastModified) (This)->lpVtbl->GetLastModified(This,aLastModified)
#define nsIDOMHTMLDocument_GetReferrer(This,aReferrer) (This)->lpVtbl->GetReferrer(This,aReferrer)
#define nsIDOMHTMLDocument_HasFocus(This,_retval) (This)->lpVtbl->HasFocus(This,_retval)
#define nsIDOMHTMLDocument_GetActiveElement(This,aActiveElement) (This)->lpVtbl->GetActiveElement(This,aActiveElement)
#define nsIDOMHTMLDocument_GetElementsByClassName(This,classes,_retval) (This)->lpVtbl->GetElementsByClassName(This,classes,_retval)
#define nsIDOMHTMLDocument_GetStyleSheets(This,aStyleSheets) (This)->lpVtbl->GetStyleSheets(This,aStyleSheets)
#define nsIDOMHTMLDocument_GetPreferredStyleSheetSet(This,aPreferredStyleSheetSet) (This)->lpVtbl->GetPreferredStyleSheetSet(This,aPreferredStyleSheetSet)
#define nsIDOMHTMLDocument_GetSelectedStyleSheetSet(This,aSelectedStyleSheetSet) (This)->lpVtbl->GetSelectedStyleSheetSet(This,aSelectedStyleSheetSet)
#define nsIDOMHTMLDocument_SetSelectedStyleSheetSet(This,aSelectedStyleSheetSet) (This)->lpVtbl->SetSelectedStyleSheetSet(This,aSelectedStyleSheetSet)
#define nsIDOMHTMLDocument_GetLastStyleSheetSet(This,aLastStyleSheetSet) (This)->lpVtbl->GetLastStyleSheetSet(This,aLastStyleSheetSet)
#define nsIDOMHTMLDocument_GetStyleSheetSets(This,aStyleSheetSets) (This)->lpVtbl->GetStyleSheetSets(This,aStyleSheetSets)
#define nsIDOMHTMLDocument_EnableStyleSheetsForSet(This,name) (This)->lpVtbl->EnableStyleSheetsForSet(This,name)
#define nsIDOMHTMLDocument_ElementFromPoint(This,x,y,_retval) (This)->lpVtbl->ElementFromPoint(This,x,y,_retval)
#define nsIDOMHTMLDocument_GetContentType(This,aContentType) (This)->lpVtbl->GetContentType(This,aContentType)
#define nsIDOMHTMLDocument_GetMozSyntheticDocument(This,aMozSyntheticDocument) (This)->lpVtbl->GetMozSyntheticDocument(This,aMozSyntheticDocument)
#define nsIDOMHTMLDocument_GetCurrentScript(This,aCurrentScript) (This)->lpVtbl->GetCurrentScript(This,aCurrentScript)
#define nsIDOMHTMLDocument_ReleaseCapture(This) (This)->lpVtbl->ReleaseCapture(This)
#define nsIDOMHTMLDocument_MozSetImageElement(This,aImageElementId,aImageElement) (This)->lpVtbl->MozSetImageElement(This,aImageElementId,aImageElement)
#define nsIDOMHTMLDocument_GetMozFullScreenElement(This,aMozFullScreenElement) (This)->lpVtbl->GetMozFullScreenElement(This,aMozFullScreenElement)
#define nsIDOMHTMLDocument_MozCancelFullScreen(This) (This)->lpVtbl->MozCancelFullScreen(This)
#define nsIDOMHTMLDocument_GetMozFullScreen(This,aMozFullScreen) (This)->lpVtbl->GetMozFullScreen(This,aMozFullScreen)
#define nsIDOMHTMLDocument_GetMozFullScreenEnabled(This,aMozFullScreenEnabled) (This)->lpVtbl->GetMozFullScreenEnabled(This,aMozFullScreenEnabled)
#define nsIDOMHTMLDocument_GetMozPointerLockElement(This,aMozPointerLockElement) (This)->lpVtbl->GetMozPointerLockElement(This,aMozPointerLockElement)
#define nsIDOMHTMLDocument_CaretPositionFromPoint(This,x,y,_retval) (This)->lpVtbl->CaretPositionFromPoint(This,x,y,_retval)
#define nsIDOMHTMLDocument_MozExitPointerLock(This) (This)->lpVtbl->MozExitPointerLock(This)
#define nsIDOMHTMLDocument_GetHidden(This,aHidden) (This)->lpVtbl->GetHidden(This,aHidden)
#define nsIDOMHTMLDocument_GetMozHidden(This,aMozHidden) (This)->lpVtbl->GetMozHidden(This,aMozHidden)
#define nsIDOMHTMLDocument_GetVisibilityState(This,aVisibilityState) (This)->lpVtbl->GetVisibilityState(This,aVisibilityState)
#define nsIDOMHTMLDocument_GetMozVisibilityState(This,aMozVisibilityState) (This)->lpVtbl->GetMozVisibilityState(This,aMozVisibilityState)
#define nsIDOMHTMLDocument_GetCompatMode(This,aCompatMode) (This)->lpVtbl->GetCompatMode(This,aCompatMode)
#define nsIDOMHTMLDocument_QuerySelector(This,selectors,_retval) (This)->lpVtbl->QuerySelector(This,selectors,_retval)
#define nsIDOMHTMLDocument_QuerySelectorAll(This,selectors,_retval) (This)->lpVtbl->QuerySelectorAll(This,selectors,_retval)
/*** nsIDOMHTMLDocument methods ***/
#define nsIDOMHTMLDocument_GetDomain(This,aDomain) (This)->lpVtbl->GetDomain(This,aDomain)
#define nsIDOMHTMLDocument_SetDomain(This,aDomain) (This)->lpVtbl->SetDomain(This,aDomain)
#define nsIDOMHTMLDocument_GetCookie(This,aCookie) (This)->lpVtbl->GetCookie(This,aCookie)
#define nsIDOMHTMLDocument_SetCookie(This,aCookie) (This)->lpVtbl->SetCookie(This,aCookie)
#define nsIDOMHTMLDocument_GetHead(This,aHead) (This)->lpVtbl->GetHead(This,aHead)
#define nsIDOMHTMLDocument_GetBody(This,aBody) (This)->lpVtbl->GetBody(This,aBody)
#define nsIDOMHTMLDocument_SetBody(This,aBody) (This)->lpVtbl->SetBody(This,aBody)
#define nsIDOMHTMLDocument_GetImages(This,aImages) (This)->lpVtbl->GetImages(This,aImages)
#define nsIDOMHTMLDocument_GetEmbeds(This,aEmbeds) (This)->lpVtbl->GetEmbeds(This,aEmbeds)
#define nsIDOMHTMLDocument_GetPlugins(This,aPlugins) (This)->lpVtbl->GetPlugins(This,aPlugins)
#define nsIDOMHTMLDocument_GetLinks(This,aLinks) (This)->lpVtbl->GetLinks(This,aLinks)
#define nsIDOMHTMLDocument_GetForms(This,aForms) (This)->lpVtbl->GetForms(This,aForms)
#define nsIDOMHTMLDocument_GetScripts(This,aScripts) (This)->lpVtbl->GetScripts(This,aScripts)
#define nsIDOMHTMLDocument_GetElementsByName(This,elementName,_retval) (This)->lpVtbl->GetElementsByName(This,elementName,_retval)
#define nsIDOMHTMLDocument_GetItems(This,types,_retval) (This)->lpVtbl->GetItems(This,types,_retval)
#define nsIDOMHTMLDocument_Open(This,aContentTypeOrUrl,aReplaceOrName,aFeatures,cx,_argc,_retval) (This)->lpVtbl->Open(This,aContentTypeOrUrl,aReplaceOrName,aFeatures,cx,_argc,_retval)
#define nsIDOMHTMLDocument_Close(This) (This)->lpVtbl->Close(This)
#define nsIDOMHTMLDocument_Write(This,text,cx) (This)->lpVtbl->Write(This,text,cx)
#define nsIDOMHTMLDocument_Writeln(This,text,cx) (This)->lpVtbl->Writeln(This,text,cx)
#define nsIDOMHTMLDocument_GetDesignMode(This,aDesignMode) (This)->lpVtbl->GetDesignMode(This,aDesignMode)
#define nsIDOMHTMLDocument_SetDesignMode(This,aDesignMode) (This)->lpVtbl->SetDesignMode(This,aDesignMode)
#define nsIDOMHTMLDocument_ExecCommand(This,commandID,doShowUI,value,_retval) (This)->lpVtbl->ExecCommand(This,commandID,doShowUI,value,_retval)
#define nsIDOMHTMLDocument_QueryCommandEnabled(This,commandID,_retval) (This)->lpVtbl->QueryCommandEnabled(This,commandID,_retval)
#define nsIDOMHTMLDocument_QueryCommandIndeterm(This,commandID,_retval) (This)->lpVtbl->QueryCommandIndeterm(This,commandID,_retval)
#define nsIDOMHTMLDocument_QueryCommandState(This,commandID,_retval) (This)->lpVtbl->QueryCommandState(This,commandID,_retval)
#define nsIDOMHTMLDocument_QueryCommandSupported(This,commandID,_retval) (This)->lpVtbl->QueryCommandSupported(This,commandID,_retval)
#define nsIDOMHTMLDocument_QueryCommandValue(This,commandID,_retval) (This)->lpVtbl->QueryCommandValue(This,commandID,_retval)
#define nsIDOMHTMLDocument_GetFgColor(This,aFgColor) (This)->lpVtbl->GetFgColor(This,aFgColor)
#define nsIDOMHTMLDocument_SetFgColor(This,aFgColor) (This)->lpVtbl->SetFgColor(This,aFgColor)
#define nsIDOMHTMLDocument_GetBgColor(This,aBgColor) (This)->lpVtbl->GetBgColor(This,aBgColor)
#define nsIDOMHTMLDocument_SetBgColor(This,aBgColor) (This)->lpVtbl->SetBgColor(This,aBgColor)
#define nsIDOMHTMLDocument_GetLinkColor(This,aLinkColor) (This)->lpVtbl->GetLinkColor(This,aLinkColor)
#define nsIDOMHTMLDocument_SetLinkColor(This,aLinkColor) (This)->lpVtbl->SetLinkColor(This,aLinkColor)
#define nsIDOMHTMLDocument_GetVlinkColor(This,aVlinkColor) (This)->lpVtbl->GetVlinkColor(This,aVlinkColor)
#define nsIDOMHTMLDocument_SetVlinkColor(This,aVlinkColor) (This)->lpVtbl->SetVlinkColor(This,aVlinkColor)
#define nsIDOMHTMLDocument_GetAlinkColor(This,aAlinkColor) (This)->lpVtbl->GetAlinkColor(This,aAlinkColor)
#define nsIDOMHTMLDocument_SetAlinkColor(This,aAlinkColor) (This)->lpVtbl->SetAlinkColor(This,aAlinkColor)
#define nsIDOMHTMLDocument_GetAnchors(This,aAnchors) (This)->lpVtbl->GetAnchors(This,aAnchors)
#define nsIDOMHTMLDocument_GetApplets(This,aApplets) (This)->lpVtbl->GetApplets(This,aApplets)
#define nsIDOMHTMLDocument_Clear(This) (This)->lpVtbl->Clear(This)
#define nsIDOMHTMLDocument_GetSelection(This,_retval) (This)->lpVtbl->GetSelection(This,_retval)
#define nsIDOMHTMLDocument_CaptureEvents(This) (This)->lpVtbl->CaptureEvents(This)
#define nsIDOMHTMLDocument_ReleaseEvents(This) (This)->lpVtbl->ReleaseEvents(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLDocument_QueryInterface(nsIDOMHTMLDocument* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLDocument_AddRef(nsIDOMHTMLDocument* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLDocument_Release(nsIDOMHTMLDocument* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMNode methods ***/
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetNodeName(nsIDOMHTMLDocument* This,nsAString *aNodeName) {
    return This->lpVtbl->GetNodeName(This,aNodeName);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetNodeValue(nsIDOMHTMLDocument* This,nsAString *aNodeValue) {
    return This->lpVtbl->GetNodeValue(This,aNodeValue);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_SetNodeValue(nsIDOMHTMLDocument* This,const nsAString *aNodeValue) {
    return This->lpVtbl->SetNodeValue(This,aNodeValue);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetNodeType(nsIDOMHTMLDocument* This,UINT16 *aNodeType) {
    return This->lpVtbl->GetNodeType(This,aNodeType);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetParentNode(nsIDOMHTMLDocument* This,nsIDOMNode **aParentNode) {
    return This->lpVtbl->GetParentNode(This,aParentNode);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetParentElement(nsIDOMHTMLDocument* This,nsIDOMElement **aParentElement) {
    return This->lpVtbl->GetParentElement(This,aParentElement);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetChildNodes(nsIDOMHTMLDocument* This,nsIDOMNodeList **aChildNodes) {
    return This->lpVtbl->GetChildNodes(This,aChildNodes);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetFirstChild(nsIDOMHTMLDocument* This,nsIDOMNode **aFirstChild) {
    return This->lpVtbl->GetFirstChild(This,aFirstChild);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetLastChild(nsIDOMHTMLDocument* This,nsIDOMNode **aLastChild) {
    return This->lpVtbl->GetLastChild(This,aLastChild);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetPreviousSibling(nsIDOMHTMLDocument* This,nsIDOMNode **aPreviousSibling) {
    return This->lpVtbl->GetPreviousSibling(This,aPreviousSibling);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetNextSibling(nsIDOMHTMLDocument* This,nsIDOMNode **aNextSibling) {
    return This->lpVtbl->GetNextSibling(This,aNextSibling);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetOwnerDocument(nsIDOMHTMLDocument* This,nsIDOMDocument **aOwnerDocument) {
    return This->lpVtbl->GetOwnerDocument(This,aOwnerDocument);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_InsertBefore(nsIDOMHTMLDocument* This,nsIDOMNode *newChild,nsIDOMNode *refChild,nsIDOMNode **_retval) {
    return This->lpVtbl->InsertBefore(This,newChild,refChild,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_ReplaceChild(nsIDOMHTMLDocument* This,nsIDOMNode *newChild,nsIDOMNode *oldChild,nsIDOMNode **_retval) {
    return This->lpVtbl->ReplaceChild(This,newChild,oldChild,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_RemoveChild(nsIDOMHTMLDocument* This,nsIDOMNode *oldChild,nsIDOMNode **_retval) {
    return This->lpVtbl->RemoveChild(This,oldChild,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_AppendChild(nsIDOMHTMLDocument* This,nsIDOMNode *newChild,nsIDOMNode **_retval) {
    return This->lpVtbl->AppendChild(This,newChild,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_HasChildNodes(nsIDOMHTMLDocument* This,cpp_bool *_retval) {
    return This->lpVtbl->HasChildNodes(This,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_CloneNode(nsIDOMHTMLDocument* This,cpp_bool deep,UINT8 _argc,nsIDOMNode **_retval) {
    return This->lpVtbl->CloneNode(This,deep,_argc,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_Normalize(nsIDOMHTMLDocument* This) {
    return This->lpVtbl->Normalize(This);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetNamespaceURI(nsIDOMHTMLDocument* This,nsAString *aNamespaceURI) {
    return This->lpVtbl->GetNamespaceURI(This,aNamespaceURI);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetPrefix(nsIDOMHTMLDocument* This,nsAString *aPrefix) {
    return This->lpVtbl->GetPrefix(This,aPrefix);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetLocalName(nsIDOMHTMLDocument* This,nsAString *aLocalName) {
    return This->lpVtbl->GetLocalName(This,aLocalName);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_UnusedPlaceholder(nsIDOMHTMLDocument* This,cpp_bool *_retval) {
    return This->lpVtbl->UnusedPlaceholder(This,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetDOMBaseURI(nsIDOMHTMLDocument* This,nsAString *aBaseURI) {
    return This->lpVtbl->GetDOMBaseURI(This,aBaseURI);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_CompareDocumentPosition(nsIDOMHTMLDocument* This,nsIDOMNode *other,UINT16 *_retval) {
    return This->lpVtbl->CompareDocumentPosition(This,other,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetTextContent(nsIDOMHTMLDocument* This,nsAString *aTextContent) {
    return This->lpVtbl->GetTextContent(This,aTextContent);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_SetTextContent(nsIDOMHTMLDocument* This,const nsAString *aTextContent) {
    return This->lpVtbl->SetTextContent(This,aTextContent);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_LookupPrefix(nsIDOMHTMLDocument* This,const nsAString *namespaceURI,nsAString *_retval) {
    return This->lpVtbl->LookupPrefix(This,namespaceURI,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_IsDefaultNamespace(nsIDOMHTMLDocument* This,const nsAString *namespaceURI,cpp_bool *_retval) {
    return This->lpVtbl->IsDefaultNamespace(This,namespaceURI,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_LookupNamespaceURI(nsIDOMHTMLDocument* This,const nsAString *prefix,nsAString *_retval) {
    return This->lpVtbl->LookupNamespaceURI(This,prefix,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_IsEqualNode(nsIDOMHTMLDocument* This,nsIDOMNode *arg,cpp_bool *_retval) {
    return This->lpVtbl->IsEqualNode(This,arg,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_SetUserData(nsIDOMHTMLDocument* This,const nsAString *key,nsIVariant *data,nsIVariant **_retval) {
    return This->lpVtbl->SetUserData(This,key,data,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetUserData(nsIDOMHTMLDocument* This,const nsAString *key,nsIVariant **_retval) {
    return This->lpVtbl->GetUserData(This,key,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_Contains(nsIDOMHTMLDocument* This,nsIDOMNode *aOther,cpp_bool *_retval) {
    return This->lpVtbl->Contains(This,aOther,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetMshtmlNode(nsIDOMHTMLDocument* This,nsISupports **aMshtmlNode) {
    return This->lpVtbl->GetMshtmlNode(This,aMshtmlNode);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_SetMshtmlNode(nsIDOMHTMLDocument* This,nsISupports *aMshtmlNode) {
    return This->lpVtbl->SetMshtmlNode(This,aMshtmlNode);
}
/*** nsIDOMDocument methods ***/
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetDoctype(nsIDOMHTMLDocument* This,nsIDOMDocumentType **aDoctype) {
    return This->lpVtbl->GetDoctype(This,aDoctype);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetImplementation(nsIDOMHTMLDocument* This,nsIDOMDOMImplementation **aImplementation) {
    return This->lpVtbl->GetImplementation(This,aImplementation);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetDocumentElement(nsIDOMHTMLDocument* This,nsIDOMElement **aDocumentElement) {
    return This->lpVtbl->GetDocumentElement(This,aDocumentElement);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_CreateElement(nsIDOMHTMLDocument* This,const nsAString *tagName,nsIDOMElement **_retval) {
    return This->lpVtbl->CreateElement(This,tagName,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_CreateDocumentFragment(nsIDOMHTMLDocument* This,nsIDOMDocumentFragment **_retval) {
    return This->lpVtbl->CreateDocumentFragment(This,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_CreateTextNode(nsIDOMHTMLDocument* This,const nsAString *data,nsIDOMText **_retval) {
    return This->lpVtbl->CreateTextNode(This,data,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_CreateComment(nsIDOMHTMLDocument* This,const nsAString *data,nsIDOMComment **_retval) {
    return This->lpVtbl->CreateComment(This,data,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_CreateCDATASection(nsIDOMHTMLDocument* This,const nsAString *data,nsIDOMCDATASection **_retval) {
    return This->lpVtbl->CreateCDATASection(This,data,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_CreateProcessingInstruction(nsIDOMHTMLDocument* This,const nsAString *target,const nsAString *data,nsIDOMProcessingInstruction **_retval) {
    return This->lpVtbl->CreateProcessingInstruction(This,target,data,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_CreateAttribute(nsIDOMHTMLDocument* This,const nsAString *name,nsIDOMAttr **_retval) {
    return This->lpVtbl->CreateAttribute(This,name,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetElementsByTagName(nsIDOMHTMLDocument* This,const nsAString *tagname,nsIDOMNodeList **_retval) {
    return This->lpVtbl->GetElementsByTagName(This,tagname,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_ImportNode(nsIDOMHTMLDocument* This,nsIDOMNode *importedNode,cpp_bool deep,UINT8 _argc,nsIDOMNode **_retval) {
    return This->lpVtbl->ImportNode(This,importedNode,deep,_argc,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_CreateElementNS(nsIDOMHTMLDocument* This,const nsAString *namespaceURI,const nsAString *qualifiedName,nsIDOMElement **_retval) {
    return This->lpVtbl->CreateElementNS(This,namespaceURI,qualifiedName,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_CreateAttributeNS(nsIDOMHTMLDocument* This,const nsAString *namespaceURI,const nsAString *qualifiedName,nsIDOMAttr **_retval) {
    return This->lpVtbl->CreateAttributeNS(This,namespaceURI,qualifiedName,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetElementsByTagNameNS(nsIDOMHTMLDocument* This,const nsAString *namespaceURI,const nsAString *localName,nsIDOMNodeList **_retval) {
    return This->lpVtbl->GetElementsByTagNameNS(This,namespaceURI,localName,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetElementById(nsIDOMHTMLDocument* This,const nsAString *elementId,nsIDOMElement **_retval) {
    return This->lpVtbl->GetElementById(This,elementId,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetInputEncoding(nsIDOMHTMLDocument* This,nsAString *aInputEncoding) {
    return This->lpVtbl->GetInputEncoding(This,aInputEncoding);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetDocumentURI(nsIDOMHTMLDocument* This,nsAString *aDocumentURI) {
    return This->lpVtbl->GetDocumentURI(This,aDocumentURI);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetURL(nsIDOMHTMLDocument* This,nsAString *aURL) {
    return This->lpVtbl->GetURL(This,aURL);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_AdoptNode(nsIDOMHTMLDocument* This,nsIDOMNode *source,nsIDOMNode **_retval) {
    return This->lpVtbl->AdoptNode(This,source,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_CreateRange(nsIDOMHTMLDocument* This,nsIDOMRange **_retval) {
    return This->lpVtbl->CreateRange(This,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_CreateNodeIterator(nsIDOMHTMLDocument* This,nsIDOMNode *root,UINT32 whatToShow,nsIDOMNodeFilter *filter,UINT8 _argc,nsIDOMNodeIterator **_retval) {
    return This->lpVtbl->CreateNodeIterator(This,root,whatToShow,filter,_argc,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_CreateTreeWalker(nsIDOMHTMLDocument* This,nsIDOMNode *root,UINT32 whatToShow,nsIDOMNodeFilter *filter,UINT8 _argc,nsIDOMTreeWalker **_retval) {
    return This->lpVtbl->CreateTreeWalker(This,root,whatToShow,filter,_argc,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_CreateEvent(nsIDOMHTMLDocument* This,const nsAString *eventType,nsIDOMEvent **_retval) {
    return This->lpVtbl->CreateEvent(This,eventType,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetDefaultView(nsIDOMHTMLDocument* This,mozIDOMWindowProxy **aDefaultView) {
    return This->lpVtbl->GetDefaultView(This,aDefaultView);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetCharacterSet(nsIDOMHTMLDocument* This,nsAString *aCharacterSet) {
    return This->lpVtbl->GetCharacterSet(This,aCharacterSet);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetDir(nsIDOMHTMLDocument* This,nsAString *aDir) {
    return This->lpVtbl->GetDir(This,aDir);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_SetDir(nsIDOMHTMLDocument* This,const nsAString *aDir) {
    return This->lpVtbl->SetDir(This,aDir);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetLocation(nsIDOMHTMLDocument* This,nsIDOMLocation **aLocation) {
    return This->lpVtbl->GetLocation(This,aLocation);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetTitle(nsIDOMHTMLDocument* This,nsAString *aTitle) {
    return This->lpVtbl->GetTitle(This,aTitle);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_SetTitle(nsIDOMHTMLDocument* This,const nsAString *aTitle) {
    return This->lpVtbl->SetTitle(This,aTitle);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetReadyState(nsIDOMHTMLDocument* This,nsAString *aReadyState) {
    return This->lpVtbl->GetReadyState(This,aReadyState);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetLastModified(nsIDOMHTMLDocument* This,nsAString *aLastModified) {
    return This->lpVtbl->GetLastModified(This,aLastModified);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetReferrer(nsIDOMHTMLDocument* This,nsAString *aReferrer) {
    return This->lpVtbl->GetReferrer(This,aReferrer);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_HasFocus(nsIDOMHTMLDocument* This,cpp_bool *_retval) {
    return This->lpVtbl->HasFocus(This,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetActiveElement(nsIDOMHTMLDocument* This,nsIDOMElement **aActiveElement) {
    return This->lpVtbl->GetActiveElement(This,aActiveElement);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetElementsByClassName(nsIDOMHTMLDocument* This,const nsAString *classes,nsIDOMNodeList **_retval) {
    return This->lpVtbl->GetElementsByClassName(This,classes,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetStyleSheets(nsIDOMHTMLDocument* This,nsIDOMStyleSheetList **aStyleSheets) {
    return This->lpVtbl->GetStyleSheets(This,aStyleSheets);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetPreferredStyleSheetSet(nsIDOMHTMLDocument* This,nsAString *aPreferredStyleSheetSet) {
    return This->lpVtbl->GetPreferredStyleSheetSet(This,aPreferredStyleSheetSet);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetSelectedStyleSheetSet(nsIDOMHTMLDocument* This,nsAString *aSelectedStyleSheetSet) {
    return This->lpVtbl->GetSelectedStyleSheetSet(This,aSelectedStyleSheetSet);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_SetSelectedStyleSheetSet(nsIDOMHTMLDocument* This,const nsAString *aSelectedStyleSheetSet) {
    return This->lpVtbl->SetSelectedStyleSheetSet(This,aSelectedStyleSheetSet);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetLastStyleSheetSet(nsIDOMHTMLDocument* This,nsAString *aLastStyleSheetSet) {
    return This->lpVtbl->GetLastStyleSheetSet(This,aLastStyleSheetSet);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetStyleSheetSets(nsIDOMHTMLDocument* This,nsISupports **aStyleSheetSets) {
    return This->lpVtbl->GetStyleSheetSets(This,aStyleSheetSets);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_EnableStyleSheetsForSet(nsIDOMHTMLDocument* This,const nsAString *name) {
    return This->lpVtbl->EnableStyleSheetsForSet(This,name);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_ElementFromPoint(nsIDOMHTMLDocument* This,float x,float y,nsIDOMElement **_retval) {
    return This->lpVtbl->ElementFromPoint(This,x,y,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetContentType(nsIDOMHTMLDocument* This,nsAString *aContentType) {
    return This->lpVtbl->GetContentType(This,aContentType);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetMozSyntheticDocument(nsIDOMHTMLDocument* This,cpp_bool *aMozSyntheticDocument) {
    return This->lpVtbl->GetMozSyntheticDocument(This,aMozSyntheticDocument);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetCurrentScript(nsIDOMHTMLDocument* This,nsIDOMElement **aCurrentScript) {
    return This->lpVtbl->GetCurrentScript(This,aCurrentScript);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_ReleaseCapture(nsIDOMHTMLDocument* This) {
    return This->lpVtbl->ReleaseCapture(This);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_MozSetImageElement(nsIDOMHTMLDocument* This,const nsAString *aImageElementId,nsIDOMElement *aImageElement) {
    return This->lpVtbl->MozSetImageElement(This,aImageElementId,aImageElement);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetMozFullScreenElement(nsIDOMHTMLDocument* This,nsIDOMElement **aMozFullScreenElement) {
    return This->lpVtbl->GetMozFullScreenElement(This,aMozFullScreenElement);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_MozCancelFullScreen(nsIDOMHTMLDocument* This) {
    return This->lpVtbl->MozCancelFullScreen(This);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetMozFullScreen(nsIDOMHTMLDocument* This,cpp_bool *aMozFullScreen) {
    return This->lpVtbl->GetMozFullScreen(This,aMozFullScreen);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetMozFullScreenEnabled(nsIDOMHTMLDocument* This,cpp_bool *aMozFullScreenEnabled) {
    return This->lpVtbl->GetMozFullScreenEnabled(This,aMozFullScreenEnabled);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetMozPointerLockElement(nsIDOMHTMLDocument* This,nsIDOMElement **aMozPointerLockElement) {
    return This->lpVtbl->GetMozPointerLockElement(This,aMozPointerLockElement);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_CaretPositionFromPoint(nsIDOMHTMLDocument* This,float x,float y,nsISupports **_retval) {
    return This->lpVtbl->CaretPositionFromPoint(This,x,y,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_MozExitPointerLock(nsIDOMHTMLDocument* This) {
    return This->lpVtbl->MozExitPointerLock(This);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetHidden(nsIDOMHTMLDocument* This,cpp_bool *aHidden) {
    return This->lpVtbl->GetHidden(This,aHidden);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetMozHidden(nsIDOMHTMLDocument* This,cpp_bool *aMozHidden) {
    return This->lpVtbl->GetMozHidden(This,aMozHidden);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetVisibilityState(nsIDOMHTMLDocument* This,nsAString *aVisibilityState) {
    return This->lpVtbl->GetVisibilityState(This,aVisibilityState);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetMozVisibilityState(nsIDOMHTMLDocument* This,nsAString *aMozVisibilityState) {
    return This->lpVtbl->GetMozVisibilityState(This,aMozVisibilityState);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetCompatMode(nsIDOMHTMLDocument* This,nsAString *aCompatMode) {
    return This->lpVtbl->GetCompatMode(This,aCompatMode);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_QuerySelector(nsIDOMHTMLDocument* This,const nsAString *selectors,nsIDOMElement **_retval) {
    return This->lpVtbl->QuerySelector(This,selectors,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_QuerySelectorAll(nsIDOMHTMLDocument* This,const nsAString *selectors,nsIDOMNodeList **_retval) {
    return This->lpVtbl->QuerySelectorAll(This,selectors,_retval);
}
/*** nsIDOMHTMLDocument methods ***/
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetDomain(nsIDOMHTMLDocument* This,nsAString *aDomain) {
    return This->lpVtbl->GetDomain(This,aDomain);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_SetDomain(nsIDOMHTMLDocument* This,const nsAString *aDomain) {
    return This->lpVtbl->SetDomain(This,aDomain);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetCookie(nsIDOMHTMLDocument* This,nsAString *aCookie) {
    return This->lpVtbl->GetCookie(This,aCookie);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_SetCookie(nsIDOMHTMLDocument* This,const nsAString *aCookie) {
    return This->lpVtbl->SetCookie(This,aCookie);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetHead(nsIDOMHTMLDocument* This,nsIDOMHTMLHeadElement **aHead) {
    return This->lpVtbl->GetHead(This,aHead);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetBody(nsIDOMHTMLDocument* This,nsIDOMHTMLElement **aBody) {
    return This->lpVtbl->GetBody(This,aBody);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_SetBody(nsIDOMHTMLDocument* This,nsIDOMHTMLElement *aBody) {
    return This->lpVtbl->SetBody(This,aBody);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetImages(nsIDOMHTMLDocument* This,nsIDOMHTMLCollection **aImages) {
    return This->lpVtbl->GetImages(This,aImages);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetEmbeds(nsIDOMHTMLDocument* This,nsIDOMHTMLCollection **aEmbeds) {
    return This->lpVtbl->GetEmbeds(This,aEmbeds);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetPlugins(nsIDOMHTMLDocument* This,nsIDOMHTMLCollection **aPlugins) {
    return This->lpVtbl->GetPlugins(This,aPlugins);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetLinks(nsIDOMHTMLDocument* This,nsIDOMHTMLCollection **aLinks) {
    return This->lpVtbl->GetLinks(This,aLinks);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetForms(nsIDOMHTMLDocument* This,nsIDOMHTMLCollection **aForms) {
    return This->lpVtbl->GetForms(This,aForms);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetScripts(nsIDOMHTMLDocument* This,nsIDOMHTMLCollection **aScripts) {
    return This->lpVtbl->GetScripts(This,aScripts);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetElementsByName(nsIDOMHTMLDocument* This,const nsAString *elementName,nsIDOMNodeList **_retval) {
    return This->lpVtbl->GetElementsByName(This,elementName,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetItems(nsIDOMHTMLDocument* This,const nsAString *types,nsIDOMNodeList **_retval) {
    return This->lpVtbl->GetItems(This,types,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_Open(nsIDOMHTMLDocument* This,const nsAString *aContentTypeOrUrl,const nsAString *aReplaceOrName,const nsAString *aFeatures,JSContext *cx,UINT8 _argc,nsISupports **_retval) {
    return This->lpVtbl->Open(This,aContentTypeOrUrl,aReplaceOrName,aFeatures,cx,_argc,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_Close(nsIDOMHTMLDocument* This) {
    return This->lpVtbl->Close(This);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_Write(nsIDOMHTMLDocument* This,const nsAString *text,JSContext *cx) {
    return This->lpVtbl->Write(This,text,cx);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_Writeln(nsIDOMHTMLDocument* This,const nsAString *text,JSContext *cx) {
    return This->lpVtbl->Writeln(This,text,cx);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetDesignMode(nsIDOMHTMLDocument* This,nsAString *aDesignMode) {
    return This->lpVtbl->GetDesignMode(This,aDesignMode);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_SetDesignMode(nsIDOMHTMLDocument* This,const nsAString *aDesignMode) {
    return This->lpVtbl->SetDesignMode(This,aDesignMode);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_ExecCommand(nsIDOMHTMLDocument* This,const nsAString *commandID,cpp_bool doShowUI,const nsAString *value,cpp_bool *_retval) {
    return This->lpVtbl->ExecCommand(This,commandID,doShowUI,value,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_QueryCommandEnabled(nsIDOMHTMLDocument* This,const nsAString *commandID,cpp_bool *_retval) {
    return This->lpVtbl->QueryCommandEnabled(This,commandID,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_QueryCommandIndeterm(nsIDOMHTMLDocument* This,const nsAString *commandID,cpp_bool *_retval) {
    return This->lpVtbl->QueryCommandIndeterm(This,commandID,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_QueryCommandState(nsIDOMHTMLDocument* This,const nsAString *commandID,cpp_bool *_retval) {
    return This->lpVtbl->QueryCommandState(This,commandID,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_QueryCommandSupported(nsIDOMHTMLDocument* This,const nsAString *commandID,cpp_bool *_retval) {
    return This->lpVtbl->QueryCommandSupported(This,commandID,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_QueryCommandValue(nsIDOMHTMLDocument* This,const nsAString *commandID,nsAString *_retval) {
    return This->lpVtbl->QueryCommandValue(This,commandID,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetFgColor(nsIDOMHTMLDocument* This,nsAString *aFgColor) {
    return This->lpVtbl->GetFgColor(This,aFgColor);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_SetFgColor(nsIDOMHTMLDocument* This,const nsAString *aFgColor) {
    return This->lpVtbl->SetFgColor(This,aFgColor);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetBgColor(nsIDOMHTMLDocument* This,nsAString *aBgColor) {
    return This->lpVtbl->GetBgColor(This,aBgColor);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_SetBgColor(nsIDOMHTMLDocument* This,const nsAString *aBgColor) {
    return This->lpVtbl->SetBgColor(This,aBgColor);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetLinkColor(nsIDOMHTMLDocument* This,nsAString *aLinkColor) {
    return This->lpVtbl->GetLinkColor(This,aLinkColor);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_SetLinkColor(nsIDOMHTMLDocument* This,const nsAString *aLinkColor) {
    return This->lpVtbl->SetLinkColor(This,aLinkColor);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetVlinkColor(nsIDOMHTMLDocument* This,nsAString *aVlinkColor) {
    return This->lpVtbl->GetVlinkColor(This,aVlinkColor);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_SetVlinkColor(nsIDOMHTMLDocument* This,const nsAString *aVlinkColor) {
    return This->lpVtbl->SetVlinkColor(This,aVlinkColor);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetAlinkColor(nsIDOMHTMLDocument* This,nsAString *aAlinkColor) {
    return This->lpVtbl->GetAlinkColor(This,aAlinkColor);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_SetAlinkColor(nsIDOMHTMLDocument* This,const nsAString *aAlinkColor) {
    return This->lpVtbl->SetAlinkColor(This,aAlinkColor);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetAnchors(nsIDOMHTMLDocument* This,nsIDOMHTMLCollection **aAnchors) {
    return This->lpVtbl->GetAnchors(This,aAnchors);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetApplets(nsIDOMHTMLDocument* This,nsIDOMHTMLCollection **aApplets) {
    return This->lpVtbl->GetApplets(This,aApplets);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_Clear(nsIDOMHTMLDocument* This) {
    return This->lpVtbl->Clear(This);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_GetSelection(nsIDOMHTMLDocument* This,nsISelection **_retval) {
    return This->lpVtbl->GetSelection(This,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_CaptureEvents(nsIDOMHTMLDocument* This) {
    return This->lpVtbl->CaptureEvents(This);
}
static FORCEINLINE nsresult nsIDOMHTMLDocument_ReleaseEvents(nsIDOMHTMLDocument* This) {
    return This->lpVtbl->ReleaseEvents(This);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLDocument_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMRange interface
 */
#ifndef __nsIDOMRange_INTERFACE_DEFINED__
#define __nsIDOMRange_INTERFACE_DEFINED__

enum {
    NS_START_TO_START = 0,
    NS_START_TO_END = 1,
    NS_END_TO_END = 2,
    NS_END_TO_START = 3
};
DEFINE_GUID(IID_nsIDOMRange, 0x1f94055c, 0x42e7, 0x4a30, 0x96,0xa1, 0x6a,0x80,0x4f,0x1c,0x2d,0x1e);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("1f94055c-42e7-4a30-96a1-6a804f1c2d1e")
nsIDOMRange : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetStartContainer(
        nsIDOMNode **aStartContainer) = 0;

    virtual nsresult STDMETHODCALLTYPE GetStartOffset(
        LONG *aStartOffset) = 0;

    virtual nsresult STDMETHODCALLTYPE GetEndContainer(
        nsIDOMNode **aEndContainer) = 0;

    virtual nsresult STDMETHODCALLTYPE GetEndOffset(
        LONG *aEndOffset) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCollapsed(
        cpp_bool *aCollapsed) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCommonAncestorContainer(
        nsIDOMNode **aCommonAncestorContainer) = 0;

    virtual nsresult STDMETHODCALLTYPE SetStart(
        nsIDOMNode *refNode,
        LONG offset) = 0;

    virtual nsresult STDMETHODCALLTYPE SetEnd(
        nsIDOMNode *refNode,
        LONG offset) = 0;

    virtual nsresult STDMETHODCALLTYPE SetStartBefore(
        nsIDOMNode *refNode) = 0;

    virtual nsresult STDMETHODCALLTYPE SetStartAfter(
        nsIDOMNode *refNode) = 0;

    virtual nsresult STDMETHODCALLTYPE SetEndBefore(
        nsIDOMNode *refNode) = 0;

    virtual nsresult STDMETHODCALLTYPE SetEndAfter(
        nsIDOMNode *refNode) = 0;

    virtual nsresult STDMETHODCALLTYPE Collapse(
        cpp_bool toStart) = 0;

    virtual nsresult STDMETHODCALLTYPE SelectNode(
        nsIDOMNode *refNode) = 0;

    virtual nsresult STDMETHODCALLTYPE SelectNodeContents(
        nsIDOMNode *refNode) = 0;

    virtual nsresult STDMETHODCALLTYPE CompareBoundaryPoints(
        UINT16 how,
        nsIDOMRange *sourceRange,
        short *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE DeleteContents(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE ExtractContents(
        nsIDOMDocumentFragment **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CloneContents(
        nsIDOMDocumentFragment **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE InsertNode(
        nsIDOMNode *newNode) = 0;

    virtual nsresult STDMETHODCALLTYPE SurroundContents(
        nsIDOMNode *newParent) = 0;

    virtual nsresult STDMETHODCALLTYPE CloneRange(
        nsIDOMRange **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE ToString(
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Detach(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateContextualFragment(
        const nsAString *fragment,
        nsIDOMDocumentFragment **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE IsPointInRange(
        nsIDOMNode *parent,
        LONG offset,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE ComparePoint(
        nsIDOMNode *parent,
        LONG offset,
        short *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE IntersectsNode(
        nsIDOMNode *node,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetClientRects(
        nsIDOMClientRectList **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBoundingClientRect(
        nsIDOMClientRect **_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMRange, 0x1f94055c, 0x42e7, 0x4a30, 0x96,0xa1, 0x6a,0x80,0x4f,0x1c,0x2d,0x1e)
#endif
#else
typedef struct nsIDOMRangeVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMRange *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMRange *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMRange *This);

    /*** nsIDOMRange methods ***/
    nsresult (STDMETHODCALLTYPE *GetStartContainer)(
        nsIDOMRange *This,
        nsIDOMNode **aStartContainer);

    nsresult (STDMETHODCALLTYPE *GetStartOffset)(
        nsIDOMRange *This,
        LONG *aStartOffset);

    nsresult (STDMETHODCALLTYPE *GetEndContainer)(
        nsIDOMRange *This,
        nsIDOMNode **aEndContainer);

    nsresult (STDMETHODCALLTYPE *GetEndOffset)(
        nsIDOMRange *This,
        LONG *aEndOffset);

    nsresult (STDMETHODCALLTYPE *GetCollapsed)(
        nsIDOMRange *This,
        cpp_bool *aCollapsed);

    nsresult (STDMETHODCALLTYPE *GetCommonAncestorContainer)(
        nsIDOMRange *This,
        nsIDOMNode **aCommonAncestorContainer);

    nsresult (STDMETHODCALLTYPE *SetStart)(
        nsIDOMRange *This,
        nsIDOMNode *refNode,
        LONG offset);

    nsresult (STDMETHODCALLTYPE *SetEnd)(
        nsIDOMRange *This,
        nsIDOMNode *refNode,
        LONG offset);

    nsresult (STDMETHODCALLTYPE *SetStartBefore)(
        nsIDOMRange *This,
        nsIDOMNode *refNode);

    nsresult (STDMETHODCALLTYPE *SetStartAfter)(
        nsIDOMRange *This,
        nsIDOMNode *refNode);

    nsresult (STDMETHODCALLTYPE *SetEndBefore)(
        nsIDOMRange *This,
        nsIDOMNode *refNode);

    nsresult (STDMETHODCALLTYPE *SetEndAfter)(
        nsIDOMRange *This,
        nsIDOMNode *refNode);

    nsresult (STDMETHODCALLTYPE *Collapse)(
        nsIDOMRange *This,
        cpp_bool toStart);

    nsresult (STDMETHODCALLTYPE *SelectNode)(
        nsIDOMRange *This,
        nsIDOMNode *refNode);

    nsresult (STDMETHODCALLTYPE *SelectNodeContents)(
        nsIDOMRange *This,
        nsIDOMNode *refNode);

    nsresult (STDMETHODCALLTYPE *CompareBoundaryPoints)(
        nsIDOMRange *This,
        UINT16 how,
        nsIDOMRange *sourceRange,
        short *_retval);

    nsresult (STDMETHODCALLTYPE *DeleteContents)(
        nsIDOMRange *This);

    nsresult (STDMETHODCALLTYPE *ExtractContents)(
        nsIDOMRange *This,
        nsIDOMDocumentFragment **_retval);

    nsresult (STDMETHODCALLTYPE *CloneContents)(
        nsIDOMRange *This,
        nsIDOMDocumentFragment **_retval);

    nsresult (STDMETHODCALLTYPE *InsertNode)(
        nsIDOMRange *This,
        nsIDOMNode *newNode);

    nsresult (STDMETHODCALLTYPE *SurroundContents)(
        nsIDOMRange *This,
        nsIDOMNode *newParent);

    nsresult (STDMETHODCALLTYPE *CloneRange)(
        nsIDOMRange *This,
        nsIDOMRange **_retval);

    nsresult (STDMETHODCALLTYPE *ToString)(
        nsIDOMRange *This,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *Detach)(
        nsIDOMRange *This);

    nsresult (STDMETHODCALLTYPE *CreateContextualFragment)(
        nsIDOMRange *This,
        const nsAString *fragment,
        nsIDOMDocumentFragment **_retval);

    nsresult (STDMETHODCALLTYPE *IsPointInRange)(
        nsIDOMRange *This,
        nsIDOMNode *parent,
        LONG offset,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *ComparePoint)(
        nsIDOMRange *This,
        nsIDOMNode *parent,
        LONG offset,
        short *_retval);

    nsresult (STDMETHODCALLTYPE *IntersectsNode)(
        nsIDOMRange *This,
        nsIDOMNode *node,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetClientRects)(
        nsIDOMRange *This,
        nsIDOMClientRectList **_retval);

    nsresult (STDMETHODCALLTYPE *GetBoundingClientRect)(
        nsIDOMRange *This,
        nsIDOMClientRect **_retval);

    END_INTERFACE
} nsIDOMRangeVtbl;

interface nsIDOMRange {
    CONST_VTBL nsIDOMRangeVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMRange_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMRange_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMRange_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMRange methods ***/
#define nsIDOMRange_GetStartContainer(This,aStartContainer) (This)->lpVtbl->GetStartContainer(This,aStartContainer)
#define nsIDOMRange_GetStartOffset(This,aStartOffset) (This)->lpVtbl->GetStartOffset(This,aStartOffset)
#define nsIDOMRange_GetEndContainer(This,aEndContainer) (This)->lpVtbl->GetEndContainer(This,aEndContainer)
#define nsIDOMRange_GetEndOffset(This,aEndOffset) (This)->lpVtbl->GetEndOffset(This,aEndOffset)
#define nsIDOMRange_GetCollapsed(This,aCollapsed) (This)->lpVtbl->GetCollapsed(This,aCollapsed)
#define nsIDOMRange_GetCommonAncestorContainer(This,aCommonAncestorContainer) (This)->lpVtbl->GetCommonAncestorContainer(This,aCommonAncestorContainer)
#define nsIDOMRange_SetStart(This,refNode,offset) (This)->lpVtbl->SetStart(This,refNode,offset)
#define nsIDOMRange_SetEnd(This,refNode,offset) (This)->lpVtbl->SetEnd(This,refNode,offset)
#define nsIDOMRange_SetStartBefore(This,refNode) (This)->lpVtbl->SetStartBefore(This,refNode)
#define nsIDOMRange_SetStartAfter(This,refNode) (This)->lpVtbl->SetStartAfter(This,refNode)
#define nsIDOMRange_SetEndBefore(This,refNode) (This)->lpVtbl->SetEndBefore(This,refNode)
#define nsIDOMRange_SetEndAfter(This,refNode) (This)->lpVtbl->SetEndAfter(This,refNode)
#define nsIDOMRange_Collapse(This,toStart) (This)->lpVtbl->Collapse(This,toStart)
#define nsIDOMRange_SelectNode(This,refNode) (This)->lpVtbl->SelectNode(This,refNode)
#define nsIDOMRange_SelectNodeContents(This,refNode) (This)->lpVtbl->SelectNodeContents(This,refNode)
#define nsIDOMRange_CompareBoundaryPoints(This,how,sourceRange,_retval) (This)->lpVtbl->CompareBoundaryPoints(This,how,sourceRange,_retval)
#define nsIDOMRange_DeleteContents(This) (This)->lpVtbl->DeleteContents(This)
#define nsIDOMRange_ExtractContents(This,_retval) (This)->lpVtbl->ExtractContents(This,_retval)
#define nsIDOMRange_CloneContents(This,_retval) (This)->lpVtbl->CloneContents(This,_retval)
#define nsIDOMRange_InsertNode(This,newNode) (This)->lpVtbl->InsertNode(This,newNode)
#define nsIDOMRange_SurroundContents(This,newParent) (This)->lpVtbl->SurroundContents(This,newParent)
#define nsIDOMRange_CloneRange(This,_retval) (This)->lpVtbl->CloneRange(This,_retval)
#define nsIDOMRange_ToString(This,_retval) (This)->lpVtbl->ToString(This,_retval)
#define nsIDOMRange_Detach(This) (This)->lpVtbl->Detach(This)
#define nsIDOMRange_CreateContextualFragment(This,fragment,_retval) (This)->lpVtbl->CreateContextualFragment(This,fragment,_retval)
#define nsIDOMRange_IsPointInRange(This,parent,offset,_retval) (This)->lpVtbl->IsPointInRange(This,parent,offset,_retval)
#define nsIDOMRange_ComparePoint(This,parent,offset,_retval) (This)->lpVtbl->ComparePoint(This,parent,offset,_retval)
#define nsIDOMRange_IntersectsNode(This,node,_retval) (This)->lpVtbl->IntersectsNode(This,node,_retval)
#define nsIDOMRange_GetClientRects(This,_retval) (This)->lpVtbl->GetClientRects(This,_retval)
#define nsIDOMRange_GetBoundingClientRect(This,_retval) (This)->lpVtbl->GetBoundingClientRect(This,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMRange_QueryInterface(nsIDOMRange* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMRange_AddRef(nsIDOMRange* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMRange_Release(nsIDOMRange* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMRange methods ***/
static FORCEINLINE nsresult nsIDOMRange_GetStartContainer(nsIDOMRange* This,nsIDOMNode **aStartContainer) {
    return This->lpVtbl->GetStartContainer(This,aStartContainer);
}
static FORCEINLINE nsresult nsIDOMRange_GetStartOffset(nsIDOMRange* This,LONG *aStartOffset) {
    return This->lpVtbl->GetStartOffset(This,aStartOffset);
}
static FORCEINLINE nsresult nsIDOMRange_GetEndContainer(nsIDOMRange* This,nsIDOMNode **aEndContainer) {
    return This->lpVtbl->GetEndContainer(This,aEndContainer);
}
static FORCEINLINE nsresult nsIDOMRange_GetEndOffset(nsIDOMRange* This,LONG *aEndOffset) {
    return This->lpVtbl->GetEndOffset(This,aEndOffset);
}
static FORCEINLINE nsresult nsIDOMRange_GetCollapsed(nsIDOMRange* This,cpp_bool *aCollapsed) {
    return This->lpVtbl->GetCollapsed(This,aCollapsed);
}
static FORCEINLINE nsresult nsIDOMRange_GetCommonAncestorContainer(nsIDOMRange* This,nsIDOMNode **aCommonAncestorContainer) {
    return This->lpVtbl->GetCommonAncestorContainer(This,aCommonAncestorContainer);
}
static FORCEINLINE nsresult nsIDOMRange_SetStart(nsIDOMRange* This,nsIDOMNode *refNode,LONG offset) {
    return This->lpVtbl->SetStart(This,refNode,offset);
}
static FORCEINLINE nsresult nsIDOMRange_SetEnd(nsIDOMRange* This,nsIDOMNode *refNode,LONG offset) {
    return This->lpVtbl->SetEnd(This,refNode,offset);
}
static FORCEINLINE nsresult nsIDOMRange_SetStartBefore(nsIDOMRange* This,nsIDOMNode *refNode) {
    return This->lpVtbl->SetStartBefore(This,refNode);
}
static FORCEINLINE nsresult nsIDOMRange_SetStartAfter(nsIDOMRange* This,nsIDOMNode *refNode) {
    return This->lpVtbl->SetStartAfter(This,refNode);
}
static FORCEINLINE nsresult nsIDOMRange_SetEndBefore(nsIDOMRange* This,nsIDOMNode *refNode) {
    return This->lpVtbl->SetEndBefore(This,refNode);
}
static FORCEINLINE nsresult nsIDOMRange_SetEndAfter(nsIDOMRange* This,nsIDOMNode *refNode) {
    return This->lpVtbl->SetEndAfter(This,refNode);
}
static FORCEINLINE nsresult nsIDOMRange_Collapse(nsIDOMRange* This,cpp_bool toStart) {
    return This->lpVtbl->Collapse(This,toStart);
}
static FORCEINLINE nsresult nsIDOMRange_SelectNode(nsIDOMRange* This,nsIDOMNode *refNode) {
    return This->lpVtbl->SelectNode(This,refNode);
}
static FORCEINLINE nsresult nsIDOMRange_SelectNodeContents(nsIDOMRange* This,nsIDOMNode *refNode) {
    return This->lpVtbl->SelectNodeContents(This,refNode);
}
static FORCEINLINE nsresult nsIDOMRange_CompareBoundaryPoints(nsIDOMRange* This,UINT16 how,nsIDOMRange *sourceRange,short *_retval) {
    return This->lpVtbl->CompareBoundaryPoints(This,how,sourceRange,_retval);
}
static FORCEINLINE nsresult nsIDOMRange_DeleteContents(nsIDOMRange* This) {
    return This->lpVtbl->DeleteContents(This);
}
static FORCEINLINE nsresult nsIDOMRange_ExtractContents(nsIDOMRange* This,nsIDOMDocumentFragment **_retval) {
    return This->lpVtbl->ExtractContents(This,_retval);
}
static FORCEINLINE nsresult nsIDOMRange_CloneContents(nsIDOMRange* This,nsIDOMDocumentFragment **_retval) {
    return This->lpVtbl->CloneContents(This,_retval);
}
static FORCEINLINE nsresult nsIDOMRange_InsertNode(nsIDOMRange* This,nsIDOMNode *newNode) {
    return This->lpVtbl->InsertNode(This,newNode);
}
static FORCEINLINE nsresult nsIDOMRange_SurroundContents(nsIDOMRange* This,nsIDOMNode *newParent) {
    return This->lpVtbl->SurroundContents(This,newParent);
}
static FORCEINLINE nsresult nsIDOMRange_CloneRange(nsIDOMRange* This,nsIDOMRange **_retval) {
    return This->lpVtbl->CloneRange(This,_retval);
}
static FORCEINLINE nsresult nsIDOMRange_ToString(nsIDOMRange* This,nsAString *_retval) {
    return This->lpVtbl->ToString(This,_retval);
}
static FORCEINLINE nsresult nsIDOMRange_Detach(nsIDOMRange* This) {
    return This->lpVtbl->Detach(This);
}
static FORCEINLINE nsresult nsIDOMRange_CreateContextualFragment(nsIDOMRange* This,const nsAString *fragment,nsIDOMDocumentFragment **_retval) {
    return This->lpVtbl->CreateContextualFragment(This,fragment,_retval);
}
static FORCEINLINE nsresult nsIDOMRange_IsPointInRange(nsIDOMRange* This,nsIDOMNode *parent,LONG offset,cpp_bool *_retval) {
    return This->lpVtbl->IsPointInRange(This,parent,offset,_retval);
}
static FORCEINLINE nsresult nsIDOMRange_ComparePoint(nsIDOMRange* This,nsIDOMNode *parent,LONG offset,short *_retval) {
    return This->lpVtbl->ComparePoint(This,parent,offset,_retval);
}
static FORCEINLINE nsresult nsIDOMRange_IntersectsNode(nsIDOMRange* This,nsIDOMNode *node,cpp_bool *_retval) {
    return This->lpVtbl->IntersectsNode(This,node,_retval);
}
static FORCEINLINE nsresult nsIDOMRange_GetClientRects(nsIDOMRange* This,nsIDOMClientRectList **_retval) {
    return This->lpVtbl->GetClientRects(This,_retval);
}
static FORCEINLINE nsresult nsIDOMRange_GetBoundingClientRect(nsIDOMRange* This,nsIDOMClientRect **_retval) {
    return This->lpVtbl->GetBoundingClientRect(This,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIDOMRange_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsISelection interface
 */
#ifndef __nsISelection_INTERFACE_DEFINED__
#define __nsISelection_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsISelection, 0xe0a4d4b3, 0xf34e, 0x44bd, 0xb1,0xf2, 0x4e,0x3b,0xde,0x9b,0x69,0x15);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("e0a4d4b3-f34e-44bd-b1f2-4e3bde9b6915")
nsISelection : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetAnchorNode(
        nsIDOMNode **aAnchorNode) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAnchorOffset(
        LONG *aAnchorOffset) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFocusNode(
        nsIDOMNode **aFocusNode) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFocusOffset(
        LONG *aFocusOffset) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsCollapsed(
        cpp_bool *aIsCollapsed) = 0;

    virtual cpp_bool STDMETHODCALLTYPE Collapsed(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRangeCount(
        LONG *aRangeCount) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRangeAt(
        LONG index,
        nsIDOMRange **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Collapse(
        nsIDOMNode *parentNode,
        LONG offset) = 0;

    virtual nsresult STDMETHODCALLTYPE CollapseNative(
        nsINode *parentNode,
        LONG offset) = 0;

    virtual nsresult STDMETHODCALLTYPE Extend(
        nsIDOMNode *parentNode,
        LONG offset) = 0;

    virtual nsresult STDMETHODCALLTYPE ExtendNative(
        nsINode *parentNode,
        LONG offset) = 0;

    virtual nsresult STDMETHODCALLTYPE CollapseToStart(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE CollapseToEnd(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE ContainsNode(
        nsIDOMNode *node,
        cpp_bool entirelyContained,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SelectAllChildren(
        nsIDOMNode *parentNode) = 0;

    virtual nsresult STDMETHODCALLTYPE AddRange(
        nsIDOMRange *range) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveRange(
        nsIDOMRange *range) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveAllRanges(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE DeleteFromDocument(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE ToString(
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Modify(
        const nsAString *alter,
        const nsAString *direction,
        const nsAString *granularity) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsISelection, 0xe0a4d4b3, 0xf34e, 0x44bd, 0xb1,0xf2, 0x4e,0x3b,0xde,0x9b,0x69,0x15)
#endif
#else
typedef struct nsISelectionVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsISelection *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsISelection *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsISelection *This);

    /*** nsISelection methods ***/
    nsresult (STDMETHODCALLTYPE *GetAnchorNode)(
        nsISelection *This,
        nsIDOMNode **aAnchorNode);

    nsresult (STDMETHODCALLTYPE *GetAnchorOffset)(
        nsISelection *This,
        LONG *aAnchorOffset);

    nsresult (STDMETHODCALLTYPE *GetFocusNode)(
        nsISelection *This,
        nsIDOMNode **aFocusNode);

    nsresult (STDMETHODCALLTYPE *GetFocusOffset)(
        nsISelection *This,
        LONG *aFocusOffset);

    nsresult (STDMETHODCALLTYPE *GetIsCollapsed)(
        nsISelection *This,
        cpp_bool *aIsCollapsed);

    cpp_bool (STDMETHODCALLTYPE *Collapsed)(
        nsISelection *This);

    nsresult (STDMETHODCALLTYPE *GetRangeCount)(
        nsISelection *This,
        LONG *aRangeCount);

    nsresult (STDMETHODCALLTYPE *GetRangeAt)(
        nsISelection *This,
        LONG index,
        nsIDOMRange **_retval);

    nsresult (STDMETHODCALLTYPE *Collapse)(
        nsISelection *This,
        nsIDOMNode *parentNode,
        LONG offset);

    nsresult (STDMETHODCALLTYPE *CollapseNative)(
        nsISelection *This,
        nsINode *parentNode,
        LONG offset);

    nsresult (STDMETHODCALLTYPE *Extend)(
        nsISelection *This,
        nsIDOMNode *parentNode,
        LONG offset);

    nsresult (STDMETHODCALLTYPE *ExtendNative)(
        nsISelection *This,
        nsINode *parentNode,
        LONG offset);

    nsresult (STDMETHODCALLTYPE *CollapseToStart)(
        nsISelection *This);

    nsresult (STDMETHODCALLTYPE *CollapseToEnd)(
        nsISelection *This);

    nsresult (STDMETHODCALLTYPE *ContainsNode)(
        nsISelection *This,
        nsIDOMNode *node,
        cpp_bool entirelyContained,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SelectAllChildren)(
        nsISelection *This,
        nsIDOMNode *parentNode);

    nsresult (STDMETHODCALLTYPE *AddRange)(
        nsISelection *This,
        nsIDOMRange *range);

    nsresult (STDMETHODCALLTYPE *RemoveRange)(
        nsISelection *This,
        nsIDOMRange *range);

    nsresult (STDMETHODCALLTYPE *RemoveAllRanges)(
        nsISelection *This);

    nsresult (STDMETHODCALLTYPE *DeleteFromDocument)(
        nsISelection *This);

    nsresult (STDMETHODCALLTYPE *ToString)(
        nsISelection *This,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *Modify)(
        nsISelection *This,
        const nsAString *alter,
        const nsAString *direction,
        const nsAString *granularity);

    END_INTERFACE
} nsISelectionVtbl;

interface nsISelection {
    CONST_VTBL nsISelectionVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsISelection_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsISelection_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsISelection_Release(This) (This)->lpVtbl->Release(This)
/*** nsISelection methods ***/
#define nsISelection_GetAnchorNode(This,aAnchorNode) (This)->lpVtbl->GetAnchorNode(This,aAnchorNode)
#define nsISelection_GetAnchorOffset(This,aAnchorOffset) (This)->lpVtbl->GetAnchorOffset(This,aAnchorOffset)
#define nsISelection_GetFocusNode(This,aFocusNode) (This)->lpVtbl->GetFocusNode(This,aFocusNode)
#define nsISelection_GetFocusOffset(This,aFocusOffset) (This)->lpVtbl->GetFocusOffset(This,aFocusOffset)
#define nsISelection_GetIsCollapsed(This,aIsCollapsed) (This)->lpVtbl->GetIsCollapsed(This,aIsCollapsed)
#define nsISelection_Collapsed(This) (This)->lpVtbl->Collapsed(This)
#define nsISelection_GetRangeCount(This,aRangeCount) (This)->lpVtbl->GetRangeCount(This,aRangeCount)
#define nsISelection_GetRangeAt(This,index,_retval) (This)->lpVtbl->GetRangeAt(This,index,_retval)
#define nsISelection_Collapse(This,parentNode,offset) (This)->lpVtbl->Collapse(This,parentNode,offset)
#define nsISelection_CollapseNative(This,parentNode,offset) (This)->lpVtbl->CollapseNative(This,parentNode,offset)
#define nsISelection_Extend(This,parentNode,offset) (This)->lpVtbl->Extend(This,parentNode,offset)
#define nsISelection_ExtendNative(This,parentNode,offset) (This)->lpVtbl->ExtendNative(This,parentNode,offset)
#define nsISelection_CollapseToStart(This) (This)->lpVtbl->CollapseToStart(This)
#define nsISelection_CollapseToEnd(This) (This)->lpVtbl->CollapseToEnd(This)
#define nsISelection_ContainsNode(This,node,entirelyContained,_retval) (This)->lpVtbl->ContainsNode(This,node,entirelyContained,_retval)
#define nsISelection_SelectAllChildren(This,parentNode) (This)->lpVtbl->SelectAllChildren(This,parentNode)
#define nsISelection_AddRange(This,range) (This)->lpVtbl->AddRange(This,range)
#define nsISelection_RemoveRange(This,range) (This)->lpVtbl->RemoveRange(This,range)
#define nsISelection_RemoveAllRanges(This) (This)->lpVtbl->RemoveAllRanges(This)
#define nsISelection_DeleteFromDocument(This) (This)->lpVtbl->DeleteFromDocument(This)
#define nsISelection_ToString(This,_retval) (This)->lpVtbl->ToString(This,_retval)
#define nsISelection_Modify(This,alter,direction,granularity) (This)->lpVtbl->Modify(This,alter,direction,granularity)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsISelection_QueryInterface(nsISelection* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsISelection_AddRef(nsISelection* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsISelection_Release(nsISelection* This) {
    return This->lpVtbl->Release(This);
}
/*** nsISelection methods ***/
static FORCEINLINE nsresult nsISelection_GetAnchorNode(nsISelection* This,nsIDOMNode **aAnchorNode) {
    return This->lpVtbl->GetAnchorNode(This,aAnchorNode);
}
static FORCEINLINE nsresult nsISelection_GetAnchorOffset(nsISelection* This,LONG *aAnchorOffset) {
    return This->lpVtbl->GetAnchorOffset(This,aAnchorOffset);
}
static FORCEINLINE nsresult nsISelection_GetFocusNode(nsISelection* This,nsIDOMNode **aFocusNode) {
    return This->lpVtbl->GetFocusNode(This,aFocusNode);
}
static FORCEINLINE nsresult nsISelection_GetFocusOffset(nsISelection* This,LONG *aFocusOffset) {
    return This->lpVtbl->GetFocusOffset(This,aFocusOffset);
}
static FORCEINLINE nsresult nsISelection_GetIsCollapsed(nsISelection* This,cpp_bool *aIsCollapsed) {
    return This->lpVtbl->GetIsCollapsed(This,aIsCollapsed);
}
static FORCEINLINE cpp_bool nsISelection_Collapsed(nsISelection* This) {
    return This->lpVtbl->Collapsed(This);
}
static FORCEINLINE nsresult nsISelection_GetRangeCount(nsISelection* This,LONG *aRangeCount) {
    return This->lpVtbl->GetRangeCount(This,aRangeCount);
}
static FORCEINLINE nsresult nsISelection_GetRangeAt(nsISelection* This,LONG index,nsIDOMRange **_retval) {
    return This->lpVtbl->GetRangeAt(This,index,_retval);
}
static FORCEINLINE nsresult nsISelection_Collapse(nsISelection* This,nsIDOMNode *parentNode,LONG offset) {
    return This->lpVtbl->Collapse(This,parentNode,offset);
}
static FORCEINLINE nsresult nsISelection_CollapseNative(nsISelection* This,nsINode *parentNode,LONG offset) {
    return This->lpVtbl->CollapseNative(This,parentNode,offset);
}
static FORCEINLINE nsresult nsISelection_Extend(nsISelection* This,nsIDOMNode *parentNode,LONG offset) {
    return This->lpVtbl->Extend(This,parentNode,offset);
}
static FORCEINLINE nsresult nsISelection_ExtendNative(nsISelection* This,nsINode *parentNode,LONG offset) {
    return This->lpVtbl->ExtendNative(This,parentNode,offset);
}
static FORCEINLINE nsresult nsISelection_CollapseToStart(nsISelection* This) {
    return This->lpVtbl->CollapseToStart(This);
}
static FORCEINLINE nsresult nsISelection_CollapseToEnd(nsISelection* This) {
    return This->lpVtbl->CollapseToEnd(This);
}
static FORCEINLINE nsresult nsISelection_ContainsNode(nsISelection* This,nsIDOMNode *node,cpp_bool entirelyContained,cpp_bool *_retval) {
    return This->lpVtbl->ContainsNode(This,node,entirelyContained,_retval);
}
static FORCEINLINE nsresult nsISelection_SelectAllChildren(nsISelection* This,nsIDOMNode *parentNode) {
    return This->lpVtbl->SelectAllChildren(This,parentNode);
}
static FORCEINLINE nsresult nsISelection_AddRange(nsISelection* This,nsIDOMRange *range) {
    return This->lpVtbl->AddRange(This,range);
}
static FORCEINLINE nsresult nsISelection_RemoveRange(nsISelection* This,nsIDOMRange *range) {
    return This->lpVtbl->RemoveRange(This,range);
}
static FORCEINLINE nsresult nsISelection_RemoveAllRanges(nsISelection* This) {
    return This->lpVtbl->RemoveAllRanges(This);
}
static FORCEINLINE nsresult nsISelection_DeleteFromDocument(nsISelection* This) {
    return This->lpVtbl->DeleteFromDocument(This);
}
static FORCEINLINE nsresult nsISelection_ToString(nsISelection* This,nsAString *_retval) {
    return This->lpVtbl->ToString(This,_retval);
}
static FORCEINLINE nsresult nsISelection_Modify(nsISelection* This,const nsAString *alter,const nsAString *direction,const nsAString *granularity) {
    return This->lpVtbl->Modify(This,alter,direction,granularity);
}
#endif
#endif

#endif


#endif  /* __nsISelection_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMWindowCollection interface
 */
#ifndef __nsIDOMWindowCollection_INTERFACE_DEFINED__
#define __nsIDOMWindowCollection_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMWindowCollection, 0x8d64f457, 0xfb8c, 0x49ea, 0xa3,0x59, 0xce,0xf3,0x0e,0xed,0x97,0x74);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("8d64f457-fb8c-49ea-a359-cef30eed9774")
nsIDOMWindowCollection : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetLength(
        UINT32 *aLength) = 0;

    virtual nsresult STDMETHODCALLTYPE Item(
        UINT32 index,
        mozIDOMWindowProxy **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE NamedItem(
        const nsAString *name,
        mozIDOMWindowProxy **_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMWindowCollection, 0x8d64f457, 0xfb8c, 0x49ea, 0xa3,0x59, 0xce,0xf3,0x0e,0xed,0x97,0x74)
#endif
#else
typedef struct nsIDOMWindowCollectionVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMWindowCollection *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMWindowCollection *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMWindowCollection *This);

    /*** nsIDOMWindowCollection methods ***/
    nsresult (STDMETHODCALLTYPE *GetLength)(
        nsIDOMWindowCollection *This,
        UINT32 *aLength);

    nsresult (STDMETHODCALLTYPE *Item)(
        nsIDOMWindowCollection *This,
        UINT32 index,
        mozIDOMWindowProxy **_retval);

    nsresult (STDMETHODCALLTYPE *NamedItem)(
        nsIDOMWindowCollection *This,
        const nsAString *name,
        mozIDOMWindowProxy **_retval);

    END_INTERFACE
} nsIDOMWindowCollectionVtbl;

interface nsIDOMWindowCollection {
    CONST_VTBL nsIDOMWindowCollectionVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMWindowCollection_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMWindowCollection_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMWindowCollection_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMWindowCollection methods ***/
#define nsIDOMWindowCollection_GetLength(This,aLength) (This)->lpVtbl->GetLength(This,aLength)
#define nsIDOMWindowCollection_Item(This,index,_retval) (This)->lpVtbl->Item(This,index,_retval)
#define nsIDOMWindowCollection_NamedItem(This,name,_retval) (This)->lpVtbl->NamedItem(This,name,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMWindowCollection_QueryInterface(nsIDOMWindowCollection* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMWindowCollection_AddRef(nsIDOMWindowCollection* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMWindowCollection_Release(nsIDOMWindowCollection* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMWindowCollection methods ***/
static FORCEINLINE nsresult nsIDOMWindowCollection_GetLength(nsIDOMWindowCollection* This,UINT32 *aLength) {
    return This->lpVtbl->GetLength(This,aLength);
}
static FORCEINLINE nsresult nsIDOMWindowCollection_Item(nsIDOMWindowCollection* This,UINT32 index,mozIDOMWindowProxy **_retval) {
    return This->lpVtbl->Item(This,index,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowCollection_NamedItem(nsIDOMWindowCollection* This,const nsAString *name,mozIDOMWindowProxy **_retval) {
    return This->lpVtbl->NamedItem(This,name,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIDOMWindowCollection_INTERFACE_DEFINED__ */

/*****************************************************************************
 * mozIDOMWindow interface
 */
#ifndef __mozIDOMWindow_INTERFACE_DEFINED__
#define __mozIDOMWindow_INTERFACE_DEFINED__

DEFINE_GUID(IID_mozIDOMWindow, 0x75fbabd6, 0x7a2e, 0x4787, 0xaa,0x33, 0x44,0x9a,0x33,0x51,0x21,0x35);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("75fbabd6-7a2e-4787-aa33-449a33512135")
mozIDOMWindow : public nsISupports
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(mozIDOMWindow, 0x75fbabd6, 0x7a2e, 0x4787, 0xaa,0x33, 0x44,0x9a,0x33,0x51,0x21,0x35)
#endif
#else
typedef struct mozIDOMWindowVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        mozIDOMWindow *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        mozIDOMWindow *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        mozIDOMWindow *This);

    END_INTERFACE
} mozIDOMWindowVtbl;

interface mozIDOMWindow {
    CONST_VTBL mozIDOMWindowVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define mozIDOMWindow_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define mozIDOMWindow_AddRef(This) (This)->lpVtbl->AddRef(This)
#define mozIDOMWindow_Release(This) (This)->lpVtbl->Release(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult mozIDOMWindow_QueryInterface(mozIDOMWindow* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt mozIDOMWindow_AddRef(mozIDOMWindow* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt mozIDOMWindow_Release(mozIDOMWindow* This) {
    return This->lpVtbl->Release(This);
}
#endif
#endif

#endif


#endif  /* __mozIDOMWindow_INTERFACE_DEFINED__ */

/*****************************************************************************
 * mozIDOMWindowProxy interface
 */
#ifndef __mozIDOMWindowProxy_INTERFACE_DEFINED__
#define __mozIDOMWindowProxy_INTERFACE_DEFINED__

DEFINE_GUID(IID_mozIDOMWindowProxy, 0x53ca090c, 0xe739, 0x48b9, 0x89,0x11, 0x20,0x8c,0x72,0xf9,0x19,0x1e);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("53ca090c-e739-48b9-8911-208c72f9191e")
mozIDOMWindowProxy : public nsISupports
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(mozIDOMWindowProxy, 0x53ca090c, 0xe739, 0x48b9, 0x89,0x11, 0x20,0x8c,0x72,0xf9,0x19,0x1e)
#endif
#else
typedef struct mozIDOMWindowProxyVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        mozIDOMWindowProxy *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        mozIDOMWindowProxy *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        mozIDOMWindowProxy *This);

    END_INTERFACE
} mozIDOMWindowProxyVtbl;

interface mozIDOMWindowProxy {
    CONST_VTBL mozIDOMWindowProxyVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define mozIDOMWindowProxy_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define mozIDOMWindowProxy_AddRef(This) (This)->lpVtbl->AddRef(This)
#define mozIDOMWindowProxy_Release(This) (This)->lpVtbl->Release(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult mozIDOMWindowProxy_QueryInterface(mozIDOMWindowProxy* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt mozIDOMWindowProxy_AddRef(mozIDOMWindowProxy* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt mozIDOMWindowProxy_Release(mozIDOMWindowProxy* This) {
    return This->lpVtbl->Release(This);
}
#endif
#endif

#endif


#endif  /* __mozIDOMWindowProxy_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMWindow interface
 */
#ifndef __nsIDOMWindow_INTERFACE_DEFINED__
#define __nsIDOMWindow_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMWindow, 0xab30b7cc, 0xf7f9, 0x4b9b, 0xbe,0xfb, 0x7d,0xbf,0x6c,0xf8,0x6d,0x46);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ab30b7cc-f7f9-4b9b-befb-7dbf6cf86d46")
nsIDOMWindow : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetDocument(
        nsIDOMDocument **aDocument) = 0;

    virtual nsresult STDMETHODCALLTYPE GetName(
        nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE SetName(
        const nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLocation(
        nsIDOMLocation **aLocation) = 0;

    virtual nsresult STDMETHODCALLTYPE Close(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE Stop(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE Focus(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE Blur(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLength(
        UINT32 *aLength) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRealTop(
        nsIDOMWindow **aTop) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRealParent(
        nsIDOMWindow **aParent) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOpener(
        mozIDOMWindowProxy **aOpenerWindow) = 0;

    virtual nsresult STDMETHODCALLTYPE SetOpener(
        mozIDOMWindowProxy *aOpenerWindow) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRealFrameElement(
        nsIDOMElement **aFrameElement) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNavigator(
        nsIDOMNavigator **aNavigator) = 0;

    virtual nsresult STDMETHODCALLTYPE Print(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSessionStorage(
        nsISupports **aSessionStorage) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLocalStorage(
        nsISupports **aLocalStorage) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIndexedDB(
        nsISupports **aIndexedDB) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSelection(
        nsISelection **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE MatchMedia(
        const nsAString *media_query_list,
        nsISupports **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetInnerWidth(
        LONG *aInnerWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE SetInnerWidth(
        LONG aInnerWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE GetInnerHeight(
        LONG *aInnerHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE SetInnerHeight(
        LONG aInnerHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScrollX(
        LONG *aScrollX) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPageXOffset(
        LONG *aPageXOffset) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScrollY(
        LONG *aScrollY) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPageYOffset(
        LONG *aPageYOffset) = 0;

    virtual nsresult STDMETHODCALLTYPE Scroll(
        LONG xScroll,
        LONG yScroll) = 0;

    virtual nsresult STDMETHODCALLTYPE ScrollTo(
        LONG xScroll,
        LONG yScroll) = 0;

    virtual nsresult STDMETHODCALLTYPE ScrollBy(
        LONG xScrollDif,
        LONG yScrollDif) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScreenX(
        LONG *aScreenX) = 0;

    virtual nsresult STDMETHODCALLTYPE SetScreenX(
        LONG aScreenX) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScreenY(
        LONG *aScreenY) = 0;

    virtual nsresult STDMETHODCALLTYPE SetScreenY(
        LONG aScreenY) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOuterWidth(
        LONG *aOuterWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE SetOuterWidth(
        LONG aOuterWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOuterHeight(
        LONG *aOuterHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE SetOuterHeight(
        LONG aOuterHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE GetComputedStyle(
        nsIDOMElement *elt,
        const nsAString *pseudoElt,
        nsIDOMCSSStyleDeclaration **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDefaultComputedStyle(
        nsIDOMElement *elt,
        const nsAString *pseudoElt,
        nsIDOMCSSStyleDeclaration **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFrames(
        nsIDOMWindowCollection **aFrames) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTextZoom(
        float *aTextZoom) = 0;

    virtual nsresult STDMETHODCALLTYPE SetTextZoom(
        float aTextZoom) = 0;

    virtual nsresult STDMETHODCALLTYPE ScrollByLines(
        LONG numLines) = 0;

    virtual nsresult STDMETHODCALLTYPE ScrollByPages(
        LONG numPages) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMozInnerScreenX(
        float *aMozInnerScreenX) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMozInnerScreenY(
        float *aMozInnerScreenY) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDevicePixelRatio(
        float *aDevicePixelRatio) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScrollMaxX(
        LONG *aScrollMaxX) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScrollMaxY(
        LONG *aScrollMaxY) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFullScreen(
        cpp_bool *aFullScreen) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFullScreen(
        cpp_bool aFullScreen) = 0;

    virtual nsresult STDMETHODCALLTYPE Back(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE Forward(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE Home(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE Open(
        const nsAString *url,
        const nsAString *name,
        const nsAString *options,
        nsIDOMWindow **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Find(
        const nsAString *str,
        cpp_bool caseSensitive,
        cpp_bool backwards,
        cpp_bool wrapAround,
        cpp_bool wholeWord,
        cpp_bool searchInFrames,
        cpp_bool showDialog,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetInnerWindow(
        mozIDOMWindow **aInnerWindow) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOuterWindow(
        mozIDOMWindowProxy **aOuterWindow) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMWindow, 0xab30b7cc, 0xf7f9, 0x4b9b, 0xbe,0xfb, 0x7d,0xbf,0x6c,0xf8,0x6d,0x46)
#endif
#else
typedef struct nsIDOMWindowVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMWindow *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMWindow *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMWindow *This);

    /*** nsIDOMWindow methods ***/
    nsresult (STDMETHODCALLTYPE *GetDocument)(
        nsIDOMWindow *This,
        nsIDOMDocument **aDocument);

    nsresult (STDMETHODCALLTYPE *GetName)(
        nsIDOMWindow *This,
        nsAString *aName);

    nsresult (STDMETHODCALLTYPE *SetName)(
        nsIDOMWindow *This,
        const nsAString *aName);

    nsresult (STDMETHODCALLTYPE *GetLocation)(
        nsIDOMWindow *This,
        nsIDOMLocation **aLocation);

    nsresult (STDMETHODCALLTYPE *Close)(
        nsIDOMWindow *This);

    nsresult (STDMETHODCALLTYPE *Stop)(
        nsIDOMWindow *This);

    nsresult (STDMETHODCALLTYPE *Focus)(
        nsIDOMWindow *This);

    nsresult (STDMETHODCALLTYPE *Blur)(
        nsIDOMWindow *This);

    nsresult (STDMETHODCALLTYPE *GetLength)(
        nsIDOMWindow *This,
        UINT32 *aLength);

    nsresult (STDMETHODCALLTYPE *GetRealTop)(
        nsIDOMWindow *This,
        nsIDOMWindow **aTop);

    nsresult (STDMETHODCALLTYPE *GetRealParent)(
        nsIDOMWindow *This,
        nsIDOMWindow **aParent);

    nsresult (STDMETHODCALLTYPE *GetOpener)(
        nsIDOMWindow *This,
        mozIDOMWindowProxy **aOpenerWindow);

    nsresult (STDMETHODCALLTYPE *SetOpener)(
        nsIDOMWindow *This,
        mozIDOMWindowProxy *aOpenerWindow);

    nsresult (STDMETHODCALLTYPE *GetRealFrameElement)(
        nsIDOMWindow *This,
        nsIDOMElement **aFrameElement);

    nsresult (STDMETHODCALLTYPE *GetNavigator)(
        nsIDOMWindow *This,
        nsIDOMNavigator **aNavigator);

    nsresult (STDMETHODCALLTYPE *Print)(
        nsIDOMWindow *This);

    nsresult (STDMETHODCALLTYPE *GetSessionStorage)(
        nsIDOMWindow *This,
        nsISupports **aSessionStorage);

    nsresult (STDMETHODCALLTYPE *GetLocalStorage)(
        nsIDOMWindow *This,
        nsISupports **aLocalStorage);

    nsresult (STDMETHODCALLTYPE *GetIndexedDB)(
        nsIDOMWindow *This,
        nsISupports **aIndexedDB);

    nsresult (STDMETHODCALLTYPE *GetSelection)(
        nsIDOMWindow *This,
        nsISelection **_retval);

    nsresult (STDMETHODCALLTYPE *MatchMedia)(
        nsIDOMWindow *This,
        const nsAString *media_query_list,
        nsISupports **_retval);

    nsresult (STDMETHODCALLTYPE *GetInnerWidth)(
        nsIDOMWindow *This,
        LONG *aInnerWidth);

    nsresult (STDMETHODCALLTYPE *SetInnerWidth)(
        nsIDOMWindow *This,
        LONG aInnerWidth);

    nsresult (STDMETHODCALLTYPE *GetInnerHeight)(
        nsIDOMWindow *This,
        LONG *aInnerHeight);

    nsresult (STDMETHODCALLTYPE *SetInnerHeight)(
        nsIDOMWindow *This,
        LONG aInnerHeight);

    nsresult (STDMETHODCALLTYPE *GetScrollX)(
        nsIDOMWindow *This,
        LONG *aScrollX);

    nsresult (STDMETHODCALLTYPE *GetPageXOffset)(
        nsIDOMWindow *This,
        LONG *aPageXOffset);

    nsresult (STDMETHODCALLTYPE *GetScrollY)(
        nsIDOMWindow *This,
        LONG *aScrollY);

    nsresult (STDMETHODCALLTYPE *GetPageYOffset)(
        nsIDOMWindow *This,
        LONG *aPageYOffset);

    nsresult (STDMETHODCALLTYPE *Scroll)(
        nsIDOMWindow *This,
        LONG xScroll,
        LONG yScroll);

    nsresult (STDMETHODCALLTYPE *ScrollTo)(
        nsIDOMWindow *This,
        LONG xScroll,
        LONG yScroll);

    nsresult (STDMETHODCALLTYPE *ScrollBy)(
        nsIDOMWindow *This,
        LONG xScrollDif,
        LONG yScrollDif);

    nsresult (STDMETHODCALLTYPE *GetScreenX)(
        nsIDOMWindow *This,
        LONG *aScreenX);

    nsresult (STDMETHODCALLTYPE *SetScreenX)(
        nsIDOMWindow *This,
        LONG aScreenX);

    nsresult (STDMETHODCALLTYPE *GetScreenY)(
        nsIDOMWindow *This,
        LONG *aScreenY);

    nsresult (STDMETHODCALLTYPE *SetScreenY)(
        nsIDOMWindow *This,
        LONG aScreenY);

    nsresult (STDMETHODCALLTYPE *GetOuterWidth)(
        nsIDOMWindow *This,
        LONG *aOuterWidth);

    nsresult (STDMETHODCALLTYPE *SetOuterWidth)(
        nsIDOMWindow *This,
        LONG aOuterWidth);

    nsresult (STDMETHODCALLTYPE *GetOuterHeight)(
        nsIDOMWindow *This,
        LONG *aOuterHeight);

    nsresult (STDMETHODCALLTYPE *SetOuterHeight)(
        nsIDOMWindow *This,
        LONG aOuterHeight);

    nsresult (STDMETHODCALLTYPE *GetComputedStyle)(
        nsIDOMWindow *This,
        nsIDOMElement *elt,
        const nsAString *pseudoElt,
        nsIDOMCSSStyleDeclaration **_retval);

    nsresult (STDMETHODCALLTYPE *GetDefaultComputedStyle)(
        nsIDOMWindow *This,
        nsIDOMElement *elt,
        const nsAString *pseudoElt,
        nsIDOMCSSStyleDeclaration **_retval);

    nsresult (STDMETHODCALLTYPE *GetFrames)(
        nsIDOMWindow *This,
        nsIDOMWindowCollection **aFrames);

    nsresult (STDMETHODCALLTYPE *GetTextZoom)(
        nsIDOMWindow *This,
        float *aTextZoom);

    nsresult (STDMETHODCALLTYPE *SetTextZoom)(
        nsIDOMWindow *This,
        float aTextZoom);

    nsresult (STDMETHODCALLTYPE *ScrollByLines)(
        nsIDOMWindow *This,
        LONG numLines);

    nsresult (STDMETHODCALLTYPE *ScrollByPages)(
        nsIDOMWindow *This,
        LONG numPages);

    nsresult (STDMETHODCALLTYPE *GetMozInnerScreenX)(
        nsIDOMWindow *This,
        float *aMozInnerScreenX);

    nsresult (STDMETHODCALLTYPE *GetMozInnerScreenY)(
        nsIDOMWindow *This,
        float *aMozInnerScreenY);

    nsresult (STDMETHODCALLTYPE *GetDevicePixelRatio)(
        nsIDOMWindow *This,
        float *aDevicePixelRatio);

    nsresult (STDMETHODCALLTYPE *GetScrollMaxX)(
        nsIDOMWindow *This,
        LONG *aScrollMaxX);

    nsresult (STDMETHODCALLTYPE *GetScrollMaxY)(
        nsIDOMWindow *This,
        LONG *aScrollMaxY);

    nsresult (STDMETHODCALLTYPE *GetFullScreen)(
        nsIDOMWindow *This,
        cpp_bool *aFullScreen);

    nsresult (STDMETHODCALLTYPE *SetFullScreen)(
        nsIDOMWindow *This,
        cpp_bool aFullScreen);

    nsresult (STDMETHODCALLTYPE *Back)(
        nsIDOMWindow *This);

    nsresult (STDMETHODCALLTYPE *Forward)(
        nsIDOMWindow *This);

    nsresult (STDMETHODCALLTYPE *Home)(
        nsIDOMWindow *This);

    nsresult (STDMETHODCALLTYPE *Open)(
        nsIDOMWindow *This,
        const nsAString *url,
        const nsAString *name,
        const nsAString *options,
        nsIDOMWindow **_retval);

    nsresult (STDMETHODCALLTYPE *Find)(
        nsIDOMWindow *This,
        const nsAString *str,
        cpp_bool caseSensitive,
        cpp_bool backwards,
        cpp_bool wrapAround,
        cpp_bool wholeWord,
        cpp_bool searchInFrames,
        cpp_bool showDialog,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetInnerWindow)(
        nsIDOMWindow *This,
        mozIDOMWindow **aInnerWindow);

    nsresult (STDMETHODCALLTYPE *GetOuterWindow)(
        nsIDOMWindow *This,
        mozIDOMWindowProxy **aOuterWindow);

    END_INTERFACE
} nsIDOMWindowVtbl;

interface nsIDOMWindow {
    CONST_VTBL nsIDOMWindowVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMWindow_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMWindow_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMWindow_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMWindow methods ***/
#define nsIDOMWindow_GetDocument(This,aDocument) (This)->lpVtbl->GetDocument(This,aDocument)
#define nsIDOMWindow_GetName(This,aName) (This)->lpVtbl->GetName(This,aName)
#define nsIDOMWindow_SetName(This,aName) (This)->lpVtbl->SetName(This,aName)
#define nsIDOMWindow_GetLocation(This,aLocation) (This)->lpVtbl->GetLocation(This,aLocation)
#define nsIDOMWindow_Close(This) (This)->lpVtbl->Close(This)
#define nsIDOMWindow_Stop(This) (This)->lpVtbl->Stop(This)
#define nsIDOMWindow_Focus(This) (This)->lpVtbl->Focus(This)
#define nsIDOMWindow_Blur(This) (This)->lpVtbl->Blur(This)
#define nsIDOMWindow_GetLength(This,aLength) (This)->lpVtbl->GetLength(This,aLength)
#define nsIDOMWindow_GetRealTop(This,aTop) (This)->lpVtbl->GetRealTop(This,aTop)
#define nsIDOMWindow_GetRealParent(This,aParent) (This)->lpVtbl->GetRealParent(This,aParent)
#define nsIDOMWindow_GetOpener(This,aOpenerWindow) (This)->lpVtbl->GetOpener(This,aOpenerWindow)
#define nsIDOMWindow_SetOpener(This,aOpenerWindow) (This)->lpVtbl->SetOpener(This,aOpenerWindow)
#define nsIDOMWindow_GetRealFrameElement(This,aFrameElement) (This)->lpVtbl->GetRealFrameElement(This,aFrameElement)
#define nsIDOMWindow_GetNavigator(This,aNavigator) (This)->lpVtbl->GetNavigator(This,aNavigator)
#define nsIDOMWindow_Print(This) (This)->lpVtbl->Print(This)
#define nsIDOMWindow_GetSessionStorage(This,aSessionStorage) (This)->lpVtbl->GetSessionStorage(This,aSessionStorage)
#define nsIDOMWindow_GetLocalStorage(This,aLocalStorage) (This)->lpVtbl->GetLocalStorage(This,aLocalStorage)
#define nsIDOMWindow_GetIndexedDB(This,aIndexedDB) (This)->lpVtbl->GetIndexedDB(This,aIndexedDB)
#define nsIDOMWindow_GetSelection(This,_retval) (This)->lpVtbl->GetSelection(This,_retval)
#define nsIDOMWindow_MatchMedia(This,media_query_list,_retval) (This)->lpVtbl->MatchMedia(This,media_query_list,_retval)
#define nsIDOMWindow_GetInnerWidth(This,aInnerWidth) (This)->lpVtbl->GetInnerWidth(This,aInnerWidth)
#define nsIDOMWindow_SetInnerWidth(This,aInnerWidth) (This)->lpVtbl->SetInnerWidth(This,aInnerWidth)
#define nsIDOMWindow_GetInnerHeight(This,aInnerHeight) (This)->lpVtbl->GetInnerHeight(This,aInnerHeight)
#define nsIDOMWindow_SetInnerHeight(This,aInnerHeight) (This)->lpVtbl->SetInnerHeight(This,aInnerHeight)
#define nsIDOMWindow_GetScrollX(This,aScrollX) (This)->lpVtbl->GetScrollX(This,aScrollX)
#define nsIDOMWindow_GetPageXOffset(This,aPageXOffset) (This)->lpVtbl->GetPageXOffset(This,aPageXOffset)
#define nsIDOMWindow_GetScrollY(This,aScrollY) (This)->lpVtbl->GetScrollY(This,aScrollY)
#define nsIDOMWindow_GetPageYOffset(This,aPageYOffset) (This)->lpVtbl->GetPageYOffset(This,aPageYOffset)
#define nsIDOMWindow_Scroll(This,xScroll,yScroll) (This)->lpVtbl->Scroll(This,xScroll,yScroll)
#define nsIDOMWindow_ScrollTo(This,xScroll,yScroll) (This)->lpVtbl->ScrollTo(This,xScroll,yScroll)
#define nsIDOMWindow_ScrollBy(This,xScrollDif,yScrollDif) (This)->lpVtbl->ScrollBy(This,xScrollDif,yScrollDif)
#define nsIDOMWindow_GetScreenX(This,aScreenX) (This)->lpVtbl->GetScreenX(This,aScreenX)
#define nsIDOMWindow_SetScreenX(This,aScreenX) (This)->lpVtbl->SetScreenX(This,aScreenX)
#define nsIDOMWindow_GetScreenY(This,aScreenY) (This)->lpVtbl->GetScreenY(This,aScreenY)
#define nsIDOMWindow_SetScreenY(This,aScreenY) (This)->lpVtbl->SetScreenY(This,aScreenY)
#define nsIDOMWindow_GetOuterWidth(This,aOuterWidth) (This)->lpVtbl->GetOuterWidth(This,aOuterWidth)
#define nsIDOMWindow_SetOuterWidth(This,aOuterWidth) (This)->lpVtbl->SetOuterWidth(This,aOuterWidth)
#define nsIDOMWindow_GetOuterHeight(This,aOuterHeight) (This)->lpVtbl->GetOuterHeight(This,aOuterHeight)
#define nsIDOMWindow_SetOuterHeight(This,aOuterHeight) (This)->lpVtbl->SetOuterHeight(This,aOuterHeight)
#define nsIDOMWindow_GetComputedStyle(This,elt,pseudoElt,_retval) (This)->lpVtbl->GetComputedStyle(This,elt,pseudoElt,_retval)
#define nsIDOMWindow_GetDefaultComputedStyle(This,elt,pseudoElt,_retval) (This)->lpVtbl->GetDefaultComputedStyle(This,elt,pseudoElt,_retval)
#define nsIDOMWindow_GetFrames(This,aFrames) (This)->lpVtbl->GetFrames(This,aFrames)
#define nsIDOMWindow_GetTextZoom(This,aTextZoom) (This)->lpVtbl->GetTextZoom(This,aTextZoom)
#define nsIDOMWindow_SetTextZoom(This,aTextZoom) (This)->lpVtbl->SetTextZoom(This,aTextZoom)
#define nsIDOMWindow_ScrollByLines(This,numLines) (This)->lpVtbl->ScrollByLines(This,numLines)
#define nsIDOMWindow_ScrollByPages(This,numPages) (This)->lpVtbl->ScrollByPages(This,numPages)
#define nsIDOMWindow_GetMozInnerScreenX(This,aMozInnerScreenX) (This)->lpVtbl->GetMozInnerScreenX(This,aMozInnerScreenX)
#define nsIDOMWindow_GetMozInnerScreenY(This,aMozInnerScreenY) (This)->lpVtbl->GetMozInnerScreenY(This,aMozInnerScreenY)
#define nsIDOMWindow_GetDevicePixelRatio(This,aDevicePixelRatio) (This)->lpVtbl->GetDevicePixelRatio(This,aDevicePixelRatio)
#define nsIDOMWindow_GetScrollMaxX(This,aScrollMaxX) (This)->lpVtbl->GetScrollMaxX(This,aScrollMaxX)
#define nsIDOMWindow_GetScrollMaxY(This,aScrollMaxY) (This)->lpVtbl->GetScrollMaxY(This,aScrollMaxY)
#define nsIDOMWindow_GetFullScreen(This,aFullScreen) (This)->lpVtbl->GetFullScreen(This,aFullScreen)
#define nsIDOMWindow_SetFullScreen(This,aFullScreen) (This)->lpVtbl->SetFullScreen(This,aFullScreen)
#define nsIDOMWindow_Back(This) (This)->lpVtbl->Back(This)
#define nsIDOMWindow_Forward(This) (This)->lpVtbl->Forward(This)
#define nsIDOMWindow_Home(This) (This)->lpVtbl->Home(This)
#define nsIDOMWindow_Open(This,url,name,options,_retval) (This)->lpVtbl->Open(This,url,name,options,_retval)
#define nsIDOMWindow_Find(This,str,caseSensitive,backwards,wrapAround,wholeWord,searchInFrames,showDialog,_retval) (This)->lpVtbl->Find(This,str,caseSensitive,backwards,wrapAround,wholeWord,searchInFrames,showDialog,_retval)
#define nsIDOMWindow_GetInnerWindow(This,aInnerWindow) (This)->lpVtbl->GetInnerWindow(This,aInnerWindow)
#define nsIDOMWindow_GetOuterWindow(This,aOuterWindow) (This)->lpVtbl->GetOuterWindow(This,aOuterWindow)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMWindow_QueryInterface(nsIDOMWindow* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMWindow_AddRef(nsIDOMWindow* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMWindow_Release(nsIDOMWindow* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMWindow methods ***/
static FORCEINLINE nsresult nsIDOMWindow_GetDocument(nsIDOMWindow* This,nsIDOMDocument **aDocument) {
    return This->lpVtbl->GetDocument(This,aDocument);
}
static FORCEINLINE nsresult nsIDOMWindow_GetName(nsIDOMWindow* This,nsAString *aName) {
    return This->lpVtbl->GetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMWindow_SetName(nsIDOMWindow* This,const nsAString *aName) {
    return This->lpVtbl->SetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMWindow_GetLocation(nsIDOMWindow* This,nsIDOMLocation **aLocation) {
    return This->lpVtbl->GetLocation(This,aLocation);
}
static FORCEINLINE nsresult nsIDOMWindow_Close(nsIDOMWindow* This) {
    return This->lpVtbl->Close(This);
}
static FORCEINLINE nsresult nsIDOMWindow_Stop(nsIDOMWindow* This) {
    return This->lpVtbl->Stop(This);
}
static FORCEINLINE nsresult nsIDOMWindow_Focus(nsIDOMWindow* This) {
    return This->lpVtbl->Focus(This);
}
static FORCEINLINE nsresult nsIDOMWindow_Blur(nsIDOMWindow* This) {
    return This->lpVtbl->Blur(This);
}
static FORCEINLINE nsresult nsIDOMWindow_GetLength(nsIDOMWindow* This,UINT32 *aLength) {
    return This->lpVtbl->GetLength(This,aLength);
}
static FORCEINLINE nsresult nsIDOMWindow_GetRealTop(nsIDOMWindow* This,nsIDOMWindow **aTop) {
    return This->lpVtbl->GetRealTop(This,aTop);
}
static FORCEINLINE nsresult nsIDOMWindow_GetRealParent(nsIDOMWindow* This,nsIDOMWindow **aParent) {
    return This->lpVtbl->GetRealParent(This,aParent);
}
static FORCEINLINE nsresult nsIDOMWindow_GetOpener(nsIDOMWindow* This,mozIDOMWindowProxy **aOpenerWindow) {
    return This->lpVtbl->GetOpener(This,aOpenerWindow);
}
static FORCEINLINE nsresult nsIDOMWindow_SetOpener(nsIDOMWindow* This,mozIDOMWindowProxy *aOpenerWindow) {
    return This->lpVtbl->SetOpener(This,aOpenerWindow);
}
static FORCEINLINE nsresult nsIDOMWindow_GetRealFrameElement(nsIDOMWindow* This,nsIDOMElement **aFrameElement) {
    return This->lpVtbl->GetRealFrameElement(This,aFrameElement);
}
static FORCEINLINE nsresult nsIDOMWindow_GetNavigator(nsIDOMWindow* This,nsIDOMNavigator **aNavigator) {
    return This->lpVtbl->GetNavigator(This,aNavigator);
}
static FORCEINLINE nsresult nsIDOMWindow_Print(nsIDOMWindow* This) {
    return This->lpVtbl->Print(This);
}
static FORCEINLINE nsresult nsIDOMWindow_GetSessionStorage(nsIDOMWindow* This,nsISupports **aSessionStorage) {
    return This->lpVtbl->GetSessionStorage(This,aSessionStorage);
}
static FORCEINLINE nsresult nsIDOMWindow_GetLocalStorage(nsIDOMWindow* This,nsISupports **aLocalStorage) {
    return This->lpVtbl->GetLocalStorage(This,aLocalStorage);
}
static FORCEINLINE nsresult nsIDOMWindow_GetIndexedDB(nsIDOMWindow* This,nsISupports **aIndexedDB) {
    return This->lpVtbl->GetIndexedDB(This,aIndexedDB);
}
static FORCEINLINE nsresult nsIDOMWindow_GetSelection(nsIDOMWindow* This,nsISelection **_retval) {
    return This->lpVtbl->GetSelection(This,_retval);
}
static FORCEINLINE nsresult nsIDOMWindow_MatchMedia(nsIDOMWindow* This,const nsAString *media_query_list,nsISupports **_retval) {
    return This->lpVtbl->MatchMedia(This,media_query_list,_retval);
}
static FORCEINLINE nsresult nsIDOMWindow_GetInnerWidth(nsIDOMWindow* This,LONG *aInnerWidth) {
    return This->lpVtbl->GetInnerWidth(This,aInnerWidth);
}
static FORCEINLINE nsresult nsIDOMWindow_SetInnerWidth(nsIDOMWindow* This,LONG aInnerWidth) {
    return This->lpVtbl->SetInnerWidth(This,aInnerWidth);
}
static FORCEINLINE nsresult nsIDOMWindow_GetInnerHeight(nsIDOMWindow* This,LONG *aInnerHeight) {
    return This->lpVtbl->GetInnerHeight(This,aInnerHeight);
}
static FORCEINLINE nsresult nsIDOMWindow_SetInnerHeight(nsIDOMWindow* This,LONG aInnerHeight) {
    return This->lpVtbl->SetInnerHeight(This,aInnerHeight);
}
static FORCEINLINE nsresult nsIDOMWindow_GetScrollX(nsIDOMWindow* This,LONG *aScrollX) {
    return This->lpVtbl->GetScrollX(This,aScrollX);
}
static FORCEINLINE nsresult nsIDOMWindow_GetPageXOffset(nsIDOMWindow* This,LONG *aPageXOffset) {
    return This->lpVtbl->GetPageXOffset(This,aPageXOffset);
}
static FORCEINLINE nsresult nsIDOMWindow_GetScrollY(nsIDOMWindow* This,LONG *aScrollY) {
    return This->lpVtbl->GetScrollY(This,aScrollY);
}
static FORCEINLINE nsresult nsIDOMWindow_GetPageYOffset(nsIDOMWindow* This,LONG *aPageYOffset) {
    return This->lpVtbl->GetPageYOffset(This,aPageYOffset);
}
static FORCEINLINE nsresult nsIDOMWindow_Scroll(nsIDOMWindow* This,LONG xScroll,LONG yScroll) {
    return This->lpVtbl->Scroll(This,xScroll,yScroll);
}
static FORCEINLINE nsresult nsIDOMWindow_ScrollTo(nsIDOMWindow* This,LONG xScroll,LONG yScroll) {
    return This->lpVtbl->ScrollTo(This,xScroll,yScroll);
}
static FORCEINLINE nsresult nsIDOMWindow_ScrollBy(nsIDOMWindow* This,LONG xScrollDif,LONG yScrollDif) {
    return This->lpVtbl->ScrollBy(This,xScrollDif,yScrollDif);
}
static FORCEINLINE nsresult nsIDOMWindow_GetScreenX(nsIDOMWindow* This,LONG *aScreenX) {
    return This->lpVtbl->GetScreenX(This,aScreenX);
}
static FORCEINLINE nsresult nsIDOMWindow_SetScreenX(nsIDOMWindow* This,LONG aScreenX) {
    return This->lpVtbl->SetScreenX(This,aScreenX);
}
static FORCEINLINE nsresult nsIDOMWindow_GetScreenY(nsIDOMWindow* This,LONG *aScreenY) {
    return This->lpVtbl->GetScreenY(This,aScreenY);
}
static FORCEINLINE nsresult nsIDOMWindow_SetScreenY(nsIDOMWindow* This,LONG aScreenY) {
    return This->lpVtbl->SetScreenY(This,aScreenY);
}
static FORCEINLINE nsresult nsIDOMWindow_GetOuterWidth(nsIDOMWindow* This,LONG *aOuterWidth) {
    return This->lpVtbl->GetOuterWidth(This,aOuterWidth);
}
static FORCEINLINE nsresult nsIDOMWindow_SetOuterWidth(nsIDOMWindow* This,LONG aOuterWidth) {
    return This->lpVtbl->SetOuterWidth(This,aOuterWidth);
}
static FORCEINLINE nsresult nsIDOMWindow_GetOuterHeight(nsIDOMWindow* This,LONG *aOuterHeight) {
    return This->lpVtbl->GetOuterHeight(This,aOuterHeight);
}
static FORCEINLINE nsresult nsIDOMWindow_SetOuterHeight(nsIDOMWindow* This,LONG aOuterHeight) {
    return This->lpVtbl->SetOuterHeight(This,aOuterHeight);
}
static FORCEINLINE nsresult nsIDOMWindow_GetComputedStyle(nsIDOMWindow* This,nsIDOMElement *elt,const nsAString *pseudoElt,nsIDOMCSSStyleDeclaration **_retval) {
    return This->lpVtbl->GetComputedStyle(This,elt,pseudoElt,_retval);
}
static FORCEINLINE nsresult nsIDOMWindow_GetDefaultComputedStyle(nsIDOMWindow* This,nsIDOMElement *elt,const nsAString *pseudoElt,nsIDOMCSSStyleDeclaration **_retval) {
    return This->lpVtbl->GetDefaultComputedStyle(This,elt,pseudoElt,_retval);
}
static FORCEINLINE nsresult nsIDOMWindow_GetFrames(nsIDOMWindow* This,nsIDOMWindowCollection **aFrames) {
    return This->lpVtbl->GetFrames(This,aFrames);
}
static FORCEINLINE nsresult nsIDOMWindow_GetTextZoom(nsIDOMWindow* This,float *aTextZoom) {
    return This->lpVtbl->GetTextZoom(This,aTextZoom);
}
static FORCEINLINE nsresult nsIDOMWindow_SetTextZoom(nsIDOMWindow* This,float aTextZoom) {
    return This->lpVtbl->SetTextZoom(This,aTextZoom);
}
static FORCEINLINE nsresult nsIDOMWindow_ScrollByLines(nsIDOMWindow* This,LONG numLines) {
    return This->lpVtbl->ScrollByLines(This,numLines);
}
static FORCEINLINE nsresult nsIDOMWindow_ScrollByPages(nsIDOMWindow* This,LONG numPages) {
    return This->lpVtbl->ScrollByPages(This,numPages);
}
static FORCEINLINE nsresult nsIDOMWindow_GetMozInnerScreenX(nsIDOMWindow* This,float *aMozInnerScreenX) {
    return This->lpVtbl->GetMozInnerScreenX(This,aMozInnerScreenX);
}
static FORCEINLINE nsresult nsIDOMWindow_GetMozInnerScreenY(nsIDOMWindow* This,float *aMozInnerScreenY) {
    return This->lpVtbl->GetMozInnerScreenY(This,aMozInnerScreenY);
}
static FORCEINLINE nsresult nsIDOMWindow_GetDevicePixelRatio(nsIDOMWindow* This,float *aDevicePixelRatio) {
    return This->lpVtbl->GetDevicePixelRatio(This,aDevicePixelRatio);
}
static FORCEINLINE nsresult nsIDOMWindow_GetScrollMaxX(nsIDOMWindow* This,LONG *aScrollMaxX) {
    return This->lpVtbl->GetScrollMaxX(This,aScrollMaxX);
}
static FORCEINLINE nsresult nsIDOMWindow_GetScrollMaxY(nsIDOMWindow* This,LONG *aScrollMaxY) {
    return This->lpVtbl->GetScrollMaxY(This,aScrollMaxY);
}
static FORCEINLINE nsresult nsIDOMWindow_GetFullScreen(nsIDOMWindow* This,cpp_bool *aFullScreen) {
    return This->lpVtbl->GetFullScreen(This,aFullScreen);
}
static FORCEINLINE nsresult nsIDOMWindow_SetFullScreen(nsIDOMWindow* This,cpp_bool aFullScreen) {
    return This->lpVtbl->SetFullScreen(This,aFullScreen);
}
static FORCEINLINE nsresult nsIDOMWindow_Back(nsIDOMWindow* This) {
    return This->lpVtbl->Back(This);
}
static FORCEINLINE nsresult nsIDOMWindow_Forward(nsIDOMWindow* This) {
    return This->lpVtbl->Forward(This);
}
static FORCEINLINE nsresult nsIDOMWindow_Home(nsIDOMWindow* This) {
    return This->lpVtbl->Home(This);
}
static FORCEINLINE nsresult nsIDOMWindow_Open(nsIDOMWindow* This,const nsAString *url,const nsAString *name,const nsAString *options,nsIDOMWindow **_retval) {
    return This->lpVtbl->Open(This,url,name,options,_retval);
}
static FORCEINLINE nsresult nsIDOMWindow_Find(nsIDOMWindow* This,const nsAString *str,cpp_bool caseSensitive,cpp_bool backwards,cpp_bool wrapAround,cpp_bool wholeWord,cpp_bool searchInFrames,cpp_bool showDialog,cpp_bool *_retval) {
    return This->lpVtbl->Find(This,str,caseSensitive,backwards,wrapAround,wholeWord,searchInFrames,showDialog,_retval);
}
static FORCEINLINE nsresult nsIDOMWindow_GetInnerWindow(nsIDOMWindow* This,mozIDOMWindow **aInnerWindow) {
    return This->lpVtbl->GetInnerWindow(This,aInnerWindow);
}
static FORCEINLINE nsresult nsIDOMWindow_GetOuterWindow(nsIDOMWindow* This,mozIDOMWindowProxy **aOuterWindow) {
    return This->lpVtbl->GetOuterWindow(This,aOuterWindow);
}
#endif
#endif

#endif


#endif  /* __nsIDOMWindow_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLBodyElement interface
 */
#ifndef __nsIDOMHTMLBodyElement_INTERFACE_DEFINED__
#define __nsIDOMHTMLBodyElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLBodyElement, 0x068630db, 0x2c00, 0x43dd, 0xb1,0x67, 0x49,0x57,0x57,0xa8,0x82,0x36);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("068630db-2c00-43dd-b167-495757a88236")
nsIDOMHTMLBodyElement : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetALink(
        nsAString *aALink) = 0;

    virtual nsresult STDMETHODCALLTYPE SetALink(
        const nsAString *aALink) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBackground(
        nsAString *aBackground) = 0;

    virtual nsresult STDMETHODCALLTYPE SetBackground(
        const nsAString *aBackground) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBgColor(
        nsAString *aBgColor) = 0;

    virtual nsresult STDMETHODCALLTYPE SetBgColor(
        const nsAString *aBgColor) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLink(
        nsAString *aLink) = 0;

    virtual nsresult STDMETHODCALLTYPE SetLink(
        const nsAString *aLink) = 0;

    virtual nsresult STDMETHODCALLTYPE GetText(
        nsAString *aText) = 0;

    virtual nsresult STDMETHODCALLTYPE SetText(
        const nsAString *aText) = 0;

    virtual nsresult STDMETHODCALLTYPE GetVLink(
        nsAString *aVLink) = 0;

    virtual nsresult STDMETHODCALLTYPE SetVLink(
        const nsAString *aVLink) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLBodyElement, 0x068630db, 0x2c00, 0x43dd, 0xb1,0x67, 0x49,0x57,0x57,0xa8,0x82,0x36)
#endif
#else
typedef struct nsIDOMHTMLBodyElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLBodyElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLBodyElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLBodyElement *This);

    /*** nsIDOMHTMLBodyElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetALink)(
        nsIDOMHTMLBodyElement *This,
        nsAString *aALink);

    nsresult (STDMETHODCALLTYPE *SetALink)(
        nsIDOMHTMLBodyElement *This,
        const nsAString *aALink);

    nsresult (STDMETHODCALLTYPE *GetBackground)(
        nsIDOMHTMLBodyElement *This,
        nsAString *aBackground);

    nsresult (STDMETHODCALLTYPE *SetBackground)(
        nsIDOMHTMLBodyElement *This,
        const nsAString *aBackground);

    nsresult (STDMETHODCALLTYPE *GetBgColor)(
        nsIDOMHTMLBodyElement *This,
        nsAString *aBgColor);

    nsresult (STDMETHODCALLTYPE *SetBgColor)(
        nsIDOMHTMLBodyElement *This,
        const nsAString *aBgColor);

    nsresult (STDMETHODCALLTYPE *GetLink)(
        nsIDOMHTMLBodyElement *This,
        nsAString *aLink);

    nsresult (STDMETHODCALLTYPE *SetLink)(
        nsIDOMHTMLBodyElement *This,
        const nsAString *aLink);

    nsresult (STDMETHODCALLTYPE *GetText)(
        nsIDOMHTMLBodyElement *This,
        nsAString *aText);

    nsresult (STDMETHODCALLTYPE *SetText)(
        nsIDOMHTMLBodyElement *This,
        const nsAString *aText);

    nsresult (STDMETHODCALLTYPE *GetVLink)(
        nsIDOMHTMLBodyElement *This,
        nsAString *aVLink);

    nsresult (STDMETHODCALLTYPE *SetVLink)(
        nsIDOMHTMLBodyElement *This,
        const nsAString *aVLink);

    END_INTERFACE
} nsIDOMHTMLBodyElementVtbl;

interface nsIDOMHTMLBodyElement {
    CONST_VTBL nsIDOMHTMLBodyElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLBodyElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLBodyElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLBodyElement_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMHTMLBodyElement methods ***/
#define nsIDOMHTMLBodyElement_GetALink(This,aALink) (This)->lpVtbl->GetALink(This,aALink)
#define nsIDOMHTMLBodyElement_SetALink(This,aALink) (This)->lpVtbl->SetALink(This,aALink)
#define nsIDOMHTMLBodyElement_GetBackground(This,aBackground) (This)->lpVtbl->GetBackground(This,aBackground)
#define nsIDOMHTMLBodyElement_SetBackground(This,aBackground) (This)->lpVtbl->SetBackground(This,aBackground)
#define nsIDOMHTMLBodyElement_GetBgColor(This,aBgColor) (This)->lpVtbl->GetBgColor(This,aBgColor)
#define nsIDOMHTMLBodyElement_SetBgColor(This,aBgColor) (This)->lpVtbl->SetBgColor(This,aBgColor)
#define nsIDOMHTMLBodyElement_GetLink(This,aLink) (This)->lpVtbl->GetLink(This,aLink)
#define nsIDOMHTMLBodyElement_SetLink(This,aLink) (This)->lpVtbl->SetLink(This,aLink)
#define nsIDOMHTMLBodyElement_GetText(This,aText) (This)->lpVtbl->GetText(This,aText)
#define nsIDOMHTMLBodyElement_SetText(This,aText) (This)->lpVtbl->SetText(This,aText)
#define nsIDOMHTMLBodyElement_GetVLink(This,aVLink) (This)->lpVtbl->GetVLink(This,aVLink)
#define nsIDOMHTMLBodyElement_SetVLink(This,aVLink) (This)->lpVtbl->SetVLink(This,aVLink)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLBodyElement_QueryInterface(nsIDOMHTMLBodyElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLBodyElement_AddRef(nsIDOMHTMLBodyElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLBodyElement_Release(nsIDOMHTMLBodyElement* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMHTMLBodyElement methods ***/
static FORCEINLINE nsresult nsIDOMHTMLBodyElement_GetALink(nsIDOMHTMLBodyElement* This,nsAString *aALink) {
    return This->lpVtbl->GetALink(This,aALink);
}
static FORCEINLINE nsresult nsIDOMHTMLBodyElement_SetALink(nsIDOMHTMLBodyElement* This,const nsAString *aALink) {
    return This->lpVtbl->SetALink(This,aALink);
}
static FORCEINLINE nsresult nsIDOMHTMLBodyElement_GetBackground(nsIDOMHTMLBodyElement* This,nsAString *aBackground) {
    return This->lpVtbl->GetBackground(This,aBackground);
}
static FORCEINLINE nsresult nsIDOMHTMLBodyElement_SetBackground(nsIDOMHTMLBodyElement* This,const nsAString *aBackground) {
    return This->lpVtbl->SetBackground(This,aBackground);
}
static FORCEINLINE nsresult nsIDOMHTMLBodyElement_GetBgColor(nsIDOMHTMLBodyElement* This,nsAString *aBgColor) {
    return This->lpVtbl->GetBgColor(This,aBgColor);
}
static FORCEINLINE nsresult nsIDOMHTMLBodyElement_SetBgColor(nsIDOMHTMLBodyElement* This,const nsAString *aBgColor) {
    return This->lpVtbl->SetBgColor(This,aBgColor);
}
static FORCEINLINE nsresult nsIDOMHTMLBodyElement_GetLink(nsIDOMHTMLBodyElement* This,nsAString *aLink) {
    return This->lpVtbl->GetLink(This,aLink);
}
static FORCEINLINE nsresult nsIDOMHTMLBodyElement_SetLink(nsIDOMHTMLBodyElement* This,const nsAString *aLink) {
    return This->lpVtbl->SetLink(This,aLink);
}
static FORCEINLINE nsresult nsIDOMHTMLBodyElement_GetText(nsIDOMHTMLBodyElement* This,nsAString *aText) {
    return This->lpVtbl->GetText(This,aText);
}
static FORCEINLINE nsresult nsIDOMHTMLBodyElement_SetText(nsIDOMHTMLBodyElement* This,const nsAString *aText) {
    return This->lpVtbl->SetText(This,aText);
}
static FORCEINLINE nsresult nsIDOMHTMLBodyElement_GetVLink(nsIDOMHTMLBodyElement* This,nsAString *aVLink) {
    return This->lpVtbl->GetVLink(This,aVLink);
}
static FORCEINLINE nsresult nsIDOMHTMLBodyElement_SetVLink(nsIDOMHTMLBodyElement* This,const nsAString *aVLink) {
    return This->lpVtbl->SetVLink(This,aVLink);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLBodyElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLFormElement interface
 */
#ifndef __nsIDOMHTMLFormElement_INTERFACE_DEFINED__
#define __nsIDOMHTMLFormElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLFormElement, 0xad9b2ad0, 0x9d29, 0x43f6, 0xb1,0xa2, 0xa1,0xfd,0x24,0x62,0x7e,0x6b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ad9b2ad0-9d29-43f6-b1a2-a1fd24627e6b")
nsIDOMHTMLFormElement : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetAcceptCharset(
        nsAString *aAcceptCharset) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAcceptCharset(
        const nsAString *aAcceptCharset) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAction(
        nsAString *aAction) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAction(
        const nsAString *aAction) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAutocomplete(
        nsAString *aAutocomplete) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAutocomplete(
        const nsAString *aAutocomplete) = 0;

    virtual nsresult STDMETHODCALLTYPE GetEnctype(
        nsAString *aEnctype) = 0;

    virtual nsresult STDMETHODCALLTYPE SetEnctype(
        const nsAString *aEnctype) = 0;

    virtual nsresult STDMETHODCALLTYPE GetEncoding(
        nsAString *aEncoding) = 0;

    virtual nsresult STDMETHODCALLTYPE SetEncoding(
        const nsAString *aEncoding) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMethod(
        nsAString *aMethod) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMethod(
        const nsAString *aMethod) = 0;

    virtual nsresult STDMETHODCALLTYPE GetName(
        nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE SetName(
        const nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNoValidate(
        cpp_bool *aNoValidate) = 0;

    virtual nsresult STDMETHODCALLTYPE SetNoValidate(
        cpp_bool aNoValidate) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTarget(
        nsAString *aTarget) = 0;

    virtual nsresult STDMETHODCALLTYPE SetTarget(
        const nsAString *aTarget) = 0;

    virtual nsresult STDMETHODCALLTYPE GetElements(
        nsIDOMHTMLCollection **aElements) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLength(
        LONG *aLength) = 0;

    virtual nsresult STDMETHODCALLTYPE Submit(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE Reset(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE CheckValidity(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFormData(
        nsIDOMHTMLElement *aOriginatingElement,
        nsAString *aActionURI,
        nsIInputStream **aPostDataStream) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLFormElement, 0xad9b2ad0, 0x9d29, 0x43f6, 0xb1,0xa2, 0xa1,0xfd,0x24,0x62,0x7e,0x6b)
#endif
#else
typedef struct nsIDOMHTMLFormElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLFormElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLFormElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLFormElement *This);

    /*** nsIDOMHTMLFormElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetAcceptCharset)(
        nsIDOMHTMLFormElement *This,
        nsAString *aAcceptCharset);

    nsresult (STDMETHODCALLTYPE *SetAcceptCharset)(
        nsIDOMHTMLFormElement *This,
        const nsAString *aAcceptCharset);

    nsresult (STDMETHODCALLTYPE *GetAction)(
        nsIDOMHTMLFormElement *This,
        nsAString *aAction);

    nsresult (STDMETHODCALLTYPE *SetAction)(
        nsIDOMHTMLFormElement *This,
        const nsAString *aAction);

    nsresult (STDMETHODCALLTYPE *GetAutocomplete)(
        nsIDOMHTMLFormElement *This,
        nsAString *aAutocomplete);

    nsresult (STDMETHODCALLTYPE *SetAutocomplete)(
        nsIDOMHTMLFormElement *This,
        const nsAString *aAutocomplete);

    nsresult (STDMETHODCALLTYPE *GetEnctype)(
        nsIDOMHTMLFormElement *This,
        nsAString *aEnctype);

    nsresult (STDMETHODCALLTYPE *SetEnctype)(
        nsIDOMHTMLFormElement *This,
        const nsAString *aEnctype);

    nsresult (STDMETHODCALLTYPE *GetEncoding)(
        nsIDOMHTMLFormElement *This,
        nsAString *aEncoding);

    nsresult (STDMETHODCALLTYPE *SetEncoding)(
        nsIDOMHTMLFormElement *This,
        const nsAString *aEncoding);

    nsresult (STDMETHODCALLTYPE *GetMethod)(
        nsIDOMHTMLFormElement *This,
        nsAString *aMethod);

    nsresult (STDMETHODCALLTYPE *SetMethod)(
        nsIDOMHTMLFormElement *This,
        const nsAString *aMethod);

    nsresult (STDMETHODCALLTYPE *GetName)(
        nsIDOMHTMLFormElement *This,
        nsAString *aName);

    nsresult (STDMETHODCALLTYPE *SetName)(
        nsIDOMHTMLFormElement *This,
        const nsAString *aName);

    nsresult (STDMETHODCALLTYPE *GetNoValidate)(
        nsIDOMHTMLFormElement *This,
        cpp_bool *aNoValidate);

    nsresult (STDMETHODCALLTYPE *SetNoValidate)(
        nsIDOMHTMLFormElement *This,
        cpp_bool aNoValidate);

    nsresult (STDMETHODCALLTYPE *GetTarget)(
        nsIDOMHTMLFormElement *This,
        nsAString *aTarget);

    nsresult (STDMETHODCALLTYPE *SetTarget)(
        nsIDOMHTMLFormElement *This,
        const nsAString *aTarget);

    nsresult (STDMETHODCALLTYPE *GetElements)(
        nsIDOMHTMLFormElement *This,
        nsIDOMHTMLCollection **aElements);

    nsresult (STDMETHODCALLTYPE *GetLength)(
        nsIDOMHTMLFormElement *This,
        LONG *aLength);

    nsresult (STDMETHODCALLTYPE *Submit)(
        nsIDOMHTMLFormElement *This);

    nsresult (STDMETHODCALLTYPE *Reset)(
        nsIDOMHTMLFormElement *This);

    nsresult (STDMETHODCALLTYPE *CheckValidity)(
        nsIDOMHTMLFormElement *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetFormData)(
        nsIDOMHTMLFormElement *This,
        nsIDOMHTMLElement *aOriginatingElement,
        nsAString *aActionURI,
        nsIInputStream **aPostDataStream);

    END_INTERFACE
} nsIDOMHTMLFormElementVtbl;

interface nsIDOMHTMLFormElement {
    CONST_VTBL nsIDOMHTMLFormElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLFormElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLFormElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLFormElement_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMHTMLFormElement methods ***/
#define nsIDOMHTMLFormElement_GetAcceptCharset(This,aAcceptCharset) (This)->lpVtbl->GetAcceptCharset(This,aAcceptCharset)
#define nsIDOMHTMLFormElement_SetAcceptCharset(This,aAcceptCharset) (This)->lpVtbl->SetAcceptCharset(This,aAcceptCharset)
#define nsIDOMHTMLFormElement_GetAction(This,aAction) (This)->lpVtbl->GetAction(This,aAction)
#define nsIDOMHTMLFormElement_SetAction(This,aAction) (This)->lpVtbl->SetAction(This,aAction)
#define nsIDOMHTMLFormElement_GetAutocomplete(This,aAutocomplete) (This)->lpVtbl->GetAutocomplete(This,aAutocomplete)
#define nsIDOMHTMLFormElement_SetAutocomplete(This,aAutocomplete) (This)->lpVtbl->SetAutocomplete(This,aAutocomplete)
#define nsIDOMHTMLFormElement_GetEnctype(This,aEnctype) (This)->lpVtbl->GetEnctype(This,aEnctype)
#define nsIDOMHTMLFormElement_SetEnctype(This,aEnctype) (This)->lpVtbl->SetEnctype(This,aEnctype)
#define nsIDOMHTMLFormElement_GetEncoding(This,aEncoding) (This)->lpVtbl->GetEncoding(This,aEncoding)
#define nsIDOMHTMLFormElement_SetEncoding(This,aEncoding) (This)->lpVtbl->SetEncoding(This,aEncoding)
#define nsIDOMHTMLFormElement_GetMethod(This,aMethod) (This)->lpVtbl->GetMethod(This,aMethod)
#define nsIDOMHTMLFormElement_SetMethod(This,aMethod) (This)->lpVtbl->SetMethod(This,aMethod)
#define nsIDOMHTMLFormElement_GetName(This,aName) (This)->lpVtbl->GetName(This,aName)
#define nsIDOMHTMLFormElement_SetName(This,aName) (This)->lpVtbl->SetName(This,aName)
#define nsIDOMHTMLFormElement_GetNoValidate(This,aNoValidate) (This)->lpVtbl->GetNoValidate(This,aNoValidate)
#define nsIDOMHTMLFormElement_SetNoValidate(This,aNoValidate) (This)->lpVtbl->SetNoValidate(This,aNoValidate)
#define nsIDOMHTMLFormElement_GetTarget(This,aTarget) (This)->lpVtbl->GetTarget(This,aTarget)
#define nsIDOMHTMLFormElement_SetTarget(This,aTarget) (This)->lpVtbl->SetTarget(This,aTarget)
#define nsIDOMHTMLFormElement_GetElements(This,aElements) (This)->lpVtbl->GetElements(This,aElements)
#define nsIDOMHTMLFormElement_GetLength(This,aLength) (This)->lpVtbl->GetLength(This,aLength)
#define nsIDOMHTMLFormElement_Submit(This) (This)->lpVtbl->Submit(This)
#define nsIDOMHTMLFormElement_Reset(This) (This)->lpVtbl->Reset(This)
#define nsIDOMHTMLFormElement_CheckValidity(This,_retval) (This)->lpVtbl->CheckValidity(This,_retval)
#define nsIDOMHTMLFormElement_GetFormData(This,aOriginatingElement,aActionURI,aPostDataStream) (This)->lpVtbl->GetFormData(This,aOriginatingElement,aActionURI,aPostDataStream)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLFormElement_QueryInterface(nsIDOMHTMLFormElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLFormElement_AddRef(nsIDOMHTMLFormElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLFormElement_Release(nsIDOMHTMLFormElement* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMHTMLFormElement methods ***/
static FORCEINLINE nsresult nsIDOMHTMLFormElement_GetAcceptCharset(nsIDOMHTMLFormElement* This,nsAString *aAcceptCharset) {
    return This->lpVtbl->GetAcceptCharset(This,aAcceptCharset);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_SetAcceptCharset(nsIDOMHTMLFormElement* This,const nsAString *aAcceptCharset) {
    return This->lpVtbl->SetAcceptCharset(This,aAcceptCharset);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_GetAction(nsIDOMHTMLFormElement* This,nsAString *aAction) {
    return This->lpVtbl->GetAction(This,aAction);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_SetAction(nsIDOMHTMLFormElement* This,const nsAString *aAction) {
    return This->lpVtbl->SetAction(This,aAction);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_GetAutocomplete(nsIDOMHTMLFormElement* This,nsAString *aAutocomplete) {
    return This->lpVtbl->GetAutocomplete(This,aAutocomplete);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_SetAutocomplete(nsIDOMHTMLFormElement* This,const nsAString *aAutocomplete) {
    return This->lpVtbl->SetAutocomplete(This,aAutocomplete);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_GetEnctype(nsIDOMHTMLFormElement* This,nsAString *aEnctype) {
    return This->lpVtbl->GetEnctype(This,aEnctype);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_SetEnctype(nsIDOMHTMLFormElement* This,const nsAString *aEnctype) {
    return This->lpVtbl->SetEnctype(This,aEnctype);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_GetEncoding(nsIDOMHTMLFormElement* This,nsAString *aEncoding) {
    return This->lpVtbl->GetEncoding(This,aEncoding);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_SetEncoding(nsIDOMHTMLFormElement* This,const nsAString *aEncoding) {
    return This->lpVtbl->SetEncoding(This,aEncoding);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_GetMethod(nsIDOMHTMLFormElement* This,nsAString *aMethod) {
    return This->lpVtbl->GetMethod(This,aMethod);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_SetMethod(nsIDOMHTMLFormElement* This,const nsAString *aMethod) {
    return This->lpVtbl->SetMethod(This,aMethod);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_GetName(nsIDOMHTMLFormElement* This,nsAString *aName) {
    return This->lpVtbl->GetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_SetName(nsIDOMHTMLFormElement* This,const nsAString *aName) {
    return This->lpVtbl->SetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_GetNoValidate(nsIDOMHTMLFormElement* This,cpp_bool *aNoValidate) {
    return This->lpVtbl->GetNoValidate(This,aNoValidate);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_SetNoValidate(nsIDOMHTMLFormElement* This,cpp_bool aNoValidate) {
    return This->lpVtbl->SetNoValidate(This,aNoValidate);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_GetTarget(nsIDOMHTMLFormElement* This,nsAString *aTarget) {
    return This->lpVtbl->GetTarget(This,aTarget);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_SetTarget(nsIDOMHTMLFormElement* This,const nsAString *aTarget) {
    return This->lpVtbl->SetTarget(This,aTarget);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_GetElements(nsIDOMHTMLFormElement* This,nsIDOMHTMLCollection **aElements) {
    return This->lpVtbl->GetElements(This,aElements);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_GetLength(nsIDOMHTMLFormElement* This,LONG *aLength) {
    return This->lpVtbl->GetLength(This,aLength);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_Submit(nsIDOMHTMLFormElement* This) {
    return This->lpVtbl->Submit(This);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_Reset(nsIDOMHTMLFormElement* This) {
    return This->lpVtbl->Reset(This);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_CheckValidity(nsIDOMHTMLFormElement* This,cpp_bool *_retval) {
    return This->lpVtbl->CheckValidity(This,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLFormElement_GetFormData(nsIDOMHTMLFormElement* This,nsIDOMHTMLElement *aOriginatingElement,nsAString *aActionURI,nsIInputStream **aPostDataStream) {
    return This->lpVtbl->GetFormData(This,aOriginatingElement,aActionURI,aPostDataStream);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLFormElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLInputElement interface
 */
#ifndef __nsIDOMHTMLInputElement_INTERFACE_DEFINED__
#define __nsIDOMHTMLInputElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLInputElement, 0x64aeda0b, 0xe9b5, 0x4868, 0xa4,0xf9, 0xe4,0x77,0x6e,0x32,0xe7,0x33);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("64aeda0b-e9b5-4868-a4f9-e4776e32e733")
nsIDOMHTMLInputElement : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetAccept(
        nsAString *aAccept) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAccept(
        const nsAString *aAccept) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAlt(
        nsAString *aAlt) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAlt(
        const nsAString *aAlt) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAutocomplete(
        nsAString *aAutocomplete) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAutocomplete(
        const nsAString *aAutocomplete) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAutofocus(
        cpp_bool *aAutofocus) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAutofocus(
        cpp_bool aAutofocus) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDefaultChecked(
        cpp_bool *aDefaultChecked) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDefaultChecked(
        cpp_bool aDefaultChecked) = 0;

    virtual nsresult STDMETHODCALLTYPE GetChecked(
        cpp_bool *aChecked) = 0;

    virtual nsresult STDMETHODCALLTYPE SetChecked(
        cpp_bool aChecked) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDisabled(
        cpp_bool *aDisabled) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDisabled(
        cpp_bool aDisabled) = 0;

    virtual nsresult STDMETHODCALLTYPE GetForm(
        nsIDOMHTMLFormElement **aForm) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFormAction(
        nsAString *aFormAction) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFormAction(
        const nsAString *aFormAction) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFormEnctype(
        nsAString *aFormEnctype) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFormEnctype(
        const nsAString *aFormEnctype) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFormMethod(
        nsAString *aFormMethod) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFormMethod(
        const nsAString *aFormMethod) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFormNoValidate(
        cpp_bool *aFormNoValidate) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFormNoValidate(
        cpp_bool aFormNoValidate) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFormTarget(
        nsAString *aFormTarget) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFormTarget(
        const nsAString *aFormTarget) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFiles(
        nsIDOMFileList **aFiles) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHeight(
        UINT32 *aHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHeight(
        UINT32 aHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIndeterminate(
        cpp_bool *aIndeterminate) = 0;

    virtual nsresult STDMETHODCALLTYPE SetIndeterminate(
        cpp_bool aIndeterminate) = 0;

    virtual nsresult STDMETHODCALLTYPE GetInputMode(
        nsAString *aInputMode) = 0;

    virtual nsresult STDMETHODCALLTYPE SetInputMode(
        const nsAString *aInputMode) = 0;

    virtual nsresult STDMETHODCALLTYPE GetList(
        nsIDOMHTMLElement **aList) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMax(
        nsAString *aMax) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMax(
        const nsAString *aMax) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMaxLength(
        LONG *aMaxLength) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMaxLength(
        LONG aMaxLength) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMin(
        nsAString *aMin) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMin(
        const nsAString *aMin) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMultiple(
        cpp_bool *aMultiple) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMultiple(
        cpp_bool aMultiple) = 0;

    virtual nsresult STDMETHODCALLTYPE GetName(
        nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE SetName(
        const nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPattern(
        nsAString *aPattern) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPattern(
        const nsAString *aPattern) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPlaceholder(
        nsAString *aPlaceholder) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPlaceholder(
        const nsAString *aPlaceholder) = 0;

    virtual nsresult STDMETHODCALLTYPE GetReadOnly(
        cpp_bool *aReadOnly) = 0;

    virtual nsresult STDMETHODCALLTYPE SetReadOnly(
        cpp_bool aReadOnly) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRequired(
        cpp_bool *aRequired) = 0;

    virtual nsresult STDMETHODCALLTYPE SetRequired(
        cpp_bool aRequired) = 0;

    virtual nsresult STDMETHODCALLTYPE GetStep(
        nsAString *aStep) = 0;

    virtual nsresult STDMETHODCALLTYPE SetStep(
        const nsAString *aStep) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAlign(
        nsAString *aAlign) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAlign(
        const nsAString *aAlign) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSize(
        UINT32 *aSize) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSize(
        UINT32 aSize) = 0;

    virtual nsresult STDMETHODCALLTYPE GetWidth(
        UINT32 *aWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE SetWidth(
        UINT32 aWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSrc(
        nsAString *aSrc) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSrc(
        const nsAString *aSrc) = 0;

    virtual nsresult STDMETHODCALLTYPE GetType(
        nsAString *aType) = 0;

    virtual nsresult STDMETHODCALLTYPE SetType(
        const nsAString *aType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDefaultValue(
        nsAString *aDefaultValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDefaultValue(
        const nsAString *aDefaultValue) = 0;

    virtual nsresult STDMETHODCALLTYPE GetValue(
        nsAString *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetValue(
        const nsAString *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE GetValueAsNumber(
        double *aValueAsNumber) = 0;

    virtual nsresult STDMETHODCALLTYPE SetValueAsNumber(
        double aValueAsNumber) = 0;

    virtual nsresult STDMETHODCALLTYPE StepDown(
        LONG n,
        UINT8 _argc) = 0;

    virtual nsresult STDMETHODCALLTYPE StepUp(
        LONG n,
        UINT8 _argc) = 0;

    virtual nsresult STDMETHODCALLTYPE GetWillValidate(
        cpp_bool *aWillValidate) = 0;

    virtual nsresult STDMETHODCALLTYPE GetValidity(
        nsIDOMValidityState **aValidity) = 0;

    virtual nsresult STDMETHODCALLTYPE GetValidationMessage(
        nsAString *aValidationMessage) = 0;

    virtual nsresult STDMETHODCALLTYPE CheckValidity(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCustomValidity(
        const nsAString *error) = 0;

    virtual nsresult STDMETHODCALLTYPE Select(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSelectionStart(
        LONG *aSelectionStart) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSelectionStart(
        LONG aSelectionStart) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSelectionEnd(
        LONG *aSelectionEnd) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSelectionEnd(
        LONG aSelectionEnd) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSelectionRange(
        LONG selectionStart,
        LONG selectionEnd,
        const nsAString *direction) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSelectionDirection(
        nsAString *aSelectionDirection) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSelectionDirection(
        const nsAString *aSelectionDirection) = 0;

    virtual nsresult STDMETHODCALLTYPE GetUseMap(
        nsAString *aUseMap) = 0;

    virtual nsresult STDMETHODCALLTYPE SetUseMap(
        const nsAString *aUseMap) = 0;

    virtual nsresult STDMETHODCALLTYPE GetControllers(
        nsIControllers **aControllers) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTextLength(
        LONG *aTextLength) = 0;

    virtual nsresult STDMETHODCALLTYPE MozGetFileNameArray(
        UINT32 *aLength,
        PRUnichar ***aFileNames) = 0;

    virtual nsresult STDMETHODCALLTYPE MozSetFileNameArray(
        const PRUnichar **aFileNames,
        UINT32 aLength) = 0;

    virtual nsresult STDMETHODCALLTYPE MozIsTextField(
        cpp_bool aExcludePassword,
        cpp_bool *_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLInputElement, 0x64aeda0b, 0xe9b5, 0x4868, 0xa4,0xf9, 0xe4,0x77,0x6e,0x32,0xe7,0x33)
#endif
#else
typedef struct nsIDOMHTMLInputElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLInputElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLInputElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLInputElement *This);

    /*** nsIDOMHTMLInputElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetAccept)(
        nsIDOMHTMLInputElement *This,
        nsAString *aAccept);

    nsresult (STDMETHODCALLTYPE *SetAccept)(
        nsIDOMHTMLInputElement *This,
        const nsAString *aAccept);

    nsresult (STDMETHODCALLTYPE *GetAlt)(
        nsIDOMHTMLInputElement *This,
        nsAString *aAlt);

    nsresult (STDMETHODCALLTYPE *SetAlt)(
        nsIDOMHTMLInputElement *This,
        const nsAString *aAlt);

    nsresult (STDMETHODCALLTYPE *GetAutocomplete)(
        nsIDOMHTMLInputElement *This,
        nsAString *aAutocomplete);

    nsresult (STDMETHODCALLTYPE *SetAutocomplete)(
        nsIDOMHTMLInputElement *This,
        const nsAString *aAutocomplete);

    nsresult (STDMETHODCALLTYPE *GetAutofocus)(
        nsIDOMHTMLInputElement *This,
        cpp_bool *aAutofocus);

    nsresult (STDMETHODCALLTYPE *SetAutofocus)(
        nsIDOMHTMLInputElement *This,
        cpp_bool aAutofocus);

    nsresult (STDMETHODCALLTYPE *GetDefaultChecked)(
        nsIDOMHTMLInputElement *This,
        cpp_bool *aDefaultChecked);

    nsresult (STDMETHODCALLTYPE *SetDefaultChecked)(
        nsIDOMHTMLInputElement *This,
        cpp_bool aDefaultChecked);

    nsresult (STDMETHODCALLTYPE *GetChecked)(
        nsIDOMHTMLInputElement *This,
        cpp_bool *aChecked);

    nsresult (STDMETHODCALLTYPE *SetChecked)(
        nsIDOMHTMLInputElement *This,
        cpp_bool aChecked);

    nsresult (STDMETHODCALLTYPE *GetDisabled)(
        nsIDOMHTMLInputElement *This,
        cpp_bool *aDisabled);

    nsresult (STDMETHODCALLTYPE *SetDisabled)(
        nsIDOMHTMLInputElement *This,
        cpp_bool aDisabled);

    nsresult (STDMETHODCALLTYPE *GetForm)(
        nsIDOMHTMLInputElement *This,
        nsIDOMHTMLFormElement **aForm);

    nsresult (STDMETHODCALLTYPE *GetFormAction)(
        nsIDOMHTMLInputElement *This,
        nsAString *aFormAction);

    nsresult (STDMETHODCALLTYPE *SetFormAction)(
        nsIDOMHTMLInputElement *This,
        const nsAString *aFormAction);

    nsresult (STDMETHODCALLTYPE *GetFormEnctype)(
        nsIDOMHTMLInputElement *This,
        nsAString *aFormEnctype);

    nsresult (STDMETHODCALLTYPE *SetFormEnctype)(
        nsIDOMHTMLInputElement *This,
        const nsAString *aFormEnctype);

    nsresult (STDMETHODCALLTYPE *GetFormMethod)(
        nsIDOMHTMLInputElement *This,
        nsAString *aFormMethod);

    nsresult (STDMETHODCALLTYPE *SetFormMethod)(
        nsIDOMHTMLInputElement *This,
        const nsAString *aFormMethod);

    nsresult (STDMETHODCALLTYPE *GetFormNoValidate)(
        nsIDOMHTMLInputElement *This,
        cpp_bool *aFormNoValidate);

    nsresult (STDMETHODCALLTYPE *SetFormNoValidate)(
        nsIDOMHTMLInputElement *This,
        cpp_bool aFormNoValidate);

    nsresult (STDMETHODCALLTYPE *GetFormTarget)(
        nsIDOMHTMLInputElement *This,
        nsAString *aFormTarget);

    nsresult (STDMETHODCALLTYPE *SetFormTarget)(
        nsIDOMHTMLInputElement *This,
        const nsAString *aFormTarget);

    nsresult (STDMETHODCALLTYPE *GetFiles)(
        nsIDOMHTMLInputElement *This,
        nsIDOMFileList **aFiles);

    nsresult (STDMETHODCALLTYPE *GetHeight)(
        nsIDOMHTMLInputElement *This,
        UINT32 *aHeight);

    nsresult (STDMETHODCALLTYPE *SetHeight)(
        nsIDOMHTMLInputElement *This,
        UINT32 aHeight);

    nsresult (STDMETHODCALLTYPE *GetIndeterminate)(
        nsIDOMHTMLInputElement *This,
        cpp_bool *aIndeterminate);

    nsresult (STDMETHODCALLTYPE *SetIndeterminate)(
        nsIDOMHTMLInputElement *This,
        cpp_bool aIndeterminate);

    nsresult (STDMETHODCALLTYPE *GetInputMode)(
        nsIDOMHTMLInputElement *This,
        nsAString *aInputMode);

    nsresult (STDMETHODCALLTYPE *SetInputMode)(
        nsIDOMHTMLInputElement *This,
        const nsAString *aInputMode);

    nsresult (STDMETHODCALLTYPE *GetList)(
        nsIDOMHTMLInputElement *This,
        nsIDOMHTMLElement **aList);

    nsresult (STDMETHODCALLTYPE *GetMax)(
        nsIDOMHTMLInputElement *This,
        nsAString *aMax);

    nsresult (STDMETHODCALLTYPE *SetMax)(
        nsIDOMHTMLInputElement *This,
        const nsAString *aMax);

    nsresult (STDMETHODCALLTYPE *GetMaxLength)(
        nsIDOMHTMLInputElement *This,
        LONG *aMaxLength);

    nsresult (STDMETHODCALLTYPE *SetMaxLength)(
        nsIDOMHTMLInputElement *This,
        LONG aMaxLength);

    nsresult (STDMETHODCALLTYPE *GetMin)(
        nsIDOMHTMLInputElement *This,
        nsAString *aMin);

    nsresult (STDMETHODCALLTYPE *SetMin)(
        nsIDOMHTMLInputElement *This,
        const nsAString *aMin);

    nsresult (STDMETHODCALLTYPE *GetMultiple)(
        nsIDOMHTMLInputElement *This,
        cpp_bool *aMultiple);

    nsresult (STDMETHODCALLTYPE *SetMultiple)(
        nsIDOMHTMLInputElement *This,
        cpp_bool aMultiple);

    nsresult (STDMETHODCALLTYPE *GetName)(
        nsIDOMHTMLInputElement *This,
        nsAString *aName);

    nsresult (STDMETHODCALLTYPE *SetName)(
        nsIDOMHTMLInputElement *This,
        const nsAString *aName);

    nsresult (STDMETHODCALLTYPE *GetPattern)(
        nsIDOMHTMLInputElement *This,
        nsAString *aPattern);

    nsresult (STDMETHODCALLTYPE *SetPattern)(
        nsIDOMHTMLInputElement *This,
        const nsAString *aPattern);

    nsresult (STDMETHODCALLTYPE *GetPlaceholder)(
        nsIDOMHTMLInputElement *This,
        nsAString *aPlaceholder);

    nsresult (STDMETHODCALLTYPE *SetPlaceholder)(
        nsIDOMHTMLInputElement *This,
        const nsAString *aPlaceholder);

    nsresult (STDMETHODCALLTYPE *GetReadOnly)(
        nsIDOMHTMLInputElement *This,
        cpp_bool *aReadOnly);

    nsresult (STDMETHODCALLTYPE *SetReadOnly)(
        nsIDOMHTMLInputElement *This,
        cpp_bool aReadOnly);

    nsresult (STDMETHODCALLTYPE *GetRequired)(
        nsIDOMHTMLInputElement *This,
        cpp_bool *aRequired);

    nsresult (STDMETHODCALLTYPE *SetRequired)(
        nsIDOMHTMLInputElement *This,
        cpp_bool aRequired);

    nsresult (STDMETHODCALLTYPE *GetStep)(
        nsIDOMHTMLInputElement *This,
        nsAString *aStep);

    nsresult (STDMETHODCALLTYPE *SetStep)(
        nsIDOMHTMLInputElement *This,
        const nsAString *aStep);

    nsresult (STDMETHODCALLTYPE *GetAlign)(
        nsIDOMHTMLInputElement *This,
        nsAString *aAlign);

    nsresult (STDMETHODCALLTYPE *SetAlign)(
        nsIDOMHTMLInputElement *This,
        const nsAString *aAlign);

    nsresult (STDMETHODCALLTYPE *GetSize)(
        nsIDOMHTMLInputElement *This,
        UINT32 *aSize);

    nsresult (STDMETHODCALLTYPE *SetSize)(
        nsIDOMHTMLInputElement *This,
        UINT32 aSize);

    nsresult (STDMETHODCALLTYPE *GetWidth)(
        nsIDOMHTMLInputElement *This,
        UINT32 *aWidth);

    nsresult (STDMETHODCALLTYPE *SetWidth)(
        nsIDOMHTMLInputElement *This,
        UINT32 aWidth);

    nsresult (STDMETHODCALLTYPE *GetSrc)(
        nsIDOMHTMLInputElement *This,
        nsAString *aSrc);

    nsresult (STDMETHODCALLTYPE *SetSrc)(
        nsIDOMHTMLInputElement *This,
        const nsAString *aSrc);

    nsresult (STDMETHODCALLTYPE *GetType)(
        nsIDOMHTMLInputElement *This,
        nsAString *aType);

    nsresult (STDMETHODCALLTYPE *SetType)(
        nsIDOMHTMLInputElement *This,
        const nsAString *aType);

    nsresult (STDMETHODCALLTYPE *GetDefaultValue)(
        nsIDOMHTMLInputElement *This,
        nsAString *aDefaultValue);

    nsresult (STDMETHODCALLTYPE *SetDefaultValue)(
        nsIDOMHTMLInputElement *This,
        const nsAString *aDefaultValue);

    nsresult (STDMETHODCALLTYPE *GetValue)(
        nsIDOMHTMLInputElement *This,
        nsAString *aValue);

    nsresult (STDMETHODCALLTYPE *SetValue)(
        nsIDOMHTMLInputElement *This,
        const nsAString *aValue);

    nsresult (STDMETHODCALLTYPE *GetValueAsNumber)(
        nsIDOMHTMLInputElement *This,
        double *aValueAsNumber);

    nsresult (STDMETHODCALLTYPE *SetValueAsNumber)(
        nsIDOMHTMLInputElement *This,
        double aValueAsNumber);

    nsresult (STDMETHODCALLTYPE *StepDown)(
        nsIDOMHTMLInputElement *This,
        LONG n,
        UINT8 _argc);

    nsresult (STDMETHODCALLTYPE *StepUp)(
        nsIDOMHTMLInputElement *This,
        LONG n,
        UINT8 _argc);

    nsresult (STDMETHODCALLTYPE *GetWillValidate)(
        nsIDOMHTMLInputElement *This,
        cpp_bool *aWillValidate);

    nsresult (STDMETHODCALLTYPE *GetValidity)(
        nsIDOMHTMLInputElement *This,
        nsIDOMValidityState **aValidity);

    nsresult (STDMETHODCALLTYPE *GetValidationMessage)(
        nsIDOMHTMLInputElement *This,
        nsAString *aValidationMessage);

    nsresult (STDMETHODCALLTYPE *CheckValidity)(
        nsIDOMHTMLInputElement *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetCustomValidity)(
        nsIDOMHTMLInputElement *This,
        const nsAString *error);

    nsresult (STDMETHODCALLTYPE *Select)(
        nsIDOMHTMLInputElement *This);

    nsresult (STDMETHODCALLTYPE *GetSelectionStart)(
        nsIDOMHTMLInputElement *This,
        LONG *aSelectionStart);

    nsresult (STDMETHODCALLTYPE *SetSelectionStart)(
        nsIDOMHTMLInputElement *This,
        LONG aSelectionStart);

    nsresult (STDMETHODCALLTYPE *GetSelectionEnd)(
        nsIDOMHTMLInputElement *This,
        LONG *aSelectionEnd);

    nsresult (STDMETHODCALLTYPE *SetSelectionEnd)(
        nsIDOMHTMLInputElement *This,
        LONG aSelectionEnd);

    nsresult (STDMETHODCALLTYPE *SetSelectionRange)(
        nsIDOMHTMLInputElement *This,
        LONG selectionStart,
        LONG selectionEnd,
        const nsAString *direction);

    nsresult (STDMETHODCALLTYPE *GetSelectionDirection)(
        nsIDOMHTMLInputElement *This,
        nsAString *aSelectionDirection);

    nsresult (STDMETHODCALLTYPE *SetSelectionDirection)(
        nsIDOMHTMLInputElement *This,
        const nsAString *aSelectionDirection);

    nsresult (STDMETHODCALLTYPE *GetUseMap)(
        nsIDOMHTMLInputElement *This,
        nsAString *aUseMap);

    nsresult (STDMETHODCALLTYPE *SetUseMap)(
        nsIDOMHTMLInputElement *This,
        const nsAString *aUseMap);

    nsresult (STDMETHODCALLTYPE *GetControllers)(
        nsIDOMHTMLInputElement *This,
        nsIControllers **aControllers);

    nsresult (STDMETHODCALLTYPE *GetTextLength)(
        nsIDOMHTMLInputElement *This,
        LONG *aTextLength);

    nsresult (STDMETHODCALLTYPE *MozGetFileNameArray)(
        nsIDOMHTMLInputElement *This,
        UINT32 *aLength,
        PRUnichar ***aFileNames);

    nsresult (STDMETHODCALLTYPE *MozSetFileNameArray)(
        nsIDOMHTMLInputElement *This,
        const PRUnichar **aFileNames,
        UINT32 aLength);

    nsresult (STDMETHODCALLTYPE *MozIsTextField)(
        nsIDOMHTMLInputElement *This,
        cpp_bool aExcludePassword,
        cpp_bool *_retval);

    END_INTERFACE
} nsIDOMHTMLInputElementVtbl;

interface nsIDOMHTMLInputElement {
    CONST_VTBL nsIDOMHTMLInputElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLInputElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLInputElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLInputElement_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMHTMLInputElement methods ***/
#define nsIDOMHTMLInputElement_GetAccept(This,aAccept) (This)->lpVtbl->GetAccept(This,aAccept)
#define nsIDOMHTMLInputElement_SetAccept(This,aAccept) (This)->lpVtbl->SetAccept(This,aAccept)
#define nsIDOMHTMLInputElement_GetAlt(This,aAlt) (This)->lpVtbl->GetAlt(This,aAlt)
#define nsIDOMHTMLInputElement_SetAlt(This,aAlt) (This)->lpVtbl->SetAlt(This,aAlt)
#define nsIDOMHTMLInputElement_GetAutocomplete(This,aAutocomplete) (This)->lpVtbl->GetAutocomplete(This,aAutocomplete)
#define nsIDOMHTMLInputElement_SetAutocomplete(This,aAutocomplete) (This)->lpVtbl->SetAutocomplete(This,aAutocomplete)
#define nsIDOMHTMLInputElement_GetAutofocus(This,aAutofocus) (This)->lpVtbl->GetAutofocus(This,aAutofocus)
#define nsIDOMHTMLInputElement_SetAutofocus(This,aAutofocus) (This)->lpVtbl->SetAutofocus(This,aAutofocus)
#define nsIDOMHTMLInputElement_GetDefaultChecked(This,aDefaultChecked) (This)->lpVtbl->GetDefaultChecked(This,aDefaultChecked)
#define nsIDOMHTMLInputElement_SetDefaultChecked(This,aDefaultChecked) (This)->lpVtbl->SetDefaultChecked(This,aDefaultChecked)
#define nsIDOMHTMLInputElement_GetChecked(This,aChecked) (This)->lpVtbl->GetChecked(This,aChecked)
#define nsIDOMHTMLInputElement_SetChecked(This,aChecked) (This)->lpVtbl->SetChecked(This,aChecked)
#define nsIDOMHTMLInputElement_GetDisabled(This,aDisabled) (This)->lpVtbl->GetDisabled(This,aDisabled)
#define nsIDOMHTMLInputElement_SetDisabled(This,aDisabled) (This)->lpVtbl->SetDisabled(This,aDisabled)
#define nsIDOMHTMLInputElement_GetForm(This,aForm) (This)->lpVtbl->GetForm(This,aForm)
#define nsIDOMHTMLInputElement_GetFormAction(This,aFormAction) (This)->lpVtbl->GetFormAction(This,aFormAction)
#define nsIDOMHTMLInputElement_SetFormAction(This,aFormAction) (This)->lpVtbl->SetFormAction(This,aFormAction)
#define nsIDOMHTMLInputElement_GetFormEnctype(This,aFormEnctype) (This)->lpVtbl->GetFormEnctype(This,aFormEnctype)
#define nsIDOMHTMLInputElement_SetFormEnctype(This,aFormEnctype) (This)->lpVtbl->SetFormEnctype(This,aFormEnctype)
#define nsIDOMHTMLInputElement_GetFormMethod(This,aFormMethod) (This)->lpVtbl->GetFormMethod(This,aFormMethod)
#define nsIDOMHTMLInputElement_SetFormMethod(This,aFormMethod) (This)->lpVtbl->SetFormMethod(This,aFormMethod)
#define nsIDOMHTMLInputElement_GetFormNoValidate(This,aFormNoValidate) (This)->lpVtbl->GetFormNoValidate(This,aFormNoValidate)
#define nsIDOMHTMLInputElement_SetFormNoValidate(This,aFormNoValidate) (This)->lpVtbl->SetFormNoValidate(This,aFormNoValidate)
#define nsIDOMHTMLInputElement_GetFormTarget(This,aFormTarget) (This)->lpVtbl->GetFormTarget(This,aFormTarget)
#define nsIDOMHTMLInputElement_SetFormTarget(This,aFormTarget) (This)->lpVtbl->SetFormTarget(This,aFormTarget)
#define nsIDOMHTMLInputElement_GetFiles(This,aFiles) (This)->lpVtbl->GetFiles(This,aFiles)
#define nsIDOMHTMLInputElement_GetHeight(This,aHeight) (This)->lpVtbl->GetHeight(This,aHeight)
#define nsIDOMHTMLInputElement_SetHeight(This,aHeight) (This)->lpVtbl->SetHeight(This,aHeight)
#define nsIDOMHTMLInputElement_GetIndeterminate(This,aIndeterminate) (This)->lpVtbl->GetIndeterminate(This,aIndeterminate)
#define nsIDOMHTMLInputElement_SetIndeterminate(This,aIndeterminate) (This)->lpVtbl->SetIndeterminate(This,aIndeterminate)
#define nsIDOMHTMLInputElement_GetInputMode(This,aInputMode) (This)->lpVtbl->GetInputMode(This,aInputMode)
#define nsIDOMHTMLInputElement_SetInputMode(This,aInputMode) (This)->lpVtbl->SetInputMode(This,aInputMode)
#define nsIDOMHTMLInputElement_GetList(This,aList) (This)->lpVtbl->GetList(This,aList)
#define nsIDOMHTMLInputElement_GetMax(This,aMax) (This)->lpVtbl->GetMax(This,aMax)
#define nsIDOMHTMLInputElement_SetMax(This,aMax) (This)->lpVtbl->SetMax(This,aMax)
#define nsIDOMHTMLInputElement_GetMaxLength(This,aMaxLength) (This)->lpVtbl->GetMaxLength(This,aMaxLength)
#define nsIDOMHTMLInputElement_SetMaxLength(This,aMaxLength) (This)->lpVtbl->SetMaxLength(This,aMaxLength)
#define nsIDOMHTMLInputElement_GetMin(This,aMin) (This)->lpVtbl->GetMin(This,aMin)
#define nsIDOMHTMLInputElement_SetMin(This,aMin) (This)->lpVtbl->SetMin(This,aMin)
#define nsIDOMHTMLInputElement_GetMultiple(This,aMultiple) (This)->lpVtbl->GetMultiple(This,aMultiple)
#define nsIDOMHTMLInputElement_SetMultiple(This,aMultiple) (This)->lpVtbl->SetMultiple(This,aMultiple)
#define nsIDOMHTMLInputElement_GetName(This,aName) (This)->lpVtbl->GetName(This,aName)
#define nsIDOMHTMLInputElement_SetName(This,aName) (This)->lpVtbl->SetName(This,aName)
#define nsIDOMHTMLInputElement_GetPattern(This,aPattern) (This)->lpVtbl->GetPattern(This,aPattern)
#define nsIDOMHTMLInputElement_SetPattern(This,aPattern) (This)->lpVtbl->SetPattern(This,aPattern)
#define nsIDOMHTMLInputElement_GetPlaceholder(This,aPlaceholder) (This)->lpVtbl->GetPlaceholder(This,aPlaceholder)
#define nsIDOMHTMLInputElement_SetPlaceholder(This,aPlaceholder) (This)->lpVtbl->SetPlaceholder(This,aPlaceholder)
#define nsIDOMHTMLInputElement_GetReadOnly(This,aReadOnly) (This)->lpVtbl->GetReadOnly(This,aReadOnly)
#define nsIDOMHTMLInputElement_SetReadOnly(This,aReadOnly) (This)->lpVtbl->SetReadOnly(This,aReadOnly)
#define nsIDOMHTMLInputElement_GetRequired(This,aRequired) (This)->lpVtbl->GetRequired(This,aRequired)
#define nsIDOMHTMLInputElement_SetRequired(This,aRequired) (This)->lpVtbl->SetRequired(This,aRequired)
#define nsIDOMHTMLInputElement_GetStep(This,aStep) (This)->lpVtbl->GetStep(This,aStep)
#define nsIDOMHTMLInputElement_SetStep(This,aStep) (This)->lpVtbl->SetStep(This,aStep)
#define nsIDOMHTMLInputElement_GetAlign(This,aAlign) (This)->lpVtbl->GetAlign(This,aAlign)
#define nsIDOMHTMLInputElement_SetAlign(This,aAlign) (This)->lpVtbl->SetAlign(This,aAlign)
#define nsIDOMHTMLInputElement_GetSize(This,aSize) (This)->lpVtbl->GetSize(This,aSize)
#define nsIDOMHTMLInputElement_SetSize(This,aSize) (This)->lpVtbl->SetSize(This,aSize)
#define nsIDOMHTMLInputElement_GetWidth(This,aWidth) (This)->lpVtbl->GetWidth(This,aWidth)
#define nsIDOMHTMLInputElement_SetWidth(This,aWidth) (This)->lpVtbl->SetWidth(This,aWidth)
#define nsIDOMHTMLInputElement_GetSrc(This,aSrc) (This)->lpVtbl->GetSrc(This,aSrc)
#define nsIDOMHTMLInputElement_SetSrc(This,aSrc) (This)->lpVtbl->SetSrc(This,aSrc)
#define nsIDOMHTMLInputElement_GetType(This,aType) (This)->lpVtbl->GetType(This,aType)
#define nsIDOMHTMLInputElement_SetType(This,aType) (This)->lpVtbl->SetType(This,aType)
#define nsIDOMHTMLInputElement_GetDefaultValue(This,aDefaultValue) (This)->lpVtbl->GetDefaultValue(This,aDefaultValue)
#define nsIDOMHTMLInputElement_SetDefaultValue(This,aDefaultValue) (This)->lpVtbl->SetDefaultValue(This,aDefaultValue)
#define nsIDOMHTMLInputElement_GetValue(This,aValue) (This)->lpVtbl->GetValue(This,aValue)
#define nsIDOMHTMLInputElement_SetValue(This,aValue) (This)->lpVtbl->SetValue(This,aValue)
#define nsIDOMHTMLInputElement_GetValueAsNumber(This,aValueAsNumber) (This)->lpVtbl->GetValueAsNumber(This,aValueAsNumber)
#define nsIDOMHTMLInputElement_SetValueAsNumber(This,aValueAsNumber) (This)->lpVtbl->SetValueAsNumber(This,aValueAsNumber)
#define nsIDOMHTMLInputElement_StepDown(This,n,_argc) (This)->lpVtbl->StepDown(This,n,_argc)
#define nsIDOMHTMLInputElement_StepUp(This,n,_argc) (This)->lpVtbl->StepUp(This,n,_argc)
#define nsIDOMHTMLInputElement_GetWillValidate(This,aWillValidate) (This)->lpVtbl->GetWillValidate(This,aWillValidate)
#define nsIDOMHTMLInputElement_GetValidity(This,aValidity) (This)->lpVtbl->GetValidity(This,aValidity)
#define nsIDOMHTMLInputElement_GetValidationMessage(This,aValidationMessage) (This)->lpVtbl->GetValidationMessage(This,aValidationMessage)
#define nsIDOMHTMLInputElement_CheckValidity(This,_retval) (This)->lpVtbl->CheckValidity(This,_retval)
#define nsIDOMHTMLInputElement_SetCustomValidity(This,error) (This)->lpVtbl->SetCustomValidity(This,error)
#define nsIDOMHTMLInputElement_Select(This) (This)->lpVtbl->Select(This)
#define nsIDOMHTMLInputElement_GetSelectionStart(This,aSelectionStart) (This)->lpVtbl->GetSelectionStart(This,aSelectionStart)
#define nsIDOMHTMLInputElement_SetSelectionStart(This,aSelectionStart) (This)->lpVtbl->SetSelectionStart(This,aSelectionStart)
#define nsIDOMHTMLInputElement_GetSelectionEnd(This,aSelectionEnd) (This)->lpVtbl->GetSelectionEnd(This,aSelectionEnd)
#define nsIDOMHTMLInputElement_SetSelectionEnd(This,aSelectionEnd) (This)->lpVtbl->SetSelectionEnd(This,aSelectionEnd)
#define nsIDOMHTMLInputElement_SetSelectionRange(This,selectionStart,selectionEnd,direction) (This)->lpVtbl->SetSelectionRange(This,selectionStart,selectionEnd,direction)
#define nsIDOMHTMLInputElement_GetSelectionDirection(This,aSelectionDirection) (This)->lpVtbl->GetSelectionDirection(This,aSelectionDirection)
#define nsIDOMHTMLInputElement_SetSelectionDirection(This,aSelectionDirection) (This)->lpVtbl->SetSelectionDirection(This,aSelectionDirection)
#define nsIDOMHTMLInputElement_GetUseMap(This,aUseMap) (This)->lpVtbl->GetUseMap(This,aUseMap)
#define nsIDOMHTMLInputElement_SetUseMap(This,aUseMap) (This)->lpVtbl->SetUseMap(This,aUseMap)
#define nsIDOMHTMLInputElement_GetControllers(This,aControllers) (This)->lpVtbl->GetControllers(This,aControllers)
#define nsIDOMHTMLInputElement_GetTextLength(This,aTextLength) (This)->lpVtbl->GetTextLength(This,aTextLength)
#define nsIDOMHTMLInputElement_MozGetFileNameArray(This,aLength,aFileNames) (This)->lpVtbl->MozGetFileNameArray(This,aLength,aFileNames)
#define nsIDOMHTMLInputElement_MozSetFileNameArray(This,aFileNames,aLength) (This)->lpVtbl->MozSetFileNameArray(This,aFileNames,aLength)
#define nsIDOMHTMLInputElement_MozIsTextField(This,aExcludePassword,_retval) (This)->lpVtbl->MozIsTextField(This,aExcludePassword,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLInputElement_QueryInterface(nsIDOMHTMLInputElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLInputElement_AddRef(nsIDOMHTMLInputElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLInputElement_Release(nsIDOMHTMLInputElement* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMHTMLInputElement methods ***/
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetAccept(nsIDOMHTMLInputElement* This,nsAString *aAccept) {
    return This->lpVtbl->GetAccept(This,aAccept);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetAccept(nsIDOMHTMLInputElement* This,const nsAString *aAccept) {
    return This->lpVtbl->SetAccept(This,aAccept);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetAlt(nsIDOMHTMLInputElement* This,nsAString *aAlt) {
    return This->lpVtbl->GetAlt(This,aAlt);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetAlt(nsIDOMHTMLInputElement* This,const nsAString *aAlt) {
    return This->lpVtbl->SetAlt(This,aAlt);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetAutocomplete(nsIDOMHTMLInputElement* This,nsAString *aAutocomplete) {
    return This->lpVtbl->GetAutocomplete(This,aAutocomplete);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetAutocomplete(nsIDOMHTMLInputElement* This,const nsAString *aAutocomplete) {
    return This->lpVtbl->SetAutocomplete(This,aAutocomplete);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetAutofocus(nsIDOMHTMLInputElement* This,cpp_bool *aAutofocus) {
    return This->lpVtbl->GetAutofocus(This,aAutofocus);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetAutofocus(nsIDOMHTMLInputElement* This,cpp_bool aAutofocus) {
    return This->lpVtbl->SetAutofocus(This,aAutofocus);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetDefaultChecked(nsIDOMHTMLInputElement* This,cpp_bool *aDefaultChecked) {
    return This->lpVtbl->GetDefaultChecked(This,aDefaultChecked);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetDefaultChecked(nsIDOMHTMLInputElement* This,cpp_bool aDefaultChecked) {
    return This->lpVtbl->SetDefaultChecked(This,aDefaultChecked);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetChecked(nsIDOMHTMLInputElement* This,cpp_bool *aChecked) {
    return This->lpVtbl->GetChecked(This,aChecked);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetChecked(nsIDOMHTMLInputElement* This,cpp_bool aChecked) {
    return This->lpVtbl->SetChecked(This,aChecked);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetDisabled(nsIDOMHTMLInputElement* This,cpp_bool *aDisabled) {
    return This->lpVtbl->GetDisabled(This,aDisabled);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetDisabled(nsIDOMHTMLInputElement* This,cpp_bool aDisabled) {
    return This->lpVtbl->SetDisabled(This,aDisabled);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetForm(nsIDOMHTMLInputElement* This,nsIDOMHTMLFormElement **aForm) {
    return This->lpVtbl->GetForm(This,aForm);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetFormAction(nsIDOMHTMLInputElement* This,nsAString *aFormAction) {
    return This->lpVtbl->GetFormAction(This,aFormAction);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetFormAction(nsIDOMHTMLInputElement* This,const nsAString *aFormAction) {
    return This->lpVtbl->SetFormAction(This,aFormAction);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetFormEnctype(nsIDOMHTMLInputElement* This,nsAString *aFormEnctype) {
    return This->lpVtbl->GetFormEnctype(This,aFormEnctype);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetFormEnctype(nsIDOMHTMLInputElement* This,const nsAString *aFormEnctype) {
    return This->lpVtbl->SetFormEnctype(This,aFormEnctype);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetFormMethod(nsIDOMHTMLInputElement* This,nsAString *aFormMethod) {
    return This->lpVtbl->GetFormMethod(This,aFormMethod);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetFormMethod(nsIDOMHTMLInputElement* This,const nsAString *aFormMethod) {
    return This->lpVtbl->SetFormMethod(This,aFormMethod);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetFormNoValidate(nsIDOMHTMLInputElement* This,cpp_bool *aFormNoValidate) {
    return This->lpVtbl->GetFormNoValidate(This,aFormNoValidate);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetFormNoValidate(nsIDOMHTMLInputElement* This,cpp_bool aFormNoValidate) {
    return This->lpVtbl->SetFormNoValidate(This,aFormNoValidate);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetFormTarget(nsIDOMHTMLInputElement* This,nsAString *aFormTarget) {
    return This->lpVtbl->GetFormTarget(This,aFormTarget);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetFormTarget(nsIDOMHTMLInputElement* This,const nsAString *aFormTarget) {
    return This->lpVtbl->SetFormTarget(This,aFormTarget);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetFiles(nsIDOMHTMLInputElement* This,nsIDOMFileList **aFiles) {
    return This->lpVtbl->GetFiles(This,aFiles);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetHeight(nsIDOMHTMLInputElement* This,UINT32 *aHeight) {
    return This->lpVtbl->GetHeight(This,aHeight);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetHeight(nsIDOMHTMLInputElement* This,UINT32 aHeight) {
    return This->lpVtbl->SetHeight(This,aHeight);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetIndeterminate(nsIDOMHTMLInputElement* This,cpp_bool *aIndeterminate) {
    return This->lpVtbl->GetIndeterminate(This,aIndeterminate);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetIndeterminate(nsIDOMHTMLInputElement* This,cpp_bool aIndeterminate) {
    return This->lpVtbl->SetIndeterminate(This,aIndeterminate);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetInputMode(nsIDOMHTMLInputElement* This,nsAString *aInputMode) {
    return This->lpVtbl->GetInputMode(This,aInputMode);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetInputMode(nsIDOMHTMLInputElement* This,const nsAString *aInputMode) {
    return This->lpVtbl->SetInputMode(This,aInputMode);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetList(nsIDOMHTMLInputElement* This,nsIDOMHTMLElement **aList) {
    return This->lpVtbl->GetList(This,aList);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetMax(nsIDOMHTMLInputElement* This,nsAString *aMax) {
    return This->lpVtbl->GetMax(This,aMax);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetMax(nsIDOMHTMLInputElement* This,const nsAString *aMax) {
    return This->lpVtbl->SetMax(This,aMax);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetMaxLength(nsIDOMHTMLInputElement* This,LONG *aMaxLength) {
    return This->lpVtbl->GetMaxLength(This,aMaxLength);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetMaxLength(nsIDOMHTMLInputElement* This,LONG aMaxLength) {
    return This->lpVtbl->SetMaxLength(This,aMaxLength);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetMin(nsIDOMHTMLInputElement* This,nsAString *aMin) {
    return This->lpVtbl->GetMin(This,aMin);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetMin(nsIDOMHTMLInputElement* This,const nsAString *aMin) {
    return This->lpVtbl->SetMin(This,aMin);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetMultiple(nsIDOMHTMLInputElement* This,cpp_bool *aMultiple) {
    return This->lpVtbl->GetMultiple(This,aMultiple);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetMultiple(nsIDOMHTMLInputElement* This,cpp_bool aMultiple) {
    return This->lpVtbl->SetMultiple(This,aMultiple);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetName(nsIDOMHTMLInputElement* This,nsAString *aName) {
    return This->lpVtbl->GetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetName(nsIDOMHTMLInputElement* This,const nsAString *aName) {
    return This->lpVtbl->SetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetPattern(nsIDOMHTMLInputElement* This,nsAString *aPattern) {
    return This->lpVtbl->GetPattern(This,aPattern);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetPattern(nsIDOMHTMLInputElement* This,const nsAString *aPattern) {
    return This->lpVtbl->SetPattern(This,aPattern);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetPlaceholder(nsIDOMHTMLInputElement* This,nsAString *aPlaceholder) {
    return This->lpVtbl->GetPlaceholder(This,aPlaceholder);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetPlaceholder(nsIDOMHTMLInputElement* This,const nsAString *aPlaceholder) {
    return This->lpVtbl->SetPlaceholder(This,aPlaceholder);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetReadOnly(nsIDOMHTMLInputElement* This,cpp_bool *aReadOnly) {
    return This->lpVtbl->GetReadOnly(This,aReadOnly);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetReadOnly(nsIDOMHTMLInputElement* This,cpp_bool aReadOnly) {
    return This->lpVtbl->SetReadOnly(This,aReadOnly);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetRequired(nsIDOMHTMLInputElement* This,cpp_bool *aRequired) {
    return This->lpVtbl->GetRequired(This,aRequired);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetRequired(nsIDOMHTMLInputElement* This,cpp_bool aRequired) {
    return This->lpVtbl->SetRequired(This,aRequired);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetStep(nsIDOMHTMLInputElement* This,nsAString *aStep) {
    return This->lpVtbl->GetStep(This,aStep);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetStep(nsIDOMHTMLInputElement* This,const nsAString *aStep) {
    return This->lpVtbl->SetStep(This,aStep);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetAlign(nsIDOMHTMLInputElement* This,nsAString *aAlign) {
    return This->lpVtbl->GetAlign(This,aAlign);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetAlign(nsIDOMHTMLInputElement* This,const nsAString *aAlign) {
    return This->lpVtbl->SetAlign(This,aAlign);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetSize(nsIDOMHTMLInputElement* This,UINT32 *aSize) {
    return This->lpVtbl->GetSize(This,aSize);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetSize(nsIDOMHTMLInputElement* This,UINT32 aSize) {
    return This->lpVtbl->SetSize(This,aSize);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetWidth(nsIDOMHTMLInputElement* This,UINT32 *aWidth) {
    return This->lpVtbl->GetWidth(This,aWidth);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetWidth(nsIDOMHTMLInputElement* This,UINT32 aWidth) {
    return This->lpVtbl->SetWidth(This,aWidth);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetSrc(nsIDOMHTMLInputElement* This,nsAString *aSrc) {
    return This->lpVtbl->GetSrc(This,aSrc);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetSrc(nsIDOMHTMLInputElement* This,const nsAString *aSrc) {
    return This->lpVtbl->SetSrc(This,aSrc);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetType(nsIDOMHTMLInputElement* This,nsAString *aType) {
    return This->lpVtbl->GetType(This,aType);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetType(nsIDOMHTMLInputElement* This,const nsAString *aType) {
    return This->lpVtbl->SetType(This,aType);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetDefaultValue(nsIDOMHTMLInputElement* This,nsAString *aDefaultValue) {
    return This->lpVtbl->GetDefaultValue(This,aDefaultValue);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetDefaultValue(nsIDOMHTMLInputElement* This,const nsAString *aDefaultValue) {
    return This->lpVtbl->SetDefaultValue(This,aDefaultValue);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetValue(nsIDOMHTMLInputElement* This,nsAString *aValue) {
    return This->lpVtbl->GetValue(This,aValue);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetValue(nsIDOMHTMLInputElement* This,const nsAString *aValue) {
    return This->lpVtbl->SetValue(This,aValue);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetValueAsNumber(nsIDOMHTMLInputElement* This,double *aValueAsNumber) {
    return This->lpVtbl->GetValueAsNumber(This,aValueAsNumber);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetValueAsNumber(nsIDOMHTMLInputElement* This,double aValueAsNumber) {
    return This->lpVtbl->SetValueAsNumber(This,aValueAsNumber);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_StepDown(nsIDOMHTMLInputElement* This,LONG n,UINT8 _argc) {
    return This->lpVtbl->StepDown(This,n,_argc);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_StepUp(nsIDOMHTMLInputElement* This,LONG n,UINT8 _argc) {
    return This->lpVtbl->StepUp(This,n,_argc);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetWillValidate(nsIDOMHTMLInputElement* This,cpp_bool *aWillValidate) {
    return This->lpVtbl->GetWillValidate(This,aWillValidate);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetValidity(nsIDOMHTMLInputElement* This,nsIDOMValidityState **aValidity) {
    return This->lpVtbl->GetValidity(This,aValidity);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetValidationMessage(nsIDOMHTMLInputElement* This,nsAString *aValidationMessage) {
    return This->lpVtbl->GetValidationMessage(This,aValidationMessage);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_CheckValidity(nsIDOMHTMLInputElement* This,cpp_bool *_retval) {
    return This->lpVtbl->CheckValidity(This,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetCustomValidity(nsIDOMHTMLInputElement* This,const nsAString *error) {
    return This->lpVtbl->SetCustomValidity(This,error);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_Select(nsIDOMHTMLInputElement* This) {
    return This->lpVtbl->Select(This);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetSelectionStart(nsIDOMHTMLInputElement* This,LONG *aSelectionStart) {
    return This->lpVtbl->GetSelectionStart(This,aSelectionStart);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetSelectionStart(nsIDOMHTMLInputElement* This,LONG aSelectionStart) {
    return This->lpVtbl->SetSelectionStart(This,aSelectionStart);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetSelectionEnd(nsIDOMHTMLInputElement* This,LONG *aSelectionEnd) {
    return This->lpVtbl->GetSelectionEnd(This,aSelectionEnd);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetSelectionEnd(nsIDOMHTMLInputElement* This,LONG aSelectionEnd) {
    return This->lpVtbl->SetSelectionEnd(This,aSelectionEnd);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetSelectionRange(nsIDOMHTMLInputElement* This,LONG selectionStart,LONG selectionEnd,const nsAString *direction) {
    return This->lpVtbl->SetSelectionRange(This,selectionStart,selectionEnd,direction);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetSelectionDirection(nsIDOMHTMLInputElement* This,nsAString *aSelectionDirection) {
    return This->lpVtbl->GetSelectionDirection(This,aSelectionDirection);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetSelectionDirection(nsIDOMHTMLInputElement* This,const nsAString *aSelectionDirection) {
    return This->lpVtbl->SetSelectionDirection(This,aSelectionDirection);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetUseMap(nsIDOMHTMLInputElement* This,nsAString *aUseMap) {
    return This->lpVtbl->GetUseMap(This,aUseMap);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_SetUseMap(nsIDOMHTMLInputElement* This,const nsAString *aUseMap) {
    return This->lpVtbl->SetUseMap(This,aUseMap);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetControllers(nsIDOMHTMLInputElement* This,nsIControllers **aControllers) {
    return This->lpVtbl->GetControllers(This,aControllers);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_GetTextLength(nsIDOMHTMLInputElement* This,LONG *aTextLength) {
    return This->lpVtbl->GetTextLength(This,aTextLength);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_MozGetFileNameArray(nsIDOMHTMLInputElement* This,UINT32 *aLength,PRUnichar ***aFileNames) {
    return This->lpVtbl->MozGetFileNameArray(This,aLength,aFileNames);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_MozSetFileNameArray(nsIDOMHTMLInputElement* This,const PRUnichar **aFileNames,UINT32 aLength) {
    return This->lpVtbl->MozSetFileNameArray(This,aFileNames,aLength);
}
static FORCEINLINE nsresult nsIDOMHTMLInputElement_MozIsTextField(nsIDOMHTMLInputElement* This,cpp_bool aExcludePassword,cpp_bool *_retval) {
    return This->lpVtbl->MozIsTextField(This,aExcludePassword,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLInputElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLOptionElement interface
 */
#ifndef __nsIDOMHTMLOptionElement_INTERFACE_DEFINED__
#define __nsIDOMHTMLOptionElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLOptionElement, 0xc2b3e9ff, 0x6b36, 0x4158, 0xac,0xe3, 0x05,0xa9,0xc5,0xb8,0xe1,0xc1);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c2b3e9ff-6b36-4158-ace3-05a9c5b8e1c1")
nsIDOMHTMLOptionElement : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetDisabled(
        cpp_bool *aDisabled) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDisabled(
        cpp_bool aDisabled) = 0;

    virtual nsresult STDMETHODCALLTYPE GetForm(
        nsIDOMHTMLFormElement **aForm) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLabel(
        nsAString *aLabel) = 0;

    virtual nsresult STDMETHODCALLTYPE SetLabel(
        const nsAString *aLabel) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDefaultSelected(
        cpp_bool *aDefaultSelected) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDefaultSelected(
        cpp_bool aDefaultSelected) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSelected(
        cpp_bool *aSelected) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSelected(
        cpp_bool aSelected) = 0;

    virtual nsresult STDMETHODCALLTYPE GetValue(
        nsAString *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetValue(
        const nsAString *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE GetText(
        nsAString *aText) = 0;

    virtual nsresult STDMETHODCALLTYPE SetText(
        const nsAString *aText) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIndex(
        LONG *aIndex) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLOptionElement, 0xc2b3e9ff, 0x6b36, 0x4158, 0xac,0xe3, 0x05,0xa9,0xc5,0xb8,0xe1,0xc1)
#endif
#else
typedef struct nsIDOMHTMLOptionElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLOptionElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLOptionElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLOptionElement *This);

    /*** nsIDOMHTMLOptionElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetDisabled)(
        nsIDOMHTMLOptionElement *This,
        cpp_bool *aDisabled);

    nsresult (STDMETHODCALLTYPE *SetDisabled)(
        nsIDOMHTMLOptionElement *This,
        cpp_bool aDisabled);

    nsresult (STDMETHODCALLTYPE *GetForm)(
        nsIDOMHTMLOptionElement *This,
        nsIDOMHTMLFormElement **aForm);

    nsresult (STDMETHODCALLTYPE *GetLabel)(
        nsIDOMHTMLOptionElement *This,
        nsAString *aLabel);

    nsresult (STDMETHODCALLTYPE *SetLabel)(
        nsIDOMHTMLOptionElement *This,
        const nsAString *aLabel);

    nsresult (STDMETHODCALLTYPE *GetDefaultSelected)(
        nsIDOMHTMLOptionElement *This,
        cpp_bool *aDefaultSelected);

    nsresult (STDMETHODCALLTYPE *SetDefaultSelected)(
        nsIDOMHTMLOptionElement *This,
        cpp_bool aDefaultSelected);

    nsresult (STDMETHODCALLTYPE *GetSelected)(
        nsIDOMHTMLOptionElement *This,
        cpp_bool *aSelected);

    nsresult (STDMETHODCALLTYPE *SetSelected)(
        nsIDOMHTMLOptionElement *This,
        cpp_bool aSelected);

    nsresult (STDMETHODCALLTYPE *GetValue)(
        nsIDOMHTMLOptionElement *This,
        nsAString *aValue);

    nsresult (STDMETHODCALLTYPE *SetValue)(
        nsIDOMHTMLOptionElement *This,
        const nsAString *aValue);

    nsresult (STDMETHODCALLTYPE *GetText)(
        nsIDOMHTMLOptionElement *This,
        nsAString *aText);

    nsresult (STDMETHODCALLTYPE *SetText)(
        nsIDOMHTMLOptionElement *This,
        const nsAString *aText);

    nsresult (STDMETHODCALLTYPE *GetIndex)(
        nsIDOMHTMLOptionElement *This,
        LONG *aIndex);

    END_INTERFACE
} nsIDOMHTMLOptionElementVtbl;

interface nsIDOMHTMLOptionElement {
    CONST_VTBL nsIDOMHTMLOptionElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLOptionElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLOptionElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLOptionElement_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMHTMLOptionElement methods ***/
#define nsIDOMHTMLOptionElement_GetDisabled(This,aDisabled) (This)->lpVtbl->GetDisabled(This,aDisabled)
#define nsIDOMHTMLOptionElement_SetDisabled(This,aDisabled) (This)->lpVtbl->SetDisabled(This,aDisabled)
#define nsIDOMHTMLOptionElement_GetForm(This,aForm) (This)->lpVtbl->GetForm(This,aForm)
#define nsIDOMHTMLOptionElement_GetLabel(This,aLabel) (This)->lpVtbl->GetLabel(This,aLabel)
#define nsIDOMHTMLOptionElement_SetLabel(This,aLabel) (This)->lpVtbl->SetLabel(This,aLabel)
#define nsIDOMHTMLOptionElement_GetDefaultSelected(This,aDefaultSelected) (This)->lpVtbl->GetDefaultSelected(This,aDefaultSelected)
#define nsIDOMHTMLOptionElement_SetDefaultSelected(This,aDefaultSelected) (This)->lpVtbl->SetDefaultSelected(This,aDefaultSelected)
#define nsIDOMHTMLOptionElement_GetSelected(This,aSelected) (This)->lpVtbl->GetSelected(This,aSelected)
#define nsIDOMHTMLOptionElement_SetSelected(This,aSelected) (This)->lpVtbl->SetSelected(This,aSelected)
#define nsIDOMHTMLOptionElement_GetValue(This,aValue) (This)->lpVtbl->GetValue(This,aValue)
#define nsIDOMHTMLOptionElement_SetValue(This,aValue) (This)->lpVtbl->SetValue(This,aValue)
#define nsIDOMHTMLOptionElement_GetText(This,aText) (This)->lpVtbl->GetText(This,aText)
#define nsIDOMHTMLOptionElement_SetText(This,aText) (This)->lpVtbl->SetText(This,aText)
#define nsIDOMHTMLOptionElement_GetIndex(This,aIndex) (This)->lpVtbl->GetIndex(This,aIndex)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLOptionElement_QueryInterface(nsIDOMHTMLOptionElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLOptionElement_AddRef(nsIDOMHTMLOptionElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLOptionElement_Release(nsIDOMHTMLOptionElement* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMHTMLOptionElement methods ***/
static FORCEINLINE nsresult nsIDOMHTMLOptionElement_GetDisabled(nsIDOMHTMLOptionElement* This,cpp_bool *aDisabled) {
    return This->lpVtbl->GetDisabled(This,aDisabled);
}
static FORCEINLINE nsresult nsIDOMHTMLOptionElement_SetDisabled(nsIDOMHTMLOptionElement* This,cpp_bool aDisabled) {
    return This->lpVtbl->SetDisabled(This,aDisabled);
}
static FORCEINLINE nsresult nsIDOMHTMLOptionElement_GetForm(nsIDOMHTMLOptionElement* This,nsIDOMHTMLFormElement **aForm) {
    return This->lpVtbl->GetForm(This,aForm);
}
static FORCEINLINE nsresult nsIDOMHTMLOptionElement_GetLabel(nsIDOMHTMLOptionElement* This,nsAString *aLabel) {
    return This->lpVtbl->GetLabel(This,aLabel);
}
static FORCEINLINE nsresult nsIDOMHTMLOptionElement_SetLabel(nsIDOMHTMLOptionElement* This,const nsAString *aLabel) {
    return This->lpVtbl->SetLabel(This,aLabel);
}
static FORCEINLINE nsresult nsIDOMHTMLOptionElement_GetDefaultSelected(nsIDOMHTMLOptionElement* This,cpp_bool *aDefaultSelected) {
    return This->lpVtbl->GetDefaultSelected(This,aDefaultSelected);
}
static FORCEINLINE nsresult nsIDOMHTMLOptionElement_SetDefaultSelected(nsIDOMHTMLOptionElement* This,cpp_bool aDefaultSelected) {
    return This->lpVtbl->SetDefaultSelected(This,aDefaultSelected);
}
static FORCEINLINE nsresult nsIDOMHTMLOptionElement_GetSelected(nsIDOMHTMLOptionElement* This,cpp_bool *aSelected) {
    return This->lpVtbl->GetSelected(This,aSelected);
}
static FORCEINLINE nsresult nsIDOMHTMLOptionElement_SetSelected(nsIDOMHTMLOptionElement* This,cpp_bool aSelected) {
    return This->lpVtbl->SetSelected(This,aSelected);
}
static FORCEINLINE nsresult nsIDOMHTMLOptionElement_GetValue(nsIDOMHTMLOptionElement* This,nsAString *aValue) {
    return This->lpVtbl->GetValue(This,aValue);
}
static FORCEINLINE nsresult nsIDOMHTMLOptionElement_SetValue(nsIDOMHTMLOptionElement* This,const nsAString *aValue) {
    return This->lpVtbl->SetValue(This,aValue);
}
static FORCEINLINE nsresult nsIDOMHTMLOptionElement_GetText(nsIDOMHTMLOptionElement* This,nsAString *aText) {
    return This->lpVtbl->GetText(This,aText);
}
static FORCEINLINE nsresult nsIDOMHTMLOptionElement_SetText(nsIDOMHTMLOptionElement* This,const nsAString *aText) {
    return This->lpVtbl->SetText(This,aText);
}
static FORCEINLINE nsresult nsIDOMHTMLOptionElement_GetIndex(nsIDOMHTMLOptionElement* This,LONG *aIndex) {
    return This->lpVtbl->GetIndex(This,aIndex);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLOptionElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLButtonElement interface
 */
#ifndef __nsIDOMHTMLButtonElement_INTERFACE_DEFINED__
#define __nsIDOMHTMLButtonElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLButtonElement, 0x44b7a468, 0x7dba, 0x4f0c, 0x9b,0x4e, 0xee,0x46,0xdc,0x0f,0x26,0xc7);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("44b7a468-7dba-4f0c-9b4e-ee46dc0f26c7")
nsIDOMHTMLButtonElement : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetAutofocus(
        cpp_bool *aAutofocus) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAutofocus(
        cpp_bool aAutofocus) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDisabled(
        cpp_bool *aDisabled) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDisabled(
        cpp_bool aDisabled) = 0;

    virtual nsresult STDMETHODCALLTYPE GetForm(
        nsIDOMHTMLFormElement **aForm) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFormAction(
        nsAString *aFormAction) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFormAction(
        const nsAString *aFormAction) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFormEnctype(
        nsAString *aFormEnctype) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFormEnctype(
        const nsAString *aFormEnctype) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFormMethod(
        nsAString *aFormMethod) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFormMethod(
        const nsAString *aFormMethod) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFormNoValidate(
        cpp_bool *aFormNoValidate) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFormNoValidate(
        cpp_bool aFormNoValidate) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFormTarget(
        nsAString *aFormTarget) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFormTarget(
        const nsAString *aFormTarget) = 0;

    virtual nsresult STDMETHODCALLTYPE GetName(
        nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE SetName(
        const nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetType(
        nsAString *aType) = 0;

    virtual nsresult STDMETHODCALLTYPE SetType(
        const nsAString *aType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetValue(
        nsAString *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetValue(
        const nsAString *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE GetWillValidate(
        cpp_bool *aWillValidate) = 0;

    virtual nsresult STDMETHODCALLTYPE GetValidity(
        nsIDOMValidityState **aValidity) = 0;

    virtual nsresult STDMETHODCALLTYPE GetValidationMessage(
        nsAString *aValidationMessage) = 0;

    virtual nsresult STDMETHODCALLTYPE CheckValidity(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCustomValidity(
        const nsAString *error) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLButtonElement, 0x44b7a468, 0x7dba, 0x4f0c, 0x9b,0x4e, 0xee,0x46,0xdc,0x0f,0x26,0xc7)
#endif
#else
typedef struct nsIDOMHTMLButtonElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLButtonElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLButtonElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLButtonElement *This);

    /*** nsIDOMHTMLButtonElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetAutofocus)(
        nsIDOMHTMLButtonElement *This,
        cpp_bool *aAutofocus);

    nsresult (STDMETHODCALLTYPE *SetAutofocus)(
        nsIDOMHTMLButtonElement *This,
        cpp_bool aAutofocus);

    nsresult (STDMETHODCALLTYPE *GetDisabled)(
        nsIDOMHTMLButtonElement *This,
        cpp_bool *aDisabled);

    nsresult (STDMETHODCALLTYPE *SetDisabled)(
        nsIDOMHTMLButtonElement *This,
        cpp_bool aDisabled);

    nsresult (STDMETHODCALLTYPE *GetForm)(
        nsIDOMHTMLButtonElement *This,
        nsIDOMHTMLFormElement **aForm);

    nsresult (STDMETHODCALLTYPE *GetFormAction)(
        nsIDOMHTMLButtonElement *This,
        nsAString *aFormAction);

    nsresult (STDMETHODCALLTYPE *SetFormAction)(
        nsIDOMHTMLButtonElement *This,
        const nsAString *aFormAction);

    nsresult (STDMETHODCALLTYPE *GetFormEnctype)(
        nsIDOMHTMLButtonElement *This,
        nsAString *aFormEnctype);

    nsresult (STDMETHODCALLTYPE *SetFormEnctype)(
        nsIDOMHTMLButtonElement *This,
        const nsAString *aFormEnctype);

    nsresult (STDMETHODCALLTYPE *GetFormMethod)(
        nsIDOMHTMLButtonElement *This,
        nsAString *aFormMethod);

    nsresult (STDMETHODCALLTYPE *SetFormMethod)(
        nsIDOMHTMLButtonElement *This,
        const nsAString *aFormMethod);

    nsresult (STDMETHODCALLTYPE *GetFormNoValidate)(
        nsIDOMHTMLButtonElement *This,
        cpp_bool *aFormNoValidate);

    nsresult (STDMETHODCALLTYPE *SetFormNoValidate)(
        nsIDOMHTMLButtonElement *This,
        cpp_bool aFormNoValidate);

    nsresult (STDMETHODCALLTYPE *GetFormTarget)(
        nsIDOMHTMLButtonElement *This,
        nsAString *aFormTarget);

    nsresult (STDMETHODCALLTYPE *SetFormTarget)(
        nsIDOMHTMLButtonElement *This,
        const nsAString *aFormTarget);

    nsresult (STDMETHODCALLTYPE *GetName)(
        nsIDOMHTMLButtonElement *This,
        nsAString *aName);

    nsresult (STDMETHODCALLTYPE *SetName)(
        nsIDOMHTMLButtonElement *This,
        const nsAString *aName);

    nsresult (STDMETHODCALLTYPE *GetType)(
        nsIDOMHTMLButtonElement *This,
        nsAString *aType);

    nsresult (STDMETHODCALLTYPE *SetType)(
        nsIDOMHTMLButtonElement *This,
        const nsAString *aType);

    nsresult (STDMETHODCALLTYPE *GetValue)(
        nsIDOMHTMLButtonElement *This,
        nsAString *aValue);

    nsresult (STDMETHODCALLTYPE *SetValue)(
        nsIDOMHTMLButtonElement *This,
        const nsAString *aValue);

    nsresult (STDMETHODCALLTYPE *GetWillValidate)(
        nsIDOMHTMLButtonElement *This,
        cpp_bool *aWillValidate);

    nsresult (STDMETHODCALLTYPE *GetValidity)(
        nsIDOMHTMLButtonElement *This,
        nsIDOMValidityState **aValidity);

    nsresult (STDMETHODCALLTYPE *GetValidationMessage)(
        nsIDOMHTMLButtonElement *This,
        nsAString *aValidationMessage);

    nsresult (STDMETHODCALLTYPE *CheckValidity)(
        nsIDOMHTMLButtonElement *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetCustomValidity)(
        nsIDOMHTMLButtonElement *This,
        const nsAString *error);

    END_INTERFACE
} nsIDOMHTMLButtonElementVtbl;

interface nsIDOMHTMLButtonElement {
    CONST_VTBL nsIDOMHTMLButtonElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLButtonElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLButtonElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLButtonElement_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMHTMLButtonElement methods ***/
#define nsIDOMHTMLButtonElement_GetAutofocus(This,aAutofocus) (This)->lpVtbl->GetAutofocus(This,aAutofocus)
#define nsIDOMHTMLButtonElement_SetAutofocus(This,aAutofocus) (This)->lpVtbl->SetAutofocus(This,aAutofocus)
#define nsIDOMHTMLButtonElement_GetDisabled(This,aDisabled) (This)->lpVtbl->GetDisabled(This,aDisabled)
#define nsIDOMHTMLButtonElement_SetDisabled(This,aDisabled) (This)->lpVtbl->SetDisabled(This,aDisabled)
#define nsIDOMHTMLButtonElement_GetForm(This,aForm) (This)->lpVtbl->GetForm(This,aForm)
#define nsIDOMHTMLButtonElement_GetFormAction(This,aFormAction) (This)->lpVtbl->GetFormAction(This,aFormAction)
#define nsIDOMHTMLButtonElement_SetFormAction(This,aFormAction) (This)->lpVtbl->SetFormAction(This,aFormAction)
#define nsIDOMHTMLButtonElement_GetFormEnctype(This,aFormEnctype) (This)->lpVtbl->GetFormEnctype(This,aFormEnctype)
#define nsIDOMHTMLButtonElement_SetFormEnctype(This,aFormEnctype) (This)->lpVtbl->SetFormEnctype(This,aFormEnctype)
#define nsIDOMHTMLButtonElement_GetFormMethod(This,aFormMethod) (This)->lpVtbl->GetFormMethod(This,aFormMethod)
#define nsIDOMHTMLButtonElement_SetFormMethod(This,aFormMethod) (This)->lpVtbl->SetFormMethod(This,aFormMethod)
#define nsIDOMHTMLButtonElement_GetFormNoValidate(This,aFormNoValidate) (This)->lpVtbl->GetFormNoValidate(This,aFormNoValidate)
#define nsIDOMHTMLButtonElement_SetFormNoValidate(This,aFormNoValidate) (This)->lpVtbl->SetFormNoValidate(This,aFormNoValidate)
#define nsIDOMHTMLButtonElement_GetFormTarget(This,aFormTarget) (This)->lpVtbl->GetFormTarget(This,aFormTarget)
#define nsIDOMHTMLButtonElement_SetFormTarget(This,aFormTarget) (This)->lpVtbl->SetFormTarget(This,aFormTarget)
#define nsIDOMHTMLButtonElement_GetName(This,aName) (This)->lpVtbl->GetName(This,aName)
#define nsIDOMHTMLButtonElement_SetName(This,aName) (This)->lpVtbl->SetName(This,aName)
#define nsIDOMHTMLButtonElement_GetType(This,aType) (This)->lpVtbl->GetType(This,aType)
#define nsIDOMHTMLButtonElement_SetType(This,aType) (This)->lpVtbl->SetType(This,aType)
#define nsIDOMHTMLButtonElement_GetValue(This,aValue) (This)->lpVtbl->GetValue(This,aValue)
#define nsIDOMHTMLButtonElement_SetValue(This,aValue) (This)->lpVtbl->SetValue(This,aValue)
#define nsIDOMHTMLButtonElement_GetWillValidate(This,aWillValidate) (This)->lpVtbl->GetWillValidate(This,aWillValidate)
#define nsIDOMHTMLButtonElement_GetValidity(This,aValidity) (This)->lpVtbl->GetValidity(This,aValidity)
#define nsIDOMHTMLButtonElement_GetValidationMessage(This,aValidationMessage) (This)->lpVtbl->GetValidationMessage(This,aValidationMessage)
#define nsIDOMHTMLButtonElement_CheckValidity(This,_retval) (This)->lpVtbl->CheckValidity(This,_retval)
#define nsIDOMHTMLButtonElement_SetCustomValidity(This,error) (This)->lpVtbl->SetCustomValidity(This,error)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_QueryInterface(nsIDOMHTMLButtonElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLButtonElement_AddRef(nsIDOMHTMLButtonElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLButtonElement_Release(nsIDOMHTMLButtonElement* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMHTMLButtonElement methods ***/
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_GetAutofocus(nsIDOMHTMLButtonElement* This,cpp_bool *aAutofocus) {
    return This->lpVtbl->GetAutofocus(This,aAutofocus);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_SetAutofocus(nsIDOMHTMLButtonElement* This,cpp_bool aAutofocus) {
    return This->lpVtbl->SetAutofocus(This,aAutofocus);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_GetDisabled(nsIDOMHTMLButtonElement* This,cpp_bool *aDisabled) {
    return This->lpVtbl->GetDisabled(This,aDisabled);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_SetDisabled(nsIDOMHTMLButtonElement* This,cpp_bool aDisabled) {
    return This->lpVtbl->SetDisabled(This,aDisabled);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_GetForm(nsIDOMHTMLButtonElement* This,nsIDOMHTMLFormElement **aForm) {
    return This->lpVtbl->GetForm(This,aForm);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_GetFormAction(nsIDOMHTMLButtonElement* This,nsAString *aFormAction) {
    return This->lpVtbl->GetFormAction(This,aFormAction);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_SetFormAction(nsIDOMHTMLButtonElement* This,const nsAString *aFormAction) {
    return This->lpVtbl->SetFormAction(This,aFormAction);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_GetFormEnctype(nsIDOMHTMLButtonElement* This,nsAString *aFormEnctype) {
    return This->lpVtbl->GetFormEnctype(This,aFormEnctype);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_SetFormEnctype(nsIDOMHTMLButtonElement* This,const nsAString *aFormEnctype) {
    return This->lpVtbl->SetFormEnctype(This,aFormEnctype);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_GetFormMethod(nsIDOMHTMLButtonElement* This,nsAString *aFormMethod) {
    return This->lpVtbl->GetFormMethod(This,aFormMethod);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_SetFormMethod(nsIDOMHTMLButtonElement* This,const nsAString *aFormMethod) {
    return This->lpVtbl->SetFormMethod(This,aFormMethod);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_GetFormNoValidate(nsIDOMHTMLButtonElement* This,cpp_bool *aFormNoValidate) {
    return This->lpVtbl->GetFormNoValidate(This,aFormNoValidate);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_SetFormNoValidate(nsIDOMHTMLButtonElement* This,cpp_bool aFormNoValidate) {
    return This->lpVtbl->SetFormNoValidate(This,aFormNoValidate);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_GetFormTarget(nsIDOMHTMLButtonElement* This,nsAString *aFormTarget) {
    return This->lpVtbl->GetFormTarget(This,aFormTarget);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_SetFormTarget(nsIDOMHTMLButtonElement* This,const nsAString *aFormTarget) {
    return This->lpVtbl->SetFormTarget(This,aFormTarget);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_GetName(nsIDOMHTMLButtonElement* This,nsAString *aName) {
    return This->lpVtbl->GetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_SetName(nsIDOMHTMLButtonElement* This,const nsAString *aName) {
    return This->lpVtbl->SetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_GetType(nsIDOMHTMLButtonElement* This,nsAString *aType) {
    return This->lpVtbl->GetType(This,aType);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_SetType(nsIDOMHTMLButtonElement* This,const nsAString *aType) {
    return This->lpVtbl->SetType(This,aType);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_GetValue(nsIDOMHTMLButtonElement* This,nsAString *aValue) {
    return This->lpVtbl->GetValue(This,aValue);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_SetValue(nsIDOMHTMLButtonElement* This,const nsAString *aValue) {
    return This->lpVtbl->SetValue(This,aValue);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_GetWillValidate(nsIDOMHTMLButtonElement* This,cpp_bool *aWillValidate) {
    return This->lpVtbl->GetWillValidate(This,aWillValidate);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_GetValidity(nsIDOMHTMLButtonElement* This,nsIDOMValidityState **aValidity) {
    return This->lpVtbl->GetValidity(This,aValidity);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_GetValidationMessage(nsIDOMHTMLButtonElement* This,nsAString *aValidationMessage) {
    return This->lpVtbl->GetValidationMessage(This,aValidationMessage);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_CheckValidity(nsIDOMHTMLButtonElement* This,cpp_bool *_retval) {
    return This->lpVtbl->CheckValidity(This,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLButtonElement_SetCustomValidity(nsIDOMHTMLButtonElement* This,const nsAString *error) {
    return This->lpVtbl->SetCustomValidity(This,error);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLButtonElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLOptionsCollection interface
 */
#ifndef __nsIDOMHTMLOptionsCollection_INTERFACE_DEFINED__
#define __nsIDOMHTMLOptionsCollection_INTERFACE_DEFINED__

typedef int nsWrapperCache;
DEFINE_GUID(IID_nsIDOMHTMLOptionsCollection, 0x4173cc53, 0x30f6, 0x4d12, 0xa7,0x70, 0x98,0x1b,0xa5,0x31,0x64,0xe2);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("4173cc53-30f6-4d12-a770-981ba53164e2")
nsIDOMHTMLOptionsCollection : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetLength(
        UINT32 *aLength) = 0;

    virtual nsresult STDMETHODCALLTYPE SetLength(
        UINT32 aLength) = 0;

    virtual nsresult STDMETHODCALLTYPE Item(
        UINT32 index,
        nsIDOMNode **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE NamedItem(
        const nsAString *name,
        nsIDOMNode **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSelectedIndex(
        LONG *aSelectedIndex) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSelectedIndex(
        LONG aSelectedIndex) = 0;

    virtual nsresult STDMETHODCALLTYPE SetOption(
        UINT32 index,
        nsIDOMHTMLOptionElement *option) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSelect(
        nsIDOMHTMLSelectElement **aSelect) = 0;

    virtual nsresult STDMETHODCALLTYPE Add(
        nsIDOMHTMLOptionElement *option,
        nsIVariant *before) = 0;

    virtual nsresult STDMETHODCALLTYPE Remove(
        LONG index) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLOptionsCollection, 0x4173cc53, 0x30f6, 0x4d12, 0xa7,0x70, 0x98,0x1b,0xa5,0x31,0x64,0xe2)
#endif
#else
typedef struct nsIDOMHTMLOptionsCollectionVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLOptionsCollection *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLOptionsCollection *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLOptionsCollection *This);

    /*** nsIDOMHTMLOptionsCollection methods ***/
    nsresult (STDMETHODCALLTYPE *GetLength)(
        nsIDOMHTMLOptionsCollection *This,
        UINT32 *aLength);

    nsresult (STDMETHODCALLTYPE *SetLength)(
        nsIDOMHTMLOptionsCollection *This,
        UINT32 aLength);

    nsresult (STDMETHODCALLTYPE *Item)(
        nsIDOMHTMLOptionsCollection *This,
        UINT32 index,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *NamedItem)(
        nsIDOMHTMLOptionsCollection *This,
        const nsAString *name,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *GetSelectedIndex)(
        nsIDOMHTMLOptionsCollection *This,
        LONG *aSelectedIndex);

    nsresult (STDMETHODCALLTYPE *SetSelectedIndex)(
        nsIDOMHTMLOptionsCollection *This,
        LONG aSelectedIndex);

    nsresult (STDMETHODCALLTYPE *SetOption)(
        nsIDOMHTMLOptionsCollection *This,
        UINT32 index,
        nsIDOMHTMLOptionElement *option);

    nsresult (STDMETHODCALLTYPE *GetSelect)(
        nsIDOMHTMLOptionsCollection *This,
        nsIDOMHTMLSelectElement **aSelect);

    nsresult (STDMETHODCALLTYPE *Add)(
        nsIDOMHTMLOptionsCollection *This,
        nsIDOMHTMLOptionElement *option,
        nsIVariant *before);

    nsresult (STDMETHODCALLTYPE *Remove)(
        nsIDOMHTMLOptionsCollection *This,
        LONG index);

    END_INTERFACE
} nsIDOMHTMLOptionsCollectionVtbl;

interface nsIDOMHTMLOptionsCollection {
    CONST_VTBL nsIDOMHTMLOptionsCollectionVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLOptionsCollection_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLOptionsCollection_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLOptionsCollection_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMHTMLOptionsCollection methods ***/
#define nsIDOMHTMLOptionsCollection_GetLength(This,aLength) (This)->lpVtbl->GetLength(This,aLength)
#define nsIDOMHTMLOptionsCollection_SetLength(This,aLength) (This)->lpVtbl->SetLength(This,aLength)
#define nsIDOMHTMLOptionsCollection_Item(This,index,_retval) (This)->lpVtbl->Item(This,index,_retval)
#define nsIDOMHTMLOptionsCollection_NamedItem(This,name,_retval) (This)->lpVtbl->NamedItem(This,name,_retval)
#define nsIDOMHTMLOptionsCollection_GetSelectedIndex(This,aSelectedIndex) (This)->lpVtbl->GetSelectedIndex(This,aSelectedIndex)
#define nsIDOMHTMLOptionsCollection_SetSelectedIndex(This,aSelectedIndex) (This)->lpVtbl->SetSelectedIndex(This,aSelectedIndex)
#define nsIDOMHTMLOptionsCollection_SetOption(This,index,option) (This)->lpVtbl->SetOption(This,index,option)
#define nsIDOMHTMLOptionsCollection_GetSelect(This,aSelect) (This)->lpVtbl->GetSelect(This,aSelect)
#define nsIDOMHTMLOptionsCollection_Add(This,option,before) (This)->lpVtbl->Add(This,option,before)
#define nsIDOMHTMLOptionsCollection_Remove(This,index) (This)->lpVtbl->Remove(This,index)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLOptionsCollection_QueryInterface(nsIDOMHTMLOptionsCollection* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLOptionsCollection_AddRef(nsIDOMHTMLOptionsCollection* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLOptionsCollection_Release(nsIDOMHTMLOptionsCollection* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMHTMLOptionsCollection methods ***/
static FORCEINLINE nsresult nsIDOMHTMLOptionsCollection_GetLength(nsIDOMHTMLOptionsCollection* This,UINT32 *aLength) {
    return This->lpVtbl->GetLength(This,aLength);
}
static FORCEINLINE nsresult nsIDOMHTMLOptionsCollection_SetLength(nsIDOMHTMLOptionsCollection* This,UINT32 aLength) {
    return This->lpVtbl->SetLength(This,aLength);
}
static FORCEINLINE nsresult nsIDOMHTMLOptionsCollection_Item(nsIDOMHTMLOptionsCollection* This,UINT32 index,nsIDOMNode **_retval) {
    return This->lpVtbl->Item(This,index,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLOptionsCollection_NamedItem(nsIDOMHTMLOptionsCollection* This,const nsAString *name,nsIDOMNode **_retval) {
    return This->lpVtbl->NamedItem(This,name,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLOptionsCollection_GetSelectedIndex(nsIDOMHTMLOptionsCollection* This,LONG *aSelectedIndex) {
    return This->lpVtbl->GetSelectedIndex(This,aSelectedIndex);
}
static FORCEINLINE nsresult nsIDOMHTMLOptionsCollection_SetSelectedIndex(nsIDOMHTMLOptionsCollection* This,LONG aSelectedIndex) {
    return This->lpVtbl->SetSelectedIndex(This,aSelectedIndex);
}
static FORCEINLINE nsresult nsIDOMHTMLOptionsCollection_SetOption(nsIDOMHTMLOptionsCollection* This,UINT32 index,nsIDOMHTMLOptionElement *option) {
    return This->lpVtbl->SetOption(This,index,option);
}
static FORCEINLINE nsresult nsIDOMHTMLOptionsCollection_GetSelect(nsIDOMHTMLOptionsCollection* This,nsIDOMHTMLSelectElement **aSelect) {
    return This->lpVtbl->GetSelect(This,aSelect);
}
static FORCEINLINE nsresult nsIDOMHTMLOptionsCollection_Add(nsIDOMHTMLOptionsCollection* This,nsIDOMHTMLOptionElement *option,nsIVariant *before) {
    return This->lpVtbl->Add(This,option,before);
}
static FORCEINLINE nsresult nsIDOMHTMLOptionsCollection_Remove(nsIDOMHTMLOptionsCollection* This,LONG index) {
    return This->lpVtbl->Remove(This,index);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLOptionsCollection_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLSelectElement interface
 */
#ifndef __nsIDOMHTMLSelectElement_INTERFACE_DEFINED__
#define __nsIDOMHTMLSelectElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLSelectElement, 0xd8914a2d, 0x3556, 0x4b66, 0x91,0x1c, 0xa8,0x4c,0x43,0x94,0xe7,0xfa);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d8914a2d-3556-4b66-911c-a84c4394e7fa")
nsIDOMHTMLSelectElement : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetAutofocus(
        cpp_bool *aAutofocus) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAutofocus(
        cpp_bool aAutofocus) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDisabled(
        cpp_bool *aDisabled) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDisabled(
        cpp_bool aDisabled) = 0;

    virtual nsresult STDMETHODCALLTYPE GetForm(
        nsIDOMHTMLFormElement **aForm) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMultiple(
        cpp_bool *aMultiple) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMultiple(
        cpp_bool aMultiple) = 0;

    virtual nsresult STDMETHODCALLTYPE GetName(
        nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE SetName(
        const nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSize(
        UINT32 *aSize) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSize(
        UINT32 aSize) = 0;

    virtual nsresult STDMETHODCALLTYPE GetType(
        nsAString *aType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOptions(
        nsIDOMHTMLOptionsCollection **aOptions) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLength(
        UINT32 *aLength) = 0;

    virtual nsresult STDMETHODCALLTYPE SetLength(
        UINT32 aLength) = 0;

    virtual nsresult STDMETHODCALLTYPE Item(
        UINT32 index,
        nsIDOMNode **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE NamedItem(
        const nsAString *name,
        nsIDOMNode **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Add(
        nsIDOMHTMLElement *element,
        nsIVariant *before) = 0;

    virtual nsresult STDMETHODCALLTYPE select_Remove(
        LONG index) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSelectedOptions(
        nsIDOMHTMLCollection **aSelectedOptions) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSelectedIndex(
        LONG *aSelectedIndex) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSelectedIndex(
        LONG aSelectedIndex) = 0;

    virtual nsresult STDMETHODCALLTYPE GetValue(
        nsAString *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetValue(
        const nsAString *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE GetWillValidate(
        cpp_bool *aWillValidate) = 0;

    virtual nsresult STDMETHODCALLTYPE GetValidity(
        nsIDOMValidityState **aValidity) = 0;

    virtual nsresult STDMETHODCALLTYPE GetValidationMessage(
        nsAString *aValidationMessage) = 0;

    virtual nsresult STDMETHODCALLTYPE CheckValidity(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCustomValidity(
        const nsAString *error) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRequired(
        cpp_bool *aRequired) = 0;

    virtual nsresult STDMETHODCALLTYPE SetRequired(
        cpp_bool aRequired) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLSelectElement, 0xd8914a2d, 0x3556, 0x4b66, 0x91,0x1c, 0xa8,0x4c,0x43,0x94,0xe7,0xfa)
#endif
#else
typedef struct nsIDOMHTMLSelectElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLSelectElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLSelectElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLSelectElement *This);

    /*** nsIDOMHTMLSelectElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetAutofocus)(
        nsIDOMHTMLSelectElement *This,
        cpp_bool *aAutofocus);

    nsresult (STDMETHODCALLTYPE *SetAutofocus)(
        nsIDOMHTMLSelectElement *This,
        cpp_bool aAutofocus);

    nsresult (STDMETHODCALLTYPE *GetDisabled)(
        nsIDOMHTMLSelectElement *This,
        cpp_bool *aDisabled);

    nsresult (STDMETHODCALLTYPE *SetDisabled)(
        nsIDOMHTMLSelectElement *This,
        cpp_bool aDisabled);

    nsresult (STDMETHODCALLTYPE *GetForm)(
        nsIDOMHTMLSelectElement *This,
        nsIDOMHTMLFormElement **aForm);

    nsresult (STDMETHODCALLTYPE *GetMultiple)(
        nsIDOMHTMLSelectElement *This,
        cpp_bool *aMultiple);

    nsresult (STDMETHODCALLTYPE *SetMultiple)(
        nsIDOMHTMLSelectElement *This,
        cpp_bool aMultiple);

    nsresult (STDMETHODCALLTYPE *GetName)(
        nsIDOMHTMLSelectElement *This,
        nsAString *aName);

    nsresult (STDMETHODCALLTYPE *SetName)(
        nsIDOMHTMLSelectElement *This,
        const nsAString *aName);

    nsresult (STDMETHODCALLTYPE *GetSize)(
        nsIDOMHTMLSelectElement *This,
        UINT32 *aSize);

    nsresult (STDMETHODCALLTYPE *SetSize)(
        nsIDOMHTMLSelectElement *This,
        UINT32 aSize);

    nsresult (STDMETHODCALLTYPE *GetType)(
        nsIDOMHTMLSelectElement *This,
        nsAString *aType);

    nsresult (STDMETHODCALLTYPE *GetOptions)(
        nsIDOMHTMLSelectElement *This,
        nsIDOMHTMLOptionsCollection **aOptions);

    nsresult (STDMETHODCALLTYPE *GetLength)(
        nsIDOMHTMLSelectElement *This,
        UINT32 *aLength);

    nsresult (STDMETHODCALLTYPE *SetLength)(
        nsIDOMHTMLSelectElement *This,
        UINT32 aLength);

    nsresult (STDMETHODCALLTYPE *Item)(
        nsIDOMHTMLSelectElement *This,
        UINT32 index,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *NamedItem)(
        nsIDOMHTMLSelectElement *This,
        const nsAString *name,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *Add)(
        nsIDOMHTMLSelectElement *This,
        nsIDOMHTMLElement *element,
        nsIVariant *before);

    nsresult (STDMETHODCALLTYPE *select_Remove)(
        nsIDOMHTMLSelectElement *This,
        LONG index);

    nsresult (STDMETHODCALLTYPE *GetSelectedOptions)(
        nsIDOMHTMLSelectElement *This,
        nsIDOMHTMLCollection **aSelectedOptions);

    nsresult (STDMETHODCALLTYPE *GetSelectedIndex)(
        nsIDOMHTMLSelectElement *This,
        LONG *aSelectedIndex);

    nsresult (STDMETHODCALLTYPE *SetSelectedIndex)(
        nsIDOMHTMLSelectElement *This,
        LONG aSelectedIndex);

    nsresult (STDMETHODCALLTYPE *GetValue)(
        nsIDOMHTMLSelectElement *This,
        nsAString *aValue);

    nsresult (STDMETHODCALLTYPE *SetValue)(
        nsIDOMHTMLSelectElement *This,
        const nsAString *aValue);

    nsresult (STDMETHODCALLTYPE *GetWillValidate)(
        nsIDOMHTMLSelectElement *This,
        cpp_bool *aWillValidate);

    nsresult (STDMETHODCALLTYPE *GetValidity)(
        nsIDOMHTMLSelectElement *This,
        nsIDOMValidityState **aValidity);

    nsresult (STDMETHODCALLTYPE *GetValidationMessage)(
        nsIDOMHTMLSelectElement *This,
        nsAString *aValidationMessage);

    nsresult (STDMETHODCALLTYPE *CheckValidity)(
        nsIDOMHTMLSelectElement *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetCustomValidity)(
        nsIDOMHTMLSelectElement *This,
        const nsAString *error);

    nsresult (STDMETHODCALLTYPE *GetRequired)(
        nsIDOMHTMLSelectElement *This,
        cpp_bool *aRequired);

    nsresult (STDMETHODCALLTYPE *SetRequired)(
        nsIDOMHTMLSelectElement *This,
        cpp_bool aRequired);

    END_INTERFACE
} nsIDOMHTMLSelectElementVtbl;

interface nsIDOMHTMLSelectElement {
    CONST_VTBL nsIDOMHTMLSelectElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLSelectElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLSelectElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLSelectElement_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMHTMLSelectElement methods ***/
#define nsIDOMHTMLSelectElement_GetAutofocus(This,aAutofocus) (This)->lpVtbl->GetAutofocus(This,aAutofocus)
#define nsIDOMHTMLSelectElement_SetAutofocus(This,aAutofocus) (This)->lpVtbl->SetAutofocus(This,aAutofocus)
#define nsIDOMHTMLSelectElement_GetDisabled(This,aDisabled) (This)->lpVtbl->GetDisabled(This,aDisabled)
#define nsIDOMHTMLSelectElement_SetDisabled(This,aDisabled) (This)->lpVtbl->SetDisabled(This,aDisabled)
#define nsIDOMHTMLSelectElement_GetForm(This,aForm) (This)->lpVtbl->GetForm(This,aForm)
#define nsIDOMHTMLSelectElement_GetMultiple(This,aMultiple) (This)->lpVtbl->GetMultiple(This,aMultiple)
#define nsIDOMHTMLSelectElement_SetMultiple(This,aMultiple) (This)->lpVtbl->SetMultiple(This,aMultiple)
#define nsIDOMHTMLSelectElement_GetName(This,aName) (This)->lpVtbl->GetName(This,aName)
#define nsIDOMHTMLSelectElement_SetName(This,aName) (This)->lpVtbl->SetName(This,aName)
#define nsIDOMHTMLSelectElement_GetSize(This,aSize) (This)->lpVtbl->GetSize(This,aSize)
#define nsIDOMHTMLSelectElement_SetSize(This,aSize) (This)->lpVtbl->SetSize(This,aSize)
#define nsIDOMHTMLSelectElement_GetType(This,aType) (This)->lpVtbl->GetType(This,aType)
#define nsIDOMHTMLSelectElement_GetOptions(This,aOptions) (This)->lpVtbl->GetOptions(This,aOptions)
#define nsIDOMHTMLSelectElement_GetLength(This,aLength) (This)->lpVtbl->GetLength(This,aLength)
#define nsIDOMHTMLSelectElement_SetLength(This,aLength) (This)->lpVtbl->SetLength(This,aLength)
#define nsIDOMHTMLSelectElement_Item(This,index,_retval) (This)->lpVtbl->Item(This,index,_retval)
#define nsIDOMHTMLSelectElement_NamedItem(This,name,_retval) (This)->lpVtbl->NamedItem(This,name,_retval)
#define nsIDOMHTMLSelectElement_Add(This,element,before) (This)->lpVtbl->Add(This,element,before)
#define nsIDOMHTMLSelectElement_select_Remove(This,index) (This)->lpVtbl->select_Remove(This,index)
#define nsIDOMHTMLSelectElement_GetSelectedOptions(This,aSelectedOptions) (This)->lpVtbl->GetSelectedOptions(This,aSelectedOptions)
#define nsIDOMHTMLSelectElement_GetSelectedIndex(This,aSelectedIndex) (This)->lpVtbl->GetSelectedIndex(This,aSelectedIndex)
#define nsIDOMHTMLSelectElement_SetSelectedIndex(This,aSelectedIndex) (This)->lpVtbl->SetSelectedIndex(This,aSelectedIndex)
#define nsIDOMHTMLSelectElement_GetValue(This,aValue) (This)->lpVtbl->GetValue(This,aValue)
#define nsIDOMHTMLSelectElement_SetValue(This,aValue) (This)->lpVtbl->SetValue(This,aValue)
#define nsIDOMHTMLSelectElement_GetWillValidate(This,aWillValidate) (This)->lpVtbl->GetWillValidate(This,aWillValidate)
#define nsIDOMHTMLSelectElement_GetValidity(This,aValidity) (This)->lpVtbl->GetValidity(This,aValidity)
#define nsIDOMHTMLSelectElement_GetValidationMessage(This,aValidationMessage) (This)->lpVtbl->GetValidationMessage(This,aValidationMessage)
#define nsIDOMHTMLSelectElement_CheckValidity(This,_retval) (This)->lpVtbl->CheckValidity(This,_retval)
#define nsIDOMHTMLSelectElement_SetCustomValidity(This,error) (This)->lpVtbl->SetCustomValidity(This,error)
#define nsIDOMHTMLSelectElement_GetRequired(This,aRequired) (This)->lpVtbl->GetRequired(This,aRequired)
#define nsIDOMHTMLSelectElement_SetRequired(This,aRequired) (This)->lpVtbl->SetRequired(This,aRequired)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_QueryInterface(nsIDOMHTMLSelectElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLSelectElement_AddRef(nsIDOMHTMLSelectElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLSelectElement_Release(nsIDOMHTMLSelectElement* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMHTMLSelectElement methods ***/
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_GetAutofocus(nsIDOMHTMLSelectElement* This,cpp_bool *aAutofocus) {
    return This->lpVtbl->GetAutofocus(This,aAutofocus);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_SetAutofocus(nsIDOMHTMLSelectElement* This,cpp_bool aAutofocus) {
    return This->lpVtbl->SetAutofocus(This,aAutofocus);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_GetDisabled(nsIDOMHTMLSelectElement* This,cpp_bool *aDisabled) {
    return This->lpVtbl->GetDisabled(This,aDisabled);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_SetDisabled(nsIDOMHTMLSelectElement* This,cpp_bool aDisabled) {
    return This->lpVtbl->SetDisabled(This,aDisabled);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_GetForm(nsIDOMHTMLSelectElement* This,nsIDOMHTMLFormElement **aForm) {
    return This->lpVtbl->GetForm(This,aForm);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_GetMultiple(nsIDOMHTMLSelectElement* This,cpp_bool *aMultiple) {
    return This->lpVtbl->GetMultiple(This,aMultiple);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_SetMultiple(nsIDOMHTMLSelectElement* This,cpp_bool aMultiple) {
    return This->lpVtbl->SetMultiple(This,aMultiple);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_GetName(nsIDOMHTMLSelectElement* This,nsAString *aName) {
    return This->lpVtbl->GetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_SetName(nsIDOMHTMLSelectElement* This,const nsAString *aName) {
    return This->lpVtbl->SetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_GetSize(nsIDOMHTMLSelectElement* This,UINT32 *aSize) {
    return This->lpVtbl->GetSize(This,aSize);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_SetSize(nsIDOMHTMLSelectElement* This,UINT32 aSize) {
    return This->lpVtbl->SetSize(This,aSize);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_GetType(nsIDOMHTMLSelectElement* This,nsAString *aType) {
    return This->lpVtbl->GetType(This,aType);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_GetOptions(nsIDOMHTMLSelectElement* This,nsIDOMHTMLOptionsCollection **aOptions) {
    return This->lpVtbl->GetOptions(This,aOptions);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_GetLength(nsIDOMHTMLSelectElement* This,UINT32 *aLength) {
    return This->lpVtbl->GetLength(This,aLength);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_SetLength(nsIDOMHTMLSelectElement* This,UINT32 aLength) {
    return This->lpVtbl->SetLength(This,aLength);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_Item(nsIDOMHTMLSelectElement* This,UINT32 index,nsIDOMNode **_retval) {
    return This->lpVtbl->Item(This,index,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_NamedItem(nsIDOMHTMLSelectElement* This,const nsAString *name,nsIDOMNode **_retval) {
    return This->lpVtbl->NamedItem(This,name,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_Add(nsIDOMHTMLSelectElement* This,nsIDOMHTMLElement *element,nsIVariant *before) {
    return This->lpVtbl->Add(This,element,before);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_select_Remove(nsIDOMHTMLSelectElement* This,LONG index) {
    return This->lpVtbl->select_Remove(This,index);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_GetSelectedOptions(nsIDOMHTMLSelectElement* This,nsIDOMHTMLCollection **aSelectedOptions) {
    return This->lpVtbl->GetSelectedOptions(This,aSelectedOptions);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_GetSelectedIndex(nsIDOMHTMLSelectElement* This,LONG *aSelectedIndex) {
    return This->lpVtbl->GetSelectedIndex(This,aSelectedIndex);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_SetSelectedIndex(nsIDOMHTMLSelectElement* This,LONG aSelectedIndex) {
    return This->lpVtbl->SetSelectedIndex(This,aSelectedIndex);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_GetValue(nsIDOMHTMLSelectElement* This,nsAString *aValue) {
    return This->lpVtbl->GetValue(This,aValue);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_SetValue(nsIDOMHTMLSelectElement* This,const nsAString *aValue) {
    return This->lpVtbl->SetValue(This,aValue);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_GetWillValidate(nsIDOMHTMLSelectElement* This,cpp_bool *aWillValidate) {
    return This->lpVtbl->GetWillValidate(This,aWillValidate);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_GetValidity(nsIDOMHTMLSelectElement* This,nsIDOMValidityState **aValidity) {
    return This->lpVtbl->GetValidity(This,aValidity);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_GetValidationMessage(nsIDOMHTMLSelectElement* This,nsAString *aValidationMessage) {
    return This->lpVtbl->GetValidationMessage(This,aValidationMessage);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_CheckValidity(nsIDOMHTMLSelectElement* This,cpp_bool *_retval) {
    return This->lpVtbl->CheckValidity(This,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_SetCustomValidity(nsIDOMHTMLSelectElement* This,const nsAString *error) {
    return This->lpVtbl->SetCustomValidity(This,error);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_GetRequired(nsIDOMHTMLSelectElement* This,cpp_bool *aRequired) {
    return This->lpVtbl->GetRequired(This,aRequired);
}
static FORCEINLINE nsresult nsIDOMHTMLSelectElement_SetRequired(nsIDOMHTMLSelectElement* This,cpp_bool aRequired) {
    return This->lpVtbl->SetRequired(This,aRequired);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLSelectElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLTextAreaElement interface
 */
#ifndef __nsIDOMHTMLTextAreaElement_INTERFACE_DEFINED__
#define __nsIDOMHTMLTextAreaElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLTextAreaElement, 0x7a4aeb2e, 0xfcf3, 0x443e, 0xb0,0x02, 0xca,0x1c,0x8e,0xa3,0x22,0xe9);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("7a4aeb2e-fcf3-443e-b002-ca1c8ea322e9")
nsIDOMHTMLTextAreaElement : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetAutofocus(
        cpp_bool *aAutofocus) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAutofocus(
        cpp_bool aAutofocus) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCols(
        UINT32 *aCols) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCols(
        UINT32 aCols) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDisabled(
        cpp_bool *aDisabled) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDisabled(
        cpp_bool aDisabled) = 0;

    virtual nsresult STDMETHODCALLTYPE GetForm(
        nsIDOMHTMLFormElement **aForm) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMaxLength(
        LONG *aMaxLength) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMaxLength(
        LONG aMaxLength) = 0;

    virtual nsresult STDMETHODCALLTYPE GetName(
        nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE SetName(
        const nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPlaceholder(
        nsAString *aPlaceholder) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPlaceholder(
        const nsAString *aPlaceholder) = 0;

    virtual nsresult STDMETHODCALLTYPE GetReadOnly(
        cpp_bool *aReadOnly) = 0;

    virtual nsresult STDMETHODCALLTYPE SetReadOnly(
        cpp_bool aReadOnly) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRequired(
        cpp_bool *aRequired) = 0;

    virtual nsresult STDMETHODCALLTYPE SetRequired(
        cpp_bool aRequired) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRows(
        UINT32 *aRows) = 0;

    virtual nsresult STDMETHODCALLTYPE SetRows(
        UINT32 aRows) = 0;

    virtual nsresult STDMETHODCALLTYPE GetWrap(
        nsAString *aWrap) = 0;

    virtual nsresult STDMETHODCALLTYPE SetWrap(
        const nsAString *aWrap) = 0;

    virtual nsresult STDMETHODCALLTYPE GetType(
        nsAString *aType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDefaultValue(
        nsAString *aDefaultValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDefaultValue(
        const nsAString *aDefaultValue) = 0;

    virtual nsresult STDMETHODCALLTYPE GetValue(
        nsAString *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetValue(
        const nsAString *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTextLength(
        LONG *aTextLength) = 0;

    virtual nsresult STDMETHODCALLTYPE GetWillValidate(
        cpp_bool *aWillValidate) = 0;

    virtual nsresult STDMETHODCALLTYPE GetValidity(
        nsIDOMValidityState **aValidity) = 0;

    virtual nsresult STDMETHODCALLTYPE GetValidationMessage(
        nsAString *aValidationMessage) = 0;

    virtual nsresult STDMETHODCALLTYPE CheckValidity(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCustomValidity(
        const nsAString *error) = 0;

    virtual nsresult STDMETHODCALLTYPE Select(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSelectionStart(
        LONG *aSelectionStart) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSelectionStart(
        LONG aSelectionStart) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSelectionEnd(
        LONG *aSelectionEnd) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSelectionEnd(
        LONG aSelectionEnd) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSelectionRange(
        LONG selectionStart,
        LONG selectionEnd,
        const nsAString *direction) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSelectionDirection(
        nsAString *aSelectionDirection) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSelectionDirection(
        const nsAString *aSelectionDirection) = 0;

    virtual nsresult STDMETHODCALLTYPE GetControllers(
        nsIControllers **aControllers) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLTextAreaElement, 0x7a4aeb2e, 0xfcf3, 0x443e, 0xb0,0x02, 0xca,0x1c,0x8e,0xa3,0x22,0xe9)
#endif
#else
typedef struct nsIDOMHTMLTextAreaElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLTextAreaElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLTextAreaElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLTextAreaElement *This);

    /*** nsIDOMHTMLTextAreaElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetAutofocus)(
        nsIDOMHTMLTextAreaElement *This,
        cpp_bool *aAutofocus);

    nsresult (STDMETHODCALLTYPE *SetAutofocus)(
        nsIDOMHTMLTextAreaElement *This,
        cpp_bool aAutofocus);

    nsresult (STDMETHODCALLTYPE *GetCols)(
        nsIDOMHTMLTextAreaElement *This,
        UINT32 *aCols);

    nsresult (STDMETHODCALLTYPE *SetCols)(
        nsIDOMHTMLTextAreaElement *This,
        UINT32 aCols);

    nsresult (STDMETHODCALLTYPE *GetDisabled)(
        nsIDOMHTMLTextAreaElement *This,
        cpp_bool *aDisabled);

    nsresult (STDMETHODCALLTYPE *SetDisabled)(
        nsIDOMHTMLTextAreaElement *This,
        cpp_bool aDisabled);

    nsresult (STDMETHODCALLTYPE *GetForm)(
        nsIDOMHTMLTextAreaElement *This,
        nsIDOMHTMLFormElement **aForm);

    nsresult (STDMETHODCALLTYPE *GetMaxLength)(
        nsIDOMHTMLTextAreaElement *This,
        LONG *aMaxLength);

    nsresult (STDMETHODCALLTYPE *SetMaxLength)(
        nsIDOMHTMLTextAreaElement *This,
        LONG aMaxLength);

    nsresult (STDMETHODCALLTYPE *GetName)(
        nsIDOMHTMLTextAreaElement *This,
        nsAString *aName);

    nsresult (STDMETHODCALLTYPE *SetName)(
        nsIDOMHTMLTextAreaElement *This,
        const nsAString *aName);

    nsresult (STDMETHODCALLTYPE *GetPlaceholder)(
        nsIDOMHTMLTextAreaElement *This,
        nsAString *aPlaceholder);

    nsresult (STDMETHODCALLTYPE *SetPlaceholder)(
        nsIDOMHTMLTextAreaElement *This,
        const nsAString *aPlaceholder);

    nsresult (STDMETHODCALLTYPE *GetReadOnly)(
        nsIDOMHTMLTextAreaElement *This,
        cpp_bool *aReadOnly);

    nsresult (STDMETHODCALLTYPE *SetReadOnly)(
        nsIDOMHTMLTextAreaElement *This,
        cpp_bool aReadOnly);

    nsresult (STDMETHODCALLTYPE *GetRequired)(
        nsIDOMHTMLTextAreaElement *This,
        cpp_bool *aRequired);

    nsresult (STDMETHODCALLTYPE *SetRequired)(
        nsIDOMHTMLTextAreaElement *This,
        cpp_bool aRequired);

    nsresult (STDMETHODCALLTYPE *GetRows)(
        nsIDOMHTMLTextAreaElement *This,
        UINT32 *aRows);

    nsresult (STDMETHODCALLTYPE *SetRows)(
        nsIDOMHTMLTextAreaElement *This,
        UINT32 aRows);

    nsresult (STDMETHODCALLTYPE *GetWrap)(
        nsIDOMHTMLTextAreaElement *This,
        nsAString *aWrap);

    nsresult (STDMETHODCALLTYPE *SetWrap)(
        nsIDOMHTMLTextAreaElement *This,
        const nsAString *aWrap);

    nsresult (STDMETHODCALLTYPE *GetType)(
        nsIDOMHTMLTextAreaElement *This,
        nsAString *aType);

    nsresult (STDMETHODCALLTYPE *GetDefaultValue)(
        nsIDOMHTMLTextAreaElement *This,
        nsAString *aDefaultValue);

    nsresult (STDMETHODCALLTYPE *SetDefaultValue)(
        nsIDOMHTMLTextAreaElement *This,
        const nsAString *aDefaultValue);

    nsresult (STDMETHODCALLTYPE *GetValue)(
        nsIDOMHTMLTextAreaElement *This,
        nsAString *aValue);

    nsresult (STDMETHODCALLTYPE *SetValue)(
        nsIDOMHTMLTextAreaElement *This,
        const nsAString *aValue);

    nsresult (STDMETHODCALLTYPE *GetTextLength)(
        nsIDOMHTMLTextAreaElement *This,
        LONG *aTextLength);

    nsresult (STDMETHODCALLTYPE *GetWillValidate)(
        nsIDOMHTMLTextAreaElement *This,
        cpp_bool *aWillValidate);

    nsresult (STDMETHODCALLTYPE *GetValidity)(
        nsIDOMHTMLTextAreaElement *This,
        nsIDOMValidityState **aValidity);

    nsresult (STDMETHODCALLTYPE *GetValidationMessage)(
        nsIDOMHTMLTextAreaElement *This,
        nsAString *aValidationMessage);

    nsresult (STDMETHODCALLTYPE *CheckValidity)(
        nsIDOMHTMLTextAreaElement *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetCustomValidity)(
        nsIDOMHTMLTextAreaElement *This,
        const nsAString *error);

    nsresult (STDMETHODCALLTYPE *Select)(
        nsIDOMHTMLTextAreaElement *This);

    nsresult (STDMETHODCALLTYPE *GetSelectionStart)(
        nsIDOMHTMLTextAreaElement *This,
        LONG *aSelectionStart);

    nsresult (STDMETHODCALLTYPE *SetSelectionStart)(
        nsIDOMHTMLTextAreaElement *This,
        LONG aSelectionStart);

    nsresult (STDMETHODCALLTYPE *GetSelectionEnd)(
        nsIDOMHTMLTextAreaElement *This,
        LONG *aSelectionEnd);

    nsresult (STDMETHODCALLTYPE *SetSelectionEnd)(
        nsIDOMHTMLTextAreaElement *This,
        LONG aSelectionEnd);

    nsresult (STDMETHODCALLTYPE *SetSelectionRange)(
        nsIDOMHTMLTextAreaElement *This,
        LONG selectionStart,
        LONG selectionEnd,
        const nsAString *direction);

    nsresult (STDMETHODCALLTYPE *GetSelectionDirection)(
        nsIDOMHTMLTextAreaElement *This,
        nsAString *aSelectionDirection);

    nsresult (STDMETHODCALLTYPE *SetSelectionDirection)(
        nsIDOMHTMLTextAreaElement *This,
        const nsAString *aSelectionDirection);

    nsresult (STDMETHODCALLTYPE *GetControllers)(
        nsIDOMHTMLTextAreaElement *This,
        nsIControllers **aControllers);

    END_INTERFACE
} nsIDOMHTMLTextAreaElementVtbl;

interface nsIDOMHTMLTextAreaElement {
    CONST_VTBL nsIDOMHTMLTextAreaElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLTextAreaElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLTextAreaElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLTextAreaElement_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMHTMLTextAreaElement methods ***/
#define nsIDOMHTMLTextAreaElement_GetAutofocus(This,aAutofocus) (This)->lpVtbl->GetAutofocus(This,aAutofocus)
#define nsIDOMHTMLTextAreaElement_SetAutofocus(This,aAutofocus) (This)->lpVtbl->SetAutofocus(This,aAutofocus)
#define nsIDOMHTMLTextAreaElement_GetCols(This,aCols) (This)->lpVtbl->GetCols(This,aCols)
#define nsIDOMHTMLTextAreaElement_SetCols(This,aCols) (This)->lpVtbl->SetCols(This,aCols)
#define nsIDOMHTMLTextAreaElement_GetDisabled(This,aDisabled) (This)->lpVtbl->GetDisabled(This,aDisabled)
#define nsIDOMHTMLTextAreaElement_SetDisabled(This,aDisabled) (This)->lpVtbl->SetDisabled(This,aDisabled)
#define nsIDOMHTMLTextAreaElement_GetForm(This,aForm) (This)->lpVtbl->GetForm(This,aForm)
#define nsIDOMHTMLTextAreaElement_GetMaxLength(This,aMaxLength) (This)->lpVtbl->GetMaxLength(This,aMaxLength)
#define nsIDOMHTMLTextAreaElement_SetMaxLength(This,aMaxLength) (This)->lpVtbl->SetMaxLength(This,aMaxLength)
#define nsIDOMHTMLTextAreaElement_GetName(This,aName) (This)->lpVtbl->GetName(This,aName)
#define nsIDOMHTMLTextAreaElement_SetName(This,aName) (This)->lpVtbl->SetName(This,aName)
#define nsIDOMHTMLTextAreaElement_GetPlaceholder(This,aPlaceholder) (This)->lpVtbl->GetPlaceholder(This,aPlaceholder)
#define nsIDOMHTMLTextAreaElement_SetPlaceholder(This,aPlaceholder) (This)->lpVtbl->SetPlaceholder(This,aPlaceholder)
#define nsIDOMHTMLTextAreaElement_GetReadOnly(This,aReadOnly) (This)->lpVtbl->GetReadOnly(This,aReadOnly)
#define nsIDOMHTMLTextAreaElement_SetReadOnly(This,aReadOnly) (This)->lpVtbl->SetReadOnly(This,aReadOnly)
#define nsIDOMHTMLTextAreaElement_GetRequired(This,aRequired) (This)->lpVtbl->GetRequired(This,aRequired)
#define nsIDOMHTMLTextAreaElement_SetRequired(This,aRequired) (This)->lpVtbl->SetRequired(This,aRequired)
#define nsIDOMHTMLTextAreaElement_GetRows(This,aRows) (This)->lpVtbl->GetRows(This,aRows)
#define nsIDOMHTMLTextAreaElement_SetRows(This,aRows) (This)->lpVtbl->SetRows(This,aRows)
#define nsIDOMHTMLTextAreaElement_GetWrap(This,aWrap) (This)->lpVtbl->GetWrap(This,aWrap)
#define nsIDOMHTMLTextAreaElement_SetWrap(This,aWrap) (This)->lpVtbl->SetWrap(This,aWrap)
#define nsIDOMHTMLTextAreaElement_GetType(This,aType) (This)->lpVtbl->GetType(This,aType)
#define nsIDOMHTMLTextAreaElement_GetDefaultValue(This,aDefaultValue) (This)->lpVtbl->GetDefaultValue(This,aDefaultValue)
#define nsIDOMHTMLTextAreaElement_SetDefaultValue(This,aDefaultValue) (This)->lpVtbl->SetDefaultValue(This,aDefaultValue)
#define nsIDOMHTMLTextAreaElement_GetValue(This,aValue) (This)->lpVtbl->GetValue(This,aValue)
#define nsIDOMHTMLTextAreaElement_SetValue(This,aValue) (This)->lpVtbl->SetValue(This,aValue)
#define nsIDOMHTMLTextAreaElement_GetTextLength(This,aTextLength) (This)->lpVtbl->GetTextLength(This,aTextLength)
#define nsIDOMHTMLTextAreaElement_GetWillValidate(This,aWillValidate) (This)->lpVtbl->GetWillValidate(This,aWillValidate)
#define nsIDOMHTMLTextAreaElement_GetValidity(This,aValidity) (This)->lpVtbl->GetValidity(This,aValidity)
#define nsIDOMHTMLTextAreaElement_GetValidationMessage(This,aValidationMessage) (This)->lpVtbl->GetValidationMessage(This,aValidationMessage)
#define nsIDOMHTMLTextAreaElement_CheckValidity(This,_retval) (This)->lpVtbl->CheckValidity(This,_retval)
#define nsIDOMHTMLTextAreaElement_SetCustomValidity(This,error) (This)->lpVtbl->SetCustomValidity(This,error)
#define nsIDOMHTMLTextAreaElement_Select(This) (This)->lpVtbl->Select(This)
#define nsIDOMHTMLTextAreaElement_GetSelectionStart(This,aSelectionStart) (This)->lpVtbl->GetSelectionStart(This,aSelectionStart)
#define nsIDOMHTMLTextAreaElement_SetSelectionStart(This,aSelectionStart) (This)->lpVtbl->SetSelectionStart(This,aSelectionStart)
#define nsIDOMHTMLTextAreaElement_GetSelectionEnd(This,aSelectionEnd) (This)->lpVtbl->GetSelectionEnd(This,aSelectionEnd)
#define nsIDOMHTMLTextAreaElement_SetSelectionEnd(This,aSelectionEnd) (This)->lpVtbl->SetSelectionEnd(This,aSelectionEnd)
#define nsIDOMHTMLTextAreaElement_SetSelectionRange(This,selectionStart,selectionEnd,direction) (This)->lpVtbl->SetSelectionRange(This,selectionStart,selectionEnd,direction)
#define nsIDOMHTMLTextAreaElement_GetSelectionDirection(This,aSelectionDirection) (This)->lpVtbl->GetSelectionDirection(This,aSelectionDirection)
#define nsIDOMHTMLTextAreaElement_SetSelectionDirection(This,aSelectionDirection) (This)->lpVtbl->SetSelectionDirection(This,aSelectionDirection)
#define nsIDOMHTMLTextAreaElement_GetControllers(This,aControllers) (This)->lpVtbl->GetControllers(This,aControllers)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_QueryInterface(nsIDOMHTMLTextAreaElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLTextAreaElement_AddRef(nsIDOMHTMLTextAreaElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLTextAreaElement_Release(nsIDOMHTMLTextAreaElement* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMHTMLTextAreaElement methods ***/
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_GetAutofocus(nsIDOMHTMLTextAreaElement* This,cpp_bool *aAutofocus) {
    return This->lpVtbl->GetAutofocus(This,aAutofocus);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_SetAutofocus(nsIDOMHTMLTextAreaElement* This,cpp_bool aAutofocus) {
    return This->lpVtbl->SetAutofocus(This,aAutofocus);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_GetCols(nsIDOMHTMLTextAreaElement* This,UINT32 *aCols) {
    return This->lpVtbl->GetCols(This,aCols);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_SetCols(nsIDOMHTMLTextAreaElement* This,UINT32 aCols) {
    return This->lpVtbl->SetCols(This,aCols);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_GetDisabled(nsIDOMHTMLTextAreaElement* This,cpp_bool *aDisabled) {
    return This->lpVtbl->GetDisabled(This,aDisabled);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_SetDisabled(nsIDOMHTMLTextAreaElement* This,cpp_bool aDisabled) {
    return This->lpVtbl->SetDisabled(This,aDisabled);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_GetForm(nsIDOMHTMLTextAreaElement* This,nsIDOMHTMLFormElement **aForm) {
    return This->lpVtbl->GetForm(This,aForm);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_GetMaxLength(nsIDOMHTMLTextAreaElement* This,LONG *aMaxLength) {
    return This->lpVtbl->GetMaxLength(This,aMaxLength);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_SetMaxLength(nsIDOMHTMLTextAreaElement* This,LONG aMaxLength) {
    return This->lpVtbl->SetMaxLength(This,aMaxLength);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_GetName(nsIDOMHTMLTextAreaElement* This,nsAString *aName) {
    return This->lpVtbl->GetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_SetName(nsIDOMHTMLTextAreaElement* This,const nsAString *aName) {
    return This->lpVtbl->SetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_GetPlaceholder(nsIDOMHTMLTextAreaElement* This,nsAString *aPlaceholder) {
    return This->lpVtbl->GetPlaceholder(This,aPlaceholder);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_SetPlaceholder(nsIDOMHTMLTextAreaElement* This,const nsAString *aPlaceholder) {
    return This->lpVtbl->SetPlaceholder(This,aPlaceholder);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_GetReadOnly(nsIDOMHTMLTextAreaElement* This,cpp_bool *aReadOnly) {
    return This->lpVtbl->GetReadOnly(This,aReadOnly);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_SetReadOnly(nsIDOMHTMLTextAreaElement* This,cpp_bool aReadOnly) {
    return This->lpVtbl->SetReadOnly(This,aReadOnly);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_GetRequired(nsIDOMHTMLTextAreaElement* This,cpp_bool *aRequired) {
    return This->lpVtbl->GetRequired(This,aRequired);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_SetRequired(nsIDOMHTMLTextAreaElement* This,cpp_bool aRequired) {
    return This->lpVtbl->SetRequired(This,aRequired);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_GetRows(nsIDOMHTMLTextAreaElement* This,UINT32 *aRows) {
    return This->lpVtbl->GetRows(This,aRows);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_SetRows(nsIDOMHTMLTextAreaElement* This,UINT32 aRows) {
    return This->lpVtbl->SetRows(This,aRows);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_GetWrap(nsIDOMHTMLTextAreaElement* This,nsAString *aWrap) {
    return This->lpVtbl->GetWrap(This,aWrap);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_SetWrap(nsIDOMHTMLTextAreaElement* This,const nsAString *aWrap) {
    return This->lpVtbl->SetWrap(This,aWrap);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_GetType(nsIDOMHTMLTextAreaElement* This,nsAString *aType) {
    return This->lpVtbl->GetType(This,aType);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_GetDefaultValue(nsIDOMHTMLTextAreaElement* This,nsAString *aDefaultValue) {
    return This->lpVtbl->GetDefaultValue(This,aDefaultValue);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_SetDefaultValue(nsIDOMHTMLTextAreaElement* This,const nsAString *aDefaultValue) {
    return This->lpVtbl->SetDefaultValue(This,aDefaultValue);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_GetValue(nsIDOMHTMLTextAreaElement* This,nsAString *aValue) {
    return This->lpVtbl->GetValue(This,aValue);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_SetValue(nsIDOMHTMLTextAreaElement* This,const nsAString *aValue) {
    return This->lpVtbl->SetValue(This,aValue);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_GetTextLength(nsIDOMHTMLTextAreaElement* This,LONG *aTextLength) {
    return This->lpVtbl->GetTextLength(This,aTextLength);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_GetWillValidate(nsIDOMHTMLTextAreaElement* This,cpp_bool *aWillValidate) {
    return This->lpVtbl->GetWillValidate(This,aWillValidate);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_GetValidity(nsIDOMHTMLTextAreaElement* This,nsIDOMValidityState **aValidity) {
    return This->lpVtbl->GetValidity(This,aValidity);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_GetValidationMessage(nsIDOMHTMLTextAreaElement* This,nsAString *aValidationMessage) {
    return This->lpVtbl->GetValidationMessage(This,aValidationMessage);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_CheckValidity(nsIDOMHTMLTextAreaElement* This,cpp_bool *_retval) {
    return This->lpVtbl->CheckValidity(This,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_SetCustomValidity(nsIDOMHTMLTextAreaElement* This,const nsAString *error) {
    return This->lpVtbl->SetCustomValidity(This,error);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_Select(nsIDOMHTMLTextAreaElement* This) {
    return This->lpVtbl->Select(This);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_GetSelectionStart(nsIDOMHTMLTextAreaElement* This,LONG *aSelectionStart) {
    return This->lpVtbl->GetSelectionStart(This,aSelectionStart);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_SetSelectionStart(nsIDOMHTMLTextAreaElement* This,LONG aSelectionStart) {
    return This->lpVtbl->SetSelectionStart(This,aSelectionStart);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_GetSelectionEnd(nsIDOMHTMLTextAreaElement* This,LONG *aSelectionEnd) {
    return This->lpVtbl->GetSelectionEnd(This,aSelectionEnd);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_SetSelectionEnd(nsIDOMHTMLTextAreaElement* This,LONG aSelectionEnd) {
    return This->lpVtbl->SetSelectionEnd(This,aSelectionEnd);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_SetSelectionRange(nsIDOMHTMLTextAreaElement* This,LONG selectionStart,LONG selectionEnd,const nsAString *direction) {
    return This->lpVtbl->SetSelectionRange(This,selectionStart,selectionEnd,direction);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_GetSelectionDirection(nsIDOMHTMLTextAreaElement* This,nsAString *aSelectionDirection) {
    return This->lpVtbl->GetSelectionDirection(This,aSelectionDirection);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_SetSelectionDirection(nsIDOMHTMLTextAreaElement* This,const nsAString *aSelectionDirection) {
    return This->lpVtbl->SetSelectionDirection(This,aSelectionDirection);
}
static FORCEINLINE nsresult nsIDOMHTMLTextAreaElement_GetControllers(nsIDOMHTMLTextAreaElement* This,nsIControllers **aControllers) {
    return This->lpVtbl->GetControllers(This,aControllers);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLTextAreaElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLScriptElement interface
 */
#ifndef __nsIDOMHTMLScriptElement_INTERFACE_DEFINED__
#define __nsIDOMHTMLScriptElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLScriptElement, 0xfe96dc1c, 0x40e4, 0x4974, 0x93,0x54, 0xe3,0xfc,0xe6,0x63,0xc3,0xd5);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("fe96dc1c-40e4-4974-9354-e3fce663c3d5")
nsIDOMHTMLScriptElement : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetSrc(
        nsAString *aSrc) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSrc(
        const nsAString *aSrc) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsync(
        cpp_bool *aAsync) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsync(
        cpp_bool aAsync) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDefer(
        cpp_bool *aDefer) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDefer(
        cpp_bool aDefer) = 0;

    virtual nsresult STDMETHODCALLTYPE GetType(
        nsAString *aType) = 0;

    virtual nsresult STDMETHODCALLTYPE SetType(
        const nsAString *aType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCharset(
        nsAString *aCharset) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCharset(
        const nsAString *aCharset) = 0;

    virtual nsresult STDMETHODCALLTYPE GetText(
        nsAString *aText) = 0;

    virtual nsresult STDMETHODCALLTYPE SetText(
        const nsAString *aText) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHtmlFor(
        nsAString *aHtmlFor) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHtmlFor(
        const nsAString *aHtmlFor) = 0;

    virtual nsresult STDMETHODCALLTYPE GetEvent(
        nsAString *aEvent) = 0;

    virtual nsresult STDMETHODCALLTYPE SetEvent(
        const nsAString *aEvent) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLScriptElement, 0xfe96dc1c, 0x40e4, 0x4974, 0x93,0x54, 0xe3,0xfc,0xe6,0x63,0xc3,0xd5)
#endif
#else
typedef struct nsIDOMHTMLScriptElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLScriptElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLScriptElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLScriptElement *This);

    /*** nsIDOMHTMLScriptElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetSrc)(
        nsIDOMHTMLScriptElement *This,
        nsAString *aSrc);

    nsresult (STDMETHODCALLTYPE *SetSrc)(
        nsIDOMHTMLScriptElement *This,
        const nsAString *aSrc);

    nsresult (STDMETHODCALLTYPE *GetAsync)(
        nsIDOMHTMLScriptElement *This,
        cpp_bool *aAsync);

    nsresult (STDMETHODCALLTYPE *SetAsync)(
        nsIDOMHTMLScriptElement *This,
        cpp_bool aAsync);

    nsresult (STDMETHODCALLTYPE *GetDefer)(
        nsIDOMHTMLScriptElement *This,
        cpp_bool *aDefer);

    nsresult (STDMETHODCALLTYPE *SetDefer)(
        nsIDOMHTMLScriptElement *This,
        cpp_bool aDefer);

    nsresult (STDMETHODCALLTYPE *GetType)(
        nsIDOMHTMLScriptElement *This,
        nsAString *aType);

    nsresult (STDMETHODCALLTYPE *SetType)(
        nsIDOMHTMLScriptElement *This,
        const nsAString *aType);

    nsresult (STDMETHODCALLTYPE *GetCharset)(
        nsIDOMHTMLScriptElement *This,
        nsAString *aCharset);

    nsresult (STDMETHODCALLTYPE *SetCharset)(
        nsIDOMHTMLScriptElement *This,
        const nsAString *aCharset);

    nsresult (STDMETHODCALLTYPE *GetText)(
        nsIDOMHTMLScriptElement *This,
        nsAString *aText);

    nsresult (STDMETHODCALLTYPE *SetText)(
        nsIDOMHTMLScriptElement *This,
        const nsAString *aText);

    nsresult (STDMETHODCALLTYPE *GetHtmlFor)(
        nsIDOMHTMLScriptElement *This,
        nsAString *aHtmlFor);

    nsresult (STDMETHODCALLTYPE *SetHtmlFor)(
        nsIDOMHTMLScriptElement *This,
        const nsAString *aHtmlFor);

    nsresult (STDMETHODCALLTYPE *GetEvent)(
        nsIDOMHTMLScriptElement *This,
        nsAString *aEvent);

    nsresult (STDMETHODCALLTYPE *SetEvent)(
        nsIDOMHTMLScriptElement *This,
        const nsAString *aEvent);

    END_INTERFACE
} nsIDOMHTMLScriptElementVtbl;

interface nsIDOMHTMLScriptElement {
    CONST_VTBL nsIDOMHTMLScriptElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLScriptElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLScriptElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLScriptElement_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMHTMLScriptElement methods ***/
#define nsIDOMHTMLScriptElement_GetSrc(This,aSrc) (This)->lpVtbl->GetSrc(This,aSrc)
#define nsIDOMHTMLScriptElement_SetSrc(This,aSrc) (This)->lpVtbl->SetSrc(This,aSrc)
#define nsIDOMHTMLScriptElement_GetAsync(This,aAsync) (This)->lpVtbl->GetAsync(This,aAsync)
#define nsIDOMHTMLScriptElement_SetAsync(This,aAsync) (This)->lpVtbl->SetAsync(This,aAsync)
#define nsIDOMHTMLScriptElement_GetDefer(This,aDefer) (This)->lpVtbl->GetDefer(This,aDefer)
#define nsIDOMHTMLScriptElement_SetDefer(This,aDefer) (This)->lpVtbl->SetDefer(This,aDefer)
#define nsIDOMHTMLScriptElement_GetType(This,aType) (This)->lpVtbl->GetType(This,aType)
#define nsIDOMHTMLScriptElement_SetType(This,aType) (This)->lpVtbl->SetType(This,aType)
#define nsIDOMHTMLScriptElement_GetCharset(This,aCharset) (This)->lpVtbl->GetCharset(This,aCharset)
#define nsIDOMHTMLScriptElement_SetCharset(This,aCharset) (This)->lpVtbl->SetCharset(This,aCharset)
#define nsIDOMHTMLScriptElement_GetText(This,aText) (This)->lpVtbl->GetText(This,aText)
#define nsIDOMHTMLScriptElement_SetText(This,aText) (This)->lpVtbl->SetText(This,aText)
#define nsIDOMHTMLScriptElement_GetHtmlFor(This,aHtmlFor) (This)->lpVtbl->GetHtmlFor(This,aHtmlFor)
#define nsIDOMHTMLScriptElement_SetHtmlFor(This,aHtmlFor) (This)->lpVtbl->SetHtmlFor(This,aHtmlFor)
#define nsIDOMHTMLScriptElement_GetEvent(This,aEvent) (This)->lpVtbl->GetEvent(This,aEvent)
#define nsIDOMHTMLScriptElement_SetEvent(This,aEvent) (This)->lpVtbl->SetEvent(This,aEvent)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLScriptElement_QueryInterface(nsIDOMHTMLScriptElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLScriptElement_AddRef(nsIDOMHTMLScriptElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLScriptElement_Release(nsIDOMHTMLScriptElement* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMHTMLScriptElement methods ***/
static FORCEINLINE nsresult nsIDOMHTMLScriptElement_GetSrc(nsIDOMHTMLScriptElement* This,nsAString *aSrc) {
    return This->lpVtbl->GetSrc(This,aSrc);
}
static FORCEINLINE nsresult nsIDOMHTMLScriptElement_SetSrc(nsIDOMHTMLScriptElement* This,const nsAString *aSrc) {
    return This->lpVtbl->SetSrc(This,aSrc);
}
static FORCEINLINE nsresult nsIDOMHTMLScriptElement_GetAsync(nsIDOMHTMLScriptElement* This,cpp_bool *aAsync) {
    return This->lpVtbl->GetAsync(This,aAsync);
}
static FORCEINLINE nsresult nsIDOMHTMLScriptElement_SetAsync(nsIDOMHTMLScriptElement* This,cpp_bool aAsync) {
    return This->lpVtbl->SetAsync(This,aAsync);
}
static FORCEINLINE nsresult nsIDOMHTMLScriptElement_GetDefer(nsIDOMHTMLScriptElement* This,cpp_bool *aDefer) {
    return This->lpVtbl->GetDefer(This,aDefer);
}
static FORCEINLINE nsresult nsIDOMHTMLScriptElement_SetDefer(nsIDOMHTMLScriptElement* This,cpp_bool aDefer) {
    return This->lpVtbl->SetDefer(This,aDefer);
}
static FORCEINLINE nsresult nsIDOMHTMLScriptElement_GetType(nsIDOMHTMLScriptElement* This,nsAString *aType) {
    return This->lpVtbl->GetType(This,aType);
}
static FORCEINLINE nsresult nsIDOMHTMLScriptElement_SetType(nsIDOMHTMLScriptElement* This,const nsAString *aType) {
    return This->lpVtbl->SetType(This,aType);
}
static FORCEINLINE nsresult nsIDOMHTMLScriptElement_GetCharset(nsIDOMHTMLScriptElement* This,nsAString *aCharset) {
    return This->lpVtbl->GetCharset(This,aCharset);
}
static FORCEINLINE nsresult nsIDOMHTMLScriptElement_SetCharset(nsIDOMHTMLScriptElement* This,const nsAString *aCharset) {
    return This->lpVtbl->SetCharset(This,aCharset);
}
static FORCEINLINE nsresult nsIDOMHTMLScriptElement_GetText(nsIDOMHTMLScriptElement* This,nsAString *aText) {
    return This->lpVtbl->GetText(This,aText);
}
static FORCEINLINE nsresult nsIDOMHTMLScriptElement_SetText(nsIDOMHTMLScriptElement* This,const nsAString *aText) {
    return This->lpVtbl->SetText(This,aText);
}
static FORCEINLINE nsresult nsIDOMHTMLScriptElement_GetHtmlFor(nsIDOMHTMLScriptElement* This,nsAString *aHtmlFor) {
    return This->lpVtbl->GetHtmlFor(This,aHtmlFor);
}
static FORCEINLINE nsresult nsIDOMHTMLScriptElement_SetHtmlFor(nsIDOMHTMLScriptElement* This,const nsAString *aHtmlFor) {
    return This->lpVtbl->SetHtmlFor(This,aHtmlFor);
}
static FORCEINLINE nsresult nsIDOMHTMLScriptElement_GetEvent(nsIDOMHTMLScriptElement* This,nsAString *aEvent) {
    return This->lpVtbl->GetEvent(This,aEvent);
}
static FORCEINLINE nsresult nsIDOMHTMLScriptElement_SetEvent(nsIDOMHTMLScriptElement* This,const nsAString *aEvent) {
    return This->lpVtbl->SetEvent(This,aEvent);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLScriptElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLImageElement interface
 */
#ifndef __nsIDOMHTMLImageElement_INTERFACE_DEFINED__
#define __nsIDOMHTMLImageElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLImageElement, 0xec18e71c, 0x4f5c, 0x4cc3, 0xaa,0x36, 0x52,0x73,0x16,0x86,0x44,0xdc);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ec18e71c-4f5c-4cc3-aa36-5273168644dc")
nsIDOMHTMLImageElement : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetAlt(
        nsAString *aAlt) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAlt(
        const nsAString *aAlt) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSrc(
        nsAString *aSrc) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSrc(
        const nsAString *aSrc) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSrcset(
        nsAString *aSrcset) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSrcset(
        const nsAString *aSrcset) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSizes(
        nsAString *aSizes) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSizes(
        const nsAString *aSizes) = 0;

    virtual nsresult STDMETHODCALLTYPE GetUseMap(
        nsAString *aUseMap) = 0;

    virtual nsresult STDMETHODCALLTYPE SetUseMap(
        const nsAString *aUseMap) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsMap(
        cpp_bool *aIsMap) = 0;

    virtual nsresult STDMETHODCALLTYPE SetIsMap(
        cpp_bool aIsMap) = 0;

    virtual nsresult STDMETHODCALLTYPE GetWidth(
        UINT32 *aWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE SetWidth(
        UINT32 aWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHeight(
        UINT32 *aHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHeight(
        UINT32 aHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNaturalWidth(
        UINT32 *aNaturalWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNaturalHeight(
        UINT32 *aNaturalHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE GetComplete(
        cpp_bool *aComplete) = 0;

    virtual nsresult STDMETHODCALLTYPE GetName(
        nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE SetName(
        const nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAlign(
        nsAString *aAlign) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAlign(
        const nsAString *aAlign) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBorder(
        nsAString *aBorder) = 0;

    virtual nsresult STDMETHODCALLTYPE SetBorder(
        const nsAString *aBorder) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHspace(
        LONG *aHspace) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHspace(
        LONG aHspace) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLongDesc(
        nsAString *aLongDesc) = 0;

    virtual nsresult STDMETHODCALLTYPE SetLongDesc(
        const nsAString *aLongDesc) = 0;

    virtual nsresult STDMETHODCALLTYPE GetVspace(
        LONG *aVspace) = 0;

    virtual nsresult STDMETHODCALLTYPE SetVspace(
        LONG aVspace) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLowsrc(
        nsAString *aLowsrc) = 0;

    virtual nsresult STDMETHODCALLTYPE SetLowsrc(
        const nsAString *aLowsrc) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCurrentSrc(
        nsAString *aCurrentSrc) = 0;

    virtual nsresult STDMETHODCALLTYPE GetX(
        LONG *aX) = 0;

    virtual nsresult STDMETHODCALLTYPE GetY(
        LONG *aY) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLImageElement, 0xec18e71c, 0x4f5c, 0x4cc3, 0xaa,0x36, 0x52,0x73,0x16,0x86,0x44,0xdc)
#endif
#else
typedef struct nsIDOMHTMLImageElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLImageElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLImageElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLImageElement *This);

    /*** nsIDOMHTMLImageElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetAlt)(
        nsIDOMHTMLImageElement *This,
        nsAString *aAlt);

    nsresult (STDMETHODCALLTYPE *SetAlt)(
        nsIDOMHTMLImageElement *This,
        const nsAString *aAlt);

    nsresult (STDMETHODCALLTYPE *GetSrc)(
        nsIDOMHTMLImageElement *This,
        nsAString *aSrc);

    nsresult (STDMETHODCALLTYPE *SetSrc)(
        nsIDOMHTMLImageElement *This,
        const nsAString *aSrc);

    nsresult (STDMETHODCALLTYPE *GetSrcset)(
        nsIDOMHTMLImageElement *This,
        nsAString *aSrcset);

    nsresult (STDMETHODCALLTYPE *SetSrcset)(
        nsIDOMHTMLImageElement *This,
        const nsAString *aSrcset);

    nsresult (STDMETHODCALLTYPE *GetSizes)(
        nsIDOMHTMLImageElement *This,
        nsAString *aSizes);

    nsresult (STDMETHODCALLTYPE *SetSizes)(
        nsIDOMHTMLImageElement *This,
        const nsAString *aSizes);

    nsresult (STDMETHODCALLTYPE *GetUseMap)(
        nsIDOMHTMLImageElement *This,
        nsAString *aUseMap);

    nsresult (STDMETHODCALLTYPE *SetUseMap)(
        nsIDOMHTMLImageElement *This,
        const nsAString *aUseMap);

    nsresult (STDMETHODCALLTYPE *GetIsMap)(
        nsIDOMHTMLImageElement *This,
        cpp_bool *aIsMap);

    nsresult (STDMETHODCALLTYPE *SetIsMap)(
        nsIDOMHTMLImageElement *This,
        cpp_bool aIsMap);

    nsresult (STDMETHODCALLTYPE *GetWidth)(
        nsIDOMHTMLImageElement *This,
        UINT32 *aWidth);

    nsresult (STDMETHODCALLTYPE *SetWidth)(
        nsIDOMHTMLImageElement *This,
        UINT32 aWidth);

    nsresult (STDMETHODCALLTYPE *GetHeight)(
        nsIDOMHTMLImageElement *This,
        UINT32 *aHeight);

    nsresult (STDMETHODCALLTYPE *SetHeight)(
        nsIDOMHTMLImageElement *This,
        UINT32 aHeight);

    nsresult (STDMETHODCALLTYPE *GetNaturalWidth)(
        nsIDOMHTMLImageElement *This,
        UINT32 *aNaturalWidth);

    nsresult (STDMETHODCALLTYPE *GetNaturalHeight)(
        nsIDOMHTMLImageElement *This,
        UINT32 *aNaturalHeight);

    nsresult (STDMETHODCALLTYPE *GetComplete)(
        nsIDOMHTMLImageElement *This,
        cpp_bool *aComplete);

    nsresult (STDMETHODCALLTYPE *GetName)(
        nsIDOMHTMLImageElement *This,
        nsAString *aName);

    nsresult (STDMETHODCALLTYPE *SetName)(
        nsIDOMHTMLImageElement *This,
        const nsAString *aName);

    nsresult (STDMETHODCALLTYPE *GetAlign)(
        nsIDOMHTMLImageElement *This,
        nsAString *aAlign);

    nsresult (STDMETHODCALLTYPE *SetAlign)(
        nsIDOMHTMLImageElement *This,
        const nsAString *aAlign);

    nsresult (STDMETHODCALLTYPE *GetBorder)(
        nsIDOMHTMLImageElement *This,
        nsAString *aBorder);

    nsresult (STDMETHODCALLTYPE *SetBorder)(
        nsIDOMHTMLImageElement *This,
        const nsAString *aBorder);

    nsresult (STDMETHODCALLTYPE *GetHspace)(
        nsIDOMHTMLImageElement *This,
        LONG *aHspace);

    nsresult (STDMETHODCALLTYPE *SetHspace)(
        nsIDOMHTMLImageElement *This,
        LONG aHspace);

    nsresult (STDMETHODCALLTYPE *GetLongDesc)(
        nsIDOMHTMLImageElement *This,
        nsAString *aLongDesc);

    nsresult (STDMETHODCALLTYPE *SetLongDesc)(
        nsIDOMHTMLImageElement *This,
        const nsAString *aLongDesc);

    nsresult (STDMETHODCALLTYPE *GetVspace)(
        nsIDOMHTMLImageElement *This,
        LONG *aVspace);

    nsresult (STDMETHODCALLTYPE *SetVspace)(
        nsIDOMHTMLImageElement *This,
        LONG aVspace);

    nsresult (STDMETHODCALLTYPE *GetLowsrc)(
        nsIDOMHTMLImageElement *This,
        nsAString *aLowsrc);

    nsresult (STDMETHODCALLTYPE *SetLowsrc)(
        nsIDOMHTMLImageElement *This,
        const nsAString *aLowsrc);

    nsresult (STDMETHODCALLTYPE *GetCurrentSrc)(
        nsIDOMHTMLImageElement *This,
        nsAString *aCurrentSrc);

    nsresult (STDMETHODCALLTYPE *GetX)(
        nsIDOMHTMLImageElement *This,
        LONG *aX);

    nsresult (STDMETHODCALLTYPE *GetY)(
        nsIDOMHTMLImageElement *This,
        LONG *aY);

    END_INTERFACE
} nsIDOMHTMLImageElementVtbl;

interface nsIDOMHTMLImageElement {
    CONST_VTBL nsIDOMHTMLImageElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLImageElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLImageElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLImageElement_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMHTMLImageElement methods ***/
#define nsIDOMHTMLImageElement_GetAlt(This,aAlt) (This)->lpVtbl->GetAlt(This,aAlt)
#define nsIDOMHTMLImageElement_SetAlt(This,aAlt) (This)->lpVtbl->SetAlt(This,aAlt)
#define nsIDOMHTMLImageElement_GetSrc(This,aSrc) (This)->lpVtbl->GetSrc(This,aSrc)
#define nsIDOMHTMLImageElement_SetSrc(This,aSrc) (This)->lpVtbl->SetSrc(This,aSrc)
#define nsIDOMHTMLImageElement_GetSrcset(This,aSrcset) (This)->lpVtbl->GetSrcset(This,aSrcset)
#define nsIDOMHTMLImageElement_SetSrcset(This,aSrcset) (This)->lpVtbl->SetSrcset(This,aSrcset)
#define nsIDOMHTMLImageElement_GetSizes(This,aSizes) (This)->lpVtbl->GetSizes(This,aSizes)
#define nsIDOMHTMLImageElement_SetSizes(This,aSizes) (This)->lpVtbl->SetSizes(This,aSizes)
#define nsIDOMHTMLImageElement_GetUseMap(This,aUseMap) (This)->lpVtbl->GetUseMap(This,aUseMap)
#define nsIDOMHTMLImageElement_SetUseMap(This,aUseMap) (This)->lpVtbl->SetUseMap(This,aUseMap)
#define nsIDOMHTMLImageElement_GetIsMap(This,aIsMap) (This)->lpVtbl->GetIsMap(This,aIsMap)
#define nsIDOMHTMLImageElement_SetIsMap(This,aIsMap) (This)->lpVtbl->SetIsMap(This,aIsMap)
#define nsIDOMHTMLImageElement_GetWidth(This,aWidth) (This)->lpVtbl->GetWidth(This,aWidth)
#define nsIDOMHTMLImageElement_SetWidth(This,aWidth) (This)->lpVtbl->SetWidth(This,aWidth)
#define nsIDOMHTMLImageElement_GetHeight(This,aHeight) (This)->lpVtbl->GetHeight(This,aHeight)
#define nsIDOMHTMLImageElement_SetHeight(This,aHeight) (This)->lpVtbl->SetHeight(This,aHeight)
#define nsIDOMHTMLImageElement_GetNaturalWidth(This,aNaturalWidth) (This)->lpVtbl->GetNaturalWidth(This,aNaturalWidth)
#define nsIDOMHTMLImageElement_GetNaturalHeight(This,aNaturalHeight) (This)->lpVtbl->GetNaturalHeight(This,aNaturalHeight)
#define nsIDOMHTMLImageElement_GetComplete(This,aComplete) (This)->lpVtbl->GetComplete(This,aComplete)
#define nsIDOMHTMLImageElement_GetName(This,aName) (This)->lpVtbl->GetName(This,aName)
#define nsIDOMHTMLImageElement_SetName(This,aName) (This)->lpVtbl->SetName(This,aName)
#define nsIDOMHTMLImageElement_GetAlign(This,aAlign) (This)->lpVtbl->GetAlign(This,aAlign)
#define nsIDOMHTMLImageElement_SetAlign(This,aAlign) (This)->lpVtbl->SetAlign(This,aAlign)
#define nsIDOMHTMLImageElement_GetBorder(This,aBorder) (This)->lpVtbl->GetBorder(This,aBorder)
#define nsIDOMHTMLImageElement_SetBorder(This,aBorder) (This)->lpVtbl->SetBorder(This,aBorder)
#define nsIDOMHTMLImageElement_GetHspace(This,aHspace) (This)->lpVtbl->GetHspace(This,aHspace)
#define nsIDOMHTMLImageElement_SetHspace(This,aHspace) (This)->lpVtbl->SetHspace(This,aHspace)
#define nsIDOMHTMLImageElement_GetLongDesc(This,aLongDesc) (This)->lpVtbl->GetLongDesc(This,aLongDesc)
#define nsIDOMHTMLImageElement_SetLongDesc(This,aLongDesc) (This)->lpVtbl->SetLongDesc(This,aLongDesc)
#define nsIDOMHTMLImageElement_GetVspace(This,aVspace) (This)->lpVtbl->GetVspace(This,aVspace)
#define nsIDOMHTMLImageElement_SetVspace(This,aVspace) (This)->lpVtbl->SetVspace(This,aVspace)
#define nsIDOMHTMLImageElement_GetLowsrc(This,aLowsrc) (This)->lpVtbl->GetLowsrc(This,aLowsrc)
#define nsIDOMHTMLImageElement_SetLowsrc(This,aLowsrc) (This)->lpVtbl->SetLowsrc(This,aLowsrc)
#define nsIDOMHTMLImageElement_GetCurrentSrc(This,aCurrentSrc) (This)->lpVtbl->GetCurrentSrc(This,aCurrentSrc)
#define nsIDOMHTMLImageElement_GetX(This,aX) (This)->lpVtbl->GetX(This,aX)
#define nsIDOMHTMLImageElement_GetY(This,aY) (This)->lpVtbl->GetY(This,aY)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLImageElement_QueryInterface(nsIDOMHTMLImageElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLImageElement_AddRef(nsIDOMHTMLImageElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLImageElement_Release(nsIDOMHTMLImageElement* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMHTMLImageElement methods ***/
static FORCEINLINE nsresult nsIDOMHTMLImageElement_GetAlt(nsIDOMHTMLImageElement* This,nsAString *aAlt) {
    return This->lpVtbl->GetAlt(This,aAlt);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_SetAlt(nsIDOMHTMLImageElement* This,const nsAString *aAlt) {
    return This->lpVtbl->SetAlt(This,aAlt);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_GetSrc(nsIDOMHTMLImageElement* This,nsAString *aSrc) {
    return This->lpVtbl->GetSrc(This,aSrc);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_SetSrc(nsIDOMHTMLImageElement* This,const nsAString *aSrc) {
    return This->lpVtbl->SetSrc(This,aSrc);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_GetSrcset(nsIDOMHTMLImageElement* This,nsAString *aSrcset) {
    return This->lpVtbl->GetSrcset(This,aSrcset);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_SetSrcset(nsIDOMHTMLImageElement* This,const nsAString *aSrcset) {
    return This->lpVtbl->SetSrcset(This,aSrcset);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_GetSizes(nsIDOMHTMLImageElement* This,nsAString *aSizes) {
    return This->lpVtbl->GetSizes(This,aSizes);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_SetSizes(nsIDOMHTMLImageElement* This,const nsAString *aSizes) {
    return This->lpVtbl->SetSizes(This,aSizes);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_GetUseMap(nsIDOMHTMLImageElement* This,nsAString *aUseMap) {
    return This->lpVtbl->GetUseMap(This,aUseMap);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_SetUseMap(nsIDOMHTMLImageElement* This,const nsAString *aUseMap) {
    return This->lpVtbl->SetUseMap(This,aUseMap);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_GetIsMap(nsIDOMHTMLImageElement* This,cpp_bool *aIsMap) {
    return This->lpVtbl->GetIsMap(This,aIsMap);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_SetIsMap(nsIDOMHTMLImageElement* This,cpp_bool aIsMap) {
    return This->lpVtbl->SetIsMap(This,aIsMap);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_GetWidth(nsIDOMHTMLImageElement* This,UINT32 *aWidth) {
    return This->lpVtbl->GetWidth(This,aWidth);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_SetWidth(nsIDOMHTMLImageElement* This,UINT32 aWidth) {
    return This->lpVtbl->SetWidth(This,aWidth);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_GetHeight(nsIDOMHTMLImageElement* This,UINT32 *aHeight) {
    return This->lpVtbl->GetHeight(This,aHeight);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_SetHeight(nsIDOMHTMLImageElement* This,UINT32 aHeight) {
    return This->lpVtbl->SetHeight(This,aHeight);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_GetNaturalWidth(nsIDOMHTMLImageElement* This,UINT32 *aNaturalWidth) {
    return This->lpVtbl->GetNaturalWidth(This,aNaturalWidth);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_GetNaturalHeight(nsIDOMHTMLImageElement* This,UINT32 *aNaturalHeight) {
    return This->lpVtbl->GetNaturalHeight(This,aNaturalHeight);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_GetComplete(nsIDOMHTMLImageElement* This,cpp_bool *aComplete) {
    return This->lpVtbl->GetComplete(This,aComplete);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_GetName(nsIDOMHTMLImageElement* This,nsAString *aName) {
    return This->lpVtbl->GetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_SetName(nsIDOMHTMLImageElement* This,const nsAString *aName) {
    return This->lpVtbl->SetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_GetAlign(nsIDOMHTMLImageElement* This,nsAString *aAlign) {
    return This->lpVtbl->GetAlign(This,aAlign);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_SetAlign(nsIDOMHTMLImageElement* This,const nsAString *aAlign) {
    return This->lpVtbl->SetAlign(This,aAlign);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_GetBorder(nsIDOMHTMLImageElement* This,nsAString *aBorder) {
    return This->lpVtbl->GetBorder(This,aBorder);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_SetBorder(nsIDOMHTMLImageElement* This,const nsAString *aBorder) {
    return This->lpVtbl->SetBorder(This,aBorder);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_GetHspace(nsIDOMHTMLImageElement* This,LONG *aHspace) {
    return This->lpVtbl->GetHspace(This,aHspace);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_SetHspace(nsIDOMHTMLImageElement* This,LONG aHspace) {
    return This->lpVtbl->SetHspace(This,aHspace);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_GetLongDesc(nsIDOMHTMLImageElement* This,nsAString *aLongDesc) {
    return This->lpVtbl->GetLongDesc(This,aLongDesc);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_SetLongDesc(nsIDOMHTMLImageElement* This,const nsAString *aLongDesc) {
    return This->lpVtbl->SetLongDesc(This,aLongDesc);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_GetVspace(nsIDOMHTMLImageElement* This,LONG *aVspace) {
    return This->lpVtbl->GetVspace(This,aVspace);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_SetVspace(nsIDOMHTMLImageElement* This,LONG aVspace) {
    return This->lpVtbl->SetVspace(This,aVspace);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_GetLowsrc(nsIDOMHTMLImageElement* This,nsAString *aLowsrc) {
    return This->lpVtbl->GetLowsrc(This,aLowsrc);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_SetLowsrc(nsIDOMHTMLImageElement* This,const nsAString *aLowsrc) {
    return This->lpVtbl->SetLowsrc(This,aLowsrc);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_GetCurrentSrc(nsIDOMHTMLImageElement* This,nsAString *aCurrentSrc) {
    return This->lpVtbl->GetCurrentSrc(This,aCurrentSrc);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_GetX(nsIDOMHTMLImageElement* This,LONG *aX) {
    return This->lpVtbl->GetX(This,aX);
}
static FORCEINLINE nsresult nsIDOMHTMLImageElement_GetY(nsIDOMHTMLImageElement* This,LONG *aY) {
    return This->lpVtbl->GetY(This,aY);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLImageElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLAnchorElement interface
 */
#ifndef __nsIDOMHTMLAnchorElement_INTERFACE_DEFINED__
#define __nsIDOMHTMLAnchorElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLAnchorElement, 0x339c01c8, 0x2d41, 0x4626, 0xb2,0x31, 0xee,0xc6,0x3f,0x02,0x41,0xb6);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("339c01c8-2d41-4626-b231-eec63f0241b6")
nsIDOMHTMLAnchorElement : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetHref(
        nsAString *aHref) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHref(
        const nsAString *aHref) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTarget(
        nsAString *aTarget) = 0;

    virtual nsresult STDMETHODCALLTYPE SetTarget(
        const nsAString *aTarget) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPing(
        nsAString *aPing) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPing(
        const nsAString *aPing) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDownload(
        nsAString *aPing) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDownload(
        const nsAString *aPing) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRel(
        nsAString *aRel) = 0;

    virtual nsresult STDMETHODCALLTYPE SetRel(
        const nsAString *aRel) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHreflang(
        nsAString *aHreflang) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHreflang(
        const nsAString *aHreflang) = 0;

    virtual nsresult STDMETHODCALLTYPE GetType(
        nsAString *aType) = 0;

    virtual nsresult STDMETHODCALLTYPE SetType(
        const nsAString *aType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetText(
        nsAString *aText) = 0;

    virtual nsresult STDMETHODCALLTYPE SetText(
        const nsAString *aText) = 0;

    virtual nsresult STDMETHODCALLTYPE GetProtocol(
        nsAString *aProtocol) = 0;

    virtual nsresult STDMETHODCALLTYPE SetProtocol(
        const nsAString *aProtocol) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHost(
        nsAString *aHost) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHost(
        const nsAString *aHost) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHostname(
        nsAString *aHostname) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHostname(
        const nsAString *aHostname) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPort(
        nsAString *aPort) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPort(
        const nsAString *aPort) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPathname(
        nsAString *aPathname) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPathname(
        const nsAString *aPathname) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSearch(
        nsAString *aSearch) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSearch(
        const nsAString *aSearch) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHash(
        nsAString *aHash) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHash(
        const nsAString *aHash) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCharset(
        nsAString *aCharset) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCharset(
        const nsAString *aCharset) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCoords(
        nsAString *aCoords) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCoords(
        const nsAString *aCoords) = 0;

    virtual nsresult STDMETHODCALLTYPE GetName(
        nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE SetName(
        const nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRev(
        nsAString *aRev) = 0;

    virtual nsresult STDMETHODCALLTYPE SetRev(
        const nsAString *aRev) = 0;

    virtual nsresult STDMETHODCALLTYPE GetShape(
        nsAString *aShape) = 0;

    virtual nsresult STDMETHODCALLTYPE SetShape(
        const nsAString *aShape) = 0;

    virtual nsresult STDMETHODCALLTYPE ToString(
        nsAString *_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLAnchorElement, 0x339c01c8, 0x2d41, 0x4626, 0xb2,0x31, 0xee,0xc6,0x3f,0x02,0x41,0xb6)
#endif
#else
typedef struct nsIDOMHTMLAnchorElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLAnchorElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLAnchorElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLAnchorElement *This);

    /*** nsIDOMHTMLAnchorElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetHref)(
        nsIDOMHTMLAnchorElement *This,
        nsAString *aHref);

    nsresult (STDMETHODCALLTYPE *SetHref)(
        nsIDOMHTMLAnchorElement *This,
        const nsAString *aHref);

    nsresult (STDMETHODCALLTYPE *GetTarget)(
        nsIDOMHTMLAnchorElement *This,
        nsAString *aTarget);

    nsresult (STDMETHODCALLTYPE *SetTarget)(
        nsIDOMHTMLAnchorElement *This,
        const nsAString *aTarget);

    nsresult (STDMETHODCALLTYPE *GetPing)(
        nsIDOMHTMLAnchorElement *This,
        nsAString *aPing);

    nsresult (STDMETHODCALLTYPE *SetPing)(
        nsIDOMHTMLAnchorElement *This,
        const nsAString *aPing);

    nsresult (STDMETHODCALLTYPE *GetDownload)(
        nsIDOMHTMLAnchorElement *This,
        nsAString *aPing);

    nsresult (STDMETHODCALLTYPE *SetDownload)(
        nsIDOMHTMLAnchorElement *This,
        const nsAString *aPing);

    nsresult (STDMETHODCALLTYPE *GetRel)(
        nsIDOMHTMLAnchorElement *This,
        nsAString *aRel);

    nsresult (STDMETHODCALLTYPE *SetRel)(
        nsIDOMHTMLAnchorElement *This,
        const nsAString *aRel);

    nsresult (STDMETHODCALLTYPE *GetHreflang)(
        nsIDOMHTMLAnchorElement *This,
        nsAString *aHreflang);

    nsresult (STDMETHODCALLTYPE *SetHreflang)(
        nsIDOMHTMLAnchorElement *This,
        const nsAString *aHreflang);

    nsresult (STDMETHODCALLTYPE *GetType)(
        nsIDOMHTMLAnchorElement *This,
        nsAString *aType);

    nsresult (STDMETHODCALLTYPE *SetType)(
        nsIDOMHTMLAnchorElement *This,
        const nsAString *aType);

    nsresult (STDMETHODCALLTYPE *GetText)(
        nsIDOMHTMLAnchorElement *This,
        nsAString *aText);

    nsresult (STDMETHODCALLTYPE *SetText)(
        nsIDOMHTMLAnchorElement *This,
        const nsAString *aText);

    nsresult (STDMETHODCALLTYPE *GetProtocol)(
        nsIDOMHTMLAnchorElement *This,
        nsAString *aProtocol);

    nsresult (STDMETHODCALLTYPE *SetProtocol)(
        nsIDOMHTMLAnchorElement *This,
        const nsAString *aProtocol);

    nsresult (STDMETHODCALLTYPE *GetHost)(
        nsIDOMHTMLAnchorElement *This,
        nsAString *aHost);

    nsresult (STDMETHODCALLTYPE *SetHost)(
        nsIDOMHTMLAnchorElement *This,
        const nsAString *aHost);

    nsresult (STDMETHODCALLTYPE *GetHostname)(
        nsIDOMHTMLAnchorElement *This,
        nsAString *aHostname);

    nsresult (STDMETHODCALLTYPE *SetHostname)(
        nsIDOMHTMLAnchorElement *This,
        const nsAString *aHostname);

    nsresult (STDMETHODCALLTYPE *GetPort)(
        nsIDOMHTMLAnchorElement *This,
        nsAString *aPort);

    nsresult (STDMETHODCALLTYPE *SetPort)(
        nsIDOMHTMLAnchorElement *This,
        const nsAString *aPort);

    nsresult (STDMETHODCALLTYPE *GetPathname)(
        nsIDOMHTMLAnchorElement *This,
        nsAString *aPathname);

    nsresult (STDMETHODCALLTYPE *SetPathname)(
        nsIDOMHTMLAnchorElement *This,
        const nsAString *aPathname);

    nsresult (STDMETHODCALLTYPE *GetSearch)(
        nsIDOMHTMLAnchorElement *This,
        nsAString *aSearch);

    nsresult (STDMETHODCALLTYPE *SetSearch)(
        nsIDOMHTMLAnchorElement *This,
        const nsAString *aSearch);

    nsresult (STDMETHODCALLTYPE *GetHash)(
        nsIDOMHTMLAnchorElement *This,
        nsAString *aHash);

    nsresult (STDMETHODCALLTYPE *SetHash)(
        nsIDOMHTMLAnchorElement *This,
        const nsAString *aHash);

    nsresult (STDMETHODCALLTYPE *GetCharset)(
        nsIDOMHTMLAnchorElement *This,
        nsAString *aCharset);

    nsresult (STDMETHODCALLTYPE *SetCharset)(
        nsIDOMHTMLAnchorElement *This,
        const nsAString *aCharset);

    nsresult (STDMETHODCALLTYPE *GetCoords)(
        nsIDOMHTMLAnchorElement *This,
        nsAString *aCoords);

    nsresult (STDMETHODCALLTYPE *SetCoords)(
        nsIDOMHTMLAnchorElement *This,
        const nsAString *aCoords);

    nsresult (STDMETHODCALLTYPE *GetName)(
        nsIDOMHTMLAnchorElement *This,
        nsAString *aName);

    nsresult (STDMETHODCALLTYPE *SetName)(
        nsIDOMHTMLAnchorElement *This,
        const nsAString *aName);

    nsresult (STDMETHODCALLTYPE *GetRev)(
        nsIDOMHTMLAnchorElement *This,
        nsAString *aRev);

    nsresult (STDMETHODCALLTYPE *SetRev)(
        nsIDOMHTMLAnchorElement *This,
        const nsAString *aRev);

    nsresult (STDMETHODCALLTYPE *GetShape)(
        nsIDOMHTMLAnchorElement *This,
        nsAString *aShape);

    nsresult (STDMETHODCALLTYPE *SetShape)(
        nsIDOMHTMLAnchorElement *This,
        const nsAString *aShape);

    nsresult (STDMETHODCALLTYPE *ToString)(
        nsIDOMHTMLAnchorElement *This,
        nsAString *_retval);

    END_INTERFACE
} nsIDOMHTMLAnchorElementVtbl;

interface nsIDOMHTMLAnchorElement {
    CONST_VTBL nsIDOMHTMLAnchorElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLAnchorElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLAnchorElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLAnchorElement_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMHTMLAnchorElement methods ***/
#define nsIDOMHTMLAnchorElement_GetHref(This,aHref) (This)->lpVtbl->GetHref(This,aHref)
#define nsIDOMHTMLAnchorElement_SetHref(This,aHref) (This)->lpVtbl->SetHref(This,aHref)
#define nsIDOMHTMLAnchorElement_GetTarget(This,aTarget) (This)->lpVtbl->GetTarget(This,aTarget)
#define nsIDOMHTMLAnchorElement_SetTarget(This,aTarget) (This)->lpVtbl->SetTarget(This,aTarget)
#define nsIDOMHTMLAnchorElement_GetPing(This,aPing) (This)->lpVtbl->GetPing(This,aPing)
#define nsIDOMHTMLAnchorElement_SetPing(This,aPing) (This)->lpVtbl->SetPing(This,aPing)
#define nsIDOMHTMLAnchorElement_GetDownload(This,aPing) (This)->lpVtbl->GetDownload(This,aPing)
#define nsIDOMHTMLAnchorElement_SetDownload(This,aPing) (This)->lpVtbl->SetDownload(This,aPing)
#define nsIDOMHTMLAnchorElement_GetRel(This,aRel) (This)->lpVtbl->GetRel(This,aRel)
#define nsIDOMHTMLAnchorElement_SetRel(This,aRel) (This)->lpVtbl->SetRel(This,aRel)
#define nsIDOMHTMLAnchorElement_GetHreflang(This,aHreflang) (This)->lpVtbl->GetHreflang(This,aHreflang)
#define nsIDOMHTMLAnchorElement_SetHreflang(This,aHreflang) (This)->lpVtbl->SetHreflang(This,aHreflang)
#define nsIDOMHTMLAnchorElement_GetType(This,aType) (This)->lpVtbl->GetType(This,aType)
#define nsIDOMHTMLAnchorElement_SetType(This,aType) (This)->lpVtbl->SetType(This,aType)
#define nsIDOMHTMLAnchorElement_GetText(This,aText) (This)->lpVtbl->GetText(This,aText)
#define nsIDOMHTMLAnchorElement_SetText(This,aText) (This)->lpVtbl->SetText(This,aText)
#define nsIDOMHTMLAnchorElement_GetProtocol(This,aProtocol) (This)->lpVtbl->GetProtocol(This,aProtocol)
#define nsIDOMHTMLAnchorElement_SetProtocol(This,aProtocol) (This)->lpVtbl->SetProtocol(This,aProtocol)
#define nsIDOMHTMLAnchorElement_GetHost(This,aHost) (This)->lpVtbl->GetHost(This,aHost)
#define nsIDOMHTMLAnchorElement_SetHost(This,aHost) (This)->lpVtbl->SetHost(This,aHost)
#define nsIDOMHTMLAnchorElement_GetHostname(This,aHostname) (This)->lpVtbl->GetHostname(This,aHostname)
#define nsIDOMHTMLAnchorElement_SetHostname(This,aHostname) (This)->lpVtbl->SetHostname(This,aHostname)
#define nsIDOMHTMLAnchorElement_GetPort(This,aPort) (This)->lpVtbl->GetPort(This,aPort)
#define nsIDOMHTMLAnchorElement_SetPort(This,aPort) (This)->lpVtbl->SetPort(This,aPort)
#define nsIDOMHTMLAnchorElement_GetPathname(This,aPathname) (This)->lpVtbl->GetPathname(This,aPathname)
#define nsIDOMHTMLAnchorElement_SetPathname(This,aPathname) (This)->lpVtbl->SetPathname(This,aPathname)
#define nsIDOMHTMLAnchorElement_GetSearch(This,aSearch) (This)->lpVtbl->GetSearch(This,aSearch)
#define nsIDOMHTMLAnchorElement_SetSearch(This,aSearch) (This)->lpVtbl->SetSearch(This,aSearch)
#define nsIDOMHTMLAnchorElement_GetHash(This,aHash) (This)->lpVtbl->GetHash(This,aHash)
#define nsIDOMHTMLAnchorElement_SetHash(This,aHash) (This)->lpVtbl->SetHash(This,aHash)
#define nsIDOMHTMLAnchorElement_GetCharset(This,aCharset) (This)->lpVtbl->GetCharset(This,aCharset)
#define nsIDOMHTMLAnchorElement_SetCharset(This,aCharset) (This)->lpVtbl->SetCharset(This,aCharset)
#define nsIDOMHTMLAnchorElement_GetCoords(This,aCoords) (This)->lpVtbl->GetCoords(This,aCoords)
#define nsIDOMHTMLAnchorElement_SetCoords(This,aCoords) (This)->lpVtbl->SetCoords(This,aCoords)
#define nsIDOMHTMLAnchorElement_GetName(This,aName) (This)->lpVtbl->GetName(This,aName)
#define nsIDOMHTMLAnchorElement_SetName(This,aName) (This)->lpVtbl->SetName(This,aName)
#define nsIDOMHTMLAnchorElement_GetRev(This,aRev) (This)->lpVtbl->GetRev(This,aRev)
#define nsIDOMHTMLAnchorElement_SetRev(This,aRev) (This)->lpVtbl->SetRev(This,aRev)
#define nsIDOMHTMLAnchorElement_GetShape(This,aShape) (This)->lpVtbl->GetShape(This,aShape)
#define nsIDOMHTMLAnchorElement_SetShape(This,aShape) (This)->lpVtbl->SetShape(This,aShape)
#define nsIDOMHTMLAnchorElement_ToString(This,_retval) (This)->lpVtbl->ToString(This,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_QueryInterface(nsIDOMHTMLAnchorElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLAnchorElement_AddRef(nsIDOMHTMLAnchorElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLAnchorElement_Release(nsIDOMHTMLAnchorElement* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMHTMLAnchorElement methods ***/
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_GetHref(nsIDOMHTMLAnchorElement* This,nsAString *aHref) {
    return This->lpVtbl->GetHref(This,aHref);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_SetHref(nsIDOMHTMLAnchorElement* This,const nsAString *aHref) {
    return This->lpVtbl->SetHref(This,aHref);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_GetTarget(nsIDOMHTMLAnchorElement* This,nsAString *aTarget) {
    return This->lpVtbl->GetTarget(This,aTarget);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_SetTarget(nsIDOMHTMLAnchorElement* This,const nsAString *aTarget) {
    return This->lpVtbl->SetTarget(This,aTarget);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_GetPing(nsIDOMHTMLAnchorElement* This,nsAString *aPing) {
    return This->lpVtbl->GetPing(This,aPing);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_SetPing(nsIDOMHTMLAnchorElement* This,const nsAString *aPing) {
    return This->lpVtbl->SetPing(This,aPing);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_GetDownload(nsIDOMHTMLAnchorElement* This,nsAString *aPing) {
    return This->lpVtbl->GetDownload(This,aPing);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_SetDownload(nsIDOMHTMLAnchorElement* This,const nsAString *aPing) {
    return This->lpVtbl->SetDownload(This,aPing);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_GetRel(nsIDOMHTMLAnchorElement* This,nsAString *aRel) {
    return This->lpVtbl->GetRel(This,aRel);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_SetRel(nsIDOMHTMLAnchorElement* This,const nsAString *aRel) {
    return This->lpVtbl->SetRel(This,aRel);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_GetHreflang(nsIDOMHTMLAnchorElement* This,nsAString *aHreflang) {
    return This->lpVtbl->GetHreflang(This,aHreflang);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_SetHreflang(nsIDOMHTMLAnchorElement* This,const nsAString *aHreflang) {
    return This->lpVtbl->SetHreflang(This,aHreflang);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_GetType(nsIDOMHTMLAnchorElement* This,nsAString *aType) {
    return This->lpVtbl->GetType(This,aType);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_SetType(nsIDOMHTMLAnchorElement* This,const nsAString *aType) {
    return This->lpVtbl->SetType(This,aType);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_GetText(nsIDOMHTMLAnchorElement* This,nsAString *aText) {
    return This->lpVtbl->GetText(This,aText);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_SetText(nsIDOMHTMLAnchorElement* This,const nsAString *aText) {
    return This->lpVtbl->SetText(This,aText);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_GetProtocol(nsIDOMHTMLAnchorElement* This,nsAString *aProtocol) {
    return This->lpVtbl->GetProtocol(This,aProtocol);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_SetProtocol(nsIDOMHTMLAnchorElement* This,const nsAString *aProtocol) {
    return This->lpVtbl->SetProtocol(This,aProtocol);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_GetHost(nsIDOMHTMLAnchorElement* This,nsAString *aHost) {
    return This->lpVtbl->GetHost(This,aHost);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_SetHost(nsIDOMHTMLAnchorElement* This,const nsAString *aHost) {
    return This->lpVtbl->SetHost(This,aHost);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_GetHostname(nsIDOMHTMLAnchorElement* This,nsAString *aHostname) {
    return This->lpVtbl->GetHostname(This,aHostname);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_SetHostname(nsIDOMHTMLAnchorElement* This,const nsAString *aHostname) {
    return This->lpVtbl->SetHostname(This,aHostname);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_GetPort(nsIDOMHTMLAnchorElement* This,nsAString *aPort) {
    return This->lpVtbl->GetPort(This,aPort);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_SetPort(nsIDOMHTMLAnchorElement* This,const nsAString *aPort) {
    return This->lpVtbl->SetPort(This,aPort);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_GetPathname(nsIDOMHTMLAnchorElement* This,nsAString *aPathname) {
    return This->lpVtbl->GetPathname(This,aPathname);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_SetPathname(nsIDOMHTMLAnchorElement* This,const nsAString *aPathname) {
    return This->lpVtbl->SetPathname(This,aPathname);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_GetSearch(nsIDOMHTMLAnchorElement* This,nsAString *aSearch) {
    return This->lpVtbl->GetSearch(This,aSearch);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_SetSearch(nsIDOMHTMLAnchorElement* This,const nsAString *aSearch) {
    return This->lpVtbl->SetSearch(This,aSearch);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_GetHash(nsIDOMHTMLAnchorElement* This,nsAString *aHash) {
    return This->lpVtbl->GetHash(This,aHash);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_SetHash(nsIDOMHTMLAnchorElement* This,const nsAString *aHash) {
    return This->lpVtbl->SetHash(This,aHash);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_GetCharset(nsIDOMHTMLAnchorElement* This,nsAString *aCharset) {
    return This->lpVtbl->GetCharset(This,aCharset);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_SetCharset(nsIDOMHTMLAnchorElement* This,const nsAString *aCharset) {
    return This->lpVtbl->SetCharset(This,aCharset);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_GetCoords(nsIDOMHTMLAnchorElement* This,nsAString *aCoords) {
    return This->lpVtbl->GetCoords(This,aCoords);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_SetCoords(nsIDOMHTMLAnchorElement* This,const nsAString *aCoords) {
    return This->lpVtbl->SetCoords(This,aCoords);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_GetName(nsIDOMHTMLAnchorElement* This,nsAString *aName) {
    return This->lpVtbl->GetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_SetName(nsIDOMHTMLAnchorElement* This,const nsAString *aName) {
    return This->lpVtbl->SetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_GetRev(nsIDOMHTMLAnchorElement* This,nsAString *aRev) {
    return This->lpVtbl->GetRev(This,aRev);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_SetRev(nsIDOMHTMLAnchorElement* This,const nsAString *aRev) {
    return This->lpVtbl->SetRev(This,aRev);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_GetShape(nsIDOMHTMLAnchorElement* This,nsAString *aShape) {
    return This->lpVtbl->GetShape(This,aShape);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_SetShape(nsIDOMHTMLAnchorElement* This,const nsAString *aShape) {
    return This->lpVtbl->SetShape(This,aShape);
}
static FORCEINLINE nsresult nsIDOMHTMLAnchorElement_ToString(nsIDOMHTMLAnchorElement* This,nsAString *_retval) {
    return This->lpVtbl->ToString(This,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLAnchorElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLAreaElement interface
 */
#ifndef __nsIDOMHTMLAreaElement_INTERFACE_DEFINED__
#define __nsIDOMHTMLAreaElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLAreaElement, 0x40c78026, 0x36dc, 0x40ca, 0x92,0x21, 0xde,0x73,0x26,0x7e,0x9e,0x99);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("40c78026-36dc-40ca-9221-de73267e9e99")
nsIDOMHTMLAreaElement : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetAlt(
        const nsAString *aAlt) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAlt(
        nsAString *aAlt) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCoords(
        const nsAString *aCoords) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCoords(
        nsAString *aCoords) = 0;

    virtual nsresult STDMETHODCALLTYPE GetShape(
        const nsAString *aShape) = 0;

    virtual nsresult STDMETHODCALLTYPE SetShape(
        nsAString *aShape) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHref(
        const nsAString *aHref) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHref(
        nsAString *aHref) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTarget(
        const nsAString *aTarget) = 0;

    virtual nsresult STDMETHODCALLTYPE SetTarget(
        nsAString *aTarget) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPing(
        const nsAString *aPing) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPing(
        nsAString *aPing) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDownload(
        const nsAString *aDownload) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDownload(
        nsAString *aDownload) = 0;

    virtual nsresult STDMETHODCALLTYPE GetProtocol(
        const nsAString *aProtocol) = 0;

    virtual nsresult STDMETHODCALLTYPE SetProtocol(
        nsAString *aProtocol) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHost(
        const nsAString *aHost) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHost(
        nsAString *aHost) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPort(
        const nsAString *aPort) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPort(
        nsAString *aPort) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPathname(
        const nsAString *aPathname) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPathname(
        nsAString *aPathname) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSearch(
        const nsAString *aSearch) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSearch(
        nsAString *aSearch) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHash(
        const nsAString *aHash) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHash(
        nsAString *aHash) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNoHref(
        const nsAString *aNoHref) = 0;

    virtual nsresult STDMETHODCALLTYPE SetNoHref(
        nsAString *aNoHref) = 0;

    virtual nsresult STDMETHODCALLTYPE ToString(
        nsAString *_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLAreaElement, 0x40c78026, 0x36dc, 0x40ca, 0x92,0x21, 0xde,0x73,0x26,0x7e,0x9e,0x99)
#endif
#else
typedef struct nsIDOMHTMLAreaElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLAreaElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLAreaElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLAreaElement *This);

    /*** nsIDOMHTMLAreaElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetAlt)(
        nsIDOMHTMLAreaElement *This,
        const nsAString *aAlt);

    nsresult (STDMETHODCALLTYPE *SetAlt)(
        nsIDOMHTMLAreaElement *This,
        nsAString *aAlt);

    nsresult (STDMETHODCALLTYPE *GetCoords)(
        nsIDOMHTMLAreaElement *This,
        const nsAString *aCoords);

    nsresult (STDMETHODCALLTYPE *SetCoords)(
        nsIDOMHTMLAreaElement *This,
        nsAString *aCoords);

    nsresult (STDMETHODCALLTYPE *GetShape)(
        nsIDOMHTMLAreaElement *This,
        const nsAString *aShape);

    nsresult (STDMETHODCALLTYPE *SetShape)(
        nsIDOMHTMLAreaElement *This,
        nsAString *aShape);

    nsresult (STDMETHODCALLTYPE *GetHref)(
        nsIDOMHTMLAreaElement *This,
        const nsAString *aHref);

    nsresult (STDMETHODCALLTYPE *SetHref)(
        nsIDOMHTMLAreaElement *This,
        nsAString *aHref);

    nsresult (STDMETHODCALLTYPE *GetTarget)(
        nsIDOMHTMLAreaElement *This,
        const nsAString *aTarget);

    nsresult (STDMETHODCALLTYPE *SetTarget)(
        nsIDOMHTMLAreaElement *This,
        nsAString *aTarget);

    nsresult (STDMETHODCALLTYPE *GetPing)(
        nsIDOMHTMLAreaElement *This,
        const nsAString *aPing);

    nsresult (STDMETHODCALLTYPE *SetPing)(
        nsIDOMHTMLAreaElement *This,
        nsAString *aPing);

    nsresult (STDMETHODCALLTYPE *GetDownload)(
        nsIDOMHTMLAreaElement *This,
        const nsAString *aDownload);

    nsresult (STDMETHODCALLTYPE *SetDownload)(
        nsIDOMHTMLAreaElement *This,
        nsAString *aDownload);

    nsresult (STDMETHODCALLTYPE *GetProtocol)(
        nsIDOMHTMLAreaElement *This,
        const nsAString *aProtocol);

    nsresult (STDMETHODCALLTYPE *SetProtocol)(
        nsIDOMHTMLAreaElement *This,
        nsAString *aProtocol);

    nsresult (STDMETHODCALLTYPE *GetHost)(
        nsIDOMHTMLAreaElement *This,
        const nsAString *aHost);

    nsresult (STDMETHODCALLTYPE *SetHost)(
        nsIDOMHTMLAreaElement *This,
        nsAString *aHost);

    nsresult (STDMETHODCALLTYPE *GetPort)(
        nsIDOMHTMLAreaElement *This,
        const nsAString *aPort);

    nsresult (STDMETHODCALLTYPE *SetPort)(
        nsIDOMHTMLAreaElement *This,
        nsAString *aPort);

    nsresult (STDMETHODCALLTYPE *GetPathname)(
        nsIDOMHTMLAreaElement *This,
        const nsAString *aPathname);

    nsresult (STDMETHODCALLTYPE *SetPathname)(
        nsIDOMHTMLAreaElement *This,
        nsAString *aPathname);

    nsresult (STDMETHODCALLTYPE *GetSearch)(
        nsIDOMHTMLAreaElement *This,
        const nsAString *aSearch);

    nsresult (STDMETHODCALLTYPE *SetSearch)(
        nsIDOMHTMLAreaElement *This,
        nsAString *aSearch);

    nsresult (STDMETHODCALLTYPE *GetHash)(
        nsIDOMHTMLAreaElement *This,
        const nsAString *aHash);

    nsresult (STDMETHODCALLTYPE *SetHash)(
        nsIDOMHTMLAreaElement *This,
        nsAString *aHash);

    nsresult (STDMETHODCALLTYPE *GetNoHref)(
        nsIDOMHTMLAreaElement *This,
        const nsAString *aNoHref);

    nsresult (STDMETHODCALLTYPE *SetNoHref)(
        nsIDOMHTMLAreaElement *This,
        nsAString *aNoHref);

    nsresult (STDMETHODCALLTYPE *ToString)(
        nsIDOMHTMLAreaElement *This,
        nsAString *_retval);

    END_INTERFACE
} nsIDOMHTMLAreaElementVtbl;

interface nsIDOMHTMLAreaElement {
    CONST_VTBL nsIDOMHTMLAreaElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLAreaElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLAreaElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLAreaElement_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMHTMLAreaElement methods ***/
#define nsIDOMHTMLAreaElement_GetAlt(This,aAlt) (This)->lpVtbl->GetAlt(This,aAlt)
#define nsIDOMHTMLAreaElement_SetAlt(This,aAlt) (This)->lpVtbl->SetAlt(This,aAlt)
#define nsIDOMHTMLAreaElement_GetCoords(This,aCoords) (This)->lpVtbl->GetCoords(This,aCoords)
#define nsIDOMHTMLAreaElement_SetCoords(This,aCoords) (This)->lpVtbl->SetCoords(This,aCoords)
#define nsIDOMHTMLAreaElement_GetShape(This,aShape) (This)->lpVtbl->GetShape(This,aShape)
#define nsIDOMHTMLAreaElement_SetShape(This,aShape) (This)->lpVtbl->SetShape(This,aShape)
#define nsIDOMHTMLAreaElement_GetHref(This,aHref) (This)->lpVtbl->GetHref(This,aHref)
#define nsIDOMHTMLAreaElement_SetHref(This,aHref) (This)->lpVtbl->SetHref(This,aHref)
#define nsIDOMHTMLAreaElement_GetTarget(This,aTarget) (This)->lpVtbl->GetTarget(This,aTarget)
#define nsIDOMHTMLAreaElement_SetTarget(This,aTarget) (This)->lpVtbl->SetTarget(This,aTarget)
#define nsIDOMHTMLAreaElement_GetPing(This,aPing) (This)->lpVtbl->GetPing(This,aPing)
#define nsIDOMHTMLAreaElement_SetPing(This,aPing) (This)->lpVtbl->SetPing(This,aPing)
#define nsIDOMHTMLAreaElement_GetDownload(This,aDownload) (This)->lpVtbl->GetDownload(This,aDownload)
#define nsIDOMHTMLAreaElement_SetDownload(This,aDownload) (This)->lpVtbl->SetDownload(This,aDownload)
#define nsIDOMHTMLAreaElement_GetProtocol(This,aProtocol) (This)->lpVtbl->GetProtocol(This,aProtocol)
#define nsIDOMHTMLAreaElement_SetProtocol(This,aProtocol) (This)->lpVtbl->SetProtocol(This,aProtocol)
#define nsIDOMHTMLAreaElement_GetHost(This,aHost) (This)->lpVtbl->GetHost(This,aHost)
#define nsIDOMHTMLAreaElement_SetHost(This,aHost) (This)->lpVtbl->SetHost(This,aHost)
#define nsIDOMHTMLAreaElement_GetPort(This,aPort) (This)->lpVtbl->GetPort(This,aPort)
#define nsIDOMHTMLAreaElement_SetPort(This,aPort) (This)->lpVtbl->SetPort(This,aPort)
#define nsIDOMHTMLAreaElement_GetPathname(This,aPathname) (This)->lpVtbl->GetPathname(This,aPathname)
#define nsIDOMHTMLAreaElement_SetPathname(This,aPathname) (This)->lpVtbl->SetPathname(This,aPathname)
#define nsIDOMHTMLAreaElement_GetSearch(This,aSearch) (This)->lpVtbl->GetSearch(This,aSearch)
#define nsIDOMHTMLAreaElement_SetSearch(This,aSearch) (This)->lpVtbl->SetSearch(This,aSearch)
#define nsIDOMHTMLAreaElement_GetHash(This,aHash) (This)->lpVtbl->GetHash(This,aHash)
#define nsIDOMHTMLAreaElement_SetHash(This,aHash) (This)->lpVtbl->SetHash(This,aHash)
#define nsIDOMHTMLAreaElement_GetNoHref(This,aNoHref) (This)->lpVtbl->GetNoHref(This,aNoHref)
#define nsIDOMHTMLAreaElement_SetNoHref(This,aNoHref) (This)->lpVtbl->SetNoHref(This,aNoHref)
#define nsIDOMHTMLAreaElement_ToString(This,_retval) (This)->lpVtbl->ToString(This,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_QueryInterface(nsIDOMHTMLAreaElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLAreaElement_AddRef(nsIDOMHTMLAreaElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLAreaElement_Release(nsIDOMHTMLAreaElement* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMHTMLAreaElement methods ***/
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_GetAlt(nsIDOMHTMLAreaElement* This,const nsAString *aAlt) {
    return This->lpVtbl->GetAlt(This,aAlt);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_SetAlt(nsIDOMHTMLAreaElement* This,nsAString *aAlt) {
    return This->lpVtbl->SetAlt(This,aAlt);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_GetCoords(nsIDOMHTMLAreaElement* This,const nsAString *aCoords) {
    return This->lpVtbl->GetCoords(This,aCoords);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_SetCoords(nsIDOMHTMLAreaElement* This,nsAString *aCoords) {
    return This->lpVtbl->SetCoords(This,aCoords);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_GetShape(nsIDOMHTMLAreaElement* This,const nsAString *aShape) {
    return This->lpVtbl->GetShape(This,aShape);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_SetShape(nsIDOMHTMLAreaElement* This,nsAString *aShape) {
    return This->lpVtbl->SetShape(This,aShape);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_GetHref(nsIDOMHTMLAreaElement* This,const nsAString *aHref) {
    return This->lpVtbl->GetHref(This,aHref);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_SetHref(nsIDOMHTMLAreaElement* This,nsAString *aHref) {
    return This->lpVtbl->SetHref(This,aHref);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_GetTarget(nsIDOMHTMLAreaElement* This,const nsAString *aTarget) {
    return This->lpVtbl->GetTarget(This,aTarget);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_SetTarget(nsIDOMHTMLAreaElement* This,nsAString *aTarget) {
    return This->lpVtbl->SetTarget(This,aTarget);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_GetPing(nsIDOMHTMLAreaElement* This,const nsAString *aPing) {
    return This->lpVtbl->GetPing(This,aPing);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_SetPing(nsIDOMHTMLAreaElement* This,nsAString *aPing) {
    return This->lpVtbl->SetPing(This,aPing);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_GetDownload(nsIDOMHTMLAreaElement* This,const nsAString *aDownload) {
    return This->lpVtbl->GetDownload(This,aDownload);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_SetDownload(nsIDOMHTMLAreaElement* This,nsAString *aDownload) {
    return This->lpVtbl->SetDownload(This,aDownload);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_GetProtocol(nsIDOMHTMLAreaElement* This,const nsAString *aProtocol) {
    return This->lpVtbl->GetProtocol(This,aProtocol);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_SetProtocol(nsIDOMHTMLAreaElement* This,nsAString *aProtocol) {
    return This->lpVtbl->SetProtocol(This,aProtocol);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_GetHost(nsIDOMHTMLAreaElement* This,const nsAString *aHost) {
    return This->lpVtbl->GetHost(This,aHost);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_SetHost(nsIDOMHTMLAreaElement* This,nsAString *aHost) {
    return This->lpVtbl->SetHost(This,aHost);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_GetPort(nsIDOMHTMLAreaElement* This,const nsAString *aPort) {
    return This->lpVtbl->GetPort(This,aPort);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_SetPort(nsIDOMHTMLAreaElement* This,nsAString *aPort) {
    return This->lpVtbl->SetPort(This,aPort);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_GetPathname(nsIDOMHTMLAreaElement* This,const nsAString *aPathname) {
    return This->lpVtbl->GetPathname(This,aPathname);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_SetPathname(nsIDOMHTMLAreaElement* This,nsAString *aPathname) {
    return This->lpVtbl->SetPathname(This,aPathname);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_GetSearch(nsIDOMHTMLAreaElement* This,const nsAString *aSearch) {
    return This->lpVtbl->GetSearch(This,aSearch);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_SetSearch(nsIDOMHTMLAreaElement* This,nsAString *aSearch) {
    return This->lpVtbl->SetSearch(This,aSearch);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_GetHash(nsIDOMHTMLAreaElement* This,const nsAString *aHash) {
    return This->lpVtbl->GetHash(This,aHash);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_SetHash(nsIDOMHTMLAreaElement* This,nsAString *aHash) {
    return This->lpVtbl->SetHash(This,aHash);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_GetNoHref(nsIDOMHTMLAreaElement* This,const nsAString *aNoHref) {
    return This->lpVtbl->GetNoHref(This,aNoHref);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_SetNoHref(nsIDOMHTMLAreaElement* This,nsAString *aNoHref) {
    return This->lpVtbl->SetNoHref(This,aNoHref);
}
static FORCEINLINE nsresult nsIDOMHTMLAreaElement_ToString(nsIDOMHTMLAreaElement* This,nsAString *_retval) {
    return This->lpVtbl->ToString(This,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLAreaElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLLinkElement interface
 */
#ifndef __nsIDOMHTMLLinkElement_INTERFACE_DEFINED__
#define __nsIDOMHTMLLinkElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLLinkElement, 0xee50b7ab, 0x0015, 0x4fbe, 0x89,0xe0, 0xe3,0xfe,0xac,0xd4,0xff,0xde);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ee50b7ab-0015-4fbe-89e0-e3feacd4ffde")
nsIDOMHTMLLinkElement : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetDisabled(
        cpp_bool *aDisabled) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDisabled(
        cpp_bool aDisabled) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCharset(
        nsAString *aCharset) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCharset(
        const nsAString *aCharset) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHref(
        nsAString *aHref) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHref(
        const nsAString *aHref) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHreflang(
        nsAString *aHreflang) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHreflang(
        const nsAString *aHreflang) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMedia(
        nsAString *aMedia) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMedia(
        const nsAString *aMedia) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRel(
        nsAString *aRel) = 0;

    virtual nsresult STDMETHODCALLTYPE SetRel(
        const nsAString *aRel) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRev(
        nsAString *aRev) = 0;

    virtual nsresult STDMETHODCALLTYPE SetRev(
        const nsAString *aRev) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTarget(
        nsAString *aTarget) = 0;

    virtual nsresult STDMETHODCALLTYPE SetTarget(
        const nsAString *aTarget) = 0;

    virtual nsresult STDMETHODCALLTYPE GetType(
        nsAString *aType) = 0;

    virtual nsresult STDMETHODCALLTYPE SetType(
        const nsAString *aType) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLLinkElement, 0xee50b7ab, 0x0015, 0x4fbe, 0x89,0xe0, 0xe3,0xfe,0xac,0xd4,0xff,0xde)
#endif
#else
typedef struct nsIDOMHTMLLinkElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLLinkElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLLinkElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLLinkElement *This);

    /*** nsIDOMHTMLLinkElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetDisabled)(
        nsIDOMHTMLLinkElement *This,
        cpp_bool *aDisabled);

    nsresult (STDMETHODCALLTYPE *SetDisabled)(
        nsIDOMHTMLLinkElement *This,
        cpp_bool aDisabled);

    nsresult (STDMETHODCALLTYPE *GetCharset)(
        nsIDOMHTMLLinkElement *This,
        nsAString *aCharset);

    nsresult (STDMETHODCALLTYPE *SetCharset)(
        nsIDOMHTMLLinkElement *This,
        const nsAString *aCharset);

    nsresult (STDMETHODCALLTYPE *GetHref)(
        nsIDOMHTMLLinkElement *This,
        nsAString *aHref);

    nsresult (STDMETHODCALLTYPE *SetHref)(
        nsIDOMHTMLLinkElement *This,
        const nsAString *aHref);

    nsresult (STDMETHODCALLTYPE *GetHreflang)(
        nsIDOMHTMLLinkElement *This,
        nsAString *aHreflang);

    nsresult (STDMETHODCALLTYPE *SetHreflang)(
        nsIDOMHTMLLinkElement *This,
        const nsAString *aHreflang);

    nsresult (STDMETHODCALLTYPE *GetMedia)(
        nsIDOMHTMLLinkElement *This,
        nsAString *aMedia);

    nsresult (STDMETHODCALLTYPE *SetMedia)(
        nsIDOMHTMLLinkElement *This,
        const nsAString *aMedia);

    nsresult (STDMETHODCALLTYPE *GetRel)(
        nsIDOMHTMLLinkElement *This,
        nsAString *aRel);

    nsresult (STDMETHODCALLTYPE *SetRel)(
        nsIDOMHTMLLinkElement *This,
        const nsAString *aRel);

    nsresult (STDMETHODCALLTYPE *GetRev)(
        nsIDOMHTMLLinkElement *This,
        nsAString *aRev);

    nsresult (STDMETHODCALLTYPE *SetRev)(
        nsIDOMHTMLLinkElement *This,
        const nsAString *aRev);

    nsresult (STDMETHODCALLTYPE *GetTarget)(
        nsIDOMHTMLLinkElement *This,
        nsAString *aTarget);

    nsresult (STDMETHODCALLTYPE *SetTarget)(
        nsIDOMHTMLLinkElement *This,
        const nsAString *aTarget);

    nsresult (STDMETHODCALLTYPE *GetType)(
        nsIDOMHTMLLinkElement *This,
        nsAString *aType);

    nsresult (STDMETHODCALLTYPE *SetType)(
        nsIDOMHTMLLinkElement *This,
        const nsAString *aType);

    END_INTERFACE
} nsIDOMHTMLLinkElementVtbl;

interface nsIDOMHTMLLinkElement {
    CONST_VTBL nsIDOMHTMLLinkElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLLinkElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLLinkElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLLinkElement_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMHTMLLinkElement methods ***/
#define nsIDOMHTMLLinkElement_GetDisabled(This,aDisabled) (This)->lpVtbl->GetDisabled(This,aDisabled)
#define nsIDOMHTMLLinkElement_SetDisabled(This,aDisabled) (This)->lpVtbl->SetDisabled(This,aDisabled)
#define nsIDOMHTMLLinkElement_GetCharset(This,aCharset) (This)->lpVtbl->GetCharset(This,aCharset)
#define nsIDOMHTMLLinkElement_SetCharset(This,aCharset) (This)->lpVtbl->SetCharset(This,aCharset)
#define nsIDOMHTMLLinkElement_GetHref(This,aHref) (This)->lpVtbl->GetHref(This,aHref)
#define nsIDOMHTMLLinkElement_SetHref(This,aHref) (This)->lpVtbl->SetHref(This,aHref)
#define nsIDOMHTMLLinkElement_GetHreflang(This,aHreflang) (This)->lpVtbl->GetHreflang(This,aHreflang)
#define nsIDOMHTMLLinkElement_SetHreflang(This,aHreflang) (This)->lpVtbl->SetHreflang(This,aHreflang)
#define nsIDOMHTMLLinkElement_GetMedia(This,aMedia) (This)->lpVtbl->GetMedia(This,aMedia)
#define nsIDOMHTMLLinkElement_SetMedia(This,aMedia) (This)->lpVtbl->SetMedia(This,aMedia)
#define nsIDOMHTMLLinkElement_GetRel(This,aRel) (This)->lpVtbl->GetRel(This,aRel)
#define nsIDOMHTMLLinkElement_SetRel(This,aRel) (This)->lpVtbl->SetRel(This,aRel)
#define nsIDOMHTMLLinkElement_GetRev(This,aRev) (This)->lpVtbl->GetRev(This,aRev)
#define nsIDOMHTMLLinkElement_SetRev(This,aRev) (This)->lpVtbl->SetRev(This,aRev)
#define nsIDOMHTMLLinkElement_GetTarget(This,aTarget) (This)->lpVtbl->GetTarget(This,aTarget)
#define nsIDOMHTMLLinkElement_SetTarget(This,aTarget) (This)->lpVtbl->SetTarget(This,aTarget)
#define nsIDOMHTMLLinkElement_GetType(This,aType) (This)->lpVtbl->GetType(This,aType)
#define nsIDOMHTMLLinkElement_SetType(This,aType) (This)->lpVtbl->SetType(This,aType)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLLinkElement_QueryInterface(nsIDOMHTMLLinkElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLLinkElement_AddRef(nsIDOMHTMLLinkElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLLinkElement_Release(nsIDOMHTMLLinkElement* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMHTMLLinkElement methods ***/
static FORCEINLINE nsresult nsIDOMHTMLLinkElement_GetDisabled(nsIDOMHTMLLinkElement* This,cpp_bool *aDisabled) {
    return This->lpVtbl->GetDisabled(This,aDisabled);
}
static FORCEINLINE nsresult nsIDOMHTMLLinkElement_SetDisabled(nsIDOMHTMLLinkElement* This,cpp_bool aDisabled) {
    return This->lpVtbl->SetDisabled(This,aDisabled);
}
static FORCEINLINE nsresult nsIDOMHTMLLinkElement_GetCharset(nsIDOMHTMLLinkElement* This,nsAString *aCharset) {
    return This->lpVtbl->GetCharset(This,aCharset);
}
static FORCEINLINE nsresult nsIDOMHTMLLinkElement_SetCharset(nsIDOMHTMLLinkElement* This,const nsAString *aCharset) {
    return This->lpVtbl->SetCharset(This,aCharset);
}
static FORCEINLINE nsresult nsIDOMHTMLLinkElement_GetHref(nsIDOMHTMLLinkElement* This,nsAString *aHref) {
    return This->lpVtbl->GetHref(This,aHref);
}
static FORCEINLINE nsresult nsIDOMHTMLLinkElement_SetHref(nsIDOMHTMLLinkElement* This,const nsAString *aHref) {
    return This->lpVtbl->SetHref(This,aHref);
}
static FORCEINLINE nsresult nsIDOMHTMLLinkElement_GetHreflang(nsIDOMHTMLLinkElement* This,nsAString *aHreflang) {
    return This->lpVtbl->GetHreflang(This,aHreflang);
}
static FORCEINLINE nsresult nsIDOMHTMLLinkElement_SetHreflang(nsIDOMHTMLLinkElement* This,const nsAString *aHreflang) {
    return This->lpVtbl->SetHreflang(This,aHreflang);
}
static FORCEINLINE nsresult nsIDOMHTMLLinkElement_GetMedia(nsIDOMHTMLLinkElement* This,nsAString *aMedia) {
    return This->lpVtbl->GetMedia(This,aMedia);
}
static FORCEINLINE nsresult nsIDOMHTMLLinkElement_SetMedia(nsIDOMHTMLLinkElement* This,const nsAString *aMedia) {
    return This->lpVtbl->SetMedia(This,aMedia);
}
static FORCEINLINE nsresult nsIDOMHTMLLinkElement_GetRel(nsIDOMHTMLLinkElement* This,nsAString *aRel) {
    return This->lpVtbl->GetRel(This,aRel);
}
static FORCEINLINE nsresult nsIDOMHTMLLinkElement_SetRel(nsIDOMHTMLLinkElement* This,const nsAString *aRel) {
    return This->lpVtbl->SetRel(This,aRel);
}
static FORCEINLINE nsresult nsIDOMHTMLLinkElement_GetRev(nsIDOMHTMLLinkElement* This,nsAString *aRev) {
    return This->lpVtbl->GetRev(This,aRev);
}
static FORCEINLINE nsresult nsIDOMHTMLLinkElement_SetRev(nsIDOMHTMLLinkElement* This,const nsAString *aRev) {
    return This->lpVtbl->SetRev(This,aRev);
}
static FORCEINLINE nsresult nsIDOMHTMLLinkElement_GetTarget(nsIDOMHTMLLinkElement* This,nsAString *aTarget) {
    return This->lpVtbl->GetTarget(This,aTarget);
}
static FORCEINLINE nsresult nsIDOMHTMLLinkElement_SetTarget(nsIDOMHTMLLinkElement* This,const nsAString *aTarget) {
    return This->lpVtbl->SetTarget(This,aTarget);
}
static FORCEINLINE nsresult nsIDOMHTMLLinkElement_GetType(nsIDOMHTMLLinkElement* This,nsAString *aType) {
    return This->lpVtbl->GetType(This,aType);
}
static FORCEINLINE nsresult nsIDOMHTMLLinkElement_SetType(nsIDOMHTMLLinkElement* This,const nsAString *aType) {
    return This->lpVtbl->SetType(This,aType);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLLinkElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLTableElement interface
 */
#ifndef __nsIDOMHTMLTableElement_INTERFACE_DEFINED__
#define __nsIDOMHTMLTableElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLTableElement, 0x135a30ee, 0x0374, 0x4ee7, 0x9d,0x36, 0x91,0x73,0x6b,0xff,0x5f,0xb1);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("135a30ee-0374-4ee7-9d36-91736bff5fb1")
nsIDOMHTMLTableElement : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetCaption(
        nsIDOMHTMLElement **aCaption) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCaption(
        nsIDOMHTMLElement *aCaption) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTHead(
        nsIDOMHTMLElement **aTHead) = 0;

    virtual nsresult STDMETHODCALLTYPE SetTHead(
        nsIDOMHTMLElement *aTHead) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTFoot(
        nsIDOMHTMLElement **aTFoot) = 0;

    virtual nsresult STDMETHODCALLTYPE SetTFoot(
        nsIDOMHTMLElement *aTFoot) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRows(
        nsIDOMHTMLCollection **aRows) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTBodies(
        nsIDOMHTMLCollection **aTBodies) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAlign(
        nsAString *aAlign) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAlign(
        const nsAString *aAlign) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBgColor(
        nsAString *aBgColor) = 0;

    virtual nsresult STDMETHODCALLTYPE SetBgColor(
        const nsAString *aBgColor) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBorder(
        nsAString *aBorder) = 0;

    virtual nsresult STDMETHODCALLTYPE SetBorder(
        const nsAString *aBorder) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCellPadding(
        nsAString *aCellPadding) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCellPadding(
        const nsAString *aCellPadding) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCellSpacing(
        nsAString *aCellSpacing) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCellSpacing(
        const nsAString *aCellSpacing) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFrame(
        nsAString *aFrame) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFrame(
        const nsAString *aFrame) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRules(
        nsAString *aRules) = 0;

    virtual nsresult STDMETHODCALLTYPE SetRules(
        const nsAString *aRules) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSummary(
        nsAString *aSummary) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSummary(
        const nsAString *aSummary) = 0;

    virtual nsresult STDMETHODCALLTYPE GetWidth(
        nsAString *aWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE SetWidth(
        const nsAString *aWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateTHead(
        nsIDOMHTMLElement **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE xpidlDeleteTHead(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateTFoot(
        nsIDOMHTMLElement **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE xpidlDeleteTFoot(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateCaption(
        nsIDOMHTMLElement **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE xpidlDeleteCaption(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE InsertRow(
        LONG index,
        nsIDOMHTMLElement **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE DeleteRow(
        LONG index) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLTableElement, 0x135a30ee, 0x0374, 0x4ee7, 0x9d,0x36, 0x91,0x73,0x6b,0xff,0x5f,0xb1)
#endif
#else
typedef struct nsIDOMHTMLTableElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLTableElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLTableElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLTableElement *This);

    /*** nsIDOMHTMLTableElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetCaption)(
        nsIDOMHTMLTableElement *This,
        nsIDOMHTMLElement **aCaption);

    nsresult (STDMETHODCALLTYPE *SetCaption)(
        nsIDOMHTMLTableElement *This,
        nsIDOMHTMLElement *aCaption);

    nsresult (STDMETHODCALLTYPE *GetTHead)(
        nsIDOMHTMLTableElement *This,
        nsIDOMHTMLElement **aTHead);

    nsresult (STDMETHODCALLTYPE *SetTHead)(
        nsIDOMHTMLTableElement *This,
        nsIDOMHTMLElement *aTHead);

    nsresult (STDMETHODCALLTYPE *GetTFoot)(
        nsIDOMHTMLTableElement *This,
        nsIDOMHTMLElement **aTFoot);

    nsresult (STDMETHODCALLTYPE *SetTFoot)(
        nsIDOMHTMLTableElement *This,
        nsIDOMHTMLElement *aTFoot);

    nsresult (STDMETHODCALLTYPE *GetRows)(
        nsIDOMHTMLTableElement *This,
        nsIDOMHTMLCollection **aRows);

    nsresult (STDMETHODCALLTYPE *GetTBodies)(
        nsIDOMHTMLTableElement *This,
        nsIDOMHTMLCollection **aTBodies);

    nsresult (STDMETHODCALLTYPE *GetAlign)(
        nsIDOMHTMLTableElement *This,
        nsAString *aAlign);

    nsresult (STDMETHODCALLTYPE *SetAlign)(
        nsIDOMHTMLTableElement *This,
        const nsAString *aAlign);

    nsresult (STDMETHODCALLTYPE *GetBgColor)(
        nsIDOMHTMLTableElement *This,
        nsAString *aBgColor);

    nsresult (STDMETHODCALLTYPE *SetBgColor)(
        nsIDOMHTMLTableElement *This,
        const nsAString *aBgColor);

    nsresult (STDMETHODCALLTYPE *GetBorder)(
        nsIDOMHTMLTableElement *This,
        nsAString *aBorder);

    nsresult (STDMETHODCALLTYPE *SetBorder)(
        nsIDOMHTMLTableElement *This,
        const nsAString *aBorder);

    nsresult (STDMETHODCALLTYPE *GetCellPadding)(
        nsIDOMHTMLTableElement *This,
        nsAString *aCellPadding);

    nsresult (STDMETHODCALLTYPE *SetCellPadding)(
        nsIDOMHTMLTableElement *This,
        const nsAString *aCellPadding);

    nsresult (STDMETHODCALLTYPE *GetCellSpacing)(
        nsIDOMHTMLTableElement *This,
        nsAString *aCellSpacing);

    nsresult (STDMETHODCALLTYPE *SetCellSpacing)(
        nsIDOMHTMLTableElement *This,
        const nsAString *aCellSpacing);

    nsresult (STDMETHODCALLTYPE *GetFrame)(
        nsIDOMHTMLTableElement *This,
        nsAString *aFrame);

    nsresult (STDMETHODCALLTYPE *SetFrame)(
        nsIDOMHTMLTableElement *This,
        const nsAString *aFrame);

    nsresult (STDMETHODCALLTYPE *GetRules)(
        nsIDOMHTMLTableElement *This,
        nsAString *aRules);

    nsresult (STDMETHODCALLTYPE *SetRules)(
        nsIDOMHTMLTableElement *This,
        const nsAString *aRules);

    nsresult (STDMETHODCALLTYPE *GetSummary)(
        nsIDOMHTMLTableElement *This,
        nsAString *aSummary);

    nsresult (STDMETHODCALLTYPE *SetSummary)(
        nsIDOMHTMLTableElement *This,
        const nsAString *aSummary);

    nsresult (STDMETHODCALLTYPE *GetWidth)(
        nsIDOMHTMLTableElement *This,
        nsAString *aWidth);

    nsresult (STDMETHODCALLTYPE *SetWidth)(
        nsIDOMHTMLTableElement *This,
        const nsAString *aWidth);

    nsresult (STDMETHODCALLTYPE *CreateTHead)(
        nsIDOMHTMLTableElement *This,
        nsIDOMHTMLElement **_retval);

    nsresult (STDMETHODCALLTYPE *xpidlDeleteTHead)(
        nsIDOMHTMLTableElement *This);

    nsresult (STDMETHODCALLTYPE *CreateTFoot)(
        nsIDOMHTMLTableElement *This,
        nsIDOMHTMLElement **_retval);

    nsresult (STDMETHODCALLTYPE *xpidlDeleteTFoot)(
        nsIDOMHTMLTableElement *This);

    nsresult (STDMETHODCALLTYPE *CreateCaption)(
        nsIDOMHTMLTableElement *This,
        nsIDOMHTMLElement **_retval);

    nsresult (STDMETHODCALLTYPE *xpidlDeleteCaption)(
        nsIDOMHTMLTableElement *This);

    nsresult (STDMETHODCALLTYPE *InsertRow)(
        nsIDOMHTMLTableElement *This,
        LONG index,
        nsIDOMHTMLElement **_retval);

    nsresult (STDMETHODCALLTYPE *DeleteRow)(
        nsIDOMHTMLTableElement *This,
        LONG index);

    END_INTERFACE
} nsIDOMHTMLTableElementVtbl;

interface nsIDOMHTMLTableElement {
    CONST_VTBL nsIDOMHTMLTableElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLTableElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLTableElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLTableElement_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMHTMLTableElement methods ***/
#define nsIDOMHTMLTableElement_GetCaption(This,aCaption) (This)->lpVtbl->GetCaption(This,aCaption)
#define nsIDOMHTMLTableElement_SetCaption(This,aCaption) (This)->lpVtbl->SetCaption(This,aCaption)
#define nsIDOMHTMLTableElement_GetTHead(This,aTHead) (This)->lpVtbl->GetTHead(This,aTHead)
#define nsIDOMHTMLTableElement_SetTHead(This,aTHead) (This)->lpVtbl->SetTHead(This,aTHead)
#define nsIDOMHTMLTableElement_GetTFoot(This,aTFoot) (This)->lpVtbl->GetTFoot(This,aTFoot)
#define nsIDOMHTMLTableElement_SetTFoot(This,aTFoot) (This)->lpVtbl->SetTFoot(This,aTFoot)
#define nsIDOMHTMLTableElement_GetRows(This,aRows) (This)->lpVtbl->GetRows(This,aRows)
#define nsIDOMHTMLTableElement_GetTBodies(This,aTBodies) (This)->lpVtbl->GetTBodies(This,aTBodies)
#define nsIDOMHTMLTableElement_GetAlign(This,aAlign) (This)->lpVtbl->GetAlign(This,aAlign)
#define nsIDOMHTMLTableElement_SetAlign(This,aAlign) (This)->lpVtbl->SetAlign(This,aAlign)
#define nsIDOMHTMLTableElement_GetBgColor(This,aBgColor) (This)->lpVtbl->GetBgColor(This,aBgColor)
#define nsIDOMHTMLTableElement_SetBgColor(This,aBgColor) (This)->lpVtbl->SetBgColor(This,aBgColor)
#define nsIDOMHTMLTableElement_GetBorder(This,aBorder) (This)->lpVtbl->GetBorder(This,aBorder)
#define nsIDOMHTMLTableElement_SetBorder(This,aBorder) (This)->lpVtbl->SetBorder(This,aBorder)
#define nsIDOMHTMLTableElement_GetCellPadding(This,aCellPadding) (This)->lpVtbl->GetCellPadding(This,aCellPadding)
#define nsIDOMHTMLTableElement_SetCellPadding(This,aCellPadding) (This)->lpVtbl->SetCellPadding(This,aCellPadding)
#define nsIDOMHTMLTableElement_GetCellSpacing(This,aCellSpacing) (This)->lpVtbl->GetCellSpacing(This,aCellSpacing)
#define nsIDOMHTMLTableElement_SetCellSpacing(This,aCellSpacing) (This)->lpVtbl->SetCellSpacing(This,aCellSpacing)
#define nsIDOMHTMLTableElement_GetFrame(This,aFrame) (This)->lpVtbl->GetFrame(This,aFrame)
#define nsIDOMHTMLTableElement_SetFrame(This,aFrame) (This)->lpVtbl->SetFrame(This,aFrame)
#define nsIDOMHTMLTableElement_GetRules(This,aRules) (This)->lpVtbl->GetRules(This,aRules)
#define nsIDOMHTMLTableElement_SetRules(This,aRules) (This)->lpVtbl->SetRules(This,aRules)
#define nsIDOMHTMLTableElement_GetSummary(This,aSummary) (This)->lpVtbl->GetSummary(This,aSummary)
#define nsIDOMHTMLTableElement_SetSummary(This,aSummary) (This)->lpVtbl->SetSummary(This,aSummary)
#define nsIDOMHTMLTableElement_GetWidth(This,aWidth) (This)->lpVtbl->GetWidth(This,aWidth)
#define nsIDOMHTMLTableElement_SetWidth(This,aWidth) (This)->lpVtbl->SetWidth(This,aWidth)
#define nsIDOMHTMLTableElement_CreateTHead(This,_retval) (This)->lpVtbl->CreateTHead(This,_retval)
#define nsIDOMHTMLTableElement_xpidlDeleteTHead(This) (This)->lpVtbl->xpidlDeleteTHead(This)
#define nsIDOMHTMLTableElement_CreateTFoot(This,_retval) (This)->lpVtbl->CreateTFoot(This,_retval)
#define nsIDOMHTMLTableElement_xpidlDeleteTFoot(This) (This)->lpVtbl->xpidlDeleteTFoot(This)
#define nsIDOMHTMLTableElement_CreateCaption(This,_retval) (This)->lpVtbl->CreateCaption(This,_retval)
#define nsIDOMHTMLTableElement_xpidlDeleteCaption(This) (This)->lpVtbl->xpidlDeleteCaption(This)
#define nsIDOMHTMLTableElement_InsertRow(This,index,_retval) (This)->lpVtbl->InsertRow(This,index,_retval)
#define nsIDOMHTMLTableElement_DeleteRow(This,index) (This)->lpVtbl->DeleteRow(This,index)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLTableElement_QueryInterface(nsIDOMHTMLTableElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLTableElement_AddRef(nsIDOMHTMLTableElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLTableElement_Release(nsIDOMHTMLTableElement* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMHTMLTableElement methods ***/
static FORCEINLINE nsresult nsIDOMHTMLTableElement_GetCaption(nsIDOMHTMLTableElement* This,nsIDOMHTMLElement **aCaption) {
    return This->lpVtbl->GetCaption(This,aCaption);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_SetCaption(nsIDOMHTMLTableElement* This,nsIDOMHTMLElement *aCaption) {
    return This->lpVtbl->SetCaption(This,aCaption);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_GetTHead(nsIDOMHTMLTableElement* This,nsIDOMHTMLElement **aTHead) {
    return This->lpVtbl->GetTHead(This,aTHead);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_SetTHead(nsIDOMHTMLTableElement* This,nsIDOMHTMLElement *aTHead) {
    return This->lpVtbl->SetTHead(This,aTHead);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_GetTFoot(nsIDOMHTMLTableElement* This,nsIDOMHTMLElement **aTFoot) {
    return This->lpVtbl->GetTFoot(This,aTFoot);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_SetTFoot(nsIDOMHTMLTableElement* This,nsIDOMHTMLElement *aTFoot) {
    return This->lpVtbl->SetTFoot(This,aTFoot);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_GetRows(nsIDOMHTMLTableElement* This,nsIDOMHTMLCollection **aRows) {
    return This->lpVtbl->GetRows(This,aRows);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_GetTBodies(nsIDOMHTMLTableElement* This,nsIDOMHTMLCollection **aTBodies) {
    return This->lpVtbl->GetTBodies(This,aTBodies);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_GetAlign(nsIDOMHTMLTableElement* This,nsAString *aAlign) {
    return This->lpVtbl->GetAlign(This,aAlign);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_SetAlign(nsIDOMHTMLTableElement* This,const nsAString *aAlign) {
    return This->lpVtbl->SetAlign(This,aAlign);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_GetBgColor(nsIDOMHTMLTableElement* This,nsAString *aBgColor) {
    return This->lpVtbl->GetBgColor(This,aBgColor);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_SetBgColor(nsIDOMHTMLTableElement* This,const nsAString *aBgColor) {
    return This->lpVtbl->SetBgColor(This,aBgColor);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_GetBorder(nsIDOMHTMLTableElement* This,nsAString *aBorder) {
    return This->lpVtbl->GetBorder(This,aBorder);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_SetBorder(nsIDOMHTMLTableElement* This,const nsAString *aBorder) {
    return This->lpVtbl->SetBorder(This,aBorder);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_GetCellPadding(nsIDOMHTMLTableElement* This,nsAString *aCellPadding) {
    return This->lpVtbl->GetCellPadding(This,aCellPadding);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_SetCellPadding(nsIDOMHTMLTableElement* This,const nsAString *aCellPadding) {
    return This->lpVtbl->SetCellPadding(This,aCellPadding);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_GetCellSpacing(nsIDOMHTMLTableElement* This,nsAString *aCellSpacing) {
    return This->lpVtbl->GetCellSpacing(This,aCellSpacing);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_SetCellSpacing(nsIDOMHTMLTableElement* This,const nsAString *aCellSpacing) {
    return This->lpVtbl->SetCellSpacing(This,aCellSpacing);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_GetFrame(nsIDOMHTMLTableElement* This,nsAString *aFrame) {
    return This->lpVtbl->GetFrame(This,aFrame);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_SetFrame(nsIDOMHTMLTableElement* This,const nsAString *aFrame) {
    return This->lpVtbl->SetFrame(This,aFrame);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_GetRules(nsIDOMHTMLTableElement* This,nsAString *aRules) {
    return This->lpVtbl->GetRules(This,aRules);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_SetRules(nsIDOMHTMLTableElement* This,const nsAString *aRules) {
    return This->lpVtbl->SetRules(This,aRules);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_GetSummary(nsIDOMHTMLTableElement* This,nsAString *aSummary) {
    return This->lpVtbl->GetSummary(This,aSummary);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_SetSummary(nsIDOMHTMLTableElement* This,const nsAString *aSummary) {
    return This->lpVtbl->SetSummary(This,aSummary);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_GetWidth(nsIDOMHTMLTableElement* This,nsAString *aWidth) {
    return This->lpVtbl->GetWidth(This,aWidth);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_SetWidth(nsIDOMHTMLTableElement* This,const nsAString *aWidth) {
    return This->lpVtbl->SetWidth(This,aWidth);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_CreateTHead(nsIDOMHTMLTableElement* This,nsIDOMHTMLElement **_retval) {
    return This->lpVtbl->CreateTHead(This,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_xpidlDeleteTHead(nsIDOMHTMLTableElement* This) {
    return This->lpVtbl->xpidlDeleteTHead(This);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_CreateTFoot(nsIDOMHTMLTableElement* This,nsIDOMHTMLElement **_retval) {
    return This->lpVtbl->CreateTFoot(This,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_xpidlDeleteTFoot(nsIDOMHTMLTableElement* This) {
    return This->lpVtbl->xpidlDeleteTFoot(This);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_CreateCaption(nsIDOMHTMLTableElement* This,nsIDOMHTMLElement **_retval) {
    return This->lpVtbl->CreateCaption(This,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_xpidlDeleteCaption(nsIDOMHTMLTableElement* This) {
    return This->lpVtbl->xpidlDeleteCaption(This);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_InsertRow(nsIDOMHTMLTableElement* This,LONG index,nsIDOMHTMLElement **_retval) {
    return This->lpVtbl->InsertRow(This,index,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLTableElement_DeleteRow(nsIDOMHTMLTableElement* This,LONG index) {
    return This->lpVtbl->DeleteRow(This,index);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLTableElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLTableRowElement interface
 */
#ifndef __nsIDOMHTMLTableRowElement_INTERFACE_DEFINED__
#define __nsIDOMHTMLTableRowElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLTableRowElement, 0x02094366, 0x0d3d, 0x47e3, 0x94,0x9c, 0x89,0x11,0x3a,0x9b,0xcc,0x15);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("02094366-0d3d-47e3-949c-89113a9bcc15")
nsIDOMHTMLTableRowElement : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetRowIndex(
        LONG *aRowIndex) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSectionRowIndex(
        LONG *aSectionRowIndex) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCells(
        nsIDOMHTMLCollection **aCells) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAlign(
        nsAString *aAlign) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAlign(
        const nsAString *aAlign) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBgColor(
        nsAString *aBgColor) = 0;

    virtual nsresult STDMETHODCALLTYPE SetBgColor(
        const nsAString *aBgColor) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCh(
        nsAString *aCh) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCh(
        const nsAString *aCh) = 0;

    virtual nsresult STDMETHODCALLTYPE GetChOff(
        nsAString *aChOff) = 0;

    virtual nsresult STDMETHODCALLTYPE SetChOff(
        const nsAString *aChOff) = 0;

    virtual nsresult STDMETHODCALLTYPE GetVAlign(
        nsAString *aVAlign) = 0;

    virtual nsresult STDMETHODCALLTYPE SetVAlign(
        const nsAString *aVAlign) = 0;

    virtual nsresult STDMETHODCALLTYPE InsertCell(
        LONG index,
        nsIDOMHTMLElement **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE DeleteCell(
        LONG index) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLTableRowElement, 0x02094366, 0x0d3d, 0x47e3, 0x94,0x9c, 0x89,0x11,0x3a,0x9b,0xcc,0x15)
#endif
#else
typedef struct nsIDOMHTMLTableRowElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLTableRowElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLTableRowElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLTableRowElement *This);

    /*** nsIDOMHTMLTableRowElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetRowIndex)(
        nsIDOMHTMLTableRowElement *This,
        LONG *aRowIndex);

    nsresult (STDMETHODCALLTYPE *GetSectionRowIndex)(
        nsIDOMHTMLTableRowElement *This,
        LONG *aSectionRowIndex);

    nsresult (STDMETHODCALLTYPE *GetCells)(
        nsIDOMHTMLTableRowElement *This,
        nsIDOMHTMLCollection **aCells);

    nsresult (STDMETHODCALLTYPE *GetAlign)(
        nsIDOMHTMLTableRowElement *This,
        nsAString *aAlign);

    nsresult (STDMETHODCALLTYPE *SetAlign)(
        nsIDOMHTMLTableRowElement *This,
        const nsAString *aAlign);

    nsresult (STDMETHODCALLTYPE *GetBgColor)(
        nsIDOMHTMLTableRowElement *This,
        nsAString *aBgColor);

    nsresult (STDMETHODCALLTYPE *SetBgColor)(
        nsIDOMHTMLTableRowElement *This,
        const nsAString *aBgColor);

    nsresult (STDMETHODCALLTYPE *GetCh)(
        nsIDOMHTMLTableRowElement *This,
        nsAString *aCh);

    nsresult (STDMETHODCALLTYPE *SetCh)(
        nsIDOMHTMLTableRowElement *This,
        const nsAString *aCh);

    nsresult (STDMETHODCALLTYPE *GetChOff)(
        nsIDOMHTMLTableRowElement *This,
        nsAString *aChOff);

    nsresult (STDMETHODCALLTYPE *SetChOff)(
        nsIDOMHTMLTableRowElement *This,
        const nsAString *aChOff);

    nsresult (STDMETHODCALLTYPE *GetVAlign)(
        nsIDOMHTMLTableRowElement *This,
        nsAString *aVAlign);

    nsresult (STDMETHODCALLTYPE *SetVAlign)(
        nsIDOMHTMLTableRowElement *This,
        const nsAString *aVAlign);

    nsresult (STDMETHODCALLTYPE *InsertCell)(
        nsIDOMHTMLTableRowElement *This,
        LONG index,
        nsIDOMHTMLElement **_retval);

    nsresult (STDMETHODCALLTYPE *DeleteCell)(
        nsIDOMHTMLTableRowElement *This,
        LONG index);

    END_INTERFACE
} nsIDOMHTMLTableRowElementVtbl;

interface nsIDOMHTMLTableRowElement {
    CONST_VTBL nsIDOMHTMLTableRowElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLTableRowElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLTableRowElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLTableRowElement_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMHTMLTableRowElement methods ***/
#define nsIDOMHTMLTableRowElement_GetRowIndex(This,aRowIndex) (This)->lpVtbl->GetRowIndex(This,aRowIndex)
#define nsIDOMHTMLTableRowElement_GetSectionRowIndex(This,aSectionRowIndex) (This)->lpVtbl->GetSectionRowIndex(This,aSectionRowIndex)
#define nsIDOMHTMLTableRowElement_GetCells(This,aCells) (This)->lpVtbl->GetCells(This,aCells)
#define nsIDOMHTMLTableRowElement_GetAlign(This,aAlign) (This)->lpVtbl->GetAlign(This,aAlign)
#define nsIDOMHTMLTableRowElement_SetAlign(This,aAlign) (This)->lpVtbl->SetAlign(This,aAlign)
#define nsIDOMHTMLTableRowElement_GetBgColor(This,aBgColor) (This)->lpVtbl->GetBgColor(This,aBgColor)
#define nsIDOMHTMLTableRowElement_SetBgColor(This,aBgColor) (This)->lpVtbl->SetBgColor(This,aBgColor)
#define nsIDOMHTMLTableRowElement_GetCh(This,aCh) (This)->lpVtbl->GetCh(This,aCh)
#define nsIDOMHTMLTableRowElement_SetCh(This,aCh) (This)->lpVtbl->SetCh(This,aCh)
#define nsIDOMHTMLTableRowElement_GetChOff(This,aChOff) (This)->lpVtbl->GetChOff(This,aChOff)
#define nsIDOMHTMLTableRowElement_SetChOff(This,aChOff) (This)->lpVtbl->SetChOff(This,aChOff)
#define nsIDOMHTMLTableRowElement_GetVAlign(This,aVAlign) (This)->lpVtbl->GetVAlign(This,aVAlign)
#define nsIDOMHTMLTableRowElement_SetVAlign(This,aVAlign) (This)->lpVtbl->SetVAlign(This,aVAlign)
#define nsIDOMHTMLTableRowElement_InsertCell(This,index,_retval) (This)->lpVtbl->InsertCell(This,index,_retval)
#define nsIDOMHTMLTableRowElement_DeleteCell(This,index) (This)->lpVtbl->DeleteCell(This,index)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLTableRowElement_QueryInterface(nsIDOMHTMLTableRowElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLTableRowElement_AddRef(nsIDOMHTMLTableRowElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLTableRowElement_Release(nsIDOMHTMLTableRowElement* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMHTMLTableRowElement methods ***/
static FORCEINLINE nsresult nsIDOMHTMLTableRowElement_GetRowIndex(nsIDOMHTMLTableRowElement* This,LONG *aRowIndex) {
    return This->lpVtbl->GetRowIndex(This,aRowIndex);
}
static FORCEINLINE nsresult nsIDOMHTMLTableRowElement_GetSectionRowIndex(nsIDOMHTMLTableRowElement* This,LONG *aSectionRowIndex) {
    return This->lpVtbl->GetSectionRowIndex(This,aSectionRowIndex);
}
static FORCEINLINE nsresult nsIDOMHTMLTableRowElement_GetCells(nsIDOMHTMLTableRowElement* This,nsIDOMHTMLCollection **aCells) {
    return This->lpVtbl->GetCells(This,aCells);
}
static FORCEINLINE nsresult nsIDOMHTMLTableRowElement_GetAlign(nsIDOMHTMLTableRowElement* This,nsAString *aAlign) {
    return This->lpVtbl->GetAlign(This,aAlign);
}
static FORCEINLINE nsresult nsIDOMHTMLTableRowElement_SetAlign(nsIDOMHTMLTableRowElement* This,const nsAString *aAlign) {
    return This->lpVtbl->SetAlign(This,aAlign);
}
static FORCEINLINE nsresult nsIDOMHTMLTableRowElement_GetBgColor(nsIDOMHTMLTableRowElement* This,nsAString *aBgColor) {
    return This->lpVtbl->GetBgColor(This,aBgColor);
}
static FORCEINLINE nsresult nsIDOMHTMLTableRowElement_SetBgColor(nsIDOMHTMLTableRowElement* This,const nsAString *aBgColor) {
    return This->lpVtbl->SetBgColor(This,aBgColor);
}
static FORCEINLINE nsresult nsIDOMHTMLTableRowElement_GetCh(nsIDOMHTMLTableRowElement* This,nsAString *aCh) {
    return This->lpVtbl->GetCh(This,aCh);
}
static FORCEINLINE nsresult nsIDOMHTMLTableRowElement_SetCh(nsIDOMHTMLTableRowElement* This,const nsAString *aCh) {
    return This->lpVtbl->SetCh(This,aCh);
}
static FORCEINLINE nsresult nsIDOMHTMLTableRowElement_GetChOff(nsIDOMHTMLTableRowElement* This,nsAString *aChOff) {
    return This->lpVtbl->GetChOff(This,aChOff);
}
static FORCEINLINE nsresult nsIDOMHTMLTableRowElement_SetChOff(nsIDOMHTMLTableRowElement* This,const nsAString *aChOff) {
    return This->lpVtbl->SetChOff(This,aChOff);
}
static FORCEINLINE nsresult nsIDOMHTMLTableRowElement_GetVAlign(nsIDOMHTMLTableRowElement* This,nsAString *aVAlign) {
    return This->lpVtbl->GetVAlign(This,aVAlign);
}
static FORCEINLINE nsresult nsIDOMHTMLTableRowElement_SetVAlign(nsIDOMHTMLTableRowElement* This,const nsAString *aVAlign) {
    return This->lpVtbl->SetVAlign(This,aVAlign);
}
static FORCEINLINE nsresult nsIDOMHTMLTableRowElement_InsertCell(nsIDOMHTMLTableRowElement* This,LONG index,nsIDOMHTMLElement **_retval) {
    return This->lpVtbl->InsertCell(This,index,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLTableRowElement_DeleteCell(nsIDOMHTMLTableRowElement* This,LONG index) {
    return This->lpVtbl->DeleteCell(This,index);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLTableRowElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLTableCellElement interface
 */
#ifndef __nsIDOMHTMLTableCellElement_INTERFACE_DEFINED__
#define __nsIDOMHTMLTableCellElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLTableCellElement, 0x3203c36f, 0x33fd, 0x4628, 0x8c,0x88, 0x77,0xe8,0x2d,0x38,0xdf,0x1e);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("3203c36f-33fd-4628-8c88-77e82d38df1e")
nsIDOMHTMLTableCellElement : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetCellIndex(
        LONG *aCellIndex) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAbbr(
        nsAString *aAbbr) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAbbr(
        const nsAString *aAbbr) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAlign(
        nsAString *aAlign) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAlign(
        const nsAString *aAlign) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAxis(
        nsAString *aAxis) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAxis(
        const nsAString *aAxis) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBgColor(
        nsAString *aBgColor) = 0;

    virtual nsresult STDMETHODCALLTYPE SetBgColor(
        const nsAString *aBgColor) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCh(
        nsAString *aCh) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCh(
        const nsAString *aCh) = 0;

    virtual nsresult STDMETHODCALLTYPE GetChOff(
        nsAString *aChOff) = 0;

    virtual nsresult STDMETHODCALLTYPE SetChOff(
        const nsAString *aChOff) = 0;

    virtual nsresult STDMETHODCALLTYPE GetColSpan(
        LONG *aColSpan) = 0;

    virtual nsresult STDMETHODCALLTYPE SetColSpan(
        LONG aColSpan) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHeaders(
        nsAString *aHeaders) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHeaders(
        const nsAString *aHeaders) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHeight(
        nsAString *aHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHeight(
        const nsAString *aHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNoWrap(
        cpp_bool *aNoWrap) = 0;

    virtual nsresult STDMETHODCALLTYPE SetNoWrap(
        cpp_bool aNoWrap) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRowSpan(
        LONG *aRowSpan) = 0;

    virtual nsresult STDMETHODCALLTYPE SetRowSpan(
        LONG aRowSpan) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScope(
        nsAString *aScope) = 0;

    virtual nsresult STDMETHODCALLTYPE SetScope(
        const nsAString *aScope) = 0;

    virtual nsresult STDMETHODCALLTYPE GetVAlign(
        nsAString *aVAlign) = 0;

    virtual nsresult STDMETHODCALLTYPE SetVAlign(
        const nsAString *aVAlign) = 0;

    virtual nsresult STDMETHODCALLTYPE GetWidth(
        nsAString *aWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE SetWidth(
        const nsAString *aWidth) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLTableCellElement, 0x3203c36f, 0x33fd, 0x4628, 0x8c,0x88, 0x77,0xe8,0x2d,0x38,0xdf,0x1e)
#endif
#else
typedef struct nsIDOMHTMLTableCellElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLTableCellElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLTableCellElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLTableCellElement *This);

    /*** nsIDOMHTMLTableCellElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetCellIndex)(
        nsIDOMHTMLTableCellElement *This,
        LONG *aCellIndex);

    nsresult (STDMETHODCALLTYPE *GetAbbr)(
        nsIDOMHTMLTableCellElement *This,
        nsAString *aAbbr);

    nsresult (STDMETHODCALLTYPE *SetAbbr)(
        nsIDOMHTMLTableCellElement *This,
        const nsAString *aAbbr);

    nsresult (STDMETHODCALLTYPE *GetAlign)(
        nsIDOMHTMLTableCellElement *This,
        nsAString *aAlign);

    nsresult (STDMETHODCALLTYPE *SetAlign)(
        nsIDOMHTMLTableCellElement *This,
        const nsAString *aAlign);

    nsresult (STDMETHODCALLTYPE *GetAxis)(
        nsIDOMHTMLTableCellElement *This,
        nsAString *aAxis);

    nsresult (STDMETHODCALLTYPE *SetAxis)(
        nsIDOMHTMLTableCellElement *This,
        const nsAString *aAxis);

    nsresult (STDMETHODCALLTYPE *GetBgColor)(
        nsIDOMHTMLTableCellElement *This,
        nsAString *aBgColor);

    nsresult (STDMETHODCALLTYPE *SetBgColor)(
        nsIDOMHTMLTableCellElement *This,
        const nsAString *aBgColor);

    nsresult (STDMETHODCALLTYPE *GetCh)(
        nsIDOMHTMLTableCellElement *This,
        nsAString *aCh);

    nsresult (STDMETHODCALLTYPE *SetCh)(
        nsIDOMHTMLTableCellElement *This,
        const nsAString *aCh);

    nsresult (STDMETHODCALLTYPE *GetChOff)(
        nsIDOMHTMLTableCellElement *This,
        nsAString *aChOff);

    nsresult (STDMETHODCALLTYPE *SetChOff)(
        nsIDOMHTMLTableCellElement *This,
        const nsAString *aChOff);

    nsresult (STDMETHODCALLTYPE *GetColSpan)(
        nsIDOMHTMLTableCellElement *This,
        LONG *aColSpan);

    nsresult (STDMETHODCALLTYPE *SetColSpan)(
        nsIDOMHTMLTableCellElement *This,
        LONG aColSpan);

    nsresult (STDMETHODCALLTYPE *GetHeaders)(
        nsIDOMHTMLTableCellElement *This,
        nsAString *aHeaders);

    nsresult (STDMETHODCALLTYPE *SetHeaders)(
        nsIDOMHTMLTableCellElement *This,
        const nsAString *aHeaders);

    nsresult (STDMETHODCALLTYPE *GetHeight)(
        nsIDOMHTMLTableCellElement *This,
        nsAString *aHeight);

    nsresult (STDMETHODCALLTYPE *SetHeight)(
        nsIDOMHTMLTableCellElement *This,
        const nsAString *aHeight);

    nsresult (STDMETHODCALLTYPE *GetNoWrap)(
        nsIDOMHTMLTableCellElement *This,
        cpp_bool *aNoWrap);

    nsresult (STDMETHODCALLTYPE *SetNoWrap)(
        nsIDOMHTMLTableCellElement *This,
        cpp_bool aNoWrap);

    nsresult (STDMETHODCALLTYPE *GetRowSpan)(
        nsIDOMHTMLTableCellElement *This,
        LONG *aRowSpan);

    nsresult (STDMETHODCALLTYPE *SetRowSpan)(
        nsIDOMHTMLTableCellElement *This,
        LONG aRowSpan);

    nsresult (STDMETHODCALLTYPE *GetScope)(
        nsIDOMHTMLTableCellElement *This,
        nsAString *aScope);

    nsresult (STDMETHODCALLTYPE *SetScope)(
        nsIDOMHTMLTableCellElement *This,
        const nsAString *aScope);

    nsresult (STDMETHODCALLTYPE *GetVAlign)(
        nsIDOMHTMLTableCellElement *This,
        nsAString *aVAlign);

    nsresult (STDMETHODCALLTYPE *SetVAlign)(
        nsIDOMHTMLTableCellElement *This,
        const nsAString *aVAlign);

    nsresult (STDMETHODCALLTYPE *GetWidth)(
        nsIDOMHTMLTableCellElement *This,
        nsAString *aWidth);

    nsresult (STDMETHODCALLTYPE *SetWidth)(
        nsIDOMHTMLTableCellElement *This,
        const nsAString *aWidth);

    END_INTERFACE
} nsIDOMHTMLTableCellElementVtbl;

interface nsIDOMHTMLTableCellElement {
    CONST_VTBL nsIDOMHTMLTableCellElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLTableCellElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLTableCellElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLTableCellElement_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMHTMLTableCellElement methods ***/
#define nsIDOMHTMLTableCellElement_GetCellIndex(This,aCellIndex) (This)->lpVtbl->GetCellIndex(This,aCellIndex)
#define nsIDOMHTMLTableCellElement_GetAbbr(This,aAbbr) (This)->lpVtbl->GetAbbr(This,aAbbr)
#define nsIDOMHTMLTableCellElement_SetAbbr(This,aAbbr) (This)->lpVtbl->SetAbbr(This,aAbbr)
#define nsIDOMHTMLTableCellElement_GetAlign(This,aAlign) (This)->lpVtbl->GetAlign(This,aAlign)
#define nsIDOMHTMLTableCellElement_SetAlign(This,aAlign) (This)->lpVtbl->SetAlign(This,aAlign)
#define nsIDOMHTMLTableCellElement_GetAxis(This,aAxis) (This)->lpVtbl->GetAxis(This,aAxis)
#define nsIDOMHTMLTableCellElement_SetAxis(This,aAxis) (This)->lpVtbl->SetAxis(This,aAxis)
#define nsIDOMHTMLTableCellElement_GetBgColor(This,aBgColor) (This)->lpVtbl->GetBgColor(This,aBgColor)
#define nsIDOMHTMLTableCellElement_SetBgColor(This,aBgColor) (This)->lpVtbl->SetBgColor(This,aBgColor)
#define nsIDOMHTMLTableCellElement_GetCh(This,aCh) (This)->lpVtbl->GetCh(This,aCh)
#define nsIDOMHTMLTableCellElement_SetCh(This,aCh) (This)->lpVtbl->SetCh(This,aCh)
#define nsIDOMHTMLTableCellElement_GetChOff(This,aChOff) (This)->lpVtbl->GetChOff(This,aChOff)
#define nsIDOMHTMLTableCellElement_SetChOff(This,aChOff) (This)->lpVtbl->SetChOff(This,aChOff)
#define nsIDOMHTMLTableCellElement_GetColSpan(This,aColSpan) (This)->lpVtbl->GetColSpan(This,aColSpan)
#define nsIDOMHTMLTableCellElement_SetColSpan(This,aColSpan) (This)->lpVtbl->SetColSpan(This,aColSpan)
#define nsIDOMHTMLTableCellElement_GetHeaders(This,aHeaders) (This)->lpVtbl->GetHeaders(This,aHeaders)
#define nsIDOMHTMLTableCellElement_SetHeaders(This,aHeaders) (This)->lpVtbl->SetHeaders(This,aHeaders)
#define nsIDOMHTMLTableCellElement_GetHeight(This,aHeight) (This)->lpVtbl->GetHeight(This,aHeight)
#define nsIDOMHTMLTableCellElement_SetHeight(This,aHeight) (This)->lpVtbl->SetHeight(This,aHeight)
#define nsIDOMHTMLTableCellElement_GetNoWrap(This,aNoWrap) (This)->lpVtbl->GetNoWrap(This,aNoWrap)
#define nsIDOMHTMLTableCellElement_SetNoWrap(This,aNoWrap) (This)->lpVtbl->SetNoWrap(This,aNoWrap)
#define nsIDOMHTMLTableCellElement_GetRowSpan(This,aRowSpan) (This)->lpVtbl->GetRowSpan(This,aRowSpan)
#define nsIDOMHTMLTableCellElement_SetRowSpan(This,aRowSpan) (This)->lpVtbl->SetRowSpan(This,aRowSpan)
#define nsIDOMHTMLTableCellElement_GetScope(This,aScope) (This)->lpVtbl->GetScope(This,aScope)
#define nsIDOMHTMLTableCellElement_SetScope(This,aScope) (This)->lpVtbl->SetScope(This,aScope)
#define nsIDOMHTMLTableCellElement_GetVAlign(This,aVAlign) (This)->lpVtbl->GetVAlign(This,aVAlign)
#define nsIDOMHTMLTableCellElement_SetVAlign(This,aVAlign) (This)->lpVtbl->SetVAlign(This,aVAlign)
#define nsIDOMHTMLTableCellElement_GetWidth(This,aWidth) (This)->lpVtbl->GetWidth(This,aWidth)
#define nsIDOMHTMLTableCellElement_SetWidth(This,aWidth) (This)->lpVtbl->SetWidth(This,aWidth)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_QueryInterface(nsIDOMHTMLTableCellElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLTableCellElement_AddRef(nsIDOMHTMLTableCellElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLTableCellElement_Release(nsIDOMHTMLTableCellElement* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMHTMLTableCellElement methods ***/
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_GetCellIndex(nsIDOMHTMLTableCellElement* This,LONG *aCellIndex) {
    return This->lpVtbl->GetCellIndex(This,aCellIndex);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_GetAbbr(nsIDOMHTMLTableCellElement* This,nsAString *aAbbr) {
    return This->lpVtbl->GetAbbr(This,aAbbr);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_SetAbbr(nsIDOMHTMLTableCellElement* This,const nsAString *aAbbr) {
    return This->lpVtbl->SetAbbr(This,aAbbr);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_GetAlign(nsIDOMHTMLTableCellElement* This,nsAString *aAlign) {
    return This->lpVtbl->GetAlign(This,aAlign);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_SetAlign(nsIDOMHTMLTableCellElement* This,const nsAString *aAlign) {
    return This->lpVtbl->SetAlign(This,aAlign);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_GetAxis(nsIDOMHTMLTableCellElement* This,nsAString *aAxis) {
    return This->lpVtbl->GetAxis(This,aAxis);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_SetAxis(nsIDOMHTMLTableCellElement* This,const nsAString *aAxis) {
    return This->lpVtbl->SetAxis(This,aAxis);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_GetBgColor(nsIDOMHTMLTableCellElement* This,nsAString *aBgColor) {
    return This->lpVtbl->GetBgColor(This,aBgColor);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_SetBgColor(nsIDOMHTMLTableCellElement* This,const nsAString *aBgColor) {
    return This->lpVtbl->SetBgColor(This,aBgColor);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_GetCh(nsIDOMHTMLTableCellElement* This,nsAString *aCh) {
    return This->lpVtbl->GetCh(This,aCh);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_SetCh(nsIDOMHTMLTableCellElement* This,const nsAString *aCh) {
    return This->lpVtbl->SetCh(This,aCh);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_GetChOff(nsIDOMHTMLTableCellElement* This,nsAString *aChOff) {
    return This->lpVtbl->GetChOff(This,aChOff);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_SetChOff(nsIDOMHTMLTableCellElement* This,const nsAString *aChOff) {
    return This->lpVtbl->SetChOff(This,aChOff);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_GetColSpan(nsIDOMHTMLTableCellElement* This,LONG *aColSpan) {
    return This->lpVtbl->GetColSpan(This,aColSpan);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_SetColSpan(nsIDOMHTMLTableCellElement* This,LONG aColSpan) {
    return This->lpVtbl->SetColSpan(This,aColSpan);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_GetHeaders(nsIDOMHTMLTableCellElement* This,nsAString *aHeaders) {
    return This->lpVtbl->GetHeaders(This,aHeaders);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_SetHeaders(nsIDOMHTMLTableCellElement* This,const nsAString *aHeaders) {
    return This->lpVtbl->SetHeaders(This,aHeaders);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_GetHeight(nsIDOMHTMLTableCellElement* This,nsAString *aHeight) {
    return This->lpVtbl->GetHeight(This,aHeight);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_SetHeight(nsIDOMHTMLTableCellElement* This,const nsAString *aHeight) {
    return This->lpVtbl->SetHeight(This,aHeight);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_GetNoWrap(nsIDOMHTMLTableCellElement* This,cpp_bool *aNoWrap) {
    return This->lpVtbl->GetNoWrap(This,aNoWrap);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_SetNoWrap(nsIDOMHTMLTableCellElement* This,cpp_bool aNoWrap) {
    return This->lpVtbl->SetNoWrap(This,aNoWrap);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_GetRowSpan(nsIDOMHTMLTableCellElement* This,LONG *aRowSpan) {
    return This->lpVtbl->GetRowSpan(This,aRowSpan);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_SetRowSpan(nsIDOMHTMLTableCellElement* This,LONG aRowSpan) {
    return This->lpVtbl->SetRowSpan(This,aRowSpan);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_GetScope(nsIDOMHTMLTableCellElement* This,nsAString *aScope) {
    return This->lpVtbl->GetScope(This,aScope);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_SetScope(nsIDOMHTMLTableCellElement* This,const nsAString *aScope) {
    return This->lpVtbl->SetScope(This,aScope);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_GetVAlign(nsIDOMHTMLTableCellElement* This,nsAString *aVAlign) {
    return This->lpVtbl->GetVAlign(This,aVAlign);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_SetVAlign(nsIDOMHTMLTableCellElement* This,const nsAString *aVAlign) {
    return This->lpVtbl->SetVAlign(This,aVAlign);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_GetWidth(nsIDOMHTMLTableCellElement* This,nsAString *aWidth) {
    return This->lpVtbl->GetWidth(This,aWidth);
}
static FORCEINLINE nsresult nsIDOMHTMLTableCellElement_SetWidth(nsIDOMHTMLTableCellElement* This,const nsAString *aWidth) {
    return This->lpVtbl->SetWidth(This,aWidth);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLTableCellElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLIFrameElement interface
 */
#ifndef __nsIDOMHTMLIFrameElement_INTERFACE_DEFINED__
#define __nsIDOMHTMLIFrameElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLIFrameElement, 0x9fd7b656, 0x1055, 0x4cb2, 0xb8,0xb1, 0xed,0x13,0xef,0xe2,0x44,0x57);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("9fd7b656-1055-4cb2-b8b1-ed13efe24457")
nsIDOMHTMLIFrameElement : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetAlign(
        nsAString *aAlign) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAlign(
        const nsAString *aAlign) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFrameBorder(
        nsAString *aFrameBorder) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFrameBorder(
        const nsAString *aFrameBorder) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHeight(
        nsAString *aHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHeight(
        const nsAString *aHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLongDesc(
        nsAString *aLongDesc) = 0;

    virtual nsresult STDMETHODCALLTYPE SetLongDesc(
        const nsAString *aLongDesc) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMarginHeight(
        nsAString *aMarginHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMarginHeight(
        const nsAString *aMarginHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMarginWidth(
        nsAString *aMarginWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMarginWidth(
        const nsAString *aMarginWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE GetName(
        nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE SetName(
        const nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScrolling(
        nsAString *aScrolling) = 0;

    virtual nsresult STDMETHODCALLTYPE SetScrolling(
        const nsAString *aScrolling) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSrc(
        nsAString *aSrc) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSrc(
        const nsAString *aSrc) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSrcdoc(
        nsAString *aSrcdoc) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSrcdoc(
        const nsAString *aSrcdoc) = 0;

    virtual nsresult STDMETHODCALLTYPE GetWidth(
        nsAString *aWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE SetWidth(
        const nsAString *aWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE GetContentDocument(
        nsIDOMDocument **aContentDocument) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAllowFullscreen(
        cpp_bool *aAllowFullscreen) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAllowFullscreen(
        cpp_bool aAllowFullscreen) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLIFrameElement, 0x9fd7b656, 0x1055, 0x4cb2, 0xb8,0xb1, 0xed,0x13,0xef,0xe2,0x44,0x57)
#endif
#else
typedef struct nsIDOMHTMLIFrameElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLIFrameElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLIFrameElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLIFrameElement *This);

    /*** nsIDOMHTMLIFrameElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetAlign)(
        nsIDOMHTMLIFrameElement *This,
        nsAString *aAlign);

    nsresult (STDMETHODCALLTYPE *SetAlign)(
        nsIDOMHTMLIFrameElement *This,
        const nsAString *aAlign);

    nsresult (STDMETHODCALLTYPE *GetFrameBorder)(
        nsIDOMHTMLIFrameElement *This,
        nsAString *aFrameBorder);

    nsresult (STDMETHODCALLTYPE *SetFrameBorder)(
        nsIDOMHTMLIFrameElement *This,
        const nsAString *aFrameBorder);

    nsresult (STDMETHODCALLTYPE *GetHeight)(
        nsIDOMHTMLIFrameElement *This,
        nsAString *aHeight);

    nsresult (STDMETHODCALLTYPE *SetHeight)(
        nsIDOMHTMLIFrameElement *This,
        const nsAString *aHeight);

    nsresult (STDMETHODCALLTYPE *GetLongDesc)(
        nsIDOMHTMLIFrameElement *This,
        nsAString *aLongDesc);

    nsresult (STDMETHODCALLTYPE *SetLongDesc)(
        nsIDOMHTMLIFrameElement *This,
        const nsAString *aLongDesc);

    nsresult (STDMETHODCALLTYPE *GetMarginHeight)(
        nsIDOMHTMLIFrameElement *This,
        nsAString *aMarginHeight);

    nsresult (STDMETHODCALLTYPE *SetMarginHeight)(
        nsIDOMHTMLIFrameElement *This,
        const nsAString *aMarginHeight);

    nsresult (STDMETHODCALLTYPE *GetMarginWidth)(
        nsIDOMHTMLIFrameElement *This,
        nsAString *aMarginWidth);

    nsresult (STDMETHODCALLTYPE *SetMarginWidth)(
        nsIDOMHTMLIFrameElement *This,
        const nsAString *aMarginWidth);

    nsresult (STDMETHODCALLTYPE *GetName)(
        nsIDOMHTMLIFrameElement *This,
        nsAString *aName);

    nsresult (STDMETHODCALLTYPE *SetName)(
        nsIDOMHTMLIFrameElement *This,
        const nsAString *aName);

    nsresult (STDMETHODCALLTYPE *GetScrolling)(
        nsIDOMHTMLIFrameElement *This,
        nsAString *aScrolling);

    nsresult (STDMETHODCALLTYPE *SetScrolling)(
        nsIDOMHTMLIFrameElement *This,
        const nsAString *aScrolling);

    nsresult (STDMETHODCALLTYPE *GetSrc)(
        nsIDOMHTMLIFrameElement *This,
        nsAString *aSrc);

    nsresult (STDMETHODCALLTYPE *SetSrc)(
        nsIDOMHTMLIFrameElement *This,
        const nsAString *aSrc);

    nsresult (STDMETHODCALLTYPE *GetSrcdoc)(
        nsIDOMHTMLIFrameElement *This,
        nsAString *aSrcdoc);

    nsresult (STDMETHODCALLTYPE *SetSrcdoc)(
        nsIDOMHTMLIFrameElement *This,
        const nsAString *aSrcdoc);

    nsresult (STDMETHODCALLTYPE *GetWidth)(
        nsIDOMHTMLIFrameElement *This,
        nsAString *aWidth);

    nsresult (STDMETHODCALLTYPE *SetWidth)(
        nsIDOMHTMLIFrameElement *This,
        const nsAString *aWidth);

    nsresult (STDMETHODCALLTYPE *GetContentDocument)(
        nsIDOMHTMLIFrameElement *This,
        nsIDOMDocument **aContentDocument);

    nsresult (STDMETHODCALLTYPE *GetAllowFullscreen)(
        nsIDOMHTMLIFrameElement *This,
        cpp_bool *aAllowFullscreen);

    nsresult (STDMETHODCALLTYPE *SetAllowFullscreen)(
        nsIDOMHTMLIFrameElement *This,
        cpp_bool aAllowFullscreen);

    END_INTERFACE
} nsIDOMHTMLIFrameElementVtbl;

interface nsIDOMHTMLIFrameElement {
    CONST_VTBL nsIDOMHTMLIFrameElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLIFrameElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLIFrameElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLIFrameElement_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMHTMLIFrameElement methods ***/
#define nsIDOMHTMLIFrameElement_GetAlign(This,aAlign) (This)->lpVtbl->GetAlign(This,aAlign)
#define nsIDOMHTMLIFrameElement_SetAlign(This,aAlign) (This)->lpVtbl->SetAlign(This,aAlign)
#define nsIDOMHTMLIFrameElement_GetFrameBorder(This,aFrameBorder) (This)->lpVtbl->GetFrameBorder(This,aFrameBorder)
#define nsIDOMHTMLIFrameElement_SetFrameBorder(This,aFrameBorder) (This)->lpVtbl->SetFrameBorder(This,aFrameBorder)
#define nsIDOMHTMLIFrameElement_GetHeight(This,aHeight) (This)->lpVtbl->GetHeight(This,aHeight)
#define nsIDOMHTMLIFrameElement_SetHeight(This,aHeight) (This)->lpVtbl->SetHeight(This,aHeight)
#define nsIDOMHTMLIFrameElement_GetLongDesc(This,aLongDesc) (This)->lpVtbl->GetLongDesc(This,aLongDesc)
#define nsIDOMHTMLIFrameElement_SetLongDesc(This,aLongDesc) (This)->lpVtbl->SetLongDesc(This,aLongDesc)
#define nsIDOMHTMLIFrameElement_GetMarginHeight(This,aMarginHeight) (This)->lpVtbl->GetMarginHeight(This,aMarginHeight)
#define nsIDOMHTMLIFrameElement_SetMarginHeight(This,aMarginHeight) (This)->lpVtbl->SetMarginHeight(This,aMarginHeight)
#define nsIDOMHTMLIFrameElement_GetMarginWidth(This,aMarginWidth) (This)->lpVtbl->GetMarginWidth(This,aMarginWidth)
#define nsIDOMHTMLIFrameElement_SetMarginWidth(This,aMarginWidth) (This)->lpVtbl->SetMarginWidth(This,aMarginWidth)
#define nsIDOMHTMLIFrameElement_GetName(This,aName) (This)->lpVtbl->GetName(This,aName)
#define nsIDOMHTMLIFrameElement_SetName(This,aName) (This)->lpVtbl->SetName(This,aName)
#define nsIDOMHTMLIFrameElement_GetScrolling(This,aScrolling) (This)->lpVtbl->GetScrolling(This,aScrolling)
#define nsIDOMHTMLIFrameElement_SetScrolling(This,aScrolling) (This)->lpVtbl->SetScrolling(This,aScrolling)
#define nsIDOMHTMLIFrameElement_GetSrc(This,aSrc) (This)->lpVtbl->GetSrc(This,aSrc)
#define nsIDOMHTMLIFrameElement_SetSrc(This,aSrc) (This)->lpVtbl->SetSrc(This,aSrc)
#define nsIDOMHTMLIFrameElement_GetSrcdoc(This,aSrcdoc) (This)->lpVtbl->GetSrcdoc(This,aSrcdoc)
#define nsIDOMHTMLIFrameElement_SetSrcdoc(This,aSrcdoc) (This)->lpVtbl->SetSrcdoc(This,aSrcdoc)
#define nsIDOMHTMLIFrameElement_GetWidth(This,aWidth) (This)->lpVtbl->GetWidth(This,aWidth)
#define nsIDOMHTMLIFrameElement_SetWidth(This,aWidth) (This)->lpVtbl->SetWidth(This,aWidth)
#define nsIDOMHTMLIFrameElement_GetContentDocument(This,aContentDocument) (This)->lpVtbl->GetContentDocument(This,aContentDocument)
#define nsIDOMHTMLIFrameElement_GetAllowFullscreen(This,aAllowFullscreen) (This)->lpVtbl->GetAllowFullscreen(This,aAllowFullscreen)
#define nsIDOMHTMLIFrameElement_SetAllowFullscreen(This,aAllowFullscreen) (This)->lpVtbl->SetAllowFullscreen(This,aAllowFullscreen)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_QueryInterface(nsIDOMHTMLIFrameElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLIFrameElement_AddRef(nsIDOMHTMLIFrameElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLIFrameElement_Release(nsIDOMHTMLIFrameElement* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMHTMLIFrameElement methods ***/
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_GetAlign(nsIDOMHTMLIFrameElement* This,nsAString *aAlign) {
    return This->lpVtbl->GetAlign(This,aAlign);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_SetAlign(nsIDOMHTMLIFrameElement* This,const nsAString *aAlign) {
    return This->lpVtbl->SetAlign(This,aAlign);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_GetFrameBorder(nsIDOMHTMLIFrameElement* This,nsAString *aFrameBorder) {
    return This->lpVtbl->GetFrameBorder(This,aFrameBorder);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_SetFrameBorder(nsIDOMHTMLIFrameElement* This,const nsAString *aFrameBorder) {
    return This->lpVtbl->SetFrameBorder(This,aFrameBorder);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_GetHeight(nsIDOMHTMLIFrameElement* This,nsAString *aHeight) {
    return This->lpVtbl->GetHeight(This,aHeight);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_SetHeight(nsIDOMHTMLIFrameElement* This,const nsAString *aHeight) {
    return This->lpVtbl->SetHeight(This,aHeight);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_GetLongDesc(nsIDOMHTMLIFrameElement* This,nsAString *aLongDesc) {
    return This->lpVtbl->GetLongDesc(This,aLongDesc);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_SetLongDesc(nsIDOMHTMLIFrameElement* This,const nsAString *aLongDesc) {
    return This->lpVtbl->SetLongDesc(This,aLongDesc);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_GetMarginHeight(nsIDOMHTMLIFrameElement* This,nsAString *aMarginHeight) {
    return This->lpVtbl->GetMarginHeight(This,aMarginHeight);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_SetMarginHeight(nsIDOMHTMLIFrameElement* This,const nsAString *aMarginHeight) {
    return This->lpVtbl->SetMarginHeight(This,aMarginHeight);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_GetMarginWidth(nsIDOMHTMLIFrameElement* This,nsAString *aMarginWidth) {
    return This->lpVtbl->GetMarginWidth(This,aMarginWidth);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_SetMarginWidth(nsIDOMHTMLIFrameElement* This,const nsAString *aMarginWidth) {
    return This->lpVtbl->SetMarginWidth(This,aMarginWidth);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_GetName(nsIDOMHTMLIFrameElement* This,nsAString *aName) {
    return This->lpVtbl->GetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_SetName(nsIDOMHTMLIFrameElement* This,const nsAString *aName) {
    return This->lpVtbl->SetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_GetScrolling(nsIDOMHTMLIFrameElement* This,nsAString *aScrolling) {
    return This->lpVtbl->GetScrolling(This,aScrolling);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_SetScrolling(nsIDOMHTMLIFrameElement* This,const nsAString *aScrolling) {
    return This->lpVtbl->SetScrolling(This,aScrolling);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_GetSrc(nsIDOMHTMLIFrameElement* This,nsAString *aSrc) {
    return This->lpVtbl->GetSrc(This,aSrc);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_SetSrc(nsIDOMHTMLIFrameElement* This,const nsAString *aSrc) {
    return This->lpVtbl->SetSrc(This,aSrc);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_GetSrcdoc(nsIDOMHTMLIFrameElement* This,nsAString *aSrcdoc) {
    return This->lpVtbl->GetSrcdoc(This,aSrcdoc);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_SetSrcdoc(nsIDOMHTMLIFrameElement* This,const nsAString *aSrcdoc) {
    return This->lpVtbl->SetSrcdoc(This,aSrcdoc);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_GetWidth(nsIDOMHTMLIFrameElement* This,nsAString *aWidth) {
    return This->lpVtbl->GetWidth(This,aWidth);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_SetWidth(nsIDOMHTMLIFrameElement* This,const nsAString *aWidth) {
    return This->lpVtbl->SetWidth(This,aWidth);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_GetContentDocument(nsIDOMHTMLIFrameElement* This,nsIDOMDocument **aContentDocument) {
    return This->lpVtbl->GetContentDocument(This,aContentDocument);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_GetAllowFullscreen(nsIDOMHTMLIFrameElement* This,cpp_bool *aAllowFullscreen) {
    return This->lpVtbl->GetAllowFullscreen(This,aAllowFullscreen);
}
static FORCEINLINE nsresult nsIDOMHTMLIFrameElement_SetAllowFullscreen(nsIDOMHTMLIFrameElement* This,cpp_bool aAllowFullscreen) {
    return This->lpVtbl->SetAllowFullscreen(This,aAllowFullscreen);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLIFrameElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLFrameElement interface
 */
#ifndef __nsIDOMHTMLFrameElement_INTERFACE_DEFINED__
#define __nsIDOMHTMLFrameElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLFrameElement, 0x012a8982, 0xc9d3, 0x4614, 0x91,0xe2, 0x18,0xee,0x51,0xc9,0x7c,0x06);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("012a8982-c9d3-4614-91e2-18ee51c97c06")
nsIDOMHTMLFrameElement : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetFrameBorder(
        nsAString *aFrameBorder) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFrameBorder(
        const nsAString *aFrameBorder) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLongDesc(
        nsAString *aLongDesc) = 0;

    virtual nsresult STDMETHODCALLTYPE SetLongDesc(
        const nsAString *aLongDesc) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMarginHeight(
        nsAString *aMarginHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMarginHeight(
        const nsAString *aMarginHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMarginWidth(
        nsAString *aMarginWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMarginWidth(
        const nsAString *aMarginWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE GetName(
        nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE SetName(
        const nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNoResize(
        cpp_bool *aNoResize) = 0;

    virtual nsresult STDMETHODCALLTYPE SetNoResize(
        cpp_bool aNoResize) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScrolling(
        nsAString *aScrolling) = 0;

    virtual nsresult STDMETHODCALLTYPE SetScrolling(
        const nsAString *aScrolling) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSrc(
        nsAString *aSrc) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSrc(
        const nsAString *aSrc) = 0;

    virtual nsresult STDMETHODCALLTYPE GetContentDocument(
        nsIDOMDocument **aContentDocument) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLFrameElement, 0x012a8982, 0xc9d3, 0x4614, 0x91,0xe2, 0x18,0xee,0x51,0xc9,0x7c,0x06)
#endif
#else
typedef struct nsIDOMHTMLFrameElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLFrameElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLFrameElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLFrameElement *This);

    /*** nsIDOMHTMLFrameElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetFrameBorder)(
        nsIDOMHTMLFrameElement *This,
        nsAString *aFrameBorder);

    nsresult (STDMETHODCALLTYPE *SetFrameBorder)(
        nsIDOMHTMLFrameElement *This,
        const nsAString *aFrameBorder);

    nsresult (STDMETHODCALLTYPE *GetLongDesc)(
        nsIDOMHTMLFrameElement *This,
        nsAString *aLongDesc);

    nsresult (STDMETHODCALLTYPE *SetLongDesc)(
        nsIDOMHTMLFrameElement *This,
        const nsAString *aLongDesc);

    nsresult (STDMETHODCALLTYPE *GetMarginHeight)(
        nsIDOMHTMLFrameElement *This,
        nsAString *aMarginHeight);

    nsresult (STDMETHODCALLTYPE *SetMarginHeight)(
        nsIDOMHTMLFrameElement *This,
        const nsAString *aMarginHeight);

    nsresult (STDMETHODCALLTYPE *GetMarginWidth)(
        nsIDOMHTMLFrameElement *This,
        nsAString *aMarginWidth);

    nsresult (STDMETHODCALLTYPE *SetMarginWidth)(
        nsIDOMHTMLFrameElement *This,
        const nsAString *aMarginWidth);

    nsresult (STDMETHODCALLTYPE *GetName)(
        nsIDOMHTMLFrameElement *This,
        nsAString *aName);

    nsresult (STDMETHODCALLTYPE *SetName)(
        nsIDOMHTMLFrameElement *This,
        const nsAString *aName);

    nsresult (STDMETHODCALLTYPE *GetNoResize)(
        nsIDOMHTMLFrameElement *This,
        cpp_bool *aNoResize);

    nsresult (STDMETHODCALLTYPE *SetNoResize)(
        nsIDOMHTMLFrameElement *This,
        cpp_bool aNoResize);

    nsresult (STDMETHODCALLTYPE *GetScrolling)(
        nsIDOMHTMLFrameElement *This,
        nsAString *aScrolling);

    nsresult (STDMETHODCALLTYPE *SetScrolling)(
        nsIDOMHTMLFrameElement *This,
        const nsAString *aScrolling);

    nsresult (STDMETHODCALLTYPE *GetSrc)(
        nsIDOMHTMLFrameElement *This,
        nsAString *aSrc);

    nsresult (STDMETHODCALLTYPE *SetSrc)(
        nsIDOMHTMLFrameElement *This,
        const nsAString *aSrc);

    nsresult (STDMETHODCALLTYPE *GetContentDocument)(
        nsIDOMHTMLFrameElement *This,
        nsIDOMDocument **aContentDocument);

    END_INTERFACE
} nsIDOMHTMLFrameElementVtbl;

interface nsIDOMHTMLFrameElement {
    CONST_VTBL nsIDOMHTMLFrameElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLFrameElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLFrameElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLFrameElement_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMHTMLFrameElement methods ***/
#define nsIDOMHTMLFrameElement_GetFrameBorder(This,aFrameBorder) (This)->lpVtbl->GetFrameBorder(This,aFrameBorder)
#define nsIDOMHTMLFrameElement_SetFrameBorder(This,aFrameBorder) (This)->lpVtbl->SetFrameBorder(This,aFrameBorder)
#define nsIDOMHTMLFrameElement_GetLongDesc(This,aLongDesc) (This)->lpVtbl->GetLongDesc(This,aLongDesc)
#define nsIDOMHTMLFrameElement_SetLongDesc(This,aLongDesc) (This)->lpVtbl->SetLongDesc(This,aLongDesc)
#define nsIDOMHTMLFrameElement_GetMarginHeight(This,aMarginHeight) (This)->lpVtbl->GetMarginHeight(This,aMarginHeight)
#define nsIDOMHTMLFrameElement_SetMarginHeight(This,aMarginHeight) (This)->lpVtbl->SetMarginHeight(This,aMarginHeight)
#define nsIDOMHTMLFrameElement_GetMarginWidth(This,aMarginWidth) (This)->lpVtbl->GetMarginWidth(This,aMarginWidth)
#define nsIDOMHTMLFrameElement_SetMarginWidth(This,aMarginWidth) (This)->lpVtbl->SetMarginWidth(This,aMarginWidth)
#define nsIDOMHTMLFrameElement_GetName(This,aName) (This)->lpVtbl->GetName(This,aName)
#define nsIDOMHTMLFrameElement_SetName(This,aName) (This)->lpVtbl->SetName(This,aName)
#define nsIDOMHTMLFrameElement_GetNoResize(This,aNoResize) (This)->lpVtbl->GetNoResize(This,aNoResize)
#define nsIDOMHTMLFrameElement_SetNoResize(This,aNoResize) (This)->lpVtbl->SetNoResize(This,aNoResize)
#define nsIDOMHTMLFrameElement_GetScrolling(This,aScrolling) (This)->lpVtbl->GetScrolling(This,aScrolling)
#define nsIDOMHTMLFrameElement_SetScrolling(This,aScrolling) (This)->lpVtbl->SetScrolling(This,aScrolling)
#define nsIDOMHTMLFrameElement_GetSrc(This,aSrc) (This)->lpVtbl->GetSrc(This,aSrc)
#define nsIDOMHTMLFrameElement_SetSrc(This,aSrc) (This)->lpVtbl->SetSrc(This,aSrc)
#define nsIDOMHTMLFrameElement_GetContentDocument(This,aContentDocument) (This)->lpVtbl->GetContentDocument(This,aContentDocument)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLFrameElement_QueryInterface(nsIDOMHTMLFrameElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLFrameElement_AddRef(nsIDOMHTMLFrameElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLFrameElement_Release(nsIDOMHTMLFrameElement* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMHTMLFrameElement methods ***/
static FORCEINLINE nsresult nsIDOMHTMLFrameElement_GetFrameBorder(nsIDOMHTMLFrameElement* This,nsAString *aFrameBorder) {
    return This->lpVtbl->GetFrameBorder(This,aFrameBorder);
}
static FORCEINLINE nsresult nsIDOMHTMLFrameElement_SetFrameBorder(nsIDOMHTMLFrameElement* This,const nsAString *aFrameBorder) {
    return This->lpVtbl->SetFrameBorder(This,aFrameBorder);
}
static FORCEINLINE nsresult nsIDOMHTMLFrameElement_GetLongDesc(nsIDOMHTMLFrameElement* This,nsAString *aLongDesc) {
    return This->lpVtbl->GetLongDesc(This,aLongDesc);
}
static FORCEINLINE nsresult nsIDOMHTMLFrameElement_SetLongDesc(nsIDOMHTMLFrameElement* This,const nsAString *aLongDesc) {
    return This->lpVtbl->SetLongDesc(This,aLongDesc);
}
static FORCEINLINE nsresult nsIDOMHTMLFrameElement_GetMarginHeight(nsIDOMHTMLFrameElement* This,nsAString *aMarginHeight) {
    return This->lpVtbl->GetMarginHeight(This,aMarginHeight);
}
static FORCEINLINE nsresult nsIDOMHTMLFrameElement_SetMarginHeight(nsIDOMHTMLFrameElement* This,const nsAString *aMarginHeight) {
    return This->lpVtbl->SetMarginHeight(This,aMarginHeight);
}
static FORCEINLINE nsresult nsIDOMHTMLFrameElement_GetMarginWidth(nsIDOMHTMLFrameElement* This,nsAString *aMarginWidth) {
    return This->lpVtbl->GetMarginWidth(This,aMarginWidth);
}
static FORCEINLINE nsresult nsIDOMHTMLFrameElement_SetMarginWidth(nsIDOMHTMLFrameElement* This,const nsAString *aMarginWidth) {
    return This->lpVtbl->SetMarginWidth(This,aMarginWidth);
}
static FORCEINLINE nsresult nsIDOMHTMLFrameElement_GetName(nsIDOMHTMLFrameElement* This,nsAString *aName) {
    return This->lpVtbl->GetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMHTMLFrameElement_SetName(nsIDOMHTMLFrameElement* This,const nsAString *aName) {
    return This->lpVtbl->SetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMHTMLFrameElement_GetNoResize(nsIDOMHTMLFrameElement* This,cpp_bool *aNoResize) {
    return This->lpVtbl->GetNoResize(This,aNoResize);
}
static FORCEINLINE nsresult nsIDOMHTMLFrameElement_SetNoResize(nsIDOMHTMLFrameElement* This,cpp_bool aNoResize) {
    return This->lpVtbl->SetNoResize(This,aNoResize);
}
static FORCEINLINE nsresult nsIDOMHTMLFrameElement_GetScrolling(nsIDOMHTMLFrameElement* This,nsAString *aScrolling) {
    return This->lpVtbl->GetScrolling(This,aScrolling);
}
static FORCEINLINE nsresult nsIDOMHTMLFrameElement_SetScrolling(nsIDOMHTMLFrameElement* This,const nsAString *aScrolling) {
    return This->lpVtbl->SetScrolling(This,aScrolling);
}
static FORCEINLINE nsresult nsIDOMHTMLFrameElement_GetSrc(nsIDOMHTMLFrameElement* This,nsAString *aSrc) {
    return This->lpVtbl->GetSrc(This,aSrc);
}
static FORCEINLINE nsresult nsIDOMHTMLFrameElement_SetSrc(nsIDOMHTMLFrameElement* This,const nsAString *aSrc) {
    return This->lpVtbl->SetSrc(This,aSrc);
}
static FORCEINLINE nsresult nsIDOMHTMLFrameElement_GetContentDocument(nsIDOMHTMLFrameElement* This,nsIDOMDocument **aContentDocument) {
    return This->lpVtbl->GetContentDocument(This,aContentDocument);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLFrameElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLObjectElement interface
 */
#ifndef __nsIDOMHTMLObjectElement_INTERFACE_DEFINED__
#define __nsIDOMHTMLObjectElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLObjectElement, 0xbaf443d2, 0xda5d, 0x40c9, 0xbe,0x3c, 0xc6,0x5a,0x69,0xa2,0x52,0x50);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("baf443d2-da5d-40c9-be3c-c65a69a25250")
nsIDOMHTMLObjectElement : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetForm(
        nsIDOMHTMLFormElement **aForm) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCode(
        nsAString *aCode) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCode(
        const nsAString *aCode) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAlign(
        nsAString *aAlign) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAlign(
        const nsAString *aAlign) = 0;

    virtual nsresult STDMETHODCALLTYPE GetArchive(
        nsAString *aArchive) = 0;

    virtual nsresult STDMETHODCALLTYPE SetArchive(
        const nsAString *aArchive) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBorder(
        nsAString *aBorder) = 0;

    virtual nsresult STDMETHODCALLTYPE SetBorder(
        const nsAString *aBorder) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCodeBase(
        nsAString *aCodeBase) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCodeBase(
        const nsAString *aCodeBase) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCodeType(
        nsAString *aCodeType) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCodeType(
        const nsAString *aCodeType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetData(
        nsAString *aData) = 0;

    virtual nsresult STDMETHODCALLTYPE SetData(
        const nsAString *aData) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDeclare(
        cpp_bool *aDeclare) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDeclare(
        cpp_bool aDeclare) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHeight(
        nsAString *aHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHeight(
        const nsAString *aHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHspace(
        LONG *aHspace) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHspace(
        LONG aHspace) = 0;

    virtual nsresult STDMETHODCALLTYPE GetName(
        nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE SetName(
        const nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetStandby(
        nsAString *aStandby) = 0;

    virtual nsresult STDMETHODCALLTYPE SetStandby(
        const nsAString *aStandby) = 0;

    virtual nsresult STDMETHODCALLTYPE GetType(
        nsAString *aType) = 0;

    virtual nsresult STDMETHODCALLTYPE SetType(
        const nsAString *aType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetUseMap(
        nsAString *aUseMap) = 0;

    virtual nsresult STDMETHODCALLTYPE SetUseMap(
        const nsAString *aUseMap) = 0;

    virtual nsresult STDMETHODCALLTYPE GetVspace(
        LONG *aVspace) = 0;

    virtual nsresult STDMETHODCALLTYPE SetVspace(
        LONG aVspace) = 0;

    virtual nsresult STDMETHODCALLTYPE GetWidth(
        nsAString *aWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE SetWidth(
        const nsAString *aWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE GetContentDocument(
        nsIDOMDocument **aContentDocument) = 0;

    virtual nsresult STDMETHODCALLTYPE GetWillValidate(
        cpp_bool *aWillValidate) = 0;

    virtual nsresult STDMETHODCALLTYPE GetValidity(
        nsIDOMValidityState **aValidity) = 0;

    virtual nsresult STDMETHODCALLTYPE GetValidationMessage(
        nsAString *aValidationMessage) = 0;

    virtual nsresult STDMETHODCALLTYPE CheckValidity(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCustomValidity(
        const nsAString *error) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLObjectElement, 0xbaf443d2, 0xda5d, 0x40c9, 0xbe,0x3c, 0xc6,0x5a,0x69,0xa2,0x52,0x50)
#endif
#else
typedef struct nsIDOMHTMLObjectElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLObjectElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLObjectElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLObjectElement *This);

    /*** nsIDOMHTMLObjectElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetForm)(
        nsIDOMHTMLObjectElement *This,
        nsIDOMHTMLFormElement **aForm);

    nsresult (STDMETHODCALLTYPE *GetCode)(
        nsIDOMHTMLObjectElement *This,
        nsAString *aCode);

    nsresult (STDMETHODCALLTYPE *SetCode)(
        nsIDOMHTMLObjectElement *This,
        const nsAString *aCode);

    nsresult (STDMETHODCALLTYPE *GetAlign)(
        nsIDOMHTMLObjectElement *This,
        nsAString *aAlign);

    nsresult (STDMETHODCALLTYPE *SetAlign)(
        nsIDOMHTMLObjectElement *This,
        const nsAString *aAlign);

    nsresult (STDMETHODCALLTYPE *GetArchive)(
        nsIDOMHTMLObjectElement *This,
        nsAString *aArchive);

    nsresult (STDMETHODCALLTYPE *SetArchive)(
        nsIDOMHTMLObjectElement *This,
        const nsAString *aArchive);

    nsresult (STDMETHODCALLTYPE *GetBorder)(
        nsIDOMHTMLObjectElement *This,
        nsAString *aBorder);

    nsresult (STDMETHODCALLTYPE *SetBorder)(
        nsIDOMHTMLObjectElement *This,
        const nsAString *aBorder);

    nsresult (STDMETHODCALLTYPE *GetCodeBase)(
        nsIDOMHTMLObjectElement *This,
        nsAString *aCodeBase);

    nsresult (STDMETHODCALLTYPE *SetCodeBase)(
        nsIDOMHTMLObjectElement *This,
        const nsAString *aCodeBase);

    nsresult (STDMETHODCALLTYPE *GetCodeType)(
        nsIDOMHTMLObjectElement *This,
        nsAString *aCodeType);

    nsresult (STDMETHODCALLTYPE *SetCodeType)(
        nsIDOMHTMLObjectElement *This,
        const nsAString *aCodeType);

    nsresult (STDMETHODCALLTYPE *GetData)(
        nsIDOMHTMLObjectElement *This,
        nsAString *aData);

    nsresult (STDMETHODCALLTYPE *SetData)(
        nsIDOMHTMLObjectElement *This,
        const nsAString *aData);

    nsresult (STDMETHODCALLTYPE *GetDeclare)(
        nsIDOMHTMLObjectElement *This,
        cpp_bool *aDeclare);

    nsresult (STDMETHODCALLTYPE *SetDeclare)(
        nsIDOMHTMLObjectElement *This,
        cpp_bool aDeclare);

    nsresult (STDMETHODCALLTYPE *GetHeight)(
        nsIDOMHTMLObjectElement *This,
        nsAString *aHeight);

    nsresult (STDMETHODCALLTYPE *SetHeight)(
        nsIDOMHTMLObjectElement *This,
        const nsAString *aHeight);

    nsresult (STDMETHODCALLTYPE *GetHspace)(
        nsIDOMHTMLObjectElement *This,
        LONG *aHspace);

    nsresult (STDMETHODCALLTYPE *SetHspace)(
        nsIDOMHTMLObjectElement *This,
        LONG aHspace);

    nsresult (STDMETHODCALLTYPE *GetName)(
        nsIDOMHTMLObjectElement *This,
        nsAString *aName);

    nsresult (STDMETHODCALLTYPE *SetName)(
        nsIDOMHTMLObjectElement *This,
        const nsAString *aName);

    nsresult (STDMETHODCALLTYPE *GetStandby)(
        nsIDOMHTMLObjectElement *This,
        nsAString *aStandby);

    nsresult (STDMETHODCALLTYPE *SetStandby)(
        nsIDOMHTMLObjectElement *This,
        const nsAString *aStandby);

    nsresult (STDMETHODCALLTYPE *GetType)(
        nsIDOMHTMLObjectElement *This,
        nsAString *aType);

    nsresult (STDMETHODCALLTYPE *SetType)(
        nsIDOMHTMLObjectElement *This,
        const nsAString *aType);

    nsresult (STDMETHODCALLTYPE *GetUseMap)(
        nsIDOMHTMLObjectElement *This,
        nsAString *aUseMap);

    nsresult (STDMETHODCALLTYPE *SetUseMap)(
        nsIDOMHTMLObjectElement *This,
        const nsAString *aUseMap);

    nsresult (STDMETHODCALLTYPE *GetVspace)(
        nsIDOMHTMLObjectElement *This,
        LONG *aVspace);

    nsresult (STDMETHODCALLTYPE *SetVspace)(
        nsIDOMHTMLObjectElement *This,
        LONG aVspace);

    nsresult (STDMETHODCALLTYPE *GetWidth)(
        nsIDOMHTMLObjectElement *This,
        nsAString *aWidth);

    nsresult (STDMETHODCALLTYPE *SetWidth)(
        nsIDOMHTMLObjectElement *This,
        const nsAString *aWidth);

    nsresult (STDMETHODCALLTYPE *GetContentDocument)(
        nsIDOMHTMLObjectElement *This,
        nsIDOMDocument **aContentDocument);

    nsresult (STDMETHODCALLTYPE *GetWillValidate)(
        nsIDOMHTMLObjectElement *This,
        cpp_bool *aWillValidate);

    nsresult (STDMETHODCALLTYPE *GetValidity)(
        nsIDOMHTMLObjectElement *This,
        nsIDOMValidityState **aValidity);

    nsresult (STDMETHODCALLTYPE *GetValidationMessage)(
        nsIDOMHTMLObjectElement *This,
        nsAString *aValidationMessage);

    nsresult (STDMETHODCALLTYPE *CheckValidity)(
        nsIDOMHTMLObjectElement *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetCustomValidity)(
        nsIDOMHTMLObjectElement *This,
        const nsAString *error);

    END_INTERFACE
} nsIDOMHTMLObjectElementVtbl;

interface nsIDOMHTMLObjectElement {
    CONST_VTBL nsIDOMHTMLObjectElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLObjectElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLObjectElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLObjectElement_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMHTMLObjectElement methods ***/
#define nsIDOMHTMLObjectElement_GetForm(This,aForm) (This)->lpVtbl->GetForm(This,aForm)
#define nsIDOMHTMLObjectElement_GetCode(This,aCode) (This)->lpVtbl->GetCode(This,aCode)
#define nsIDOMHTMLObjectElement_SetCode(This,aCode) (This)->lpVtbl->SetCode(This,aCode)
#define nsIDOMHTMLObjectElement_GetAlign(This,aAlign) (This)->lpVtbl->GetAlign(This,aAlign)
#define nsIDOMHTMLObjectElement_SetAlign(This,aAlign) (This)->lpVtbl->SetAlign(This,aAlign)
#define nsIDOMHTMLObjectElement_GetArchive(This,aArchive) (This)->lpVtbl->GetArchive(This,aArchive)
#define nsIDOMHTMLObjectElement_SetArchive(This,aArchive) (This)->lpVtbl->SetArchive(This,aArchive)
#define nsIDOMHTMLObjectElement_GetBorder(This,aBorder) (This)->lpVtbl->GetBorder(This,aBorder)
#define nsIDOMHTMLObjectElement_SetBorder(This,aBorder) (This)->lpVtbl->SetBorder(This,aBorder)
#define nsIDOMHTMLObjectElement_GetCodeBase(This,aCodeBase) (This)->lpVtbl->GetCodeBase(This,aCodeBase)
#define nsIDOMHTMLObjectElement_SetCodeBase(This,aCodeBase) (This)->lpVtbl->SetCodeBase(This,aCodeBase)
#define nsIDOMHTMLObjectElement_GetCodeType(This,aCodeType) (This)->lpVtbl->GetCodeType(This,aCodeType)
#define nsIDOMHTMLObjectElement_SetCodeType(This,aCodeType) (This)->lpVtbl->SetCodeType(This,aCodeType)
#define nsIDOMHTMLObjectElement_GetData(This,aData) (This)->lpVtbl->GetData(This,aData)
#define nsIDOMHTMLObjectElement_SetData(This,aData) (This)->lpVtbl->SetData(This,aData)
#define nsIDOMHTMLObjectElement_GetDeclare(This,aDeclare) (This)->lpVtbl->GetDeclare(This,aDeclare)
#define nsIDOMHTMLObjectElement_SetDeclare(This,aDeclare) (This)->lpVtbl->SetDeclare(This,aDeclare)
#define nsIDOMHTMLObjectElement_GetHeight(This,aHeight) (This)->lpVtbl->GetHeight(This,aHeight)
#define nsIDOMHTMLObjectElement_SetHeight(This,aHeight) (This)->lpVtbl->SetHeight(This,aHeight)
#define nsIDOMHTMLObjectElement_GetHspace(This,aHspace) (This)->lpVtbl->GetHspace(This,aHspace)
#define nsIDOMHTMLObjectElement_SetHspace(This,aHspace) (This)->lpVtbl->SetHspace(This,aHspace)
#define nsIDOMHTMLObjectElement_GetName(This,aName) (This)->lpVtbl->GetName(This,aName)
#define nsIDOMHTMLObjectElement_SetName(This,aName) (This)->lpVtbl->SetName(This,aName)
#define nsIDOMHTMLObjectElement_GetStandby(This,aStandby) (This)->lpVtbl->GetStandby(This,aStandby)
#define nsIDOMHTMLObjectElement_SetStandby(This,aStandby) (This)->lpVtbl->SetStandby(This,aStandby)
#define nsIDOMHTMLObjectElement_GetType(This,aType) (This)->lpVtbl->GetType(This,aType)
#define nsIDOMHTMLObjectElement_SetType(This,aType) (This)->lpVtbl->SetType(This,aType)
#define nsIDOMHTMLObjectElement_GetUseMap(This,aUseMap) (This)->lpVtbl->GetUseMap(This,aUseMap)
#define nsIDOMHTMLObjectElement_SetUseMap(This,aUseMap) (This)->lpVtbl->SetUseMap(This,aUseMap)
#define nsIDOMHTMLObjectElement_GetVspace(This,aVspace) (This)->lpVtbl->GetVspace(This,aVspace)
#define nsIDOMHTMLObjectElement_SetVspace(This,aVspace) (This)->lpVtbl->SetVspace(This,aVspace)
#define nsIDOMHTMLObjectElement_GetWidth(This,aWidth) (This)->lpVtbl->GetWidth(This,aWidth)
#define nsIDOMHTMLObjectElement_SetWidth(This,aWidth) (This)->lpVtbl->SetWidth(This,aWidth)
#define nsIDOMHTMLObjectElement_GetContentDocument(This,aContentDocument) (This)->lpVtbl->GetContentDocument(This,aContentDocument)
#define nsIDOMHTMLObjectElement_GetWillValidate(This,aWillValidate) (This)->lpVtbl->GetWillValidate(This,aWillValidate)
#define nsIDOMHTMLObjectElement_GetValidity(This,aValidity) (This)->lpVtbl->GetValidity(This,aValidity)
#define nsIDOMHTMLObjectElement_GetValidationMessage(This,aValidationMessage) (This)->lpVtbl->GetValidationMessage(This,aValidationMessage)
#define nsIDOMHTMLObjectElement_CheckValidity(This,_retval) (This)->lpVtbl->CheckValidity(This,_retval)
#define nsIDOMHTMLObjectElement_SetCustomValidity(This,error) (This)->lpVtbl->SetCustomValidity(This,error)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_QueryInterface(nsIDOMHTMLObjectElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLObjectElement_AddRef(nsIDOMHTMLObjectElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLObjectElement_Release(nsIDOMHTMLObjectElement* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMHTMLObjectElement methods ***/
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_GetForm(nsIDOMHTMLObjectElement* This,nsIDOMHTMLFormElement **aForm) {
    return This->lpVtbl->GetForm(This,aForm);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_GetCode(nsIDOMHTMLObjectElement* This,nsAString *aCode) {
    return This->lpVtbl->GetCode(This,aCode);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_SetCode(nsIDOMHTMLObjectElement* This,const nsAString *aCode) {
    return This->lpVtbl->SetCode(This,aCode);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_GetAlign(nsIDOMHTMLObjectElement* This,nsAString *aAlign) {
    return This->lpVtbl->GetAlign(This,aAlign);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_SetAlign(nsIDOMHTMLObjectElement* This,const nsAString *aAlign) {
    return This->lpVtbl->SetAlign(This,aAlign);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_GetArchive(nsIDOMHTMLObjectElement* This,nsAString *aArchive) {
    return This->lpVtbl->GetArchive(This,aArchive);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_SetArchive(nsIDOMHTMLObjectElement* This,const nsAString *aArchive) {
    return This->lpVtbl->SetArchive(This,aArchive);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_GetBorder(nsIDOMHTMLObjectElement* This,nsAString *aBorder) {
    return This->lpVtbl->GetBorder(This,aBorder);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_SetBorder(nsIDOMHTMLObjectElement* This,const nsAString *aBorder) {
    return This->lpVtbl->SetBorder(This,aBorder);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_GetCodeBase(nsIDOMHTMLObjectElement* This,nsAString *aCodeBase) {
    return This->lpVtbl->GetCodeBase(This,aCodeBase);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_SetCodeBase(nsIDOMHTMLObjectElement* This,const nsAString *aCodeBase) {
    return This->lpVtbl->SetCodeBase(This,aCodeBase);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_GetCodeType(nsIDOMHTMLObjectElement* This,nsAString *aCodeType) {
    return This->lpVtbl->GetCodeType(This,aCodeType);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_SetCodeType(nsIDOMHTMLObjectElement* This,const nsAString *aCodeType) {
    return This->lpVtbl->SetCodeType(This,aCodeType);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_GetData(nsIDOMHTMLObjectElement* This,nsAString *aData) {
    return This->lpVtbl->GetData(This,aData);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_SetData(nsIDOMHTMLObjectElement* This,const nsAString *aData) {
    return This->lpVtbl->SetData(This,aData);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_GetDeclare(nsIDOMHTMLObjectElement* This,cpp_bool *aDeclare) {
    return This->lpVtbl->GetDeclare(This,aDeclare);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_SetDeclare(nsIDOMHTMLObjectElement* This,cpp_bool aDeclare) {
    return This->lpVtbl->SetDeclare(This,aDeclare);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_GetHeight(nsIDOMHTMLObjectElement* This,nsAString *aHeight) {
    return This->lpVtbl->GetHeight(This,aHeight);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_SetHeight(nsIDOMHTMLObjectElement* This,const nsAString *aHeight) {
    return This->lpVtbl->SetHeight(This,aHeight);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_GetHspace(nsIDOMHTMLObjectElement* This,LONG *aHspace) {
    return This->lpVtbl->GetHspace(This,aHspace);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_SetHspace(nsIDOMHTMLObjectElement* This,LONG aHspace) {
    return This->lpVtbl->SetHspace(This,aHspace);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_GetName(nsIDOMHTMLObjectElement* This,nsAString *aName) {
    return This->lpVtbl->GetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_SetName(nsIDOMHTMLObjectElement* This,const nsAString *aName) {
    return This->lpVtbl->SetName(This,aName);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_GetStandby(nsIDOMHTMLObjectElement* This,nsAString *aStandby) {
    return This->lpVtbl->GetStandby(This,aStandby);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_SetStandby(nsIDOMHTMLObjectElement* This,const nsAString *aStandby) {
    return This->lpVtbl->SetStandby(This,aStandby);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_GetType(nsIDOMHTMLObjectElement* This,nsAString *aType) {
    return This->lpVtbl->GetType(This,aType);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_SetType(nsIDOMHTMLObjectElement* This,const nsAString *aType) {
    return This->lpVtbl->SetType(This,aType);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_GetUseMap(nsIDOMHTMLObjectElement* This,nsAString *aUseMap) {
    return This->lpVtbl->GetUseMap(This,aUseMap);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_SetUseMap(nsIDOMHTMLObjectElement* This,const nsAString *aUseMap) {
    return This->lpVtbl->SetUseMap(This,aUseMap);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_GetVspace(nsIDOMHTMLObjectElement* This,LONG *aVspace) {
    return This->lpVtbl->GetVspace(This,aVspace);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_SetVspace(nsIDOMHTMLObjectElement* This,LONG aVspace) {
    return This->lpVtbl->SetVspace(This,aVspace);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_GetWidth(nsIDOMHTMLObjectElement* This,nsAString *aWidth) {
    return This->lpVtbl->GetWidth(This,aWidth);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_SetWidth(nsIDOMHTMLObjectElement* This,const nsAString *aWidth) {
    return This->lpVtbl->SetWidth(This,aWidth);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_GetContentDocument(nsIDOMHTMLObjectElement* This,nsIDOMDocument **aContentDocument) {
    return This->lpVtbl->GetContentDocument(This,aContentDocument);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_GetWillValidate(nsIDOMHTMLObjectElement* This,cpp_bool *aWillValidate) {
    return This->lpVtbl->GetWillValidate(This,aWillValidate);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_GetValidity(nsIDOMHTMLObjectElement* This,nsIDOMValidityState **aValidity) {
    return This->lpVtbl->GetValidity(This,aValidity);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_GetValidationMessage(nsIDOMHTMLObjectElement* This,nsAString *aValidationMessage) {
    return This->lpVtbl->GetValidationMessage(This,aValidationMessage);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_CheckValidity(nsIDOMHTMLObjectElement* This,cpp_bool *_retval) {
    return This->lpVtbl->CheckValidity(This,_retval);
}
static FORCEINLINE nsresult nsIDOMHTMLObjectElement_SetCustomValidity(nsIDOMHTMLObjectElement* This,const nsAString *error) {
    return This->lpVtbl->SetCustomValidity(This,error);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLObjectElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMHTMLStyleElement interface
 */
#ifndef __nsIDOMHTMLStyleElement_INTERFACE_DEFINED__
#define __nsIDOMHTMLStyleElement_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMHTMLStyleElement, 0xfa326d22, 0x8739, 0x4eef, 0xa8,0x0e, 0x64,0x49,0xbd,0xe6,0x05,0xd2);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("fa326d22-8739-4eef-a80e-6449bde605d2")
nsIDOMHTMLStyleElement : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetDisabled(
        cpp_bool *aDisabled) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDisabled(
        cpp_bool aDisabled) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMedia(
        nsAString *aMedia) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMedia(
        const nsAString *aMedia) = 0;

    virtual nsresult STDMETHODCALLTYPE GetType(
        nsAString *aType) = 0;

    virtual nsresult STDMETHODCALLTYPE SetType(
        const nsAString *aType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScoped(
        cpp_bool *aScoped) = 0;

    virtual nsresult STDMETHODCALLTYPE SetScoped(
        cpp_bool aScoped) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDOMStyleSheet(
        nsIDOMStyleSheet **aDOMStyleSheet) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMHTMLStyleElement, 0xfa326d22, 0x8739, 0x4eef, 0xa8,0x0e, 0x64,0x49,0xbd,0xe6,0x05,0xd2)
#endif
#else
typedef struct nsIDOMHTMLStyleElementVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMHTMLStyleElement *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMHTMLStyleElement *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMHTMLStyleElement *This);

    /*** nsIDOMHTMLStyleElement methods ***/
    nsresult (STDMETHODCALLTYPE *GetDisabled)(
        nsIDOMHTMLStyleElement *This,
        cpp_bool *aDisabled);

    nsresult (STDMETHODCALLTYPE *SetDisabled)(
        nsIDOMHTMLStyleElement *This,
        cpp_bool aDisabled);

    nsresult (STDMETHODCALLTYPE *GetMedia)(
        nsIDOMHTMLStyleElement *This,
        nsAString *aMedia);

    nsresult (STDMETHODCALLTYPE *SetMedia)(
        nsIDOMHTMLStyleElement *This,
        const nsAString *aMedia);

    nsresult (STDMETHODCALLTYPE *GetType)(
        nsIDOMHTMLStyleElement *This,
        nsAString *aType);

    nsresult (STDMETHODCALLTYPE *SetType)(
        nsIDOMHTMLStyleElement *This,
        const nsAString *aType);

    nsresult (STDMETHODCALLTYPE *GetScoped)(
        nsIDOMHTMLStyleElement *This,
        cpp_bool *aScoped);

    nsresult (STDMETHODCALLTYPE *SetScoped)(
        nsIDOMHTMLStyleElement *This,
        cpp_bool aScoped);

    nsresult (STDMETHODCALLTYPE *GetDOMStyleSheet)(
        nsIDOMHTMLStyleElement *This,
        nsIDOMStyleSheet **aDOMStyleSheet);

    END_INTERFACE
} nsIDOMHTMLStyleElementVtbl;

interface nsIDOMHTMLStyleElement {
    CONST_VTBL nsIDOMHTMLStyleElementVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMHTMLStyleElement_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMHTMLStyleElement_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMHTMLStyleElement_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMHTMLStyleElement methods ***/
#define nsIDOMHTMLStyleElement_GetDisabled(This,aDisabled) (This)->lpVtbl->GetDisabled(This,aDisabled)
#define nsIDOMHTMLStyleElement_SetDisabled(This,aDisabled) (This)->lpVtbl->SetDisabled(This,aDisabled)
#define nsIDOMHTMLStyleElement_GetMedia(This,aMedia) (This)->lpVtbl->GetMedia(This,aMedia)
#define nsIDOMHTMLStyleElement_SetMedia(This,aMedia) (This)->lpVtbl->SetMedia(This,aMedia)
#define nsIDOMHTMLStyleElement_GetType(This,aType) (This)->lpVtbl->GetType(This,aType)
#define nsIDOMHTMLStyleElement_SetType(This,aType) (This)->lpVtbl->SetType(This,aType)
#define nsIDOMHTMLStyleElement_GetScoped(This,aScoped) (This)->lpVtbl->GetScoped(This,aScoped)
#define nsIDOMHTMLStyleElement_SetScoped(This,aScoped) (This)->lpVtbl->SetScoped(This,aScoped)
#define nsIDOMHTMLStyleElement_GetDOMStyleSheet(This,aDOMStyleSheet) (This)->lpVtbl->GetDOMStyleSheet(This,aDOMStyleSheet)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMHTMLStyleElement_QueryInterface(nsIDOMHTMLStyleElement* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLStyleElement_AddRef(nsIDOMHTMLStyleElement* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMHTMLStyleElement_Release(nsIDOMHTMLStyleElement* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMHTMLStyleElement methods ***/
static FORCEINLINE nsresult nsIDOMHTMLStyleElement_GetDisabled(nsIDOMHTMLStyleElement* This,cpp_bool *aDisabled) {
    return This->lpVtbl->GetDisabled(This,aDisabled);
}
static FORCEINLINE nsresult nsIDOMHTMLStyleElement_SetDisabled(nsIDOMHTMLStyleElement* This,cpp_bool aDisabled) {
    return This->lpVtbl->SetDisabled(This,aDisabled);
}
static FORCEINLINE nsresult nsIDOMHTMLStyleElement_GetMedia(nsIDOMHTMLStyleElement* This,nsAString *aMedia) {
    return This->lpVtbl->GetMedia(This,aMedia);
}
static FORCEINLINE nsresult nsIDOMHTMLStyleElement_SetMedia(nsIDOMHTMLStyleElement* This,const nsAString *aMedia) {
    return This->lpVtbl->SetMedia(This,aMedia);
}
static FORCEINLINE nsresult nsIDOMHTMLStyleElement_GetType(nsIDOMHTMLStyleElement* This,nsAString *aType) {
    return This->lpVtbl->GetType(This,aType);
}
static FORCEINLINE nsresult nsIDOMHTMLStyleElement_SetType(nsIDOMHTMLStyleElement* This,const nsAString *aType) {
    return This->lpVtbl->SetType(This,aType);
}
static FORCEINLINE nsresult nsIDOMHTMLStyleElement_GetScoped(nsIDOMHTMLStyleElement* This,cpp_bool *aScoped) {
    return This->lpVtbl->GetScoped(This,aScoped);
}
static FORCEINLINE nsresult nsIDOMHTMLStyleElement_SetScoped(nsIDOMHTMLStyleElement* This,cpp_bool aScoped) {
    return This->lpVtbl->SetScoped(This,aScoped);
}
static FORCEINLINE nsresult nsIDOMHTMLStyleElement_GetDOMStyleSheet(nsIDOMHTMLStyleElement* This,nsIDOMStyleSheet **aDOMStyleSheet) {
    return This->lpVtbl->GetDOMStyleSheet(This,aDOMStyleSheet);
}
#endif
#endif

#endif


#endif  /* __nsIDOMHTMLStyleElement_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIURIContentListener interface
 */
#ifndef __nsIURIContentListener_INTERFACE_DEFINED__
#define __nsIURIContentListener_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIURIContentListener, 0x10a28f38, 0x32e8, 0x4c63, 0x8a,0xa1, 0x12,0xea,0xae,0xbc,0x36,0x9a);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("10a28f38-32e8-4c63-8aa1-12eaaebc369a")
nsIURIContentListener : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE OnStartURIOpen(
        nsIURI *aURI,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE DoContent(
        const nsACString *aContentType,
        cpp_bool aIsContentPreferred,
        nsIRequest *aRequest,
        nsIStreamListener **aContentHandler,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE IsPreferred(
        const char *aContentType,
        char **aDesiredContentType,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CanHandleContent(
        const char *aContentType,
        cpp_bool aIsContentPreferred,
        char **aDesiredContentType,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLoadCookie(
        nsISupports **aLoadCookie) = 0;

    virtual nsresult STDMETHODCALLTYPE SetLoadCookie(
        nsISupports *aLoadCookie) = 0;

    virtual nsresult STDMETHODCALLTYPE GetParentContentListener(
        nsIURIContentListener **aParentContentListener) = 0;

    virtual nsresult STDMETHODCALLTYPE SetParentContentListener(
        nsIURIContentListener *aParentContentListener) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIURIContentListener, 0x10a28f38, 0x32e8, 0x4c63, 0x8a,0xa1, 0x12,0xea,0xae,0xbc,0x36,0x9a)
#endif
#else
typedef struct nsIURIContentListenerVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIURIContentListener *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIURIContentListener *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIURIContentListener *This);

    /*** nsIURIContentListener methods ***/
    nsresult (STDMETHODCALLTYPE *OnStartURIOpen)(
        nsIURIContentListener *This,
        nsIURI *aURI,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *DoContent)(
        nsIURIContentListener *This,
        const nsACString *aContentType,
        cpp_bool aIsContentPreferred,
        nsIRequest *aRequest,
        nsIStreamListener **aContentHandler,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *IsPreferred)(
        nsIURIContentListener *This,
        const char *aContentType,
        char **aDesiredContentType,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CanHandleContent)(
        nsIURIContentListener *This,
        const char *aContentType,
        cpp_bool aIsContentPreferred,
        char **aDesiredContentType,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetLoadCookie)(
        nsIURIContentListener *This,
        nsISupports **aLoadCookie);

    nsresult (STDMETHODCALLTYPE *SetLoadCookie)(
        nsIURIContentListener *This,
        nsISupports *aLoadCookie);

    nsresult (STDMETHODCALLTYPE *GetParentContentListener)(
        nsIURIContentListener *This,
        nsIURIContentListener **aParentContentListener);

    nsresult (STDMETHODCALLTYPE *SetParentContentListener)(
        nsIURIContentListener *This,
        nsIURIContentListener *aParentContentListener);

    END_INTERFACE
} nsIURIContentListenerVtbl;

interface nsIURIContentListener {
    CONST_VTBL nsIURIContentListenerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIURIContentListener_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIURIContentListener_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIURIContentListener_Release(This) (This)->lpVtbl->Release(This)
/*** nsIURIContentListener methods ***/
#define nsIURIContentListener_OnStartURIOpen(This,aURI,_retval) (This)->lpVtbl->OnStartURIOpen(This,aURI,_retval)
#define nsIURIContentListener_DoContent(This,aContentType,aIsContentPreferred,aRequest,aContentHandler,_retval) (This)->lpVtbl->DoContent(This,aContentType,aIsContentPreferred,aRequest,aContentHandler,_retval)
#define nsIURIContentListener_IsPreferred(This,aContentType,aDesiredContentType,_retval) (This)->lpVtbl->IsPreferred(This,aContentType,aDesiredContentType,_retval)
#define nsIURIContentListener_CanHandleContent(This,aContentType,aIsContentPreferred,aDesiredContentType,_retval) (This)->lpVtbl->CanHandleContent(This,aContentType,aIsContentPreferred,aDesiredContentType,_retval)
#define nsIURIContentListener_GetLoadCookie(This,aLoadCookie) (This)->lpVtbl->GetLoadCookie(This,aLoadCookie)
#define nsIURIContentListener_SetLoadCookie(This,aLoadCookie) (This)->lpVtbl->SetLoadCookie(This,aLoadCookie)
#define nsIURIContentListener_GetParentContentListener(This,aParentContentListener) (This)->lpVtbl->GetParentContentListener(This,aParentContentListener)
#define nsIURIContentListener_SetParentContentListener(This,aParentContentListener) (This)->lpVtbl->SetParentContentListener(This,aParentContentListener)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIURIContentListener_QueryInterface(nsIURIContentListener* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIURIContentListener_AddRef(nsIURIContentListener* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIURIContentListener_Release(nsIURIContentListener* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIURIContentListener methods ***/
static FORCEINLINE nsresult nsIURIContentListener_OnStartURIOpen(nsIURIContentListener* This,nsIURI *aURI,cpp_bool *_retval) {
    return This->lpVtbl->OnStartURIOpen(This,aURI,_retval);
}
static FORCEINLINE nsresult nsIURIContentListener_DoContent(nsIURIContentListener* This,const nsACString *aContentType,cpp_bool aIsContentPreferred,nsIRequest *aRequest,nsIStreamListener **aContentHandler,cpp_bool *_retval) {
    return This->lpVtbl->DoContent(This,aContentType,aIsContentPreferred,aRequest,aContentHandler,_retval);
}
static FORCEINLINE nsresult nsIURIContentListener_IsPreferred(nsIURIContentListener* This,const char *aContentType,char **aDesiredContentType,cpp_bool *_retval) {
    return This->lpVtbl->IsPreferred(This,aContentType,aDesiredContentType,_retval);
}
static FORCEINLINE nsresult nsIURIContentListener_CanHandleContent(nsIURIContentListener* This,const char *aContentType,cpp_bool aIsContentPreferred,char **aDesiredContentType,cpp_bool *_retval) {
    return This->lpVtbl->CanHandleContent(This,aContentType,aIsContentPreferred,aDesiredContentType,_retval);
}
static FORCEINLINE nsresult nsIURIContentListener_GetLoadCookie(nsIURIContentListener* This,nsISupports **aLoadCookie) {
    return This->lpVtbl->GetLoadCookie(This,aLoadCookie);
}
static FORCEINLINE nsresult nsIURIContentListener_SetLoadCookie(nsIURIContentListener* This,nsISupports *aLoadCookie) {
    return This->lpVtbl->SetLoadCookie(This,aLoadCookie);
}
static FORCEINLINE nsresult nsIURIContentListener_GetParentContentListener(nsIURIContentListener* This,nsIURIContentListener **aParentContentListener) {
    return This->lpVtbl->GetParentContentListener(This,aParentContentListener);
}
static FORCEINLINE nsresult nsIURIContentListener_SetParentContentListener(nsIURIContentListener* This,nsIURIContentListener *aParentContentListener) {
    return This->lpVtbl->SetParentContentListener(This,aParentContentListener);
}
#endif
#endif

#endif


#endif  /* __nsIURIContentListener_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsITooltipListener interface
 */
#ifndef __nsITooltipListener_INTERFACE_DEFINED__
#define __nsITooltipListener_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsITooltipListener, 0x44b78386, 0x1dd2, 0x11b2, 0x9a,0xd2, 0xe4,0xee,0xe2,0xca,0x19,0x16);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("44b78386-1dd2-11b2-9ad2-e4eee2ca1916")
nsITooltipListener : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE OnShowTooltip(
        LONG aXCoords,
        LONG aYCoords,
        const PRUnichar *aTipText) = 0;

    virtual nsresult STDMETHODCALLTYPE OnHideTooltip(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsITooltipListener, 0x44b78386, 0x1dd2, 0x11b2, 0x9a,0xd2, 0xe4,0xee,0xe2,0xca,0x19,0x16)
#endif
#else
typedef struct nsITooltipListenerVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsITooltipListener *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsITooltipListener *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsITooltipListener *This);

    /*** nsITooltipListener methods ***/
    nsresult (STDMETHODCALLTYPE *OnShowTooltip)(
        nsITooltipListener *This,
        LONG aXCoords,
        LONG aYCoords,
        const PRUnichar *aTipText);

    nsresult (STDMETHODCALLTYPE *OnHideTooltip)(
        nsITooltipListener *This);

    END_INTERFACE
} nsITooltipListenerVtbl;

interface nsITooltipListener {
    CONST_VTBL nsITooltipListenerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsITooltipListener_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsITooltipListener_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsITooltipListener_Release(This) (This)->lpVtbl->Release(This)
/*** nsITooltipListener methods ***/
#define nsITooltipListener_OnShowTooltip(This,aXCoords,aYCoords,aTipText) (This)->lpVtbl->OnShowTooltip(This,aXCoords,aYCoords,aTipText)
#define nsITooltipListener_OnHideTooltip(This) (This)->lpVtbl->OnHideTooltip(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsITooltipListener_QueryInterface(nsITooltipListener* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsITooltipListener_AddRef(nsITooltipListener* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsITooltipListener_Release(nsITooltipListener* This) {
    return This->lpVtbl->Release(This);
}
/*** nsITooltipListener methods ***/
static FORCEINLINE nsresult nsITooltipListener_OnShowTooltip(nsITooltipListener* This,LONG aXCoords,LONG aYCoords,const PRUnichar *aTipText) {
    return This->lpVtbl->OnShowTooltip(This,aXCoords,aYCoords,aTipText);
}
static FORCEINLINE nsresult nsITooltipListener_OnHideTooltip(nsITooltipListener* This) {
    return This->lpVtbl->OnHideTooltip(This);
}
#endif
#endif

#endif


#endif  /* __nsITooltipListener_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIWebBrowser interface
 */
#ifndef __nsIWebBrowser_INTERFACE_DEFINED__
#define __nsIWebBrowser_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIWebBrowser, 0x4052b6da, 0x4faa, 0x4646, 0xb3,0xa1, 0x7e,0x16,0xa0,0x1c,0x2d,0xc2);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("4052b6da-4faa-4646-b3a1-7e16a01c2dc2")
nsIWebBrowser : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE AddWebBrowserListener(
        nsIWeakReference *aListener,
        const nsIID *aIID) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveWebBrowserListener(
        nsIWeakReference *aListener,
        const nsIID *aIID) = 0;

    virtual nsresult STDMETHODCALLTYPE GetContainerWindow(
        nsIWebBrowserChrome **aContainerWindow) = 0;

    virtual nsresult STDMETHODCALLTYPE SetContainerWindow(
        nsIWebBrowserChrome *aContainerWindow) = 0;

    virtual nsresult STDMETHODCALLTYPE GetParentURIContentListener(
        nsIURIContentListener **aParentURIContentListener) = 0;

    virtual nsresult STDMETHODCALLTYPE SetParentURIContentListener(
        nsIURIContentListener *aParentURIContentListener) = 0;

    virtual nsresult STDMETHODCALLTYPE GetContentDOMWindow(
        mozIDOMWindowProxy **aContentDOMWindow) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsActive(
        cpp_bool *aIsActive) = 0;

    virtual nsresult STDMETHODCALLTYPE SetIsActive(
        cpp_bool aIsActive) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIWebBrowser, 0x4052b6da, 0x4faa, 0x4646, 0xb3,0xa1, 0x7e,0x16,0xa0,0x1c,0x2d,0xc2)
#endif
#else
typedef struct nsIWebBrowserVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIWebBrowser *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIWebBrowser *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIWebBrowser *This);

    /*** nsIWebBrowser methods ***/
    nsresult (STDMETHODCALLTYPE *AddWebBrowserListener)(
        nsIWebBrowser *This,
        nsIWeakReference *aListener,
        const nsIID *aIID);

    nsresult (STDMETHODCALLTYPE *RemoveWebBrowserListener)(
        nsIWebBrowser *This,
        nsIWeakReference *aListener,
        const nsIID *aIID);

    nsresult (STDMETHODCALLTYPE *GetContainerWindow)(
        nsIWebBrowser *This,
        nsIWebBrowserChrome **aContainerWindow);

    nsresult (STDMETHODCALLTYPE *SetContainerWindow)(
        nsIWebBrowser *This,
        nsIWebBrowserChrome *aContainerWindow);

    nsresult (STDMETHODCALLTYPE *GetParentURIContentListener)(
        nsIWebBrowser *This,
        nsIURIContentListener **aParentURIContentListener);

    nsresult (STDMETHODCALLTYPE *SetParentURIContentListener)(
        nsIWebBrowser *This,
        nsIURIContentListener *aParentURIContentListener);

    nsresult (STDMETHODCALLTYPE *GetContentDOMWindow)(
        nsIWebBrowser *This,
        mozIDOMWindowProxy **aContentDOMWindow);

    nsresult (STDMETHODCALLTYPE *GetIsActive)(
        nsIWebBrowser *This,
        cpp_bool *aIsActive);

    nsresult (STDMETHODCALLTYPE *SetIsActive)(
        nsIWebBrowser *This,
        cpp_bool aIsActive);

    END_INTERFACE
} nsIWebBrowserVtbl;

interface nsIWebBrowser {
    CONST_VTBL nsIWebBrowserVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIWebBrowser_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIWebBrowser_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIWebBrowser_Release(This) (This)->lpVtbl->Release(This)
/*** nsIWebBrowser methods ***/
#define nsIWebBrowser_AddWebBrowserListener(This,aListener,aIID) (This)->lpVtbl->AddWebBrowserListener(This,aListener,aIID)
#define nsIWebBrowser_RemoveWebBrowserListener(This,aListener,aIID) (This)->lpVtbl->RemoveWebBrowserListener(This,aListener,aIID)
#define nsIWebBrowser_GetContainerWindow(This,aContainerWindow) (This)->lpVtbl->GetContainerWindow(This,aContainerWindow)
#define nsIWebBrowser_SetContainerWindow(This,aContainerWindow) (This)->lpVtbl->SetContainerWindow(This,aContainerWindow)
#define nsIWebBrowser_GetParentURIContentListener(This,aParentURIContentListener) (This)->lpVtbl->GetParentURIContentListener(This,aParentURIContentListener)
#define nsIWebBrowser_SetParentURIContentListener(This,aParentURIContentListener) (This)->lpVtbl->SetParentURIContentListener(This,aParentURIContentListener)
#define nsIWebBrowser_GetContentDOMWindow(This,aContentDOMWindow) (This)->lpVtbl->GetContentDOMWindow(This,aContentDOMWindow)
#define nsIWebBrowser_GetIsActive(This,aIsActive) (This)->lpVtbl->GetIsActive(This,aIsActive)
#define nsIWebBrowser_SetIsActive(This,aIsActive) (This)->lpVtbl->SetIsActive(This,aIsActive)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIWebBrowser_QueryInterface(nsIWebBrowser* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIWebBrowser_AddRef(nsIWebBrowser* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIWebBrowser_Release(nsIWebBrowser* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIWebBrowser methods ***/
static FORCEINLINE nsresult nsIWebBrowser_AddWebBrowserListener(nsIWebBrowser* This,nsIWeakReference *aListener,const nsIID *aIID) {
    return This->lpVtbl->AddWebBrowserListener(This,aListener,aIID);
}
static FORCEINLINE nsresult nsIWebBrowser_RemoveWebBrowserListener(nsIWebBrowser* This,nsIWeakReference *aListener,const nsIID *aIID) {
    return This->lpVtbl->RemoveWebBrowserListener(This,aListener,aIID);
}
static FORCEINLINE nsresult nsIWebBrowser_GetContainerWindow(nsIWebBrowser* This,nsIWebBrowserChrome **aContainerWindow) {
    return This->lpVtbl->GetContainerWindow(This,aContainerWindow);
}
static FORCEINLINE nsresult nsIWebBrowser_SetContainerWindow(nsIWebBrowser* This,nsIWebBrowserChrome *aContainerWindow) {
    return This->lpVtbl->SetContainerWindow(This,aContainerWindow);
}
static FORCEINLINE nsresult nsIWebBrowser_GetParentURIContentListener(nsIWebBrowser* This,nsIURIContentListener **aParentURIContentListener) {
    return This->lpVtbl->GetParentURIContentListener(This,aParentURIContentListener);
}
static FORCEINLINE nsresult nsIWebBrowser_SetParentURIContentListener(nsIWebBrowser* This,nsIURIContentListener *aParentURIContentListener) {
    return This->lpVtbl->SetParentURIContentListener(This,aParentURIContentListener);
}
static FORCEINLINE nsresult nsIWebBrowser_GetContentDOMWindow(nsIWebBrowser* This,mozIDOMWindowProxy **aContentDOMWindow) {
    return This->lpVtbl->GetContentDOMWindow(This,aContentDOMWindow);
}
static FORCEINLINE nsresult nsIWebBrowser_GetIsActive(nsIWebBrowser* This,cpp_bool *aIsActive) {
    return This->lpVtbl->GetIsActive(This,aIsActive);
}
static FORCEINLINE nsresult nsIWebBrowser_SetIsActive(nsIWebBrowser* This,cpp_bool aIsActive) {
    return This->lpVtbl->SetIsActive(This,aIsActive);
}
#endif
#endif

#endif


#endif  /* __nsIWebBrowser_INTERFACE_DEFINED__ */

#define SETUP_ALLOW_JAVASCRIPT  2
#define SETUP_IS_CHROME_WRAPPER 7
#define SETUP_DISABLE_NOSCRIPT  16
/*****************************************************************************
 * nsIWebBrowserSetup interface
 */
#ifndef __nsIWebBrowserSetup_INTERFACE_DEFINED__
#define __nsIWebBrowserSetup_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIWebBrowserSetup, 0xf15398a0, 0x8018, 0x11d3, 0xaf,0x70, 0x00,0xa0,0x24,0xff,0xc0,0x8c);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("f15398a0-8018-11d3-af70-00a024ffc08c")
nsIWebBrowserSetup : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE SetProperty(
        UINT32 aId,
        UINT32 aValue) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIWebBrowserSetup, 0xf15398a0, 0x8018, 0x11d3, 0xaf,0x70, 0x00,0xa0,0x24,0xff,0xc0,0x8c)
#endif
#else
typedef struct nsIWebBrowserSetupVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIWebBrowserSetup *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIWebBrowserSetup *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIWebBrowserSetup *This);

    /*** nsIWebBrowserSetup methods ***/
    nsresult (STDMETHODCALLTYPE *SetProperty)(
        nsIWebBrowserSetup *This,
        UINT32 aId,
        UINT32 aValue);

    END_INTERFACE
} nsIWebBrowserSetupVtbl;

interface nsIWebBrowserSetup {
    CONST_VTBL nsIWebBrowserSetupVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIWebBrowserSetup_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIWebBrowserSetup_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIWebBrowserSetup_Release(This) (This)->lpVtbl->Release(This)
/*** nsIWebBrowserSetup methods ***/
#define nsIWebBrowserSetup_SetProperty(This,aId,aValue) (This)->lpVtbl->SetProperty(This,aId,aValue)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIWebBrowserSetup_QueryInterface(nsIWebBrowserSetup* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIWebBrowserSetup_AddRef(nsIWebBrowserSetup* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIWebBrowserSetup_Release(nsIWebBrowserSetup* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIWebBrowserSetup methods ***/
static FORCEINLINE nsresult nsIWebBrowserSetup_SetProperty(nsIWebBrowserSetup* This,UINT32 aId,UINT32 aValue) {
    return This->lpVtbl->SetProperty(This,aId,aValue);
}
#endif
#endif

#endif


#endif  /* __nsIWebBrowserSetup_INTERFACE_DEFINED__ */

typedef void *nativeWindow;
/*****************************************************************************
 * nsIBaseWindow interface
 */
#ifndef __nsIBaseWindow_INTERFACE_DEFINED__
#define __nsIBaseWindow_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIBaseWindow, 0xca635529, 0xa977, 0x4552, 0x9b,0x8a, 0x66,0x18,0x7e,0x54,0xd8,0x82);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ca635529-a977-4552-9b8a-66187e54d882")
nsIBaseWindow : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE InitWindow(
        nativeWindow parentNativeWindow,
        nsIWidget *parentWidget,
        LONG x,
        LONG y,
        LONG cx,
        LONG cy) = 0;

    virtual nsresult STDMETHODCALLTYPE Create(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE Destroy(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPosition(
        LONG x,
        LONG y) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPositionDesktopPix(
        LONG x,
        LONG y) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPosition(
        LONG *x,
        LONG *y) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSize(
        LONG cx,
        LONG cy,
        cpp_bool fRepaint) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSize(
        LONG *cx,
        LONG *cy) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPositionAndSize(
        LONG x,
        LONG y,
        LONG cx,
        LONG cy,
        cpp_bool fRepaint) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPositionAndSize(
        LONG *x,
        LONG *y,
        LONG *cx,
        LONG *cy) = 0;

    virtual nsresult STDMETHODCALLTYPE Repaint(
        cpp_bool force) = 0;

    virtual nsresult STDMETHODCALLTYPE GetParentWidget(
        nsIWidget **aParentWidget) = 0;

    virtual nsresult STDMETHODCALLTYPE SetParentWidget(
        nsIWidget *aParentWidget) = 0;

    virtual nsresult STDMETHODCALLTYPE GetParentNativeWindow(
        nativeWindow *aParentNativeWindow) = 0;

    virtual nsresult STDMETHODCALLTYPE SetParentNativeWindow(
        nativeWindow aParentNativeWindow) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNativeHandle(
        nsAString *aNativeHandle) = 0;

    virtual nsresult STDMETHODCALLTYPE GetVisibility(
        cpp_bool *aVisibility) = 0;

    virtual nsresult STDMETHODCALLTYPE SetVisibility(
        cpp_bool aVisibility) = 0;

    virtual nsresult STDMETHODCALLTYPE GetEnabled(
        cpp_bool *aEnabled) = 0;

    virtual nsresult STDMETHODCALLTYPE SetEnabled(
        cpp_bool aEnabled) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMainWidget(
        nsIWidget **aMainWidget) = 0;

    virtual nsresult STDMETHODCALLTYPE GetUnscaledDevicePixelsPerCSSPixel(
        double *aUnscaledDevicePixelsPerCSSPixel) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDevicePixelsPerDesktopPixel(
        double *aDevicePixelsPerDesktopPixel) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFocus(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTitle(
        PRUnichar **aTitle) = 0;

    virtual nsresult STDMETHODCALLTYPE SetTitle(
        const PRUnichar *aTitle) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIBaseWindow, 0xca635529, 0xa977, 0x4552, 0x9b,0x8a, 0x66,0x18,0x7e,0x54,0xd8,0x82)
#endif
#else
typedef struct nsIBaseWindowVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIBaseWindow *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIBaseWindow *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIBaseWindow *This);

    /*** nsIBaseWindow methods ***/
    nsresult (STDMETHODCALLTYPE *InitWindow)(
        nsIBaseWindow *This,
        nativeWindow parentNativeWindow,
        nsIWidget *parentWidget,
        LONG x,
        LONG y,
        LONG cx,
        LONG cy);

    nsresult (STDMETHODCALLTYPE *Create)(
        nsIBaseWindow *This);

    nsresult (STDMETHODCALLTYPE *Destroy)(
        nsIBaseWindow *This);

    nsresult (STDMETHODCALLTYPE *SetPosition)(
        nsIBaseWindow *This,
        LONG x,
        LONG y);

    nsresult (STDMETHODCALLTYPE *SetPositionDesktopPix)(
        nsIBaseWindow *This,
        LONG x,
        LONG y);

    nsresult (STDMETHODCALLTYPE *GetPosition)(
        nsIBaseWindow *This,
        LONG *x,
        LONG *y);

    nsresult (STDMETHODCALLTYPE *SetSize)(
        nsIBaseWindow *This,
        LONG cx,
        LONG cy,
        cpp_bool fRepaint);

    nsresult (STDMETHODCALLTYPE *GetSize)(
        nsIBaseWindow *This,
        LONG *cx,
        LONG *cy);

    nsresult (STDMETHODCALLTYPE *SetPositionAndSize)(
        nsIBaseWindow *This,
        LONG x,
        LONG y,
        LONG cx,
        LONG cy,
        cpp_bool fRepaint);

    nsresult (STDMETHODCALLTYPE *GetPositionAndSize)(
        nsIBaseWindow *This,
        LONG *x,
        LONG *y,
        LONG *cx,
        LONG *cy);

    nsresult (STDMETHODCALLTYPE *Repaint)(
        nsIBaseWindow *This,
        cpp_bool force);

    nsresult (STDMETHODCALLTYPE *GetParentWidget)(
        nsIBaseWindow *This,
        nsIWidget **aParentWidget);

    nsresult (STDMETHODCALLTYPE *SetParentWidget)(
        nsIBaseWindow *This,
        nsIWidget *aParentWidget);

    nsresult (STDMETHODCALLTYPE *GetParentNativeWindow)(
        nsIBaseWindow *This,
        nativeWindow *aParentNativeWindow);

    nsresult (STDMETHODCALLTYPE *SetParentNativeWindow)(
        nsIBaseWindow *This,
        nativeWindow aParentNativeWindow);

    nsresult (STDMETHODCALLTYPE *GetNativeHandle)(
        nsIBaseWindow *This,
        nsAString *aNativeHandle);

    nsresult (STDMETHODCALLTYPE *GetVisibility)(
        nsIBaseWindow *This,
        cpp_bool *aVisibility);

    nsresult (STDMETHODCALLTYPE *SetVisibility)(
        nsIBaseWindow *This,
        cpp_bool aVisibility);

    nsresult (STDMETHODCALLTYPE *GetEnabled)(
        nsIBaseWindow *This,
        cpp_bool *aEnabled);

    nsresult (STDMETHODCALLTYPE *SetEnabled)(
        nsIBaseWindow *This,
        cpp_bool aEnabled);

    nsresult (STDMETHODCALLTYPE *GetMainWidget)(
        nsIBaseWindow *This,
        nsIWidget **aMainWidget);

    nsresult (STDMETHODCALLTYPE *GetUnscaledDevicePixelsPerCSSPixel)(
        nsIBaseWindow *This,
        double *aUnscaledDevicePixelsPerCSSPixel);

    nsresult (STDMETHODCALLTYPE *GetDevicePixelsPerDesktopPixel)(
        nsIBaseWindow *This,
        double *aDevicePixelsPerDesktopPixel);

    nsresult (STDMETHODCALLTYPE *SetFocus)(
        nsIBaseWindow *This);

    nsresult (STDMETHODCALLTYPE *GetTitle)(
        nsIBaseWindow *This,
        PRUnichar **aTitle);

    nsresult (STDMETHODCALLTYPE *SetTitle)(
        nsIBaseWindow *This,
        const PRUnichar *aTitle);

    END_INTERFACE
} nsIBaseWindowVtbl;

interface nsIBaseWindow {
    CONST_VTBL nsIBaseWindowVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIBaseWindow_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIBaseWindow_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIBaseWindow_Release(This) (This)->lpVtbl->Release(This)
/*** nsIBaseWindow methods ***/
#define nsIBaseWindow_InitWindow(This,parentNativeWindow,parentWidget,x,y,cx,cy) (This)->lpVtbl->InitWindow(This,parentNativeWindow,parentWidget,x,y,cx,cy)
#define nsIBaseWindow_Create(This) (This)->lpVtbl->Create(This)
#define nsIBaseWindow_Destroy(This) (This)->lpVtbl->Destroy(This)
#define nsIBaseWindow_SetPosition(This,x,y) (This)->lpVtbl->SetPosition(This,x,y)
#define nsIBaseWindow_SetPositionDesktopPix(This,x,y) (This)->lpVtbl->SetPositionDesktopPix(This,x,y)
#define nsIBaseWindow_GetPosition(This,x,y) (This)->lpVtbl->GetPosition(This,x,y)
#define nsIBaseWindow_SetSize(This,cx,cy,fRepaint) (This)->lpVtbl->SetSize(This,cx,cy,fRepaint)
#define nsIBaseWindow_GetSize(This,cx,cy) (This)->lpVtbl->GetSize(This,cx,cy)
#define nsIBaseWindow_SetPositionAndSize(This,x,y,cx,cy,fRepaint) (This)->lpVtbl->SetPositionAndSize(This,x,y,cx,cy,fRepaint)
#define nsIBaseWindow_GetPositionAndSize(This,x,y,cx,cy) (This)->lpVtbl->GetPositionAndSize(This,x,y,cx,cy)
#define nsIBaseWindow_Repaint(This,force) (This)->lpVtbl->Repaint(This,force)
#define nsIBaseWindow_GetParentWidget(This,aParentWidget) (This)->lpVtbl->GetParentWidget(This,aParentWidget)
#define nsIBaseWindow_SetParentWidget(This,aParentWidget) (This)->lpVtbl->SetParentWidget(This,aParentWidget)
#define nsIBaseWindow_GetParentNativeWindow(This,aParentNativeWindow) (This)->lpVtbl->GetParentNativeWindow(This,aParentNativeWindow)
#define nsIBaseWindow_SetParentNativeWindow(This,aParentNativeWindow) (This)->lpVtbl->SetParentNativeWindow(This,aParentNativeWindow)
#define nsIBaseWindow_GetNativeHandle(This,aNativeHandle) (This)->lpVtbl->GetNativeHandle(This,aNativeHandle)
#define nsIBaseWindow_GetVisibility(This,aVisibility) (This)->lpVtbl->GetVisibility(This,aVisibility)
#define nsIBaseWindow_SetVisibility(This,aVisibility) (This)->lpVtbl->SetVisibility(This,aVisibility)
#define nsIBaseWindow_GetEnabled(This,aEnabled) (This)->lpVtbl->GetEnabled(This,aEnabled)
#define nsIBaseWindow_SetEnabled(This,aEnabled) (This)->lpVtbl->SetEnabled(This,aEnabled)
#define nsIBaseWindow_GetMainWidget(This,aMainWidget) (This)->lpVtbl->GetMainWidget(This,aMainWidget)
#define nsIBaseWindow_GetUnscaledDevicePixelsPerCSSPixel(This,aUnscaledDevicePixelsPerCSSPixel) (This)->lpVtbl->GetUnscaledDevicePixelsPerCSSPixel(This,aUnscaledDevicePixelsPerCSSPixel)
#define nsIBaseWindow_GetDevicePixelsPerDesktopPixel(This,aDevicePixelsPerDesktopPixel) (This)->lpVtbl->GetDevicePixelsPerDesktopPixel(This,aDevicePixelsPerDesktopPixel)
#define nsIBaseWindow_SetFocus(This) (This)->lpVtbl->SetFocus(This)
#define nsIBaseWindow_GetTitle(This,aTitle) (This)->lpVtbl->GetTitle(This,aTitle)
#define nsIBaseWindow_SetTitle(This,aTitle) (This)->lpVtbl->SetTitle(This,aTitle)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIBaseWindow_QueryInterface(nsIBaseWindow* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIBaseWindow_AddRef(nsIBaseWindow* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIBaseWindow_Release(nsIBaseWindow* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIBaseWindow methods ***/
static FORCEINLINE nsresult nsIBaseWindow_InitWindow(nsIBaseWindow* This,nativeWindow parentNativeWindow,nsIWidget *parentWidget,LONG x,LONG y,LONG cx,LONG cy) {
    return This->lpVtbl->InitWindow(This,parentNativeWindow,parentWidget,x,y,cx,cy);
}
static FORCEINLINE nsresult nsIBaseWindow_Create(nsIBaseWindow* This) {
    return This->lpVtbl->Create(This);
}
static FORCEINLINE nsresult nsIBaseWindow_Destroy(nsIBaseWindow* This) {
    return This->lpVtbl->Destroy(This);
}
static FORCEINLINE nsresult nsIBaseWindow_SetPosition(nsIBaseWindow* This,LONG x,LONG y) {
    return This->lpVtbl->SetPosition(This,x,y);
}
static FORCEINLINE nsresult nsIBaseWindow_SetPositionDesktopPix(nsIBaseWindow* This,LONG x,LONG y) {
    return This->lpVtbl->SetPositionDesktopPix(This,x,y);
}
static FORCEINLINE nsresult nsIBaseWindow_GetPosition(nsIBaseWindow* This,LONG *x,LONG *y) {
    return This->lpVtbl->GetPosition(This,x,y);
}
static FORCEINLINE nsresult nsIBaseWindow_SetSize(nsIBaseWindow* This,LONG cx,LONG cy,cpp_bool fRepaint) {
    return This->lpVtbl->SetSize(This,cx,cy,fRepaint);
}
static FORCEINLINE nsresult nsIBaseWindow_GetSize(nsIBaseWindow* This,LONG *cx,LONG *cy) {
    return This->lpVtbl->GetSize(This,cx,cy);
}
static FORCEINLINE nsresult nsIBaseWindow_SetPositionAndSize(nsIBaseWindow* This,LONG x,LONG y,LONG cx,LONG cy,cpp_bool fRepaint) {
    return This->lpVtbl->SetPositionAndSize(This,x,y,cx,cy,fRepaint);
}
static FORCEINLINE nsresult nsIBaseWindow_GetPositionAndSize(nsIBaseWindow* This,LONG *x,LONG *y,LONG *cx,LONG *cy) {
    return This->lpVtbl->GetPositionAndSize(This,x,y,cx,cy);
}
static FORCEINLINE nsresult nsIBaseWindow_Repaint(nsIBaseWindow* This,cpp_bool force) {
    return This->lpVtbl->Repaint(This,force);
}
static FORCEINLINE nsresult nsIBaseWindow_GetParentWidget(nsIBaseWindow* This,nsIWidget **aParentWidget) {
    return This->lpVtbl->GetParentWidget(This,aParentWidget);
}
static FORCEINLINE nsresult nsIBaseWindow_SetParentWidget(nsIBaseWindow* This,nsIWidget *aParentWidget) {
    return This->lpVtbl->SetParentWidget(This,aParentWidget);
}
static FORCEINLINE nsresult nsIBaseWindow_GetParentNativeWindow(nsIBaseWindow* This,nativeWindow *aParentNativeWindow) {
    return This->lpVtbl->GetParentNativeWindow(This,aParentNativeWindow);
}
static FORCEINLINE nsresult nsIBaseWindow_SetParentNativeWindow(nsIBaseWindow* This,nativeWindow aParentNativeWindow) {
    return This->lpVtbl->SetParentNativeWindow(This,aParentNativeWindow);
}
static FORCEINLINE nsresult nsIBaseWindow_GetNativeHandle(nsIBaseWindow* This,nsAString *aNativeHandle) {
    return This->lpVtbl->GetNativeHandle(This,aNativeHandle);
}
static FORCEINLINE nsresult nsIBaseWindow_GetVisibility(nsIBaseWindow* This,cpp_bool *aVisibility) {
    return This->lpVtbl->GetVisibility(This,aVisibility);
}
static FORCEINLINE nsresult nsIBaseWindow_SetVisibility(nsIBaseWindow* This,cpp_bool aVisibility) {
    return This->lpVtbl->SetVisibility(This,aVisibility);
}
static FORCEINLINE nsresult nsIBaseWindow_GetEnabled(nsIBaseWindow* This,cpp_bool *aEnabled) {
    return This->lpVtbl->GetEnabled(This,aEnabled);
}
static FORCEINLINE nsresult nsIBaseWindow_SetEnabled(nsIBaseWindow* This,cpp_bool aEnabled) {
    return This->lpVtbl->SetEnabled(This,aEnabled);
}
static FORCEINLINE nsresult nsIBaseWindow_GetMainWidget(nsIBaseWindow* This,nsIWidget **aMainWidget) {
    return This->lpVtbl->GetMainWidget(This,aMainWidget);
}
static FORCEINLINE nsresult nsIBaseWindow_GetUnscaledDevicePixelsPerCSSPixel(nsIBaseWindow* This,double *aUnscaledDevicePixelsPerCSSPixel) {
    return This->lpVtbl->GetUnscaledDevicePixelsPerCSSPixel(This,aUnscaledDevicePixelsPerCSSPixel);
}
static FORCEINLINE nsresult nsIBaseWindow_GetDevicePixelsPerDesktopPixel(nsIBaseWindow* This,double *aDevicePixelsPerDesktopPixel) {
    return This->lpVtbl->GetDevicePixelsPerDesktopPixel(This,aDevicePixelsPerDesktopPixel);
}
static FORCEINLINE nsresult nsIBaseWindow_SetFocus(nsIBaseWindow* This) {
    return This->lpVtbl->SetFocus(This);
}
static FORCEINLINE nsresult nsIBaseWindow_GetTitle(nsIBaseWindow* This,PRUnichar **aTitle) {
    return This->lpVtbl->GetTitle(This,aTitle);
}
static FORCEINLINE nsresult nsIBaseWindow_SetTitle(nsIBaseWindow* This,const PRUnichar *aTitle) {
    return This->lpVtbl->SetTitle(This,aTitle);
}
#endif
#endif

#endif


#endif  /* __nsIBaseWindow_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIWebNavigation interface
 */
#ifndef __nsIWebNavigation_INTERFACE_DEFINED__
#define __nsIWebNavigation_INTERFACE_DEFINED__

#define LOAD_FLAGS_MASK (0xffff)

#define LOAD_FLAGS_NONE (0)

#define LOAD_FLAGS_IS_REFRESH (0x10)

#define LOAD_FLAGS_IS_LINK (0x20)

#define LOAD_FLAGS_BYPASS_HISTORY (0x40)

#define LOAD_FLAGS_REPLACE_HISTORY (0x80)

#define LOAD_FLAGS_BYPASS_CACHE (0x100)

#define LOAD_FLAGS_BYPASS_PROXY (0x200)

#define LOAD_FLAGS_CHARSET_CHANGE (0x400)

#define LOAD_FLAGS_STOP_CONTENT (0x800)

#define LOAD_FLAGS_FROM_EXTERNAL (0x1000)

#define LOAD_FLAGS_ALLOW_THIRD_PARTY_FIXUP (0x2000)

#define LOAD_FLAGS_FIRST_LOAD (0x4000)

#define LOAD_FLAGS_ALLOW_POPUPS (0x8000)

#define LOAD_FLAGS_BYPASS_CLASSIFIER (0x10000)

#define LOAD_FLAGS_FORCE_ALLOW_COOKIES (0x20000)

#define LOAD_FLAGS_DISALLOW_INHERIT_OWNER (0x40000)

#define LOAD_FLAGS_ERROR_LOAD_CHANGES_RV (0x80000)

DEFINE_GUID(IID_nsIWebNavigation, 0x3ade79d4, 0x8cb9, 0x4952, 0xb1,0x8d, 0x4f,0x9b,0x63,0xca,0x0d,0x31);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("3ade79d4-8cb9-4952-b18d-4f9b63ca0d31")
nsIWebNavigation : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetCanGoBack(
        cpp_bool *aCanGoBack) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCanGoForward(
        cpp_bool *aCanGoForward) = 0;

    virtual nsresult STDMETHODCALLTYPE GoBack(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GoForward(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GotoIndex(
        LONG index) = 0;

    virtual nsresult STDMETHODCALLTYPE LoadURI(
        const PRUnichar *aURI,
        UINT32 aLoadFlags,
        nsIURI *aReferrer,
        nsIInputStream *aPostData,
        nsIInputStream *aHeaders) = 0;

    virtual nsresult STDMETHODCALLTYPE LoadURIWithOptions(
        const PRUnichar *aURI,
        UINT32 aLoadFlags,
        nsIURI *aReferrer,
        UINT32 aReferrerPolicy,
        nsIInputStream *aPostData,
        nsIInputStream *aHeaders,
        nsIURI *aBaseURI) = 0;

    virtual nsresult STDMETHODCALLTYPE Reload(
        UINT32 aReloadFlags) = 0;

    virtual nsresult STDMETHODCALLTYPE Stop(
        UINT32 aStopFlags) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDocument(
        nsIDOMDocument **aDocument) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCurrentURI(
        nsIURI **aCurrentURI) = 0;

    virtual nsresult STDMETHODCALLTYPE GetReferringURI(
        nsIURI **aReferringURI) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSessionHistory(
        nsISHistory **aSessionHistory) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSessionHistory(
        nsISHistory *aSessionHistory) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIWebNavigation, 0x3ade79d4, 0x8cb9, 0x4952, 0xb1,0x8d, 0x4f,0x9b,0x63,0xca,0x0d,0x31)
#endif
#else
typedef struct nsIWebNavigationVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIWebNavigation *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIWebNavigation *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIWebNavigation *This);

    /*** nsIWebNavigation methods ***/
    nsresult (STDMETHODCALLTYPE *GetCanGoBack)(
        nsIWebNavigation *This,
        cpp_bool *aCanGoBack);

    nsresult (STDMETHODCALLTYPE *GetCanGoForward)(
        nsIWebNavigation *This,
        cpp_bool *aCanGoForward);

    nsresult (STDMETHODCALLTYPE *GoBack)(
        nsIWebNavigation *This);

    nsresult (STDMETHODCALLTYPE *GoForward)(
        nsIWebNavigation *This);

    nsresult (STDMETHODCALLTYPE *GotoIndex)(
        nsIWebNavigation *This,
        LONG index);

    nsresult (STDMETHODCALLTYPE *LoadURI)(
        nsIWebNavigation *This,
        const PRUnichar *aURI,
        UINT32 aLoadFlags,
        nsIURI *aReferrer,
        nsIInputStream *aPostData,
        nsIInputStream *aHeaders);

    nsresult (STDMETHODCALLTYPE *LoadURIWithOptions)(
        nsIWebNavigation *This,
        const PRUnichar *aURI,
        UINT32 aLoadFlags,
        nsIURI *aReferrer,
        UINT32 aReferrerPolicy,
        nsIInputStream *aPostData,
        nsIInputStream *aHeaders,
        nsIURI *aBaseURI);

    nsresult (STDMETHODCALLTYPE *Reload)(
        nsIWebNavigation *This,
        UINT32 aReloadFlags);

    nsresult (STDMETHODCALLTYPE *Stop)(
        nsIWebNavigation *This,
        UINT32 aStopFlags);

    nsresult (STDMETHODCALLTYPE *GetDocument)(
        nsIWebNavigation *This,
        nsIDOMDocument **aDocument);

    nsresult (STDMETHODCALLTYPE *GetCurrentURI)(
        nsIWebNavigation *This,
        nsIURI **aCurrentURI);

    nsresult (STDMETHODCALLTYPE *GetReferringURI)(
        nsIWebNavigation *This,
        nsIURI **aReferringURI);

    nsresult (STDMETHODCALLTYPE *GetSessionHistory)(
        nsIWebNavigation *This,
        nsISHistory **aSessionHistory);

    nsresult (STDMETHODCALLTYPE *SetSessionHistory)(
        nsIWebNavigation *This,
        nsISHistory *aSessionHistory);

    END_INTERFACE
} nsIWebNavigationVtbl;

interface nsIWebNavigation {
    CONST_VTBL nsIWebNavigationVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIWebNavigation_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIWebNavigation_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIWebNavigation_Release(This) (This)->lpVtbl->Release(This)
/*** nsIWebNavigation methods ***/
#define nsIWebNavigation_GetCanGoBack(This,aCanGoBack) (This)->lpVtbl->GetCanGoBack(This,aCanGoBack)
#define nsIWebNavigation_GetCanGoForward(This,aCanGoForward) (This)->lpVtbl->GetCanGoForward(This,aCanGoForward)
#define nsIWebNavigation_GoBack(This) (This)->lpVtbl->GoBack(This)
#define nsIWebNavigation_GoForward(This) (This)->lpVtbl->GoForward(This)
#define nsIWebNavigation_GotoIndex(This,index) (This)->lpVtbl->GotoIndex(This,index)
#define nsIWebNavigation_LoadURI(This,aURI,aLoadFlags,aReferrer,aPostData,aHeaders) (This)->lpVtbl->LoadURI(This,aURI,aLoadFlags,aReferrer,aPostData,aHeaders)
#define nsIWebNavigation_LoadURIWithOptions(This,aURI,aLoadFlags,aReferrer,aReferrerPolicy,aPostData,aHeaders,aBaseURI) (This)->lpVtbl->LoadURIWithOptions(This,aURI,aLoadFlags,aReferrer,aReferrerPolicy,aPostData,aHeaders,aBaseURI)
#define nsIWebNavigation_Reload(This,aReloadFlags) (This)->lpVtbl->Reload(This,aReloadFlags)
#define nsIWebNavigation_Stop(This,aStopFlags) (This)->lpVtbl->Stop(This,aStopFlags)
#define nsIWebNavigation_GetDocument(This,aDocument) (This)->lpVtbl->GetDocument(This,aDocument)
#define nsIWebNavigation_GetCurrentURI(This,aCurrentURI) (This)->lpVtbl->GetCurrentURI(This,aCurrentURI)
#define nsIWebNavigation_GetReferringURI(This,aReferringURI) (This)->lpVtbl->GetReferringURI(This,aReferringURI)
#define nsIWebNavigation_GetSessionHistory(This,aSessionHistory) (This)->lpVtbl->GetSessionHistory(This,aSessionHistory)
#define nsIWebNavigation_SetSessionHistory(This,aSessionHistory) (This)->lpVtbl->SetSessionHistory(This,aSessionHistory)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIWebNavigation_QueryInterface(nsIWebNavigation* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIWebNavigation_AddRef(nsIWebNavigation* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIWebNavigation_Release(nsIWebNavigation* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIWebNavigation methods ***/
static FORCEINLINE nsresult nsIWebNavigation_GetCanGoBack(nsIWebNavigation* This,cpp_bool *aCanGoBack) {
    return This->lpVtbl->GetCanGoBack(This,aCanGoBack);
}
static FORCEINLINE nsresult nsIWebNavigation_GetCanGoForward(nsIWebNavigation* This,cpp_bool *aCanGoForward) {
    return This->lpVtbl->GetCanGoForward(This,aCanGoForward);
}
static FORCEINLINE nsresult nsIWebNavigation_GoBack(nsIWebNavigation* This) {
    return This->lpVtbl->GoBack(This);
}
static FORCEINLINE nsresult nsIWebNavigation_GoForward(nsIWebNavigation* This) {
    return This->lpVtbl->GoForward(This);
}
static FORCEINLINE nsresult nsIWebNavigation_GotoIndex(nsIWebNavigation* This,LONG index) {
    return This->lpVtbl->GotoIndex(This,index);
}
static FORCEINLINE nsresult nsIWebNavigation_LoadURI(nsIWebNavigation* This,const PRUnichar *aURI,UINT32 aLoadFlags,nsIURI *aReferrer,nsIInputStream *aPostData,nsIInputStream *aHeaders) {
    return This->lpVtbl->LoadURI(This,aURI,aLoadFlags,aReferrer,aPostData,aHeaders);
}
static FORCEINLINE nsresult nsIWebNavigation_LoadURIWithOptions(nsIWebNavigation* This,const PRUnichar *aURI,UINT32 aLoadFlags,nsIURI *aReferrer,UINT32 aReferrerPolicy,nsIInputStream *aPostData,nsIInputStream *aHeaders,nsIURI *aBaseURI) {
    return This->lpVtbl->LoadURIWithOptions(This,aURI,aLoadFlags,aReferrer,aReferrerPolicy,aPostData,aHeaders,aBaseURI);
}
static FORCEINLINE nsresult nsIWebNavigation_Reload(nsIWebNavigation* This,UINT32 aReloadFlags) {
    return This->lpVtbl->Reload(This,aReloadFlags);
}
static FORCEINLINE nsresult nsIWebNavigation_Stop(nsIWebNavigation* This,UINT32 aStopFlags) {
    return This->lpVtbl->Stop(This,aStopFlags);
}
static FORCEINLINE nsresult nsIWebNavigation_GetDocument(nsIWebNavigation* This,nsIDOMDocument **aDocument) {
    return This->lpVtbl->GetDocument(This,aDocument);
}
static FORCEINLINE nsresult nsIWebNavigation_GetCurrentURI(nsIWebNavigation* This,nsIURI **aCurrentURI) {
    return This->lpVtbl->GetCurrentURI(This,aCurrentURI);
}
static FORCEINLINE nsresult nsIWebNavigation_GetReferringURI(nsIWebNavigation* This,nsIURI **aReferringURI) {
    return This->lpVtbl->GetReferringURI(This,aReferringURI);
}
static FORCEINLINE nsresult nsIWebNavigation_GetSessionHistory(nsIWebNavigation* This,nsISHistory **aSessionHistory) {
    return This->lpVtbl->GetSessionHistory(This,aSessionHistory);
}
static FORCEINLINE nsresult nsIWebNavigation_SetSessionHistory(nsIWebNavigation* This,nsISHistory *aSessionHistory) {
    return This->lpVtbl->SetSessionHistory(This,aSessionHistory);
}
#endif
#endif

#endif


#endif  /* __nsIWebNavigation_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIWebProgress interface
 */
#ifndef __nsIWebProgress_INTERFACE_DEFINED__
#define __nsIWebProgress_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIWebProgress, 0xc4d64640, 0xb332, 0x4db6, 0xa2,0xa5, 0xe0,0x85,0x66,0x00,0x0d,0xc9);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c4d64640-b332-4db6-a2a5-e08566000dc9")
nsIWebProgress : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE AddProgressListener(
        nsIWebProgressListener *aListener,
        UINT32 aNotifyMask) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveProgressListener(
        nsIWebProgressListener *aListener) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDOMWindow(
        mozIDOMWindowProxy **aDOMWindow) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDOMWindowID(
        UINT64 *aDOMWindowID) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsTopLevel(
        cpp_bool *aIsTopLevel) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsLoadingDocument(
        cpp_bool *aIsLoadingDocument) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLoadType(
        UINT32 *aLoadType) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIWebProgress, 0xc4d64640, 0xb332, 0x4db6, 0xa2,0xa5, 0xe0,0x85,0x66,0x00,0x0d,0xc9)
#endif
#else
typedef struct nsIWebProgressVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIWebProgress *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIWebProgress *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIWebProgress *This);

    /*** nsIWebProgress methods ***/
    nsresult (STDMETHODCALLTYPE *AddProgressListener)(
        nsIWebProgress *This,
        nsIWebProgressListener *aListener,
        UINT32 aNotifyMask);

    nsresult (STDMETHODCALLTYPE *RemoveProgressListener)(
        nsIWebProgress *This,
        nsIWebProgressListener *aListener);

    nsresult (STDMETHODCALLTYPE *GetDOMWindow)(
        nsIWebProgress *This,
        mozIDOMWindowProxy **aDOMWindow);

    nsresult (STDMETHODCALLTYPE *GetDOMWindowID)(
        nsIWebProgress *This,
        UINT64 *aDOMWindowID);

    nsresult (STDMETHODCALLTYPE *GetIsTopLevel)(
        nsIWebProgress *This,
        cpp_bool *aIsTopLevel);

    nsresult (STDMETHODCALLTYPE *GetIsLoadingDocument)(
        nsIWebProgress *This,
        cpp_bool *aIsLoadingDocument);

    nsresult (STDMETHODCALLTYPE *GetLoadType)(
        nsIWebProgress *This,
        UINT32 *aLoadType);

    END_INTERFACE
} nsIWebProgressVtbl;

interface nsIWebProgress {
    CONST_VTBL nsIWebProgressVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIWebProgress_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIWebProgress_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIWebProgress_Release(This) (This)->lpVtbl->Release(This)
/*** nsIWebProgress methods ***/
#define nsIWebProgress_AddProgressListener(This,aListener,aNotifyMask) (This)->lpVtbl->AddProgressListener(This,aListener,aNotifyMask)
#define nsIWebProgress_RemoveProgressListener(This,aListener) (This)->lpVtbl->RemoveProgressListener(This,aListener)
#define nsIWebProgress_GetDOMWindow(This,aDOMWindow) (This)->lpVtbl->GetDOMWindow(This,aDOMWindow)
#define nsIWebProgress_GetDOMWindowID(This,aDOMWindowID) (This)->lpVtbl->GetDOMWindowID(This,aDOMWindowID)
#define nsIWebProgress_GetIsTopLevel(This,aIsTopLevel) (This)->lpVtbl->GetIsTopLevel(This,aIsTopLevel)
#define nsIWebProgress_GetIsLoadingDocument(This,aIsLoadingDocument) (This)->lpVtbl->GetIsLoadingDocument(This,aIsLoadingDocument)
#define nsIWebProgress_GetLoadType(This,aLoadType) (This)->lpVtbl->GetLoadType(This,aLoadType)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIWebProgress_QueryInterface(nsIWebProgress* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIWebProgress_AddRef(nsIWebProgress* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIWebProgress_Release(nsIWebProgress* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIWebProgress methods ***/
static FORCEINLINE nsresult nsIWebProgress_AddProgressListener(nsIWebProgress* This,nsIWebProgressListener *aListener,UINT32 aNotifyMask) {
    return This->lpVtbl->AddProgressListener(This,aListener,aNotifyMask);
}
static FORCEINLINE nsresult nsIWebProgress_RemoveProgressListener(nsIWebProgress* This,nsIWebProgressListener *aListener) {
    return This->lpVtbl->RemoveProgressListener(This,aListener);
}
static FORCEINLINE nsresult nsIWebProgress_GetDOMWindow(nsIWebProgress* This,mozIDOMWindowProxy **aDOMWindow) {
    return This->lpVtbl->GetDOMWindow(This,aDOMWindow);
}
static FORCEINLINE nsresult nsIWebProgress_GetDOMWindowID(nsIWebProgress* This,UINT64 *aDOMWindowID) {
    return This->lpVtbl->GetDOMWindowID(This,aDOMWindowID);
}
static FORCEINLINE nsresult nsIWebProgress_GetIsTopLevel(nsIWebProgress* This,cpp_bool *aIsTopLevel) {
    return This->lpVtbl->GetIsTopLevel(This,aIsTopLevel);
}
static FORCEINLINE nsresult nsIWebProgress_GetIsLoadingDocument(nsIWebProgress* This,cpp_bool *aIsLoadingDocument) {
    return This->lpVtbl->GetIsLoadingDocument(This,aIsLoadingDocument);
}
static FORCEINLINE nsresult nsIWebProgress_GetLoadType(nsIWebProgress* This,UINT32 *aLoadType) {
    return This->lpVtbl->GetLoadType(This,aLoadType);
}
#endif
#endif

#endif


#endif  /* __nsIWebProgress_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIPrintSettings interface
 */
#ifndef __nsIPrintSettings_INTERFACE_DEFINED__
#define __nsIPrintSettings_INTERFACE_DEFINED__

typedef struct __WIDL_nsiface_generated_name_00000004 {
    char dummy;
} nsIntMargin;
DEFINE_GUID(IID_nsIPrintSettings, 0xecc5cbad, 0x57fc, 0x4731, 0xb0,0xbd, 0x09,0xe8,0x65,0xbd,0x62,0xad);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ecc5cbad-57fc-4731-b0bd-09e865bd62ad")
nsIPrintSettings : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE SetPrintOptions(
        LONG aType,
        cpp_bool aTurnOnOff) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPrintOptions(
        LONG aType,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPrintOptionsBits(
        LONG *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPrintOptionsBits(
        LONG bits) = 0;

    virtual nsresult STDMETHODCALLTYPE GetEffectivePageSize(
        double *aWidth,
        double *aHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE Clone(
        nsIPrintSettings **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Assign(
        nsIPrintSettings *aPS) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPrintSession(
        nsIPrintSession **aPrintSession) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPrintSession(
        nsIPrintSession *aPrintSession) = 0;

    virtual nsresult STDMETHODCALLTYPE GetStartPageRange(
        LONG *aStartPageRange) = 0;

    virtual nsresult STDMETHODCALLTYPE SetStartPageRange(
        LONG aStartPageRange) = 0;

    virtual nsresult STDMETHODCALLTYPE GetEndPageRange(
        LONG *aEndPageRange) = 0;

    virtual nsresult STDMETHODCALLTYPE SetEndPageRange(
        LONG aEndPageRange) = 0;

    virtual nsresult STDMETHODCALLTYPE GetEdgeTop(
        double *aEdgeTop) = 0;

    virtual nsresult STDMETHODCALLTYPE SetEdgeTop(
        double aEdgeTop) = 0;

    virtual nsresult STDMETHODCALLTYPE GetEdgeLeft(
        double *aEdgeLeft) = 0;

    virtual nsresult STDMETHODCALLTYPE SetEdgeLeft(
        double aEdgeLeft) = 0;

    virtual nsresult STDMETHODCALLTYPE GetEdgeBottom(
        double *aEdgeBottom) = 0;

    virtual nsresult STDMETHODCALLTYPE SetEdgeBottom(
        double aEdgeBottom) = 0;

    virtual nsresult STDMETHODCALLTYPE GetEdgeRight(
        double *aEdgeRight) = 0;

    virtual nsresult STDMETHODCALLTYPE SetEdgeRight(
        double aEdgeRight) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMarginTop(
        double *aMarginTop) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMarginTop(
        double aMarginTop) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMarginLeft(
        double *aMarginLeft) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMarginLeft(
        double aMarginLeft) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMarginBottom(
        double *aMarginBottom) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMarginBottom(
        double aMarginBottom) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMarginRight(
        double *aMarginRight) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMarginRight(
        double aMarginRight) = 0;

    virtual nsresult STDMETHODCALLTYPE GetUnwriteableMarginTop(
        double *aUnwriteableMarginTop) = 0;

    virtual nsresult STDMETHODCALLTYPE SetUnwriteableMarginTop(
        double aUnwriteableMarginTop) = 0;

    virtual nsresult STDMETHODCALLTYPE GetUnwriteableMarginLeft(
        double *aUnwriteableMarginLeft) = 0;

    virtual nsresult STDMETHODCALLTYPE SetUnwriteableMarginLeft(
        double aUnwriteableMarginLeft) = 0;

    virtual nsresult STDMETHODCALLTYPE GetUnwriteableMarginBottom(
        double *aUnwriteableMarginBottom) = 0;

    virtual nsresult STDMETHODCALLTYPE SetUnwriteableMarginBottom(
        double aUnwriteableMarginBottom) = 0;

    virtual nsresult STDMETHODCALLTYPE GetUnwriteableMarginRight(
        double *aUnwriteableMarginRight) = 0;

    virtual nsresult STDMETHODCALLTYPE SetUnwriteableMarginRight(
        double aUnwriteableMarginRight) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScaling(
        double *aScaling) = 0;

    virtual nsresult STDMETHODCALLTYPE SetScaling(
        double aScaling) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPrintBGColors(
        cpp_bool *aPrintBGColors) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPrintBGColors(
        cpp_bool aPrintBGColors) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPrintBGImages(
        cpp_bool *aPrintBGImages) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPrintBGImages(
        cpp_bool aPrintBGImages) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPrintRange(
        short *aPrintRange) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPrintRange(
        short aPrintRange) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTitle(
        PRUnichar **aTitle) = 0;

    virtual nsresult STDMETHODCALLTYPE SetTitle(
        const PRUnichar *aTitle) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDocURL(
        PRUnichar **aDocURL) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDocURL(
        const PRUnichar *aDocURL) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHeaderStrLeft(
        PRUnichar **aHeaderStrLeft) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHeaderStrLeft(
        const PRUnichar *aHeaderStrLeft) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHeaderStrCenter(
        PRUnichar **aHeaderStrCenter) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHeaderStrCenter(
        const PRUnichar *aHeaderStrCenter) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHeaderStrRight(
        PRUnichar **aHeaderStrRight) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHeaderStrRight(
        const PRUnichar *aHeaderStrRight) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFooterStrLeft(
        PRUnichar **aFooterStrLeft) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFooterStrLeft(
        const PRUnichar *aFooterStrLeft) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFooterStrCenter(
        PRUnichar **aFooterStrCenter) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFooterStrCenter(
        const PRUnichar *aFooterStrCenter) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFooterStrRight(
        PRUnichar **aFooterStrRight) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFooterStrRight(
        const PRUnichar *aFooterStrRight) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHowToEnableFrameUI(
        short *aHowToEnableFrameUI) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHowToEnableFrameUI(
        short aHowToEnableFrameUI) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsCancelled(
        cpp_bool *aIsCancelled) = 0;

    virtual nsresult STDMETHODCALLTYPE SetIsCancelled(
        cpp_bool aIsCancelled) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPrintFrameTypeUsage(
        short *aPrintFrameTypeUsage) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPrintFrameTypeUsage(
        short aPrintFrameTypeUsage) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPrintFrameType(
        short *aPrintFrameType) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPrintFrameType(
        short aPrintFrameType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPrintSilent(
        cpp_bool *aPrintSilent) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPrintSilent(
        cpp_bool aPrintSilent) = 0;

    virtual nsresult STDMETHODCALLTYPE GetShrinkToFit(
        cpp_bool *aShrinkToFit) = 0;

    virtual nsresult STDMETHODCALLTYPE SetShrinkToFit(
        cpp_bool aShrinkToFit) = 0;

    virtual nsresult STDMETHODCALLTYPE GetShowPrintProgress(
        cpp_bool *aShowPrintProgress) = 0;

    virtual nsresult STDMETHODCALLTYPE SetShowPrintProgress(
        cpp_bool aShowPrintProgress) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPaperName(
        PRUnichar **aPaperName) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPaperName(
        const PRUnichar *aPaperName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPaperData(
        short *aPaperData) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPaperData(
        short aPaperData) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPaperWidth(
        double *aPaperWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPaperWidth(
        double aPaperWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPaperHeight(
        double *aPaperHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPaperHeight(
        double aPaperHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPaperSizeUnit(
        short *aPaperSizeUnit) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPaperSizeUnit(
        short aPaperSizeUnit) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPrintReversed(
        cpp_bool *aPrintReversed) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPrintReversed(
        cpp_bool aPrintReversed) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPrintInColor(
        cpp_bool *aPrintInColor) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPrintInColor(
        cpp_bool aPrintInColor) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOrientation(
        LONG *aOrientation) = 0;

    virtual nsresult STDMETHODCALLTYPE SetOrientation(
        LONG aOrientation) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNumCopies(
        LONG *aNumCopies) = 0;

    virtual nsresult STDMETHODCALLTYPE SetNumCopies(
        LONG aNumCopies) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPrinterName(
        PRUnichar **aPrinterName) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPrinterName(
        const PRUnichar *aPrinterName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPrintToFile(
        cpp_bool *aPrintToFile) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPrintToFile(
        cpp_bool aPrintToFile) = 0;

    virtual nsresult STDMETHODCALLTYPE GetToFileName(
        PRUnichar **aToFileName) = 0;

    virtual nsresult STDMETHODCALLTYPE SetToFileName(
        const PRUnichar *aToFileName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOutputFormat(
        short *aOutputFormat) = 0;

    virtual nsresult STDMETHODCALLTYPE SetOutputFormat(
        short aOutputFormat) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPrintPageDelay(
        LONG *aPrintPageDelay) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPrintPageDelay(
        LONG aPrintPageDelay) = 0;

    virtual nsresult STDMETHODCALLTYPE GetResolution(
        LONG *aResolution) = 0;

    virtual nsresult STDMETHODCALLTYPE SetResolution(
        LONG aResolution) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDuplex(
        LONG *aDuplex) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDuplex(
        LONG aDuplex) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsInitializedFromPrinter(
        cpp_bool *aIsInitializedFromPrinter) = 0;

    virtual nsresult STDMETHODCALLTYPE SetIsInitializedFromPrinter(
        cpp_bool aIsInitializedFromPrinter) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsInitializedFromPrefs(
        cpp_bool *aIsInitializedFromPrefs) = 0;

    virtual nsresult STDMETHODCALLTYPE SetIsInitializedFromPrefs(
        cpp_bool aIsInitializedFromPrefs) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPersistMarginBoxSettings(
        cpp_bool *aPersistMarginBoxSettings) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPersistMarginBoxSettings(
        cpp_bool aPersistMarginBoxSettings) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMarginInTwips(
        nsIntMargin *aMargin) = 0;

    virtual nsresult STDMETHODCALLTYPE SetEdgeInTwips(
        nsIntMargin *aEdge) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMarginInTwips(
        nsIntMargin *aMargin) = 0;

    virtual nsresult STDMETHODCALLTYPE GetEdgeInTwips(
        nsIntMargin *aEdge) = 0;

    virtual nsresult STDMETHODCALLTYPE SetupSilentPrinting(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE SetUnwriteableMarginInTwips(
        nsIntMargin *aEdge) = 0;

    virtual nsresult STDMETHODCALLTYPE GetUnwriteableMarginInTwips(
        nsIntMargin *aEdge) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPageRanges(
        void *aPages) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIPrintSettings, 0xecc5cbad, 0x57fc, 0x4731, 0xb0,0xbd, 0x09,0xe8,0x65,0xbd,0x62,0xad)
#endif
#else
typedef struct nsIPrintSettingsVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIPrintSettings *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIPrintSettings *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIPrintSettings *This);

    /*** nsIPrintSettings methods ***/
    nsresult (STDMETHODCALLTYPE *SetPrintOptions)(
        nsIPrintSettings *This,
        LONG aType,
        cpp_bool aTurnOnOff);

    nsresult (STDMETHODCALLTYPE *GetPrintOptions)(
        nsIPrintSettings *This,
        LONG aType,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetPrintOptionsBits)(
        nsIPrintSettings *This,
        LONG *_retval);

    nsresult (STDMETHODCALLTYPE *SetPrintOptionsBits)(
        nsIPrintSettings *This,
        LONG bits);

    nsresult (STDMETHODCALLTYPE *GetEffectivePageSize)(
        nsIPrintSettings *This,
        double *aWidth,
        double *aHeight);

    nsresult (STDMETHODCALLTYPE *Clone)(
        nsIPrintSettings *This,
        nsIPrintSettings **_retval);

    nsresult (STDMETHODCALLTYPE *Assign)(
        nsIPrintSettings *This,
        nsIPrintSettings *aPS);

    nsresult (STDMETHODCALLTYPE *GetPrintSession)(
        nsIPrintSettings *This,
        nsIPrintSession **aPrintSession);

    nsresult (STDMETHODCALLTYPE *SetPrintSession)(
        nsIPrintSettings *This,
        nsIPrintSession *aPrintSession);

    nsresult (STDMETHODCALLTYPE *GetStartPageRange)(
        nsIPrintSettings *This,
        LONG *aStartPageRange);

    nsresult (STDMETHODCALLTYPE *SetStartPageRange)(
        nsIPrintSettings *This,
        LONG aStartPageRange);

    nsresult (STDMETHODCALLTYPE *GetEndPageRange)(
        nsIPrintSettings *This,
        LONG *aEndPageRange);

    nsresult (STDMETHODCALLTYPE *SetEndPageRange)(
        nsIPrintSettings *This,
        LONG aEndPageRange);

    nsresult (STDMETHODCALLTYPE *GetEdgeTop)(
        nsIPrintSettings *This,
        double *aEdgeTop);

    nsresult (STDMETHODCALLTYPE *SetEdgeTop)(
        nsIPrintSettings *This,
        double aEdgeTop);

    nsresult (STDMETHODCALLTYPE *GetEdgeLeft)(
        nsIPrintSettings *This,
        double *aEdgeLeft);

    nsresult (STDMETHODCALLTYPE *SetEdgeLeft)(
        nsIPrintSettings *This,
        double aEdgeLeft);

    nsresult (STDMETHODCALLTYPE *GetEdgeBottom)(
        nsIPrintSettings *This,
        double *aEdgeBottom);

    nsresult (STDMETHODCALLTYPE *SetEdgeBottom)(
        nsIPrintSettings *This,
        double aEdgeBottom);

    nsresult (STDMETHODCALLTYPE *GetEdgeRight)(
        nsIPrintSettings *This,
        double *aEdgeRight);

    nsresult (STDMETHODCALLTYPE *SetEdgeRight)(
        nsIPrintSettings *This,
        double aEdgeRight);

    nsresult (STDMETHODCALLTYPE *GetMarginTop)(
        nsIPrintSettings *This,
        double *aMarginTop);

    nsresult (STDMETHODCALLTYPE *SetMarginTop)(
        nsIPrintSettings *This,
        double aMarginTop);

    nsresult (STDMETHODCALLTYPE *GetMarginLeft)(
        nsIPrintSettings *This,
        double *aMarginLeft);

    nsresult (STDMETHODCALLTYPE *SetMarginLeft)(
        nsIPrintSettings *This,
        double aMarginLeft);

    nsresult (STDMETHODCALLTYPE *GetMarginBottom)(
        nsIPrintSettings *This,
        double *aMarginBottom);

    nsresult (STDMETHODCALLTYPE *SetMarginBottom)(
        nsIPrintSettings *This,
        double aMarginBottom);

    nsresult (STDMETHODCALLTYPE *GetMarginRight)(
        nsIPrintSettings *This,
        double *aMarginRight);

    nsresult (STDMETHODCALLTYPE *SetMarginRight)(
        nsIPrintSettings *This,
        double aMarginRight);

    nsresult (STDMETHODCALLTYPE *GetUnwriteableMarginTop)(
        nsIPrintSettings *This,
        double *aUnwriteableMarginTop);

    nsresult (STDMETHODCALLTYPE *SetUnwriteableMarginTop)(
        nsIPrintSettings *This,
        double aUnwriteableMarginTop);

    nsresult (STDMETHODCALLTYPE *GetUnwriteableMarginLeft)(
        nsIPrintSettings *This,
        double *aUnwriteableMarginLeft);

    nsresult (STDMETHODCALLTYPE *SetUnwriteableMarginLeft)(
        nsIPrintSettings *This,
        double aUnwriteableMarginLeft);

    nsresult (STDMETHODCALLTYPE *GetUnwriteableMarginBottom)(
        nsIPrintSettings *This,
        double *aUnwriteableMarginBottom);

    nsresult (STDMETHODCALLTYPE *SetUnwriteableMarginBottom)(
        nsIPrintSettings *This,
        double aUnwriteableMarginBottom);

    nsresult (STDMETHODCALLTYPE *GetUnwriteableMarginRight)(
        nsIPrintSettings *This,
        double *aUnwriteableMarginRight);

    nsresult (STDMETHODCALLTYPE *SetUnwriteableMarginRight)(
        nsIPrintSettings *This,
        double aUnwriteableMarginRight);

    nsresult (STDMETHODCALLTYPE *GetScaling)(
        nsIPrintSettings *This,
        double *aScaling);

    nsresult (STDMETHODCALLTYPE *SetScaling)(
        nsIPrintSettings *This,
        double aScaling);

    nsresult (STDMETHODCALLTYPE *GetPrintBGColors)(
        nsIPrintSettings *This,
        cpp_bool *aPrintBGColors);

    nsresult (STDMETHODCALLTYPE *SetPrintBGColors)(
        nsIPrintSettings *This,
        cpp_bool aPrintBGColors);

    nsresult (STDMETHODCALLTYPE *GetPrintBGImages)(
        nsIPrintSettings *This,
        cpp_bool *aPrintBGImages);

    nsresult (STDMETHODCALLTYPE *SetPrintBGImages)(
        nsIPrintSettings *This,
        cpp_bool aPrintBGImages);

    nsresult (STDMETHODCALLTYPE *GetPrintRange)(
        nsIPrintSettings *This,
        short *aPrintRange);

    nsresult (STDMETHODCALLTYPE *SetPrintRange)(
        nsIPrintSettings *This,
        short aPrintRange);

    nsresult (STDMETHODCALLTYPE *GetTitle)(
        nsIPrintSettings *This,
        PRUnichar **aTitle);

    nsresult (STDMETHODCALLTYPE *SetTitle)(
        nsIPrintSettings *This,
        const PRUnichar *aTitle);

    nsresult (STDMETHODCALLTYPE *GetDocURL)(
        nsIPrintSettings *This,
        PRUnichar **aDocURL);

    nsresult (STDMETHODCALLTYPE *SetDocURL)(
        nsIPrintSettings *This,
        const PRUnichar *aDocURL);

    nsresult (STDMETHODCALLTYPE *GetHeaderStrLeft)(
        nsIPrintSettings *This,
        PRUnichar **aHeaderStrLeft);

    nsresult (STDMETHODCALLTYPE *SetHeaderStrLeft)(
        nsIPrintSettings *This,
        const PRUnichar *aHeaderStrLeft);

    nsresult (STDMETHODCALLTYPE *GetHeaderStrCenter)(
        nsIPrintSettings *This,
        PRUnichar **aHeaderStrCenter);

    nsresult (STDMETHODCALLTYPE *SetHeaderStrCenter)(
        nsIPrintSettings *This,
        const PRUnichar *aHeaderStrCenter);

    nsresult (STDMETHODCALLTYPE *GetHeaderStrRight)(
        nsIPrintSettings *This,
        PRUnichar **aHeaderStrRight);

    nsresult (STDMETHODCALLTYPE *SetHeaderStrRight)(
        nsIPrintSettings *This,
        const PRUnichar *aHeaderStrRight);

    nsresult (STDMETHODCALLTYPE *GetFooterStrLeft)(
        nsIPrintSettings *This,
        PRUnichar **aFooterStrLeft);

    nsresult (STDMETHODCALLTYPE *SetFooterStrLeft)(
        nsIPrintSettings *This,
        const PRUnichar *aFooterStrLeft);

    nsresult (STDMETHODCALLTYPE *GetFooterStrCenter)(
        nsIPrintSettings *This,
        PRUnichar **aFooterStrCenter);

    nsresult (STDMETHODCALLTYPE *SetFooterStrCenter)(
        nsIPrintSettings *This,
        const PRUnichar *aFooterStrCenter);

    nsresult (STDMETHODCALLTYPE *GetFooterStrRight)(
        nsIPrintSettings *This,
        PRUnichar **aFooterStrRight);

    nsresult (STDMETHODCALLTYPE *SetFooterStrRight)(
        nsIPrintSettings *This,
        const PRUnichar *aFooterStrRight);

    nsresult (STDMETHODCALLTYPE *GetHowToEnableFrameUI)(
        nsIPrintSettings *This,
        short *aHowToEnableFrameUI);

    nsresult (STDMETHODCALLTYPE *SetHowToEnableFrameUI)(
        nsIPrintSettings *This,
        short aHowToEnableFrameUI);

    nsresult (STDMETHODCALLTYPE *GetIsCancelled)(
        nsIPrintSettings *This,
        cpp_bool *aIsCancelled);

    nsresult (STDMETHODCALLTYPE *SetIsCancelled)(
        nsIPrintSettings *This,
        cpp_bool aIsCancelled);

    nsresult (STDMETHODCALLTYPE *GetPrintFrameTypeUsage)(
        nsIPrintSettings *This,
        short *aPrintFrameTypeUsage);

    nsresult (STDMETHODCALLTYPE *SetPrintFrameTypeUsage)(
        nsIPrintSettings *This,
        short aPrintFrameTypeUsage);

    nsresult (STDMETHODCALLTYPE *GetPrintFrameType)(
        nsIPrintSettings *This,
        short *aPrintFrameType);

    nsresult (STDMETHODCALLTYPE *SetPrintFrameType)(
        nsIPrintSettings *This,
        short aPrintFrameType);

    nsresult (STDMETHODCALLTYPE *GetPrintSilent)(
        nsIPrintSettings *This,
        cpp_bool *aPrintSilent);

    nsresult (STDMETHODCALLTYPE *SetPrintSilent)(
        nsIPrintSettings *This,
        cpp_bool aPrintSilent);

    nsresult (STDMETHODCALLTYPE *GetShrinkToFit)(
        nsIPrintSettings *This,
        cpp_bool *aShrinkToFit);

    nsresult (STDMETHODCALLTYPE *SetShrinkToFit)(
        nsIPrintSettings *This,
        cpp_bool aShrinkToFit);

    nsresult (STDMETHODCALLTYPE *GetShowPrintProgress)(
        nsIPrintSettings *This,
        cpp_bool *aShowPrintProgress);

    nsresult (STDMETHODCALLTYPE *SetShowPrintProgress)(
        nsIPrintSettings *This,
        cpp_bool aShowPrintProgress);

    nsresult (STDMETHODCALLTYPE *GetPaperName)(
        nsIPrintSettings *This,
        PRUnichar **aPaperName);

    nsresult (STDMETHODCALLTYPE *SetPaperName)(
        nsIPrintSettings *This,
        const PRUnichar *aPaperName);

    nsresult (STDMETHODCALLTYPE *GetPaperData)(
        nsIPrintSettings *This,
        short *aPaperData);

    nsresult (STDMETHODCALLTYPE *SetPaperData)(
        nsIPrintSettings *This,
        short aPaperData);

    nsresult (STDMETHODCALLTYPE *GetPaperWidth)(
        nsIPrintSettings *This,
        double *aPaperWidth);

    nsresult (STDMETHODCALLTYPE *SetPaperWidth)(
        nsIPrintSettings *This,
        double aPaperWidth);

    nsresult (STDMETHODCALLTYPE *GetPaperHeight)(
        nsIPrintSettings *This,
        double *aPaperHeight);

    nsresult (STDMETHODCALLTYPE *SetPaperHeight)(
        nsIPrintSettings *This,
        double aPaperHeight);

    nsresult (STDMETHODCALLTYPE *GetPaperSizeUnit)(
        nsIPrintSettings *This,
        short *aPaperSizeUnit);

    nsresult (STDMETHODCALLTYPE *SetPaperSizeUnit)(
        nsIPrintSettings *This,
        short aPaperSizeUnit);

    nsresult (STDMETHODCALLTYPE *GetPrintReversed)(
        nsIPrintSettings *This,
        cpp_bool *aPrintReversed);

    nsresult (STDMETHODCALLTYPE *SetPrintReversed)(
        nsIPrintSettings *This,
        cpp_bool aPrintReversed);

    nsresult (STDMETHODCALLTYPE *GetPrintInColor)(
        nsIPrintSettings *This,
        cpp_bool *aPrintInColor);

    nsresult (STDMETHODCALLTYPE *SetPrintInColor)(
        nsIPrintSettings *This,
        cpp_bool aPrintInColor);

    nsresult (STDMETHODCALLTYPE *GetOrientation)(
        nsIPrintSettings *This,
        LONG *aOrientation);

    nsresult (STDMETHODCALLTYPE *SetOrientation)(
        nsIPrintSettings *This,
        LONG aOrientation);

    nsresult (STDMETHODCALLTYPE *GetNumCopies)(
        nsIPrintSettings *This,
        LONG *aNumCopies);

    nsresult (STDMETHODCALLTYPE *SetNumCopies)(
        nsIPrintSettings *This,
        LONG aNumCopies);

    nsresult (STDMETHODCALLTYPE *GetPrinterName)(
        nsIPrintSettings *This,
        PRUnichar **aPrinterName);

    nsresult (STDMETHODCALLTYPE *SetPrinterName)(
        nsIPrintSettings *This,
        const PRUnichar *aPrinterName);

    nsresult (STDMETHODCALLTYPE *GetPrintToFile)(
        nsIPrintSettings *This,
        cpp_bool *aPrintToFile);

    nsresult (STDMETHODCALLTYPE *SetPrintToFile)(
        nsIPrintSettings *This,
        cpp_bool aPrintToFile);

    nsresult (STDMETHODCALLTYPE *GetToFileName)(
        nsIPrintSettings *This,
        PRUnichar **aToFileName);

    nsresult (STDMETHODCALLTYPE *SetToFileName)(
        nsIPrintSettings *This,
        const PRUnichar *aToFileName);

    nsresult (STDMETHODCALLTYPE *GetOutputFormat)(
        nsIPrintSettings *This,
        short *aOutputFormat);

    nsresult (STDMETHODCALLTYPE *SetOutputFormat)(
        nsIPrintSettings *This,
        short aOutputFormat);

    nsresult (STDMETHODCALLTYPE *GetPrintPageDelay)(
        nsIPrintSettings *This,
        LONG *aPrintPageDelay);

    nsresult (STDMETHODCALLTYPE *SetPrintPageDelay)(
        nsIPrintSettings *This,
        LONG aPrintPageDelay);

    nsresult (STDMETHODCALLTYPE *GetResolution)(
        nsIPrintSettings *This,
        LONG *aResolution);

    nsresult (STDMETHODCALLTYPE *SetResolution)(
        nsIPrintSettings *This,
        LONG aResolution);

    nsresult (STDMETHODCALLTYPE *GetDuplex)(
        nsIPrintSettings *This,
        LONG *aDuplex);

    nsresult (STDMETHODCALLTYPE *SetDuplex)(
        nsIPrintSettings *This,
        LONG aDuplex);

    nsresult (STDMETHODCALLTYPE *GetIsInitializedFromPrinter)(
        nsIPrintSettings *This,
        cpp_bool *aIsInitializedFromPrinter);

    nsresult (STDMETHODCALLTYPE *SetIsInitializedFromPrinter)(
        nsIPrintSettings *This,
        cpp_bool aIsInitializedFromPrinter);

    nsresult (STDMETHODCALLTYPE *GetIsInitializedFromPrefs)(
        nsIPrintSettings *This,
        cpp_bool *aIsInitializedFromPrefs);

    nsresult (STDMETHODCALLTYPE *SetIsInitializedFromPrefs)(
        nsIPrintSettings *This,
        cpp_bool aIsInitializedFromPrefs);

    nsresult (STDMETHODCALLTYPE *GetPersistMarginBoxSettings)(
        nsIPrintSettings *This,
        cpp_bool *aPersistMarginBoxSettings);

    nsresult (STDMETHODCALLTYPE *SetPersistMarginBoxSettings)(
        nsIPrintSettings *This,
        cpp_bool aPersistMarginBoxSettings);

    nsresult (STDMETHODCALLTYPE *SetMarginInTwips)(
        nsIPrintSettings *This,
        nsIntMargin *aMargin);

    nsresult (STDMETHODCALLTYPE *SetEdgeInTwips)(
        nsIPrintSettings *This,
        nsIntMargin *aEdge);

    nsresult (STDMETHODCALLTYPE *GetMarginInTwips)(
        nsIPrintSettings *This,
        nsIntMargin *aMargin);

    nsresult (STDMETHODCALLTYPE *GetEdgeInTwips)(
        nsIPrintSettings *This,
        nsIntMargin *aEdge);

    nsresult (STDMETHODCALLTYPE *SetupSilentPrinting)(
        nsIPrintSettings *This);

    nsresult (STDMETHODCALLTYPE *SetUnwriteableMarginInTwips)(
        nsIPrintSettings *This,
        nsIntMargin *aEdge);

    nsresult (STDMETHODCALLTYPE *GetUnwriteableMarginInTwips)(
        nsIPrintSettings *This,
        nsIntMargin *aEdge);

    nsresult (STDMETHODCALLTYPE *GetPageRanges)(
        nsIPrintSettings *This,
        void *aPages);

    END_INTERFACE
} nsIPrintSettingsVtbl;

interface nsIPrintSettings {
    CONST_VTBL nsIPrintSettingsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIPrintSettings_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIPrintSettings_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIPrintSettings_Release(This) (This)->lpVtbl->Release(This)
/*** nsIPrintSettings methods ***/
#define nsIPrintSettings_SetPrintOptions(This,aType,aTurnOnOff) (This)->lpVtbl->SetPrintOptions(This,aType,aTurnOnOff)
#define nsIPrintSettings_GetPrintOptions(This,aType,_retval) (This)->lpVtbl->GetPrintOptions(This,aType,_retval)
#define nsIPrintSettings_GetPrintOptionsBits(This,_retval) (This)->lpVtbl->GetPrintOptionsBits(This,_retval)
#define nsIPrintSettings_SetPrintOptionsBits(This,bits) (This)->lpVtbl->SetPrintOptionsBits(This,bits)
#define nsIPrintSettings_GetEffectivePageSize(This,aWidth,aHeight) (This)->lpVtbl->GetEffectivePageSize(This,aWidth,aHeight)
#define nsIPrintSettings_Clone(This,_retval) (This)->lpVtbl->Clone(This,_retval)
#define nsIPrintSettings_Assign(This,aPS) (This)->lpVtbl->Assign(This,aPS)
#define nsIPrintSettings_GetPrintSession(This,aPrintSession) (This)->lpVtbl->GetPrintSession(This,aPrintSession)
#define nsIPrintSettings_SetPrintSession(This,aPrintSession) (This)->lpVtbl->SetPrintSession(This,aPrintSession)
#define nsIPrintSettings_GetStartPageRange(This,aStartPageRange) (This)->lpVtbl->GetStartPageRange(This,aStartPageRange)
#define nsIPrintSettings_SetStartPageRange(This,aStartPageRange) (This)->lpVtbl->SetStartPageRange(This,aStartPageRange)
#define nsIPrintSettings_GetEndPageRange(This,aEndPageRange) (This)->lpVtbl->GetEndPageRange(This,aEndPageRange)
#define nsIPrintSettings_SetEndPageRange(This,aEndPageRange) (This)->lpVtbl->SetEndPageRange(This,aEndPageRange)
#define nsIPrintSettings_GetEdgeTop(This,aEdgeTop) (This)->lpVtbl->GetEdgeTop(This,aEdgeTop)
#define nsIPrintSettings_SetEdgeTop(This,aEdgeTop) (This)->lpVtbl->SetEdgeTop(This,aEdgeTop)
#define nsIPrintSettings_GetEdgeLeft(This,aEdgeLeft) (This)->lpVtbl->GetEdgeLeft(This,aEdgeLeft)
#define nsIPrintSettings_SetEdgeLeft(This,aEdgeLeft) (This)->lpVtbl->SetEdgeLeft(This,aEdgeLeft)
#define nsIPrintSettings_GetEdgeBottom(This,aEdgeBottom) (This)->lpVtbl->GetEdgeBottom(This,aEdgeBottom)
#define nsIPrintSettings_SetEdgeBottom(This,aEdgeBottom) (This)->lpVtbl->SetEdgeBottom(This,aEdgeBottom)
#define nsIPrintSettings_GetEdgeRight(This,aEdgeRight) (This)->lpVtbl->GetEdgeRight(This,aEdgeRight)
#define nsIPrintSettings_SetEdgeRight(This,aEdgeRight) (This)->lpVtbl->SetEdgeRight(This,aEdgeRight)
#define nsIPrintSettings_GetMarginTop(This,aMarginTop) (This)->lpVtbl->GetMarginTop(This,aMarginTop)
#define nsIPrintSettings_SetMarginTop(This,aMarginTop) (This)->lpVtbl->SetMarginTop(This,aMarginTop)
#define nsIPrintSettings_GetMarginLeft(This,aMarginLeft) (This)->lpVtbl->GetMarginLeft(This,aMarginLeft)
#define nsIPrintSettings_SetMarginLeft(This,aMarginLeft) (This)->lpVtbl->SetMarginLeft(This,aMarginLeft)
#define nsIPrintSettings_GetMarginBottom(This,aMarginBottom) (This)->lpVtbl->GetMarginBottom(This,aMarginBottom)
#define nsIPrintSettings_SetMarginBottom(This,aMarginBottom) (This)->lpVtbl->SetMarginBottom(This,aMarginBottom)
#define nsIPrintSettings_GetMarginRight(This,aMarginRight) (This)->lpVtbl->GetMarginRight(This,aMarginRight)
#define nsIPrintSettings_SetMarginRight(This,aMarginRight) (This)->lpVtbl->SetMarginRight(This,aMarginRight)
#define nsIPrintSettings_GetUnwriteableMarginTop(This,aUnwriteableMarginTop) (This)->lpVtbl->GetUnwriteableMarginTop(This,aUnwriteableMarginTop)
#define nsIPrintSettings_SetUnwriteableMarginTop(This,aUnwriteableMarginTop) (This)->lpVtbl->SetUnwriteableMarginTop(This,aUnwriteableMarginTop)
#define nsIPrintSettings_GetUnwriteableMarginLeft(This,aUnwriteableMarginLeft) (This)->lpVtbl->GetUnwriteableMarginLeft(This,aUnwriteableMarginLeft)
#define nsIPrintSettings_SetUnwriteableMarginLeft(This,aUnwriteableMarginLeft) (This)->lpVtbl->SetUnwriteableMarginLeft(This,aUnwriteableMarginLeft)
#define nsIPrintSettings_GetUnwriteableMarginBottom(This,aUnwriteableMarginBottom) (This)->lpVtbl->GetUnwriteableMarginBottom(This,aUnwriteableMarginBottom)
#define nsIPrintSettings_SetUnwriteableMarginBottom(This,aUnwriteableMarginBottom) (This)->lpVtbl->SetUnwriteableMarginBottom(This,aUnwriteableMarginBottom)
#define nsIPrintSettings_GetUnwriteableMarginRight(This,aUnwriteableMarginRight) (This)->lpVtbl->GetUnwriteableMarginRight(This,aUnwriteableMarginRight)
#define nsIPrintSettings_SetUnwriteableMarginRight(This,aUnwriteableMarginRight) (This)->lpVtbl->SetUnwriteableMarginRight(This,aUnwriteableMarginRight)
#define nsIPrintSettings_GetScaling(This,aScaling) (This)->lpVtbl->GetScaling(This,aScaling)
#define nsIPrintSettings_SetScaling(This,aScaling) (This)->lpVtbl->SetScaling(This,aScaling)
#define nsIPrintSettings_GetPrintBGColors(This,aPrintBGColors) (This)->lpVtbl->GetPrintBGColors(This,aPrintBGColors)
#define nsIPrintSettings_SetPrintBGColors(This,aPrintBGColors) (This)->lpVtbl->SetPrintBGColors(This,aPrintBGColors)
#define nsIPrintSettings_GetPrintBGImages(This,aPrintBGImages) (This)->lpVtbl->GetPrintBGImages(This,aPrintBGImages)
#define nsIPrintSettings_SetPrintBGImages(This,aPrintBGImages) (This)->lpVtbl->SetPrintBGImages(This,aPrintBGImages)
#define nsIPrintSettings_GetPrintRange(This,aPrintRange) (This)->lpVtbl->GetPrintRange(This,aPrintRange)
#define nsIPrintSettings_SetPrintRange(This,aPrintRange) (This)->lpVtbl->SetPrintRange(This,aPrintRange)
#define nsIPrintSettings_GetTitle(This,aTitle) (This)->lpVtbl->GetTitle(This,aTitle)
#define nsIPrintSettings_SetTitle(This,aTitle) (This)->lpVtbl->SetTitle(This,aTitle)
#define nsIPrintSettings_GetDocURL(This,aDocURL) (This)->lpVtbl->GetDocURL(This,aDocURL)
#define nsIPrintSettings_SetDocURL(This,aDocURL) (This)->lpVtbl->SetDocURL(This,aDocURL)
#define nsIPrintSettings_GetHeaderStrLeft(This,aHeaderStrLeft) (This)->lpVtbl->GetHeaderStrLeft(This,aHeaderStrLeft)
#define nsIPrintSettings_SetHeaderStrLeft(This,aHeaderStrLeft) (This)->lpVtbl->SetHeaderStrLeft(This,aHeaderStrLeft)
#define nsIPrintSettings_GetHeaderStrCenter(This,aHeaderStrCenter) (This)->lpVtbl->GetHeaderStrCenter(This,aHeaderStrCenter)
#define nsIPrintSettings_SetHeaderStrCenter(This,aHeaderStrCenter) (This)->lpVtbl->SetHeaderStrCenter(This,aHeaderStrCenter)
#define nsIPrintSettings_GetHeaderStrRight(This,aHeaderStrRight) (This)->lpVtbl->GetHeaderStrRight(This,aHeaderStrRight)
#define nsIPrintSettings_SetHeaderStrRight(This,aHeaderStrRight) (This)->lpVtbl->SetHeaderStrRight(This,aHeaderStrRight)
#define nsIPrintSettings_GetFooterStrLeft(This,aFooterStrLeft) (This)->lpVtbl->GetFooterStrLeft(This,aFooterStrLeft)
#define nsIPrintSettings_SetFooterStrLeft(This,aFooterStrLeft) (This)->lpVtbl->SetFooterStrLeft(This,aFooterStrLeft)
#define nsIPrintSettings_GetFooterStrCenter(This,aFooterStrCenter) (This)->lpVtbl->GetFooterStrCenter(This,aFooterStrCenter)
#define nsIPrintSettings_SetFooterStrCenter(This,aFooterStrCenter) (This)->lpVtbl->SetFooterStrCenter(This,aFooterStrCenter)
#define nsIPrintSettings_GetFooterStrRight(This,aFooterStrRight) (This)->lpVtbl->GetFooterStrRight(This,aFooterStrRight)
#define nsIPrintSettings_SetFooterStrRight(This,aFooterStrRight) (This)->lpVtbl->SetFooterStrRight(This,aFooterStrRight)
#define nsIPrintSettings_GetHowToEnableFrameUI(This,aHowToEnableFrameUI) (This)->lpVtbl->GetHowToEnableFrameUI(This,aHowToEnableFrameUI)
#define nsIPrintSettings_SetHowToEnableFrameUI(This,aHowToEnableFrameUI) (This)->lpVtbl->SetHowToEnableFrameUI(This,aHowToEnableFrameUI)
#define nsIPrintSettings_GetIsCancelled(This,aIsCancelled) (This)->lpVtbl->GetIsCancelled(This,aIsCancelled)
#define nsIPrintSettings_SetIsCancelled(This,aIsCancelled) (This)->lpVtbl->SetIsCancelled(This,aIsCancelled)
#define nsIPrintSettings_GetPrintFrameTypeUsage(This,aPrintFrameTypeUsage) (This)->lpVtbl->GetPrintFrameTypeUsage(This,aPrintFrameTypeUsage)
#define nsIPrintSettings_SetPrintFrameTypeUsage(This,aPrintFrameTypeUsage) (This)->lpVtbl->SetPrintFrameTypeUsage(This,aPrintFrameTypeUsage)
#define nsIPrintSettings_GetPrintFrameType(This,aPrintFrameType) (This)->lpVtbl->GetPrintFrameType(This,aPrintFrameType)
#define nsIPrintSettings_SetPrintFrameType(This,aPrintFrameType) (This)->lpVtbl->SetPrintFrameType(This,aPrintFrameType)
#define nsIPrintSettings_GetPrintSilent(This,aPrintSilent) (This)->lpVtbl->GetPrintSilent(This,aPrintSilent)
#define nsIPrintSettings_SetPrintSilent(This,aPrintSilent) (This)->lpVtbl->SetPrintSilent(This,aPrintSilent)
#define nsIPrintSettings_GetShrinkToFit(This,aShrinkToFit) (This)->lpVtbl->GetShrinkToFit(This,aShrinkToFit)
#define nsIPrintSettings_SetShrinkToFit(This,aShrinkToFit) (This)->lpVtbl->SetShrinkToFit(This,aShrinkToFit)
#define nsIPrintSettings_GetShowPrintProgress(This,aShowPrintProgress) (This)->lpVtbl->GetShowPrintProgress(This,aShowPrintProgress)
#define nsIPrintSettings_SetShowPrintProgress(This,aShowPrintProgress) (This)->lpVtbl->SetShowPrintProgress(This,aShowPrintProgress)
#define nsIPrintSettings_GetPaperName(This,aPaperName) (This)->lpVtbl->GetPaperName(This,aPaperName)
#define nsIPrintSettings_SetPaperName(This,aPaperName) (This)->lpVtbl->SetPaperName(This,aPaperName)
#define nsIPrintSettings_GetPaperData(This,aPaperData) (This)->lpVtbl->GetPaperData(This,aPaperData)
#define nsIPrintSettings_SetPaperData(This,aPaperData) (This)->lpVtbl->SetPaperData(This,aPaperData)
#define nsIPrintSettings_GetPaperWidth(This,aPaperWidth) (This)->lpVtbl->GetPaperWidth(This,aPaperWidth)
#define nsIPrintSettings_SetPaperWidth(This,aPaperWidth) (This)->lpVtbl->SetPaperWidth(This,aPaperWidth)
#define nsIPrintSettings_GetPaperHeight(This,aPaperHeight) (This)->lpVtbl->GetPaperHeight(This,aPaperHeight)
#define nsIPrintSettings_SetPaperHeight(This,aPaperHeight) (This)->lpVtbl->SetPaperHeight(This,aPaperHeight)
#define nsIPrintSettings_GetPaperSizeUnit(This,aPaperSizeUnit) (This)->lpVtbl->GetPaperSizeUnit(This,aPaperSizeUnit)
#define nsIPrintSettings_SetPaperSizeUnit(This,aPaperSizeUnit) (This)->lpVtbl->SetPaperSizeUnit(This,aPaperSizeUnit)
#define nsIPrintSettings_GetPrintReversed(This,aPrintReversed) (This)->lpVtbl->GetPrintReversed(This,aPrintReversed)
#define nsIPrintSettings_SetPrintReversed(This,aPrintReversed) (This)->lpVtbl->SetPrintReversed(This,aPrintReversed)
#define nsIPrintSettings_GetPrintInColor(This,aPrintInColor) (This)->lpVtbl->GetPrintInColor(This,aPrintInColor)
#define nsIPrintSettings_SetPrintInColor(This,aPrintInColor) (This)->lpVtbl->SetPrintInColor(This,aPrintInColor)
#define nsIPrintSettings_GetOrientation(This,aOrientation) (This)->lpVtbl->GetOrientation(This,aOrientation)
#define nsIPrintSettings_SetOrientation(This,aOrientation) (This)->lpVtbl->SetOrientation(This,aOrientation)
#define nsIPrintSettings_GetNumCopies(This,aNumCopies) (This)->lpVtbl->GetNumCopies(This,aNumCopies)
#define nsIPrintSettings_SetNumCopies(This,aNumCopies) (This)->lpVtbl->SetNumCopies(This,aNumCopies)
#define nsIPrintSettings_GetPrinterName(This,aPrinterName) (This)->lpVtbl->GetPrinterName(This,aPrinterName)
#define nsIPrintSettings_SetPrinterName(This,aPrinterName) (This)->lpVtbl->SetPrinterName(This,aPrinterName)
#define nsIPrintSettings_GetPrintToFile(This,aPrintToFile) (This)->lpVtbl->GetPrintToFile(This,aPrintToFile)
#define nsIPrintSettings_SetPrintToFile(This,aPrintToFile) (This)->lpVtbl->SetPrintToFile(This,aPrintToFile)
#define nsIPrintSettings_GetToFileName(This,aToFileName) (This)->lpVtbl->GetToFileName(This,aToFileName)
#define nsIPrintSettings_SetToFileName(This,aToFileName) (This)->lpVtbl->SetToFileName(This,aToFileName)
#define nsIPrintSettings_GetOutputFormat(This,aOutputFormat) (This)->lpVtbl->GetOutputFormat(This,aOutputFormat)
#define nsIPrintSettings_SetOutputFormat(This,aOutputFormat) (This)->lpVtbl->SetOutputFormat(This,aOutputFormat)
#define nsIPrintSettings_GetPrintPageDelay(This,aPrintPageDelay) (This)->lpVtbl->GetPrintPageDelay(This,aPrintPageDelay)
#define nsIPrintSettings_SetPrintPageDelay(This,aPrintPageDelay) (This)->lpVtbl->SetPrintPageDelay(This,aPrintPageDelay)
#define nsIPrintSettings_GetResolution(This,aResolution) (This)->lpVtbl->GetResolution(This,aResolution)
#define nsIPrintSettings_SetResolution(This,aResolution) (This)->lpVtbl->SetResolution(This,aResolution)
#define nsIPrintSettings_GetDuplex(This,aDuplex) (This)->lpVtbl->GetDuplex(This,aDuplex)
#define nsIPrintSettings_SetDuplex(This,aDuplex) (This)->lpVtbl->SetDuplex(This,aDuplex)
#define nsIPrintSettings_GetIsInitializedFromPrinter(This,aIsInitializedFromPrinter) (This)->lpVtbl->GetIsInitializedFromPrinter(This,aIsInitializedFromPrinter)
#define nsIPrintSettings_SetIsInitializedFromPrinter(This,aIsInitializedFromPrinter) (This)->lpVtbl->SetIsInitializedFromPrinter(This,aIsInitializedFromPrinter)
#define nsIPrintSettings_GetIsInitializedFromPrefs(This,aIsInitializedFromPrefs) (This)->lpVtbl->GetIsInitializedFromPrefs(This,aIsInitializedFromPrefs)
#define nsIPrintSettings_SetIsInitializedFromPrefs(This,aIsInitializedFromPrefs) (This)->lpVtbl->SetIsInitializedFromPrefs(This,aIsInitializedFromPrefs)
#define nsIPrintSettings_GetPersistMarginBoxSettings(This,aPersistMarginBoxSettings) (This)->lpVtbl->GetPersistMarginBoxSettings(This,aPersistMarginBoxSettings)
#define nsIPrintSettings_SetPersistMarginBoxSettings(This,aPersistMarginBoxSettings) (This)->lpVtbl->SetPersistMarginBoxSettings(This,aPersistMarginBoxSettings)
#define nsIPrintSettings_SetMarginInTwips(This,aMargin) (This)->lpVtbl->SetMarginInTwips(This,aMargin)
#define nsIPrintSettings_SetEdgeInTwips(This,aEdge) (This)->lpVtbl->SetEdgeInTwips(This,aEdge)
#define nsIPrintSettings_GetMarginInTwips(This,aMargin) (This)->lpVtbl->GetMarginInTwips(This,aMargin)
#define nsIPrintSettings_GetEdgeInTwips(This,aEdge) (This)->lpVtbl->GetEdgeInTwips(This,aEdge)
#define nsIPrintSettings_SetupSilentPrinting(This) (This)->lpVtbl->SetupSilentPrinting(This)
#define nsIPrintSettings_SetUnwriteableMarginInTwips(This,aEdge) (This)->lpVtbl->SetUnwriteableMarginInTwips(This,aEdge)
#define nsIPrintSettings_GetUnwriteableMarginInTwips(This,aEdge) (This)->lpVtbl->GetUnwriteableMarginInTwips(This,aEdge)
#define nsIPrintSettings_GetPageRanges(This,aPages) (This)->lpVtbl->GetPageRanges(This,aPages)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIPrintSettings_QueryInterface(nsIPrintSettings* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIPrintSettings_AddRef(nsIPrintSettings* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIPrintSettings_Release(nsIPrintSettings* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIPrintSettings methods ***/
static FORCEINLINE nsresult nsIPrintSettings_SetPrintOptions(nsIPrintSettings* This,LONG aType,cpp_bool aTurnOnOff) {
    return This->lpVtbl->SetPrintOptions(This,aType,aTurnOnOff);
}
static FORCEINLINE nsresult nsIPrintSettings_GetPrintOptions(nsIPrintSettings* This,LONG aType,cpp_bool *_retval) {
    return This->lpVtbl->GetPrintOptions(This,aType,_retval);
}
static FORCEINLINE nsresult nsIPrintSettings_GetPrintOptionsBits(nsIPrintSettings* This,LONG *_retval) {
    return This->lpVtbl->GetPrintOptionsBits(This,_retval);
}
static FORCEINLINE nsresult nsIPrintSettings_SetPrintOptionsBits(nsIPrintSettings* This,LONG bits) {
    return This->lpVtbl->SetPrintOptionsBits(This,bits);
}
static FORCEINLINE nsresult nsIPrintSettings_GetEffectivePageSize(nsIPrintSettings* This,double *aWidth,double *aHeight) {
    return This->lpVtbl->GetEffectivePageSize(This,aWidth,aHeight);
}
static FORCEINLINE nsresult nsIPrintSettings_Clone(nsIPrintSettings* This,nsIPrintSettings **_retval) {
    return This->lpVtbl->Clone(This,_retval);
}
static FORCEINLINE nsresult nsIPrintSettings_Assign(nsIPrintSettings* This,nsIPrintSettings *aPS) {
    return This->lpVtbl->Assign(This,aPS);
}
static FORCEINLINE nsresult nsIPrintSettings_GetPrintSession(nsIPrintSettings* This,nsIPrintSession **aPrintSession) {
    return This->lpVtbl->GetPrintSession(This,aPrintSession);
}
static FORCEINLINE nsresult nsIPrintSettings_SetPrintSession(nsIPrintSettings* This,nsIPrintSession *aPrintSession) {
    return This->lpVtbl->SetPrintSession(This,aPrintSession);
}
static FORCEINLINE nsresult nsIPrintSettings_GetStartPageRange(nsIPrintSettings* This,LONG *aStartPageRange) {
    return This->lpVtbl->GetStartPageRange(This,aStartPageRange);
}
static FORCEINLINE nsresult nsIPrintSettings_SetStartPageRange(nsIPrintSettings* This,LONG aStartPageRange) {
    return This->lpVtbl->SetStartPageRange(This,aStartPageRange);
}
static FORCEINLINE nsresult nsIPrintSettings_GetEndPageRange(nsIPrintSettings* This,LONG *aEndPageRange) {
    return This->lpVtbl->GetEndPageRange(This,aEndPageRange);
}
static FORCEINLINE nsresult nsIPrintSettings_SetEndPageRange(nsIPrintSettings* This,LONG aEndPageRange) {
    return This->lpVtbl->SetEndPageRange(This,aEndPageRange);
}
static FORCEINLINE nsresult nsIPrintSettings_GetEdgeTop(nsIPrintSettings* This,double *aEdgeTop) {
    return This->lpVtbl->GetEdgeTop(This,aEdgeTop);
}
static FORCEINLINE nsresult nsIPrintSettings_SetEdgeTop(nsIPrintSettings* This,double aEdgeTop) {
    return This->lpVtbl->SetEdgeTop(This,aEdgeTop);
}
static FORCEINLINE nsresult nsIPrintSettings_GetEdgeLeft(nsIPrintSettings* This,double *aEdgeLeft) {
    return This->lpVtbl->GetEdgeLeft(This,aEdgeLeft);
}
static FORCEINLINE nsresult nsIPrintSettings_SetEdgeLeft(nsIPrintSettings* This,double aEdgeLeft) {
    return This->lpVtbl->SetEdgeLeft(This,aEdgeLeft);
}
static FORCEINLINE nsresult nsIPrintSettings_GetEdgeBottom(nsIPrintSettings* This,double *aEdgeBottom) {
    return This->lpVtbl->GetEdgeBottom(This,aEdgeBottom);
}
static FORCEINLINE nsresult nsIPrintSettings_SetEdgeBottom(nsIPrintSettings* This,double aEdgeBottom) {
    return This->lpVtbl->SetEdgeBottom(This,aEdgeBottom);
}
static FORCEINLINE nsresult nsIPrintSettings_GetEdgeRight(nsIPrintSettings* This,double *aEdgeRight) {
    return This->lpVtbl->GetEdgeRight(This,aEdgeRight);
}
static FORCEINLINE nsresult nsIPrintSettings_SetEdgeRight(nsIPrintSettings* This,double aEdgeRight) {
    return This->lpVtbl->SetEdgeRight(This,aEdgeRight);
}
static FORCEINLINE nsresult nsIPrintSettings_GetMarginTop(nsIPrintSettings* This,double *aMarginTop) {
    return This->lpVtbl->GetMarginTop(This,aMarginTop);
}
static FORCEINLINE nsresult nsIPrintSettings_SetMarginTop(nsIPrintSettings* This,double aMarginTop) {
    return This->lpVtbl->SetMarginTop(This,aMarginTop);
}
static FORCEINLINE nsresult nsIPrintSettings_GetMarginLeft(nsIPrintSettings* This,double *aMarginLeft) {
    return This->lpVtbl->GetMarginLeft(This,aMarginLeft);
}
static FORCEINLINE nsresult nsIPrintSettings_SetMarginLeft(nsIPrintSettings* This,double aMarginLeft) {
    return This->lpVtbl->SetMarginLeft(This,aMarginLeft);
}
static FORCEINLINE nsresult nsIPrintSettings_GetMarginBottom(nsIPrintSettings* This,double *aMarginBottom) {
    return This->lpVtbl->GetMarginBottom(This,aMarginBottom);
}
static FORCEINLINE nsresult nsIPrintSettings_SetMarginBottom(nsIPrintSettings* This,double aMarginBottom) {
    return This->lpVtbl->SetMarginBottom(This,aMarginBottom);
}
static FORCEINLINE nsresult nsIPrintSettings_GetMarginRight(nsIPrintSettings* This,double *aMarginRight) {
    return This->lpVtbl->GetMarginRight(This,aMarginRight);
}
static FORCEINLINE nsresult nsIPrintSettings_SetMarginRight(nsIPrintSettings* This,double aMarginRight) {
    return This->lpVtbl->SetMarginRight(This,aMarginRight);
}
static FORCEINLINE nsresult nsIPrintSettings_GetUnwriteableMarginTop(nsIPrintSettings* This,double *aUnwriteableMarginTop) {
    return This->lpVtbl->GetUnwriteableMarginTop(This,aUnwriteableMarginTop);
}
static FORCEINLINE nsresult nsIPrintSettings_SetUnwriteableMarginTop(nsIPrintSettings* This,double aUnwriteableMarginTop) {
    return This->lpVtbl->SetUnwriteableMarginTop(This,aUnwriteableMarginTop);
}
static FORCEINLINE nsresult nsIPrintSettings_GetUnwriteableMarginLeft(nsIPrintSettings* This,double *aUnwriteableMarginLeft) {
    return This->lpVtbl->GetUnwriteableMarginLeft(This,aUnwriteableMarginLeft);
}
static FORCEINLINE nsresult nsIPrintSettings_SetUnwriteableMarginLeft(nsIPrintSettings* This,double aUnwriteableMarginLeft) {
    return This->lpVtbl->SetUnwriteableMarginLeft(This,aUnwriteableMarginLeft);
}
static FORCEINLINE nsresult nsIPrintSettings_GetUnwriteableMarginBottom(nsIPrintSettings* This,double *aUnwriteableMarginBottom) {
    return This->lpVtbl->GetUnwriteableMarginBottom(This,aUnwriteableMarginBottom);
}
static FORCEINLINE nsresult nsIPrintSettings_SetUnwriteableMarginBottom(nsIPrintSettings* This,double aUnwriteableMarginBottom) {
    return This->lpVtbl->SetUnwriteableMarginBottom(This,aUnwriteableMarginBottom);
}
static FORCEINLINE nsresult nsIPrintSettings_GetUnwriteableMarginRight(nsIPrintSettings* This,double *aUnwriteableMarginRight) {
    return This->lpVtbl->GetUnwriteableMarginRight(This,aUnwriteableMarginRight);
}
static FORCEINLINE nsresult nsIPrintSettings_SetUnwriteableMarginRight(nsIPrintSettings* This,double aUnwriteableMarginRight) {
    return This->lpVtbl->SetUnwriteableMarginRight(This,aUnwriteableMarginRight);
}
static FORCEINLINE nsresult nsIPrintSettings_GetScaling(nsIPrintSettings* This,double *aScaling) {
    return This->lpVtbl->GetScaling(This,aScaling);
}
static FORCEINLINE nsresult nsIPrintSettings_SetScaling(nsIPrintSettings* This,double aScaling) {
    return This->lpVtbl->SetScaling(This,aScaling);
}
static FORCEINLINE nsresult nsIPrintSettings_GetPrintBGColors(nsIPrintSettings* This,cpp_bool *aPrintBGColors) {
    return This->lpVtbl->GetPrintBGColors(This,aPrintBGColors);
}
static FORCEINLINE nsresult nsIPrintSettings_SetPrintBGColors(nsIPrintSettings* This,cpp_bool aPrintBGColors) {
    return This->lpVtbl->SetPrintBGColors(This,aPrintBGColors);
}
static FORCEINLINE nsresult nsIPrintSettings_GetPrintBGImages(nsIPrintSettings* This,cpp_bool *aPrintBGImages) {
    return This->lpVtbl->GetPrintBGImages(This,aPrintBGImages);
}
static FORCEINLINE nsresult nsIPrintSettings_SetPrintBGImages(nsIPrintSettings* This,cpp_bool aPrintBGImages) {
    return This->lpVtbl->SetPrintBGImages(This,aPrintBGImages);
}
static FORCEINLINE nsresult nsIPrintSettings_GetPrintRange(nsIPrintSettings* This,short *aPrintRange) {
    return This->lpVtbl->GetPrintRange(This,aPrintRange);
}
static FORCEINLINE nsresult nsIPrintSettings_SetPrintRange(nsIPrintSettings* This,short aPrintRange) {
    return This->lpVtbl->SetPrintRange(This,aPrintRange);
}
static FORCEINLINE nsresult nsIPrintSettings_GetTitle(nsIPrintSettings* This,PRUnichar **aTitle) {
    return This->lpVtbl->GetTitle(This,aTitle);
}
static FORCEINLINE nsresult nsIPrintSettings_SetTitle(nsIPrintSettings* This,const PRUnichar *aTitle) {
    return This->lpVtbl->SetTitle(This,aTitle);
}
static FORCEINLINE nsresult nsIPrintSettings_GetDocURL(nsIPrintSettings* This,PRUnichar **aDocURL) {
    return This->lpVtbl->GetDocURL(This,aDocURL);
}
static FORCEINLINE nsresult nsIPrintSettings_SetDocURL(nsIPrintSettings* This,const PRUnichar *aDocURL) {
    return This->lpVtbl->SetDocURL(This,aDocURL);
}
static FORCEINLINE nsresult nsIPrintSettings_GetHeaderStrLeft(nsIPrintSettings* This,PRUnichar **aHeaderStrLeft) {
    return This->lpVtbl->GetHeaderStrLeft(This,aHeaderStrLeft);
}
static FORCEINLINE nsresult nsIPrintSettings_SetHeaderStrLeft(nsIPrintSettings* This,const PRUnichar *aHeaderStrLeft) {
    return This->lpVtbl->SetHeaderStrLeft(This,aHeaderStrLeft);
}
static FORCEINLINE nsresult nsIPrintSettings_GetHeaderStrCenter(nsIPrintSettings* This,PRUnichar **aHeaderStrCenter) {
    return This->lpVtbl->GetHeaderStrCenter(This,aHeaderStrCenter);
}
static FORCEINLINE nsresult nsIPrintSettings_SetHeaderStrCenter(nsIPrintSettings* This,const PRUnichar *aHeaderStrCenter) {
    return This->lpVtbl->SetHeaderStrCenter(This,aHeaderStrCenter);
}
static FORCEINLINE nsresult nsIPrintSettings_GetHeaderStrRight(nsIPrintSettings* This,PRUnichar **aHeaderStrRight) {
    return This->lpVtbl->GetHeaderStrRight(This,aHeaderStrRight);
}
static FORCEINLINE nsresult nsIPrintSettings_SetHeaderStrRight(nsIPrintSettings* This,const PRUnichar *aHeaderStrRight) {
    return This->lpVtbl->SetHeaderStrRight(This,aHeaderStrRight);
}
static FORCEINLINE nsresult nsIPrintSettings_GetFooterStrLeft(nsIPrintSettings* This,PRUnichar **aFooterStrLeft) {
    return This->lpVtbl->GetFooterStrLeft(This,aFooterStrLeft);
}
static FORCEINLINE nsresult nsIPrintSettings_SetFooterStrLeft(nsIPrintSettings* This,const PRUnichar *aFooterStrLeft) {
    return This->lpVtbl->SetFooterStrLeft(This,aFooterStrLeft);
}
static FORCEINLINE nsresult nsIPrintSettings_GetFooterStrCenter(nsIPrintSettings* This,PRUnichar **aFooterStrCenter) {
    return This->lpVtbl->GetFooterStrCenter(This,aFooterStrCenter);
}
static FORCEINLINE nsresult nsIPrintSettings_SetFooterStrCenter(nsIPrintSettings* This,const PRUnichar *aFooterStrCenter) {
    return This->lpVtbl->SetFooterStrCenter(This,aFooterStrCenter);
}
static FORCEINLINE nsresult nsIPrintSettings_GetFooterStrRight(nsIPrintSettings* This,PRUnichar **aFooterStrRight) {
    return This->lpVtbl->GetFooterStrRight(This,aFooterStrRight);
}
static FORCEINLINE nsresult nsIPrintSettings_SetFooterStrRight(nsIPrintSettings* This,const PRUnichar *aFooterStrRight) {
    return This->lpVtbl->SetFooterStrRight(This,aFooterStrRight);
}
static FORCEINLINE nsresult nsIPrintSettings_GetHowToEnableFrameUI(nsIPrintSettings* This,short *aHowToEnableFrameUI) {
    return This->lpVtbl->GetHowToEnableFrameUI(This,aHowToEnableFrameUI);
}
static FORCEINLINE nsresult nsIPrintSettings_SetHowToEnableFrameUI(nsIPrintSettings* This,short aHowToEnableFrameUI) {
    return This->lpVtbl->SetHowToEnableFrameUI(This,aHowToEnableFrameUI);
}
static FORCEINLINE nsresult nsIPrintSettings_GetIsCancelled(nsIPrintSettings* This,cpp_bool *aIsCancelled) {
    return This->lpVtbl->GetIsCancelled(This,aIsCancelled);
}
static FORCEINLINE nsresult nsIPrintSettings_SetIsCancelled(nsIPrintSettings* This,cpp_bool aIsCancelled) {
    return This->lpVtbl->SetIsCancelled(This,aIsCancelled);
}
static FORCEINLINE nsresult nsIPrintSettings_GetPrintFrameTypeUsage(nsIPrintSettings* This,short *aPrintFrameTypeUsage) {
    return This->lpVtbl->GetPrintFrameTypeUsage(This,aPrintFrameTypeUsage);
}
static FORCEINLINE nsresult nsIPrintSettings_SetPrintFrameTypeUsage(nsIPrintSettings* This,short aPrintFrameTypeUsage) {
    return This->lpVtbl->SetPrintFrameTypeUsage(This,aPrintFrameTypeUsage);
}
static FORCEINLINE nsresult nsIPrintSettings_GetPrintFrameType(nsIPrintSettings* This,short *aPrintFrameType) {
    return This->lpVtbl->GetPrintFrameType(This,aPrintFrameType);
}
static FORCEINLINE nsresult nsIPrintSettings_SetPrintFrameType(nsIPrintSettings* This,short aPrintFrameType) {
    return This->lpVtbl->SetPrintFrameType(This,aPrintFrameType);
}
static FORCEINLINE nsresult nsIPrintSettings_GetPrintSilent(nsIPrintSettings* This,cpp_bool *aPrintSilent) {
    return This->lpVtbl->GetPrintSilent(This,aPrintSilent);
}
static FORCEINLINE nsresult nsIPrintSettings_SetPrintSilent(nsIPrintSettings* This,cpp_bool aPrintSilent) {
    return This->lpVtbl->SetPrintSilent(This,aPrintSilent);
}
static FORCEINLINE nsresult nsIPrintSettings_GetShrinkToFit(nsIPrintSettings* This,cpp_bool *aShrinkToFit) {
    return This->lpVtbl->GetShrinkToFit(This,aShrinkToFit);
}
static FORCEINLINE nsresult nsIPrintSettings_SetShrinkToFit(nsIPrintSettings* This,cpp_bool aShrinkToFit) {
    return This->lpVtbl->SetShrinkToFit(This,aShrinkToFit);
}
static FORCEINLINE nsresult nsIPrintSettings_GetShowPrintProgress(nsIPrintSettings* This,cpp_bool *aShowPrintProgress) {
    return This->lpVtbl->GetShowPrintProgress(This,aShowPrintProgress);
}
static FORCEINLINE nsresult nsIPrintSettings_SetShowPrintProgress(nsIPrintSettings* This,cpp_bool aShowPrintProgress) {
    return This->lpVtbl->SetShowPrintProgress(This,aShowPrintProgress);
}
static FORCEINLINE nsresult nsIPrintSettings_GetPaperName(nsIPrintSettings* This,PRUnichar **aPaperName) {
    return This->lpVtbl->GetPaperName(This,aPaperName);
}
static FORCEINLINE nsresult nsIPrintSettings_SetPaperName(nsIPrintSettings* This,const PRUnichar *aPaperName) {
    return This->lpVtbl->SetPaperName(This,aPaperName);
}
static FORCEINLINE nsresult nsIPrintSettings_GetPaperData(nsIPrintSettings* This,short *aPaperData) {
    return This->lpVtbl->GetPaperData(This,aPaperData);
}
static FORCEINLINE nsresult nsIPrintSettings_SetPaperData(nsIPrintSettings* This,short aPaperData) {
    return This->lpVtbl->SetPaperData(This,aPaperData);
}
static FORCEINLINE nsresult nsIPrintSettings_GetPaperWidth(nsIPrintSettings* This,double *aPaperWidth) {
    return This->lpVtbl->GetPaperWidth(This,aPaperWidth);
}
static FORCEINLINE nsresult nsIPrintSettings_SetPaperWidth(nsIPrintSettings* This,double aPaperWidth) {
    return This->lpVtbl->SetPaperWidth(This,aPaperWidth);
}
static FORCEINLINE nsresult nsIPrintSettings_GetPaperHeight(nsIPrintSettings* This,double *aPaperHeight) {
    return This->lpVtbl->GetPaperHeight(This,aPaperHeight);
}
static FORCEINLINE nsresult nsIPrintSettings_SetPaperHeight(nsIPrintSettings* This,double aPaperHeight) {
    return This->lpVtbl->SetPaperHeight(This,aPaperHeight);
}
static FORCEINLINE nsresult nsIPrintSettings_GetPaperSizeUnit(nsIPrintSettings* This,short *aPaperSizeUnit) {
    return This->lpVtbl->GetPaperSizeUnit(This,aPaperSizeUnit);
}
static FORCEINLINE nsresult nsIPrintSettings_SetPaperSizeUnit(nsIPrintSettings* This,short aPaperSizeUnit) {
    return This->lpVtbl->SetPaperSizeUnit(This,aPaperSizeUnit);
}
static FORCEINLINE nsresult nsIPrintSettings_GetPrintReversed(nsIPrintSettings* This,cpp_bool *aPrintReversed) {
    return This->lpVtbl->GetPrintReversed(This,aPrintReversed);
}
static FORCEINLINE nsresult nsIPrintSettings_SetPrintReversed(nsIPrintSettings* This,cpp_bool aPrintReversed) {
    return This->lpVtbl->SetPrintReversed(This,aPrintReversed);
}
static FORCEINLINE nsresult nsIPrintSettings_GetPrintInColor(nsIPrintSettings* This,cpp_bool *aPrintInColor) {
    return This->lpVtbl->GetPrintInColor(This,aPrintInColor);
}
static FORCEINLINE nsresult nsIPrintSettings_SetPrintInColor(nsIPrintSettings* This,cpp_bool aPrintInColor) {
    return This->lpVtbl->SetPrintInColor(This,aPrintInColor);
}
static FORCEINLINE nsresult nsIPrintSettings_GetOrientation(nsIPrintSettings* This,LONG *aOrientation) {
    return This->lpVtbl->GetOrientation(This,aOrientation);
}
static FORCEINLINE nsresult nsIPrintSettings_SetOrientation(nsIPrintSettings* This,LONG aOrientation) {
    return This->lpVtbl->SetOrientation(This,aOrientation);
}
static FORCEINLINE nsresult nsIPrintSettings_GetNumCopies(nsIPrintSettings* This,LONG *aNumCopies) {
    return This->lpVtbl->GetNumCopies(This,aNumCopies);
}
static FORCEINLINE nsresult nsIPrintSettings_SetNumCopies(nsIPrintSettings* This,LONG aNumCopies) {
    return This->lpVtbl->SetNumCopies(This,aNumCopies);
}
static FORCEINLINE nsresult nsIPrintSettings_GetPrinterName(nsIPrintSettings* This,PRUnichar **aPrinterName) {
    return This->lpVtbl->GetPrinterName(This,aPrinterName);
}
static FORCEINLINE nsresult nsIPrintSettings_SetPrinterName(nsIPrintSettings* This,const PRUnichar *aPrinterName) {
    return This->lpVtbl->SetPrinterName(This,aPrinterName);
}
static FORCEINLINE nsresult nsIPrintSettings_GetPrintToFile(nsIPrintSettings* This,cpp_bool *aPrintToFile) {
    return This->lpVtbl->GetPrintToFile(This,aPrintToFile);
}
static FORCEINLINE nsresult nsIPrintSettings_SetPrintToFile(nsIPrintSettings* This,cpp_bool aPrintToFile) {
    return This->lpVtbl->SetPrintToFile(This,aPrintToFile);
}
static FORCEINLINE nsresult nsIPrintSettings_GetToFileName(nsIPrintSettings* This,PRUnichar **aToFileName) {
    return This->lpVtbl->GetToFileName(This,aToFileName);
}
static FORCEINLINE nsresult nsIPrintSettings_SetToFileName(nsIPrintSettings* This,const PRUnichar *aToFileName) {
    return This->lpVtbl->SetToFileName(This,aToFileName);
}
static FORCEINLINE nsresult nsIPrintSettings_GetOutputFormat(nsIPrintSettings* This,short *aOutputFormat) {
    return This->lpVtbl->GetOutputFormat(This,aOutputFormat);
}
static FORCEINLINE nsresult nsIPrintSettings_SetOutputFormat(nsIPrintSettings* This,short aOutputFormat) {
    return This->lpVtbl->SetOutputFormat(This,aOutputFormat);
}
static FORCEINLINE nsresult nsIPrintSettings_GetPrintPageDelay(nsIPrintSettings* This,LONG *aPrintPageDelay) {
    return This->lpVtbl->GetPrintPageDelay(This,aPrintPageDelay);
}
static FORCEINLINE nsresult nsIPrintSettings_SetPrintPageDelay(nsIPrintSettings* This,LONG aPrintPageDelay) {
    return This->lpVtbl->SetPrintPageDelay(This,aPrintPageDelay);
}
static FORCEINLINE nsresult nsIPrintSettings_GetResolution(nsIPrintSettings* This,LONG *aResolution) {
    return This->lpVtbl->GetResolution(This,aResolution);
}
static FORCEINLINE nsresult nsIPrintSettings_SetResolution(nsIPrintSettings* This,LONG aResolution) {
    return This->lpVtbl->SetResolution(This,aResolution);
}
static FORCEINLINE nsresult nsIPrintSettings_GetDuplex(nsIPrintSettings* This,LONG *aDuplex) {
    return This->lpVtbl->GetDuplex(This,aDuplex);
}
static FORCEINLINE nsresult nsIPrintSettings_SetDuplex(nsIPrintSettings* This,LONG aDuplex) {
    return This->lpVtbl->SetDuplex(This,aDuplex);
}
static FORCEINLINE nsresult nsIPrintSettings_GetIsInitializedFromPrinter(nsIPrintSettings* This,cpp_bool *aIsInitializedFromPrinter) {
    return This->lpVtbl->GetIsInitializedFromPrinter(This,aIsInitializedFromPrinter);
}
static FORCEINLINE nsresult nsIPrintSettings_SetIsInitializedFromPrinter(nsIPrintSettings* This,cpp_bool aIsInitializedFromPrinter) {
    return This->lpVtbl->SetIsInitializedFromPrinter(This,aIsInitializedFromPrinter);
}
static FORCEINLINE nsresult nsIPrintSettings_GetIsInitializedFromPrefs(nsIPrintSettings* This,cpp_bool *aIsInitializedFromPrefs) {
    return This->lpVtbl->GetIsInitializedFromPrefs(This,aIsInitializedFromPrefs);
}
static FORCEINLINE nsresult nsIPrintSettings_SetIsInitializedFromPrefs(nsIPrintSettings* This,cpp_bool aIsInitializedFromPrefs) {
    return This->lpVtbl->SetIsInitializedFromPrefs(This,aIsInitializedFromPrefs);
}
static FORCEINLINE nsresult nsIPrintSettings_GetPersistMarginBoxSettings(nsIPrintSettings* This,cpp_bool *aPersistMarginBoxSettings) {
    return This->lpVtbl->GetPersistMarginBoxSettings(This,aPersistMarginBoxSettings);
}
static FORCEINLINE nsresult nsIPrintSettings_SetPersistMarginBoxSettings(nsIPrintSettings* This,cpp_bool aPersistMarginBoxSettings) {
    return This->lpVtbl->SetPersistMarginBoxSettings(This,aPersistMarginBoxSettings);
}
static FORCEINLINE nsresult nsIPrintSettings_SetMarginInTwips(nsIPrintSettings* This,nsIntMargin *aMargin) {
    return This->lpVtbl->SetMarginInTwips(This,aMargin);
}
static FORCEINLINE nsresult nsIPrintSettings_SetEdgeInTwips(nsIPrintSettings* This,nsIntMargin *aEdge) {
    return This->lpVtbl->SetEdgeInTwips(This,aEdge);
}
static FORCEINLINE nsresult nsIPrintSettings_GetMarginInTwips(nsIPrintSettings* This,nsIntMargin *aMargin) {
    return This->lpVtbl->GetMarginInTwips(This,aMargin);
}
static FORCEINLINE nsresult nsIPrintSettings_GetEdgeInTwips(nsIPrintSettings* This,nsIntMargin *aEdge) {
    return This->lpVtbl->GetEdgeInTwips(This,aEdge);
}
static FORCEINLINE nsresult nsIPrintSettings_SetupSilentPrinting(nsIPrintSettings* This) {
    return This->lpVtbl->SetupSilentPrinting(This);
}
static FORCEINLINE nsresult nsIPrintSettings_SetUnwriteableMarginInTwips(nsIPrintSettings* This,nsIntMargin *aEdge) {
    return This->lpVtbl->SetUnwriteableMarginInTwips(This,aEdge);
}
static FORCEINLINE nsresult nsIPrintSettings_GetUnwriteableMarginInTwips(nsIPrintSettings* This,nsIntMargin *aEdge) {
    return This->lpVtbl->GetUnwriteableMarginInTwips(This,aEdge);
}
static FORCEINLINE nsresult nsIPrintSettings_GetPageRanges(nsIPrintSettings* This,void *aPages) {
    return This->lpVtbl->GetPageRanges(This,aPages);
}
#endif
#endif

#endif


#endif  /* __nsIPrintSettings_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIWebBrowserPrint interface
 */
#ifndef __nsIWebBrowserPrint_INTERFACE_DEFINED__
#define __nsIWebBrowserPrint_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIWebBrowserPrint, 0xc9a934ed, 0xfff1, 0x4971, 0xbf,0xba, 0x6c,0x25,0xad,0x70,0xe1,0xe6);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c9a934ed-fff1-4971-bfba-6c25ad70e1e6")
nsIWebBrowserPrint : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetGlobalPrintSettings(
        nsIPrintSettings **aGlobalPrintSettings) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCurrentPrintSettings(
        nsIPrintSettings **aCurrentPrintSettings) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCurrentChildDOMWindow(
        mozIDOMWindowProxy **aCurrentChildDOMWindow) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDoingPrint(
        cpp_bool *aDoingPrint) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDoingPrintPreview(
        cpp_bool *aDoingPrintPreview) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsFramesetDocument(
        cpp_bool *aIsFramesetDocument) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsFramesetFrameSelected(
        cpp_bool *aIsFramesetFrameSelected) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsIFrameSelected(
        cpp_bool *aIsIFrameSelected) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsRangeSelection(
        cpp_bool *aIsRangeSelection) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPrintPreviewNumPages(
        LONG *aPrintPreviewNumPages) = 0;

    virtual nsresult STDMETHODCALLTYPE Print(
        nsIPrintSettings *aThePrintSettings,
        nsIWebProgressListener *aWPListener) = 0;

    virtual nsresult STDMETHODCALLTYPE PrintPreview(
        nsIPrintSettings *aThePrintSettings,
        mozIDOMWindowProxy *aChildDOMWin,
        nsIWebProgressListener *aWPListener) = 0;

    virtual nsresult STDMETHODCALLTYPE PrintPreviewNavigate(
        short aNavType,
        LONG aPageNum) = 0;

    virtual nsresult STDMETHODCALLTYPE Cancel(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE EnumerateDocumentNames(
        UINT32 *aCount,
        PRUnichar ***aResult) = 0;

    virtual nsresult STDMETHODCALLTYPE ExitPrintPreview(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIWebBrowserPrint, 0xc9a934ed, 0xfff1, 0x4971, 0xbf,0xba, 0x6c,0x25,0xad,0x70,0xe1,0xe6)
#endif
#else
typedef struct nsIWebBrowserPrintVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIWebBrowserPrint *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIWebBrowserPrint *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIWebBrowserPrint *This);

    /*** nsIWebBrowserPrint methods ***/
    nsresult (STDMETHODCALLTYPE *GetGlobalPrintSettings)(
        nsIWebBrowserPrint *This,
        nsIPrintSettings **aGlobalPrintSettings);

    nsresult (STDMETHODCALLTYPE *GetCurrentPrintSettings)(
        nsIWebBrowserPrint *This,
        nsIPrintSettings **aCurrentPrintSettings);

    nsresult (STDMETHODCALLTYPE *GetCurrentChildDOMWindow)(
        nsIWebBrowserPrint *This,
        mozIDOMWindowProxy **aCurrentChildDOMWindow);

    nsresult (STDMETHODCALLTYPE *GetDoingPrint)(
        nsIWebBrowserPrint *This,
        cpp_bool *aDoingPrint);

    nsresult (STDMETHODCALLTYPE *GetDoingPrintPreview)(
        nsIWebBrowserPrint *This,
        cpp_bool *aDoingPrintPreview);

    nsresult (STDMETHODCALLTYPE *GetIsFramesetDocument)(
        nsIWebBrowserPrint *This,
        cpp_bool *aIsFramesetDocument);

    nsresult (STDMETHODCALLTYPE *GetIsFramesetFrameSelected)(
        nsIWebBrowserPrint *This,
        cpp_bool *aIsFramesetFrameSelected);

    nsresult (STDMETHODCALLTYPE *GetIsIFrameSelected)(
        nsIWebBrowserPrint *This,
        cpp_bool *aIsIFrameSelected);

    nsresult (STDMETHODCALLTYPE *GetIsRangeSelection)(
        nsIWebBrowserPrint *This,
        cpp_bool *aIsRangeSelection);

    nsresult (STDMETHODCALLTYPE *GetPrintPreviewNumPages)(
        nsIWebBrowserPrint *This,
        LONG *aPrintPreviewNumPages);

    nsresult (STDMETHODCALLTYPE *Print)(
        nsIWebBrowserPrint *This,
        nsIPrintSettings *aThePrintSettings,
        nsIWebProgressListener *aWPListener);

    nsresult (STDMETHODCALLTYPE *PrintPreview)(
        nsIWebBrowserPrint *This,
        nsIPrintSettings *aThePrintSettings,
        mozIDOMWindowProxy *aChildDOMWin,
        nsIWebProgressListener *aWPListener);

    nsresult (STDMETHODCALLTYPE *PrintPreviewNavigate)(
        nsIWebBrowserPrint *This,
        short aNavType,
        LONG aPageNum);

    nsresult (STDMETHODCALLTYPE *Cancel)(
        nsIWebBrowserPrint *This);

    nsresult (STDMETHODCALLTYPE *EnumerateDocumentNames)(
        nsIWebBrowserPrint *This,
        UINT32 *aCount,
        PRUnichar ***aResult);

    nsresult (STDMETHODCALLTYPE *ExitPrintPreview)(
        nsIWebBrowserPrint *This);

    END_INTERFACE
} nsIWebBrowserPrintVtbl;

interface nsIWebBrowserPrint {
    CONST_VTBL nsIWebBrowserPrintVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIWebBrowserPrint_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIWebBrowserPrint_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIWebBrowserPrint_Release(This) (This)->lpVtbl->Release(This)
/*** nsIWebBrowserPrint methods ***/
#define nsIWebBrowserPrint_GetGlobalPrintSettings(This,aGlobalPrintSettings) (This)->lpVtbl->GetGlobalPrintSettings(This,aGlobalPrintSettings)
#define nsIWebBrowserPrint_GetCurrentPrintSettings(This,aCurrentPrintSettings) (This)->lpVtbl->GetCurrentPrintSettings(This,aCurrentPrintSettings)
#define nsIWebBrowserPrint_GetCurrentChildDOMWindow(This,aCurrentChildDOMWindow) (This)->lpVtbl->GetCurrentChildDOMWindow(This,aCurrentChildDOMWindow)
#define nsIWebBrowserPrint_GetDoingPrint(This,aDoingPrint) (This)->lpVtbl->GetDoingPrint(This,aDoingPrint)
#define nsIWebBrowserPrint_GetDoingPrintPreview(This,aDoingPrintPreview) (This)->lpVtbl->GetDoingPrintPreview(This,aDoingPrintPreview)
#define nsIWebBrowserPrint_GetIsFramesetDocument(This,aIsFramesetDocument) (This)->lpVtbl->GetIsFramesetDocument(This,aIsFramesetDocument)
#define nsIWebBrowserPrint_GetIsFramesetFrameSelected(This,aIsFramesetFrameSelected) (This)->lpVtbl->GetIsFramesetFrameSelected(This,aIsFramesetFrameSelected)
#define nsIWebBrowserPrint_GetIsIFrameSelected(This,aIsIFrameSelected) (This)->lpVtbl->GetIsIFrameSelected(This,aIsIFrameSelected)
#define nsIWebBrowserPrint_GetIsRangeSelection(This,aIsRangeSelection) (This)->lpVtbl->GetIsRangeSelection(This,aIsRangeSelection)
#define nsIWebBrowserPrint_GetPrintPreviewNumPages(This,aPrintPreviewNumPages) (This)->lpVtbl->GetPrintPreviewNumPages(This,aPrintPreviewNumPages)
#define nsIWebBrowserPrint_Print(This,aThePrintSettings,aWPListener) (This)->lpVtbl->Print(This,aThePrintSettings,aWPListener)
#define nsIWebBrowserPrint_PrintPreview(This,aThePrintSettings,aChildDOMWin,aWPListener) (This)->lpVtbl->PrintPreview(This,aThePrintSettings,aChildDOMWin,aWPListener)
#define nsIWebBrowserPrint_PrintPreviewNavigate(This,aNavType,aPageNum) (This)->lpVtbl->PrintPreviewNavigate(This,aNavType,aPageNum)
#define nsIWebBrowserPrint_Cancel(This) (This)->lpVtbl->Cancel(This)
#define nsIWebBrowserPrint_EnumerateDocumentNames(This,aCount,aResult) (This)->lpVtbl->EnumerateDocumentNames(This,aCount,aResult)
#define nsIWebBrowserPrint_ExitPrintPreview(This) (This)->lpVtbl->ExitPrintPreview(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIWebBrowserPrint_QueryInterface(nsIWebBrowserPrint* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIWebBrowserPrint_AddRef(nsIWebBrowserPrint* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIWebBrowserPrint_Release(nsIWebBrowserPrint* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIWebBrowserPrint methods ***/
static FORCEINLINE nsresult nsIWebBrowserPrint_GetGlobalPrintSettings(nsIWebBrowserPrint* This,nsIPrintSettings **aGlobalPrintSettings) {
    return This->lpVtbl->GetGlobalPrintSettings(This,aGlobalPrintSettings);
}
static FORCEINLINE nsresult nsIWebBrowserPrint_GetCurrentPrintSettings(nsIWebBrowserPrint* This,nsIPrintSettings **aCurrentPrintSettings) {
    return This->lpVtbl->GetCurrentPrintSettings(This,aCurrentPrintSettings);
}
static FORCEINLINE nsresult nsIWebBrowserPrint_GetCurrentChildDOMWindow(nsIWebBrowserPrint* This,mozIDOMWindowProxy **aCurrentChildDOMWindow) {
    return This->lpVtbl->GetCurrentChildDOMWindow(This,aCurrentChildDOMWindow);
}
static FORCEINLINE nsresult nsIWebBrowserPrint_GetDoingPrint(nsIWebBrowserPrint* This,cpp_bool *aDoingPrint) {
    return This->lpVtbl->GetDoingPrint(This,aDoingPrint);
}
static FORCEINLINE nsresult nsIWebBrowserPrint_GetDoingPrintPreview(nsIWebBrowserPrint* This,cpp_bool *aDoingPrintPreview) {
    return This->lpVtbl->GetDoingPrintPreview(This,aDoingPrintPreview);
}
static FORCEINLINE nsresult nsIWebBrowserPrint_GetIsFramesetDocument(nsIWebBrowserPrint* This,cpp_bool *aIsFramesetDocument) {
    return This->lpVtbl->GetIsFramesetDocument(This,aIsFramesetDocument);
}
static FORCEINLINE nsresult nsIWebBrowserPrint_GetIsFramesetFrameSelected(nsIWebBrowserPrint* This,cpp_bool *aIsFramesetFrameSelected) {
    return This->lpVtbl->GetIsFramesetFrameSelected(This,aIsFramesetFrameSelected);
}
static FORCEINLINE nsresult nsIWebBrowserPrint_GetIsIFrameSelected(nsIWebBrowserPrint* This,cpp_bool *aIsIFrameSelected) {
    return This->lpVtbl->GetIsIFrameSelected(This,aIsIFrameSelected);
}
static FORCEINLINE nsresult nsIWebBrowserPrint_GetIsRangeSelection(nsIWebBrowserPrint* This,cpp_bool *aIsRangeSelection) {
    return This->lpVtbl->GetIsRangeSelection(This,aIsRangeSelection);
}
static FORCEINLINE nsresult nsIWebBrowserPrint_GetPrintPreviewNumPages(nsIWebBrowserPrint* This,LONG *aPrintPreviewNumPages) {
    return This->lpVtbl->GetPrintPreviewNumPages(This,aPrintPreviewNumPages);
}
static FORCEINLINE nsresult nsIWebBrowserPrint_Print(nsIWebBrowserPrint* This,nsIPrintSettings *aThePrintSettings,nsIWebProgressListener *aWPListener) {
    return This->lpVtbl->Print(This,aThePrintSettings,aWPListener);
}
static FORCEINLINE nsresult nsIWebBrowserPrint_PrintPreview(nsIWebBrowserPrint* This,nsIPrintSettings *aThePrintSettings,mozIDOMWindowProxy *aChildDOMWin,nsIWebProgressListener *aWPListener) {
    return This->lpVtbl->PrintPreview(This,aThePrintSettings,aChildDOMWin,aWPListener);
}
static FORCEINLINE nsresult nsIWebBrowserPrint_PrintPreviewNavigate(nsIWebBrowserPrint* This,short aNavType,LONG aPageNum) {
    return This->lpVtbl->PrintPreviewNavigate(This,aNavType,aPageNum);
}
static FORCEINLINE nsresult nsIWebBrowserPrint_Cancel(nsIWebBrowserPrint* This) {
    return This->lpVtbl->Cancel(This);
}
static FORCEINLINE nsresult nsIWebBrowserPrint_EnumerateDocumentNames(nsIWebBrowserPrint* This,UINT32 *aCount,PRUnichar ***aResult) {
    return This->lpVtbl->EnumerateDocumentNames(This,aCount,aResult);
}
static FORCEINLINE nsresult nsIWebBrowserPrint_ExitPrintPreview(nsIWebBrowserPrint* This) {
    return This->lpVtbl->ExitPrintPreview(This);
}
#endif
#endif

#endif


#endif  /* __nsIWebBrowserPrint_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIScrollable interface
 */
#ifndef __nsIScrollable_INTERFACE_DEFINED__
#define __nsIScrollable_INTERFACE_DEFINED__

enum {
    ScrollOrientation_X = 1,
    ScrollOrientation_Y = 2
};
enum {
    Scrollbar_Auto = 1,
    Scrollbar_Never = 2,
    Scrollbar_Always = 3
};
DEFINE_GUID(IID_nsIScrollable, 0x3507fc93, 0x313e, 0x4a4c, 0x8c,0xa8, 0x4d,0x0e,0xa0,0xf9,0x73,0x15);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("3507fc93-313e-4a4c-8ca8-4d0ea0f97315")
nsIScrollable : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetDefaultScrollbarPreferences(
        LONG scrollOrientation,
        LONG *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDefaultScrollbarPreferences(
        LONG scrollOrientation,
        LONG scrollbarPref) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScrollbarVisibility(
        cpp_bool *verticalVisible,
        cpp_bool *horizontalVisible) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIScrollable, 0x3507fc93, 0x313e, 0x4a4c, 0x8c,0xa8, 0x4d,0x0e,0xa0,0xf9,0x73,0x15)
#endif
#else
typedef struct nsIScrollableVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIScrollable *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIScrollable *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIScrollable *This);

    /*** nsIScrollable methods ***/
    nsresult (STDMETHODCALLTYPE *GetDefaultScrollbarPreferences)(
        nsIScrollable *This,
        LONG scrollOrientation,
        LONG *_retval);

    nsresult (STDMETHODCALLTYPE *SetDefaultScrollbarPreferences)(
        nsIScrollable *This,
        LONG scrollOrientation,
        LONG scrollbarPref);

    nsresult (STDMETHODCALLTYPE *GetScrollbarVisibility)(
        nsIScrollable *This,
        cpp_bool *verticalVisible,
        cpp_bool *horizontalVisible);

    END_INTERFACE
} nsIScrollableVtbl;

interface nsIScrollable {
    CONST_VTBL nsIScrollableVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIScrollable_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIScrollable_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIScrollable_Release(This) (This)->lpVtbl->Release(This)
/*** nsIScrollable methods ***/
#define nsIScrollable_GetDefaultScrollbarPreferences(This,scrollOrientation,_retval) (This)->lpVtbl->GetDefaultScrollbarPreferences(This,scrollOrientation,_retval)
#define nsIScrollable_SetDefaultScrollbarPreferences(This,scrollOrientation,scrollbarPref) (This)->lpVtbl->SetDefaultScrollbarPreferences(This,scrollOrientation,scrollbarPref)
#define nsIScrollable_GetScrollbarVisibility(This,verticalVisible,horizontalVisible) (This)->lpVtbl->GetScrollbarVisibility(This,verticalVisible,horizontalVisible)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIScrollable_QueryInterface(nsIScrollable* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIScrollable_AddRef(nsIScrollable* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIScrollable_Release(nsIScrollable* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIScrollable methods ***/
static FORCEINLINE nsresult nsIScrollable_GetDefaultScrollbarPreferences(nsIScrollable* This,LONG scrollOrientation,LONG *_retval) {
    return This->lpVtbl->GetDefaultScrollbarPreferences(This,scrollOrientation,_retval);
}
static FORCEINLINE nsresult nsIScrollable_SetDefaultScrollbarPreferences(nsIScrollable* This,LONG scrollOrientation,LONG scrollbarPref) {
    return This->lpVtbl->SetDefaultScrollbarPreferences(This,scrollOrientation,scrollbarPref);
}
static FORCEINLINE nsresult nsIScrollable_GetScrollbarVisibility(nsIScrollable* This,cpp_bool *verticalVisible,cpp_bool *horizontalVisible) {
    return This->lpVtbl->GetScrollbarVisibility(This,verticalVisible,horizontalVisible);
}
#endif
#endif

#endif


#endif  /* __nsIScrollable_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIFile interface
 */
#ifndef __nsIFile_INTERFACE_DEFINED__
#define __nsIFile_INTERFACE_DEFINED__

typedef struct __WIDL_nsiface_generated_name_00000005 {
    char dummy;
} PRFileDesc;
typedef struct __WIDL_nsiface_generated_name_00000005 PRLibrary;
typedef struct __WIDL_nsiface_generated_name_00000005 widl_FILE;
DEFINE_GUID(IID_nsIFile, 0x2fa6884a, 0xae65, 0x412a, 0x9d,0x4c, 0xce,0x6e,0x34,0x54,0x4b,0xa1);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("2fa6884a-ae65-412a-9d4c-ce6e34544ba1")
nsIFile : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE Append(
        const nsAString *node) = 0;

    virtual nsresult STDMETHODCALLTYPE AppendNative(
        const nsAString *node) = 0;

    virtual nsresult STDMETHODCALLTYPE Normalize(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE Create(
        UINT32 type,
        UINT32 permission) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLeafName(
        nsAString *aLeafName) = 0;

    virtual nsresult STDMETHODCALLTYPE SetLeafName(
        const nsAString *aLeafName) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNativeLeafName(
        nsAString *aLeafName) = 0;

    virtual nsresult STDMETHODCALLTYPE SetNativeLeafName(
        const nsAString *aLeafName) = 0;

    virtual nsresult STDMETHODCALLTYPE CopyTo(
        nsIFile *newParentDir,
        const nsAString *newName) = 0;

    virtual nsresult STDMETHODCALLTYPE CopyToNative(
        nsIFile *newParentDir,
        const nsAString *newName) = 0;

    virtual nsresult STDMETHODCALLTYPE CopyToFollowingLinks(
        nsIFile *newParentDir,
        const nsAString *newName) = 0;

    virtual nsresult STDMETHODCALLTYPE CopyToFollowingLinksNative(
        nsIFile *newParentDir,
        const nsAString *newName) = 0;

    virtual nsresult STDMETHODCALLTYPE MoveTo(
        nsIFile *newParentDir,
        const nsAString *newName) = 0;

    virtual nsresult STDMETHODCALLTYPE MoveToNative(
        nsIFile *newParentDir,
        const nsAString *newName) = 0;

    virtual nsresult STDMETHODCALLTYPE RenameTo(
        nsIFile *newParentDir,
        const nsAString *newName) = 0;

    virtual nsresult STDMETHODCALLTYPE RenameToNative(
        nsIFile *newParentDir,
        const nsACString *newName) = 0;

    virtual nsresult STDMETHODCALLTYPE Remove(
        cpp_bool recursive) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPermissions(
        UINT32 *aPermissions) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPermissions(
        UINT32 pPermissions) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPermissionsOfLink(
        UINT32 *aPermissions) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPermissionsOfLink(
        UINT32 pPermissions) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLastModifiedTime(
        PRTime *aLastModifiedTime) = 0;

    virtual nsresult STDMETHODCALLTYPE SetLastModifiedTime(
        PRTime aLastModifiedTime) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLastModifiedTimeOfLink(
        PRTime *aLastModifiedTimeOfLink) = 0;

    virtual nsresult STDMETHODCALLTYPE SetLastModifiedTimeOfLink(
        PRTime aLastModifiedTimeOfLink) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFileSize(
        INT64 *aFileSize) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFileSize(
        INT64 aFileSize) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFileSizeOfLink(
        INT64 *aFileSizeOfLink) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTarget(
        nsAString *aTarget) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNativeTarget(
        nsACString *aNativeTarget) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPath(
        nsAString *aPath) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNativePath(
        nsACString *aNativePath) = 0;

    virtual nsresult STDMETHODCALLTYPE Exists(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE IsWritable(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE IsReadable(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE IsExecutable(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE IsHidden(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE IsDirectory(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE IsFile(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE IsSymlink(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE IsSpecial(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateUnique(
        UINT32 type,
        UINT32 permission) = 0;

    virtual nsresult STDMETHODCALLTYPE Clone(
        nsIFile **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Equals(
        nsIFile *inFile,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Contains(
        nsIFile *inFile,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetParent(
        nsIFile **aParent) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDirectoryEntries(
        nsISimpleEnumerator **aDirectoryEntries) = 0;

    virtual nsresult STDMETHODCALLTYPE InitWithPath(
        const nsAString *filePath) = 0;

    virtual nsresult STDMETHODCALLTYPE InitWithNativePath(
        const nsACString *filePath) = 0;

    virtual nsresult STDMETHODCALLTYPE InitWithFile(
        nsIFile *aFile) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFollowLinks(
        cpp_bool *aFollowLinks) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFollowLinks(
        cpp_bool aFollowLinks) = 0;

    virtual nsresult STDMETHODCALLTYPE OpenNSPRFileDesc(
        LONG flags,
        LONG mode,
        PRFileDesc **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE OpenANSIFileDesc(
        const char *mode,
        widl_FILE **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Load(
        PRLibrary **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDiskSpaceAvailable(
        INT64 *aDiskSpaceAvailable) = 0;

    virtual nsresult STDMETHODCALLTYPE AppendRelativePath(
        const nsAString *relativeFilePath) = 0;

    virtual nsresult STDMETHODCALLTYPE AppendRelativeNativePath(
        const nsACString *relativeFilePath) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPersistentDescriptor(
        nsACString *aPersistentDescriptor) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPersistentDescriptor(
        const nsACString *aPersistentDescriptor) = 0;

    virtual nsresult STDMETHODCALLTYPE Reveal(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE Launch(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRelativeDescriptor(
        nsIFile *fromFile,
        nsACString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetRelativeDescriptor(
        nsIFile *fromFile,
        const nsACString *relativeDesc) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRelativePath(
        nsIFile *fromFile,
        nsACString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetRelativePath(
        nsIFile *fromFile,
        const nsACString *relativeDesc) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIFile, 0x2fa6884a, 0xae65, 0x412a, 0x9d,0x4c, 0xce,0x6e,0x34,0x54,0x4b,0xa1)
#endif
#else
typedef struct nsIFileVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIFile *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIFile *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIFile *This);

    /*** nsIFile methods ***/
    nsresult (STDMETHODCALLTYPE *Append)(
        nsIFile *This,
        const nsAString *node);

    nsresult (STDMETHODCALLTYPE *AppendNative)(
        nsIFile *This,
        const nsAString *node);

    nsresult (STDMETHODCALLTYPE *Normalize)(
        nsIFile *This);

    nsresult (STDMETHODCALLTYPE *Create)(
        nsIFile *This,
        UINT32 type,
        UINT32 permission);

    nsresult (STDMETHODCALLTYPE *GetLeafName)(
        nsIFile *This,
        nsAString *aLeafName);

    nsresult (STDMETHODCALLTYPE *SetLeafName)(
        nsIFile *This,
        const nsAString *aLeafName);

    nsresult (STDMETHODCALLTYPE *GetNativeLeafName)(
        nsIFile *This,
        nsAString *aLeafName);

    nsresult (STDMETHODCALLTYPE *SetNativeLeafName)(
        nsIFile *This,
        const nsAString *aLeafName);

    nsresult (STDMETHODCALLTYPE *CopyTo)(
        nsIFile *This,
        nsIFile *newParentDir,
        const nsAString *newName);

    nsresult (STDMETHODCALLTYPE *CopyToNative)(
        nsIFile *This,
        nsIFile *newParentDir,
        const nsAString *newName);

    nsresult (STDMETHODCALLTYPE *CopyToFollowingLinks)(
        nsIFile *This,
        nsIFile *newParentDir,
        const nsAString *newName);

    nsresult (STDMETHODCALLTYPE *CopyToFollowingLinksNative)(
        nsIFile *This,
        nsIFile *newParentDir,
        const nsAString *newName);

    nsresult (STDMETHODCALLTYPE *MoveTo)(
        nsIFile *This,
        nsIFile *newParentDir,
        const nsAString *newName);

    nsresult (STDMETHODCALLTYPE *MoveToNative)(
        nsIFile *This,
        nsIFile *newParentDir,
        const nsAString *newName);

    nsresult (STDMETHODCALLTYPE *RenameTo)(
        nsIFile *This,
        nsIFile *newParentDir,
        const nsAString *newName);

    nsresult (STDMETHODCALLTYPE *RenameToNative)(
        nsIFile *This,
        nsIFile *newParentDir,
        const nsACString *newName);

    nsresult (STDMETHODCALLTYPE *Remove)(
        nsIFile *This,
        cpp_bool recursive);

    nsresult (STDMETHODCALLTYPE *GetPermissions)(
        nsIFile *This,
        UINT32 *aPermissions);

    nsresult (STDMETHODCALLTYPE *SetPermissions)(
        nsIFile *This,
        UINT32 pPermissions);

    nsresult (STDMETHODCALLTYPE *GetPermissionsOfLink)(
        nsIFile *This,
        UINT32 *aPermissions);

    nsresult (STDMETHODCALLTYPE *SetPermissionsOfLink)(
        nsIFile *This,
        UINT32 pPermissions);

    nsresult (STDMETHODCALLTYPE *GetLastModifiedTime)(
        nsIFile *This,
        PRTime *aLastModifiedTime);

    nsresult (STDMETHODCALLTYPE *SetLastModifiedTime)(
        nsIFile *This,
        PRTime aLastModifiedTime);

    nsresult (STDMETHODCALLTYPE *GetLastModifiedTimeOfLink)(
        nsIFile *This,
        PRTime *aLastModifiedTimeOfLink);

    nsresult (STDMETHODCALLTYPE *SetLastModifiedTimeOfLink)(
        nsIFile *This,
        PRTime aLastModifiedTimeOfLink);

    nsresult (STDMETHODCALLTYPE *GetFileSize)(
        nsIFile *This,
        INT64 *aFileSize);

    nsresult (STDMETHODCALLTYPE *SetFileSize)(
        nsIFile *This,
        INT64 aFileSize);

    nsresult (STDMETHODCALLTYPE *GetFileSizeOfLink)(
        nsIFile *This,
        INT64 *aFileSizeOfLink);

    nsresult (STDMETHODCALLTYPE *GetTarget)(
        nsIFile *This,
        nsAString *aTarget);

    nsresult (STDMETHODCALLTYPE *GetNativeTarget)(
        nsIFile *This,
        nsACString *aNativeTarget);

    nsresult (STDMETHODCALLTYPE *GetPath)(
        nsIFile *This,
        nsAString *aPath);

    nsresult (STDMETHODCALLTYPE *GetNativePath)(
        nsIFile *This,
        nsACString *aNativePath);

    nsresult (STDMETHODCALLTYPE *Exists)(
        nsIFile *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *IsWritable)(
        nsIFile *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *IsReadable)(
        nsIFile *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *IsExecutable)(
        nsIFile *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *IsHidden)(
        nsIFile *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *IsDirectory)(
        nsIFile *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *IsFile)(
        nsIFile *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *IsSymlink)(
        nsIFile *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *IsSpecial)(
        nsIFile *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CreateUnique)(
        nsIFile *This,
        UINT32 type,
        UINT32 permission);

    nsresult (STDMETHODCALLTYPE *Clone)(
        nsIFile *This,
        nsIFile **_retval);

    nsresult (STDMETHODCALLTYPE *Equals)(
        nsIFile *This,
        nsIFile *inFile,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *Contains)(
        nsIFile *This,
        nsIFile *inFile,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetParent)(
        nsIFile *This,
        nsIFile **aParent);

    nsresult (STDMETHODCALLTYPE *GetDirectoryEntries)(
        nsIFile *This,
        nsISimpleEnumerator **aDirectoryEntries);

    nsresult (STDMETHODCALLTYPE *InitWithPath)(
        nsIFile *This,
        const nsAString *filePath);

    nsresult (STDMETHODCALLTYPE *InitWithNativePath)(
        nsIFile *This,
        const nsACString *filePath);

    nsresult (STDMETHODCALLTYPE *InitWithFile)(
        nsIFile *This,
        nsIFile *aFile);

    nsresult (STDMETHODCALLTYPE *GetFollowLinks)(
        nsIFile *This,
        cpp_bool *aFollowLinks);

    nsresult (STDMETHODCALLTYPE *SetFollowLinks)(
        nsIFile *This,
        cpp_bool aFollowLinks);

    nsresult (STDMETHODCALLTYPE *OpenNSPRFileDesc)(
        nsIFile *This,
        LONG flags,
        LONG mode,
        PRFileDesc **_retval);

    nsresult (STDMETHODCALLTYPE *OpenANSIFileDesc)(
        nsIFile *This,
        const char *mode,
        widl_FILE **_retval);

    nsresult (STDMETHODCALLTYPE *Load)(
        nsIFile *This,
        PRLibrary **_retval);

    nsresult (STDMETHODCALLTYPE *GetDiskSpaceAvailable)(
        nsIFile *This,
        INT64 *aDiskSpaceAvailable);

    nsresult (STDMETHODCALLTYPE *AppendRelativePath)(
        nsIFile *This,
        const nsAString *relativeFilePath);

    nsresult (STDMETHODCALLTYPE *AppendRelativeNativePath)(
        nsIFile *This,
        const nsACString *relativeFilePath);

    nsresult (STDMETHODCALLTYPE *GetPersistentDescriptor)(
        nsIFile *This,
        nsACString *aPersistentDescriptor);

    nsresult (STDMETHODCALLTYPE *SetPersistentDescriptor)(
        nsIFile *This,
        const nsACString *aPersistentDescriptor);

    nsresult (STDMETHODCALLTYPE *Reveal)(
        nsIFile *This);

    nsresult (STDMETHODCALLTYPE *Launch)(
        nsIFile *This);

    nsresult (STDMETHODCALLTYPE *GetRelativeDescriptor)(
        nsIFile *This,
        nsIFile *fromFile,
        nsACString *_retval);

    nsresult (STDMETHODCALLTYPE *SetRelativeDescriptor)(
        nsIFile *This,
        nsIFile *fromFile,
        const nsACString *relativeDesc);

    nsresult (STDMETHODCALLTYPE *GetRelativePath)(
        nsIFile *This,
        nsIFile *fromFile,
        nsACString *_retval);

    nsresult (STDMETHODCALLTYPE *SetRelativePath)(
        nsIFile *This,
        nsIFile *fromFile,
        const nsACString *relativeDesc);

    END_INTERFACE
} nsIFileVtbl;

interface nsIFile {
    CONST_VTBL nsIFileVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIFile_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIFile_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIFile_Release(This) (This)->lpVtbl->Release(This)
/*** nsIFile methods ***/
#define nsIFile_Append(This,node) (This)->lpVtbl->Append(This,node)
#define nsIFile_AppendNative(This,node) (This)->lpVtbl->AppendNative(This,node)
#define nsIFile_Normalize(This) (This)->lpVtbl->Normalize(This)
#define nsIFile_Create(This,type,permission) (This)->lpVtbl->Create(This,type,permission)
#define nsIFile_GetLeafName(This,aLeafName) (This)->lpVtbl->GetLeafName(This,aLeafName)
#define nsIFile_SetLeafName(This,aLeafName) (This)->lpVtbl->SetLeafName(This,aLeafName)
#define nsIFile_GetNativeLeafName(This,aLeafName) (This)->lpVtbl->GetNativeLeafName(This,aLeafName)
#define nsIFile_SetNativeLeafName(This,aLeafName) (This)->lpVtbl->SetNativeLeafName(This,aLeafName)
#define nsIFile_CopyTo(This,newParentDir,newName) (This)->lpVtbl->CopyTo(This,newParentDir,newName)
#define nsIFile_CopyToNative(This,newParentDir,newName) (This)->lpVtbl->CopyToNative(This,newParentDir,newName)
#define nsIFile_CopyToFollowingLinks(This,newParentDir,newName) (This)->lpVtbl->CopyToFollowingLinks(This,newParentDir,newName)
#define nsIFile_CopyToFollowingLinksNative(This,newParentDir,newName) (This)->lpVtbl->CopyToFollowingLinksNative(This,newParentDir,newName)
#define nsIFile_MoveTo(This,newParentDir,newName) (This)->lpVtbl->MoveTo(This,newParentDir,newName)
#define nsIFile_MoveToNative(This,newParentDir,newName) (This)->lpVtbl->MoveToNative(This,newParentDir,newName)
#define nsIFile_RenameTo(This,newParentDir,newName) (This)->lpVtbl->RenameTo(This,newParentDir,newName)
#define nsIFile_RenameToNative(This,newParentDir,newName) (This)->lpVtbl->RenameToNative(This,newParentDir,newName)
#define nsIFile_Remove(This,recursive) (This)->lpVtbl->Remove(This,recursive)
#define nsIFile_GetPermissions(This,aPermissions) (This)->lpVtbl->GetPermissions(This,aPermissions)
#define nsIFile_SetPermissions(This,pPermissions) (This)->lpVtbl->SetPermissions(This,pPermissions)
#define nsIFile_GetPermissionsOfLink(This,aPermissions) (This)->lpVtbl->GetPermissionsOfLink(This,aPermissions)
#define nsIFile_SetPermissionsOfLink(This,pPermissions) (This)->lpVtbl->SetPermissionsOfLink(This,pPermissions)
#define nsIFile_GetLastModifiedTime(This,aLastModifiedTime) (This)->lpVtbl->GetLastModifiedTime(This,aLastModifiedTime)
#define nsIFile_SetLastModifiedTime(This,aLastModifiedTime) (This)->lpVtbl->SetLastModifiedTime(This,aLastModifiedTime)
#define nsIFile_GetLastModifiedTimeOfLink(This,aLastModifiedTimeOfLink) (This)->lpVtbl->GetLastModifiedTimeOfLink(This,aLastModifiedTimeOfLink)
#define nsIFile_SetLastModifiedTimeOfLink(This,aLastModifiedTimeOfLink) (This)->lpVtbl->SetLastModifiedTimeOfLink(This,aLastModifiedTimeOfLink)
#define nsIFile_GetFileSize(This,aFileSize) (This)->lpVtbl->GetFileSize(This,aFileSize)
#define nsIFile_SetFileSize(This,aFileSize) (This)->lpVtbl->SetFileSize(This,aFileSize)
#define nsIFile_GetFileSizeOfLink(This,aFileSizeOfLink) (This)->lpVtbl->GetFileSizeOfLink(This,aFileSizeOfLink)
#define nsIFile_GetTarget(This,aTarget) (This)->lpVtbl->GetTarget(This,aTarget)
#define nsIFile_GetNativeTarget(This,aNativeTarget) (This)->lpVtbl->GetNativeTarget(This,aNativeTarget)
#define nsIFile_GetPath(This,aPath) (This)->lpVtbl->GetPath(This,aPath)
#define nsIFile_GetNativePath(This,aNativePath) (This)->lpVtbl->GetNativePath(This,aNativePath)
#define nsIFile_Exists(This,_retval) (This)->lpVtbl->Exists(This,_retval)
#define nsIFile_IsWritable(This,_retval) (This)->lpVtbl->IsWritable(This,_retval)
#define nsIFile_IsReadable(This,_retval) (This)->lpVtbl->IsReadable(This,_retval)
#define nsIFile_IsExecutable(This,_retval) (This)->lpVtbl->IsExecutable(This,_retval)
#define nsIFile_IsHidden(This,_retval) (This)->lpVtbl->IsHidden(This,_retval)
#define nsIFile_IsDirectory(This,_retval) (This)->lpVtbl->IsDirectory(This,_retval)
#define nsIFile_IsFile(This,_retval) (This)->lpVtbl->IsFile(This,_retval)
#define nsIFile_IsSymlink(This,_retval) (This)->lpVtbl->IsSymlink(This,_retval)
#define nsIFile_IsSpecial(This,_retval) (This)->lpVtbl->IsSpecial(This,_retval)
#define nsIFile_CreateUnique(This,type,permission) (This)->lpVtbl->CreateUnique(This,type,permission)
#define nsIFile_Clone(This,_retval) (This)->lpVtbl->Clone(This,_retval)
#define nsIFile_Equals(This,inFile,_retval) (This)->lpVtbl->Equals(This,inFile,_retval)
#define nsIFile_Contains(This,inFile,_retval) (This)->lpVtbl->Contains(This,inFile,_retval)
#define nsIFile_GetParent(This,aParent) (This)->lpVtbl->GetParent(This,aParent)
#define nsIFile_GetDirectoryEntries(This,aDirectoryEntries) (This)->lpVtbl->GetDirectoryEntries(This,aDirectoryEntries)
#define nsIFile_InitWithPath(This,filePath) (This)->lpVtbl->InitWithPath(This,filePath)
#define nsIFile_InitWithNativePath(This,filePath) (This)->lpVtbl->InitWithNativePath(This,filePath)
#define nsIFile_InitWithFile(This,aFile) (This)->lpVtbl->InitWithFile(This,aFile)
#define nsIFile_GetFollowLinks(This,aFollowLinks) (This)->lpVtbl->GetFollowLinks(This,aFollowLinks)
#define nsIFile_SetFollowLinks(This,aFollowLinks) (This)->lpVtbl->SetFollowLinks(This,aFollowLinks)
#define nsIFile_OpenNSPRFileDesc(This,flags,mode,_retval) (This)->lpVtbl->OpenNSPRFileDesc(This,flags,mode,_retval)
#define nsIFile_OpenANSIFileDesc(This,mode,_retval) (This)->lpVtbl->OpenANSIFileDesc(This,mode,_retval)
#define nsIFile_Load(This,_retval) (This)->lpVtbl->Load(This,_retval)
#define nsIFile_GetDiskSpaceAvailable(This,aDiskSpaceAvailable) (This)->lpVtbl->GetDiskSpaceAvailable(This,aDiskSpaceAvailable)
#define nsIFile_AppendRelativePath(This,relativeFilePath) (This)->lpVtbl->AppendRelativePath(This,relativeFilePath)
#define nsIFile_AppendRelativeNativePath(This,relativeFilePath) (This)->lpVtbl->AppendRelativeNativePath(This,relativeFilePath)
#define nsIFile_GetPersistentDescriptor(This,aPersistentDescriptor) (This)->lpVtbl->GetPersistentDescriptor(This,aPersistentDescriptor)
#define nsIFile_SetPersistentDescriptor(This,aPersistentDescriptor) (This)->lpVtbl->SetPersistentDescriptor(This,aPersistentDescriptor)
#define nsIFile_Reveal(This) (This)->lpVtbl->Reveal(This)
#define nsIFile_Launch(This) (This)->lpVtbl->Launch(This)
#define nsIFile_GetRelativeDescriptor(This,fromFile,_retval) (This)->lpVtbl->GetRelativeDescriptor(This,fromFile,_retval)
#define nsIFile_SetRelativeDescriptor(This,fromFile,relativeDesc) (This)->lpVtbl->SetRelativeDescriptor(This,fromFile,relativeDesc)
#define nsIFile_GetRelativePath(This,fromFile,_retval) (This)->lpVtbl->GetRelativePath(This,fromFile,_retval)
#define nsIFile_SetRelativePath(This,fromFile,relativeDesc) (This)->lpVtbl->SetRelativePath(This,fromFile,relativeDesc)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIFile_QueryInterface(nsIFile* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIFile_AddRef(nsIFile* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIFile_Release(nsIFile* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIFile methods ***/
static FORCEINLINE nsresult nsIFile_Append(nsIFile* This,const nsAString *node) {
    return This->lpVtbl->Append(This,node);
}
static FORCEINLINE nsresult nsIFile_AppendNative(nsIFile* This,const nsAString *node) {
    return This->lpVtbl->AppendNative(This,node);
}
static FORCEINLINE nsresult nsIFile_Normalize(nsIFile* This) {
    return This->lpVtbl->Normalize(This);
}
static FORCEINLINE nsresult nsIFile_Create(nsIFile* This,UINT32 type,UINT32 permission) {
    return This->lpVtbl->Create(This,type,permission);
}
static FORCEINLINE nsresult nsIFile_GetLeafName(nsIFile* This,nsAString *aLeafName) {
    return This->lpVtbl->GetLeafName(This,aLeafName);
}
static FORCEINLINE nsresult nsIFile_SetLeafName(nsIFile* This,const nsAString *aLeafName) {
    return This->lpVtbl->SetLeafName(This,aLeafName);
}
static FORCEINLINE nsresult nsIFile_GetNativeLeafName(nsIFile* This,nsAString *aLeafName) {
    return This->lpVtbl->GetNativeLeafName(This,aLeafName);
}
static FORCEINLINE nsresult nsIFile_SetNativeLeafName(nsIFile* This,const nsAString *aLeafName) {
    return This->lpVtbl->SetNativeLeafName(This,aLeafName);
}
static FORCEINLINE nsresult nsIFile_CopyTo(nsIFile* This,nsIFile *newParentDir,const nsAString *newName) {
    return This->lpVtbl->CopyTo(This,newParentDir,newName);
}
static FORCEINLINE nsresult nsIFile_CopyToNative(nsIFile* This,nsIFile *newParentDir,const nsAString *newName) {
    return This->lpVtbl->CopyToNative(This,newParentDir,newName);
}
static FORCEINLINE nsresult nsIFile_CopyToFollowingLinks(nsIFile* This,nsIFile *newParentDir,const nsAString *newName) {
    return This->lpVtbl->CopyToFollowingLinks(This,newParentDir,newName);
}
static FORCEINLINE nsresult nsIFile_CopyToFollowingLinksNative(nsIFile* This,nsIFile *newParentDir,const nsAString *newName) {
    return This->lpVtbl->CopyToFollowingLinksNative(This,newParentDir,newName);
}
static FORCEINLINE nsresult nsIFile_MoveTo(nsIFile* This,nsIFile *newParentDir,const nsAString *newName) {
    return This->lpVtbl->MoveTo(This,newParentDir,newName);
}
static FORCEINLINE nsresult nsIFile_MoveToNative(nsIFile* This,nsIFile *newParentDir,const nsAString *newName) {
    return This->lpVtbl->MoveToNative(This,newParentDir,newName);
}
static FORCEINLINE nsresult nsIFile_RenameTo(nsIFile* This,nsIFile *newParentDir,const nsAString *newName) {
    return This->lpVtbl->RenameTo(This,newParentDir,newName);
}
static FORCEINLINE nsresult nsIFile_RenameToNative(nsIFile* This,nsIFile *newParentDir,const nsACString *newName) {
    return This->lpVtbl->RenameToNative(This,newParentDir,newName);
}
static FORCEINLINE nsresult nsIFile_Remove(nsIFile* This,cpp_bool recursive) {
    return This->lpVtbl->Remove(This,recursive);
}
static FORCEINLINE nsresult nsIFile_GetPermissions(nsIFile* This,UINT32 *aPermissions) {
    return This->lpVtbl->GetPermissions(This,aPermissions);
}
static FORCEINLINE nsresult nsIFile_SetPermissions(nsIFile* This,UINT32 pPermissions) {
    return This->lpVtbl->SetPermissions(This,pPermissions);
}
static FORCEINLINE nsresult nsIFile_GetPermissionsOfLink(nsIFile* This,UINT32 *aPermissions) {
    return This->lpVtbl->GetPermissionsOfLink(This,aPermissions);
}
static FORCEINLINE nsresult nsIFile_SetPermissionsOfLink(nsIFile* This,UINT32 pPermissions) {
    return This->lpVtbl->SetPermissionsOfLink(This,pPermissions);
}
static FORCEINLINE nsresult nsIFile_GetLastModifiedTime(nsIFile* This,PRTime *aLastModifiedTime) {
    return This->lpVtbl->GetLastModifiedTime(This,aLastModifiedTime);
}
static FORCEINLINE nsresult nsIFile_SetLastModifiedTime(nsIFile* This,PRTime aLastModifiedTime) {
    return This->lpVtbl->SetLastModifiedTime(This,aLastModifiedTime);
}
static FORCEINLINE nsresult nsIFile_GetLastModifiedTimeOfLink(nsIFile* This,PRTime *aLastModifiedTimeOfLink) {
    return This->lpVtbl->GetLastModifiedTimeOfLink(This,aLastModifiedTimeOfLink);
}
static FORCEINLINE nsresult nsIFile_SetLastModifiedTimeOfLink(nsIFile* This,PRTime aLastModifiedTimeOfLink) {
    return This->lpVtbl->SetLastModifiedTimeOfLink(This,aLastModifiedTimeOfLink);
}
static FORCEINLINE nsresult nsIFile_GetFileSize(nsIFile* This,INT64 *aFileSize) {
    return This->lpVtbl->GetFileSize(This,aFileSize);
}
static FORCEINLINE nsresult nsIFile_SetFileSize(nsIFile* This,INT64 aFileSize) {
    return This->lpVtbl->SetFileSize(This,aFileSize);
}
static FORCEINLINE nsresult nsIFile_GetFileSizeOfLink(nsIFile* This,INT64 *aFileSizeOfLink) {
    return This->lpVtbl->GetFileSizeOfLink(This,aFileSizeOfLink);
}
static FORCEINLINE nsresult nsIFile_GetTarget(nsIFile* This,nsAString *aTarget) {
    return This->lpVtbl->GetTarget(This,aTarget);
}
static FORCEINLINE nsresult nsIFile_GetNativeTarget(nsIFile* This,nsACString *aNativeTarget) {
    return This->lpVtbl->GetNativeTarget(This,aNativeTarget);
}
static FORCEINLINE nsresult nsIFile_GetPath(nsIFile* This,nsAString *aPath) {
    return This->lpVtbl->GetPath(This,aPath);
}
static FORCEINLINE nsresult nsIFile_GetNativePath(nsIFile* This,nsACString *aNativePath) {
    return This->lpVtbl->GetNativePath(This,aNativePath);
}
static FORCEINLINE nsresult nsIFile_Exists(nsIFile* This,cpp_bool *_retval) {
    return This->lpVtbl->Exists(This,_retval);
}
static FORCEINLINE nsresult nsIFile_IsWritable(nsIFile* This,cpp_bool *_retval) {
    return This->lpVtbl->IsWritable(This,_retval);
}
static FORCEINLINE nsresult nsIFile_IsReadable(nsIFile* This,cpp_bool *_retval) {
    return This->lpVtbl->IsReadable(This,_retval);
}
static FORCEINLINE nsresult nsIFile_IsExecutable(nsIFile* This,cpp_bool *_retval) {
    return This->lpVtbl->IsExecutable(This,_retval);
}
static FORCEINLINE nsresult nsIFile_IsHidden(nsIFile* This,cpp_bool *_retval) {
    return This->lpVtbl->IsHidden(This,_retval);
}
static FORCEINLINE nsresult nsIFile_IsDirectory(nsIFile* This,cpp_bool *_retval) {
    return This->lpVtbl->IsDirectory(This,_retval);
}
static FORCEINLINE nsresult nsIFile_IsFile(nsIFile* This,cpp_bool *_retval) {
    return This->lpVtbl->IsFile(This,_retval);
}
static FORCEINLINE nsresult nsIFile_IsSymlink(nsIFile* This,cpp_bool *_retval) {
    return This->lpVtbl->IsSymlink(This,_retval);
}
static FORCEINLINE nsresult nsIFile_IsSpecial(nsIFile* This,cpp_bool *_retval) {
    return This->lpVtbl->IsSpecial(This,_retval);
}
static FORCEINLINE nsresult nsIFile_CreateUnique(nsIFile* This,UINT32 type,UINT32 permission) {
    return This->lpVtbl->CreateUnique(This,type,permission);
}
static FORCEINLINE nsresult nsIFile_Clone(nsIFile* This,nsIFile **_retval) {
    return This->lpVtbl->Clone(This,_retval);
}
static FORCEINLINE nsresult nsIFile_Equals(nsIFile* This,nsIFile *inFile,cpp_bool *_retval) {
    return This->lpVtbl->Equals(This,inFile,_retval);
}
static FORCEINLINE nsresult nsIFile_Contains(nsIFile* This,nsIFile *inFile,cpp_bool *_retval) {
    return This->lpVtbl->Contains(This,inFile,_retval);
}
static FORCEINLINE nsresult nsIFile_GetParent(nsIFile* This,nsIFile **aParent) {
    return This->lpVtbl->GetParent(This,aParent);
}
static FORCEINLINE nsresult nsIFile_GetDirectoryEntries(nsIFile* This,nsISimpleEnumerator **aDirectoryEntries) {
    return This->lpVtbl->GetDirectoryEntries(This,aDirectoryEntries);
}
static FORCEINLINE nsresult nsIFile_InitWithPath(nsIFile* This,const nsAString *filePath) {
    return This->lpVtbl->InitWithPath(This,filePath);
}
static FORCEINLINE nsresult nsIFile_InitWithNativePath(nsIFile* This,const nsACString *filePath) {
    return This->lpVtbl->InitWithNativePath(This,filePath);
}
static FORCEINLINE nsresult nsIFile_InitWithFile(nsIFile* This,nsIFile *aFile) {
    return This->lpVtbl->InitWithFile(This,aFile);
}
static FORCEINLINE nsresult nsIFile_GetFollowLinks(nsIFile* This,cpp_bool *aFollowLinks) {
    return This->lpVtbl->GetFollowLinks(This,aFollowLinks);
}
static FORCEINLINE nsresult nsIFile_SetFollowLinks(nsIFile* This,cpp_bool aFollowLinks) {
    return This->lpVtbl->SetFollowLinks(This,aFollowLinks);
}
static FORCEINLINE nsresult nsIFile_OpenNSPRFileDesc(nsIFile* This,LONG flags,LONG mode,PRFileDesc **_retval) {
    return This->lpVtbl->OpenNSPRFileDesc(This,flags,mode,_retval);
}
static FORCEINLINE nsresult nsIFile_OpenANSIFileDesc(nsIFile* This,const char *mode,widl_FILE **_retval) {
    return This->lpVtbl->OpenANSIFileDesc(This,mode,_retval);
}
static FORCEINLINE nsresult nsIFile_Load(nsIFile* This,PRLibrary **_retval) {
    return This->lpVtbl->Load(This,_retval);
}
static FORCEINLINE nsresult nsIFile_GetDiskSpaceAvailable(nsIFile* This,INT64 *aDiskSpaceAvailable) {
    return This->lpVtbl->GetDiskSpaceAvailable(This,aDiskSpaceAvailable);
}
static FORCEINLINE nsresult nsIFile_AppendRelativePath(nsIFile* This,const nsAString *relativeFilePath) {
    return This->lpVtbl->AppendRelativePath(This,relativeFilePath);
}
static FORCEINLINE nsresult nsIFile_AppendRelativeNativePath(nsIFile* This,const nsACString *relativeFilePath) {
    return This->lpVtbl->AppendRelativeNativePath(This,relativeFilePath);
}
static FORCEINLINE nsresult nsIFile_GetPersistentDescriptor(nsIFile* This,nsACString *aPersistentDescriptor) {
    return This->lpVtbl->GetPersistentDescriptor(This,aPersistentDescriptor);
}
static FORCEINLINE nsresult nsIFile_SetPersistentDescriptor(nsIFile* This,const nsACString *aPersistentDescriptor) {
    return This->lpVtbl->SetPersistentDescriptor(This,aPersistentDescriptor);
}
static FORCEINLINE nsresult nsIFile_Reveal(nsIFile* This) {
    return This->lpVtbl->Reveal(This);
}
static FORCEINLINE nsresult nsIFile_Launch(nsIFile* This) {
    return This->lpVtbl->Launch(This);
}
static FORCEINLINE nsresult nsIFile_GetRelativeDescriptor(nsIFile* This,nsIFile *fromFile,nsACString *_retval) {
    return This->lpVtbl->GetRelativeDescriptor(This,fromFile,_retval);
}
static FORCEINLINE nsresult nsIFile_SetRelativeDescriptor(nsIFile* This,nsIFile *fromFile,const nsACString *relativeDesc) {
    return This->lpVtbl->SetRelativeDescriptor(This,fromFile,relativeDesc);
}
static FORCEINLINE nsresult nsIFile_GetRelativePath(nsIFile* This,nsIFile *fromFile,nsACString *_retval) {
    return This->lpVtbl->GetRelativePath(This,fromFile,_retval);
}
static FORCEINLINE nsresult nsIFile_SetRelativePath(nsIFile* This,nsIFile *fromFile,const nsACString *relativeDesc) {
    return This->lpVtbl->SetRelativePath(This,fromFile,relativeDesc);
}
#endif
#endif

#endif


#endif  /* __nsIFile_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIComponentManager interface
 */
#ifndef __nsIComponentManager_INTERFACE_DEFINED__
#define __nsIComponentManager_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIComponentManager, 0xd604ffc3, 0x1ba3, 0x4f6c, 0xb6,0x5f, 0x1e,0xd4,0x19,0x93,0x64,0xc3);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d604ffc3-1ba3-4f6c-b65f-1ed4199364c3")
nsIComponentManager : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetClassObject(
        nsCIDRef aClass,
        nsIIDRef aIID,
        void **result) = 0;

    virtual nsresult STDMETHODCALLTYPE GetClassObjectByContractID(
        const char *aContractID,
        nsIIDRef aIID,
        void **result) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateInstance(
        nsCIDRef aClass,
        nsISupports *aDelegate,
        nsIIDRef aIID,
        void **result) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateInstanceByContractID(
        const char *aContractID,
        nsISupports *aDelegate,
        nsIIDRef aIID,
        void **result) = 0;

    virtual nsresult STDMETHODCALLTYPE AddBootstrappedManifestLocation(
        nsIFile *aLocation) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveBootstrappedManifestLocation(
        nsIFile *aLocation) = 0;

    virtual nsresult STDMETHODCALLTYPE GetManifestLocations(
        nsIArray **_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIComponentManager, 0xd604ffc3, 0x1ba3, 0x4f6c, 0xb6,0x5f, 0x1e,0xd4,0x19,0x93,0x64,0xc3)
#endif
#else
typedef struct nsIComponentManagerVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIComponentManager *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIComponentManager *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIComponentManager *This);

    /*** nsIComponentManager methods ***/
    nsresult (STDMETHODCALLTYPE *GetClassObject)(
        nsIComponentManager *This,
        nsCIDRef aClass,
        nsIIDRef aIID,
        void **result);

    nsresult (STDMETHODCALLTYPE *GetClassObjectByContractID)(
        nsIComponentManager *This,
        const char *aContractID,
        nsIIDRef aIID,
        void **result);

    nsresult (STDMETHODCALLTYPE *CreateInstance)(
        nsIComponentManager *This,
        nsCIDRef aClass,
        nsISupports *aDelegate,
        nsIIDRef aIID,
        void **result);

    nsresult (STDMETHODCALLTYPE *CreateInstanceByContractID)(
        nsIComponentManager *This,
        const char *aContractID,
        nsISupports *aDelegate,
        nsIIDRef aIID,
        void **result);

    nsresult (STDMETHODCALLTYPE *AddBootstrappedManifestLocation)(
        nsIComponentManager *This,
        nsIFile *aLocation);

    nsresult (STDMETHODCALLTYPE *RemoveBootstrappedManifestLocation)(
        nsIComponentManager *This,
        nsIFile *aLocation);

    nsresult (STDMETHODCALLTYPE *GetManifestLocations)(
        nsIComponentManager *This,
        nsIArray **_retval);

    END_INTERFACE
} nsIComponentManagerVtbl;

interface nsIComponentManager {
    CONST_VTBL nsIComponentManagerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIComponentManager_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIComponentManager_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIComponentManager_Release(This) (This)->lpVtbl->Release(This)
/*** nsIComponentManager methods ***/
#define nsIComponentManager_GetClassObject(This,aClass,aIID,result) (This)->lpVtbl->GetClassObject(This,aClass,aIID,result)
#define nsIComponentManager_GetClassObjectByContractID(This,aContractID,aIID,result) (This)->lpVtbl->GetClassObjectByContractID(This,aContractID,aIID,result)
#define nsIComponentManager_CreateInstance(This,aClass,aDelegate,aIID,result) (This)->lpVtbl->CreateInstance(This,aClass,aDelegate,aIID,result)
#define nsIComponentManager_CreateInstanceByContractID(This,aContractID,aDelegate,aIID,result) (This)->lpVtbl->CreateInstanceByContractID(This,aContractID,aDelegate,aIID,result)
#define nsIComponentManager_AddBootstrappedManifestLocation(This,aLocation) (This)->lpVtbl->AddBootstrappedManifestLocation(This,aLocation)
#define nsIComponentManager_RemoveBootstrappedManifestLocation(This,aLocation) (This)->lpVtbl->RemoveBootstrappedManifestLocation(This,aLocation)
#define nsIComponentManager_GetManifestLocations(This,_retval) (This)->lpVtbl->GetManifestLocations(This,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIComponentManager_QueryInterface(nsIComponentManager* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIComponentManager_AddRef(nsIComponentManager* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIComponentManager_Release(nsIComponentManager* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIComponentManager methods ***/
static FORCEINLINE nsresult nsIComponentManager_GetClassObject(nsIComponentManager* This,nsCIDRef aClass,nsIIDRef aIID,void **result) {
    return This->lpVtbl->GetClassObject(This,aClass,aIID,result);
}
static FORCEINLINE nsresult nsIComponentManager_GetClassObjectByContractID(nsIComponentManager* This,const char *aContractID,nsIIDRef aIID,void **result) {
    return This->lpVtbl->GetClassObjectByContractID(This,aContractID,aIID,result);
}
static FORCEINLINE nsresult nsIComponentManager_CreateInstance(nsIComponentManager* This,nsCIDRef aClass,nsISupports *aDelegate,nsIIDRef aIID,void **result) {
    return This->lpVtbl->CreateInstance(This,aClass,aDelegate,aIID,result);
}
static FORCEINLINE nsresult nsIComponentManager_CreateInstanceByContractID(nsIComponentManager* This,const char *aContractID,nsISupports *aDelegate,nsIIDRef aIID,void **result) {
    return This->lpVtbl->CreateInstanceByContractID(This,aContractID,aDelegate,aIID,result);
}
static FORCEINLINE nsresult nsIComponentManager_AddBootstrappedManifestLocation(nsIComponentManager* This,nsIFile *aLocation) {
    return This->lpVtbl->AddBootstrappedManifestLocation(This,aLocation);
}
static FORCEINLINE nsresult nsIComponentManager_RemoveBootstrappedManifestLocation(nsIComponentManager* This,nsIFile *aLocation) {
    return This->lpVtbl->RemoveBootstrappedManifestLocation(This,aLocation);
}
static FORCEINLINE nsresult nsIComponentManager_GetManifestLocations(nsIComponentManager* This,nsIArray **_retval) {
    return This->lpVtbl->GetManifestLocations(This,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIComponentManager_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIPrefBranch interface
 */
#ifndef __nsIPrefBranch_INTERFACE_DEFINED__
#define __nsIPrefBranch_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIPrefBranch, 0x55d25e49, 0x793f, 0x4727, 0xa6,0x9f, 0xde,0x8b,0x15,0xf4,0xb9,0x85);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("55d25e49-793f-4727-a69f-de8b15f4b985")
nsIPrefBranch : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetRoot(
        char **aRoot) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPrefType(
        const char *aPrefName,
        LONG *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBoolPref(
        const char *aPrefName,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetBoolPref(
        const char *aPrefName,
        cpp_bool aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFloatPref(
        const char *aPrefName,
        float *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCharPref(
        const char *aPrefName,
        char **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCharPref(
        const char *aPrefName,
        const char *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIntPref(
        const char *aPrefName,
        LONG *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetIntPref(
        const char *aPrefName,
        LONG aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE GetComplexValue(
        const char *aPrefName,
        const nsIID *aType,
        void **aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetComplexValue(
        const char *aPrefName,
        const nsIID *aType,
        nsISupports *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE ClearUserPref(
        const char *aPrefName) = 0;

    virtual nsresult STDMETHODCALLTYPE LockPref(
        const char *aPrefName) = 0;

    virtual nsresult STDMETHODCALLTYPE PrefHasUserValue(
        const char *aPrefName,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE PrefIsLocked(
        const char *aPrefName,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE UnlockPref(
        const char *aPrefName) = 0;

    virtual nsresult STDMETHODCALLTYPE DeleteBranch(
        const char *aStartingAt) = 0;

    virtual nsresult STDMETHODCALLTYPE GetChildList(
        const char *aStartingAt,
        UINT32 *aCount,
        char ***aChildArray) = 0;

    virtual nsresult STDMETHODCALLTYPE ResetBranch(
        const char *aStartingAt) = 0;

    virtual nsresult STDMETHODCALLTYPE AddObserver(
        const char *aDomain,
        nsIObserver *aObserver,
        cpp_bool aHoldWeak) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveObserver(
        const char *aDomain,
        nsIObserver *aObserver) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIPrefBranch, 0x55d25e49, 0x793f, 0x4727, 0xa6,0x9f, 0xde,0x8b,0x15,0xf4,0xb9,0x85)
#endif
#else
typedef struct nsIPrefBranchVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIPrefBranch *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIPrefBranch *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIPrefBranch *This);

    /*** nsIPrefBranch methods ***/
    nsresult (STDMETHODCALLTYPE *GetRoot)(
        nsIPrefBranch *This,
        char **aRoot);

    nsresult (STDMETHODCALLTYPE *GetPrefType)(
        nsIPrefBranch *This,
        const char *aPrefName,
        LONG *_retval);

    nsresult (STDMETHODCALLTYPE *GetBoolPref)(
        nsIPrefBranch *This,
        const char *aPrefName,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetBoolPref)(
        nsIPrefBranch *This,
        const char *aPrefName,
        cpp_bool aValue);

    nsresult (STDMETHODCALLTYPE *GetFloatPref)(
        nsIPrefBranch *This,
        const char *aPrefName,
        float *_retval);

    nsresult (STDMETHODCALLTYPE *GetCharPref)(
        nsIPrefBranch *This,
        const char *aPrefName,
        char **_retval);

    nsresult (STDMETHODCALLTYPE *SetCharPref)(
        nsIPrefBranch *This,
        const char *aPrefName,
        const char *aValue);

    nsresult (STDMETHODCALLTYPE *GetIntPref)(
        nsIPrefBranch *This,
        const char *aPrefName,
        LONG *_retval);

    nsresult (STDMETHODCALLTYPE *SetIntPref)(
        nsIPrefBranch *This,
        const char *aPrefName,
        LONG aValue);

    nsresult (STDMETHODCALLTYPE *GetComplexValue)(
        nsIPrefBranch *This,
        const char *aPrefName,
        const nsIID *aType,
        void **aValue);

    nsresult (STDMETHODCALLTYPE *SetComplexValue)(
        nsIPrefBranch *This,
        const char *aPrefName,
        const nsIID *aType,
        nsISupports *aValue);

    nsresult (STDMETHODCALLTYPE *ClearUserPref)(
        nsIPrefBranch *This,
        const char *aPrefName);

    nsresult (STDMETHODCALLTYPE *LockPref)(
        nsIPrefBranch *This,
        const char *aPrefName);

    nsresult (STDMETHODCALLTYPE *PrefHasUserValue)(
        nsIPrefBranch *This,
        const char *aPrefName,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *PrefIsLocked)(
        nsIPrefBranch *This,
        const char *aPrefName,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *UnlockPref)(
        nsIPrefBranch *This,
        const char *aPrefName);

    nsresult (STDMETHODCALLTYPE *DeleteBranch)(
        nsIPrefBranch *This,
        const char *aStartingAt);

    nsresult (STDMETHODCALLTYPE *GetChildList)(
        nsIPrefBranch *This,
        const char *aStartingAt,
        UINT32 *aCount,
        char ***aChildArray);

    nsresult (STDMETHODCALLTYPE *ResetBranch)(
        nsIPrefBranch *This,
        const char *aStartingAt);

    nsresult (STDMETHODCALLTYPE *AddObserver)(
        nsIPrefBranch *This,
        const char *aDomain,
        nsIObserver *aObserver,
        cpp_bool aHoldWeak);

    nsresult (STDMETHODCALLTYPE *RemoveObserver)(
        nsIPrefBranch *This,
        const char *aDomain,
        nsIObserver *aObserver);

    END_INTERFACE
} nsIPrefBranchVtbl;

interface nsIPrefBranch {
    CONST_VTBL nsIPrefBranchVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIPrefBranch_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIPrefBranch_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIPrefBranch_Release(This) (This)->lpVtbl->Release(This)
/*** nsIPrefBranch methods ***/
#define nsIPrefBranch_GetRoot(This,aRoot) (This)->lpVtbl->GetRoot(This,aRoot)
#define nsIPrefBranch_GetPrefType(This,aPrefName,_retval) (This)->lpVtbl->GetPrefType(This,aPrefName,_retval)
#define nsIPrefBranch_GetBoolPref(This,aPrefName,_retval) (This)->lpVtbl->GetBoolPref(This,aPrefName,_retval)
#define nsIPrefBranch_SetBoolPref(This,aPrefName,aValue) (This)->lpVtbl->SetBoolPref(This,aPrefName,aValue)
#define nsIPrefBranch_GetFloatPref(This,aPrefName,_retval) (This)->lpVtbl->GetFloatPref(This,aPrefName,_retval)
#define nsIPrefBranch_GetCharPref(This,aPrefName,_retval) (This)->lpVtbl->GetCharPref(This,aPrefName,_retval)
#define nsIPrefBranch_SetCharPref(This,aPrefName,aValue) (This)->lpVtbl->SetCharPref(This,aPrefName,aValue)
#define nsIPrefBranch_GetIntPref(This,aPrefName,_retval) (This)->lpVtbl->GetIntPref(This,aPrefName,_retval)
#define nsIPrefBranch_SetIntPref(This,aPrefName,aValue) (This)->lpVtbl->SetIntPref(This,aPrefName,aValue)
#define nsIPrefBranch_GetComplexValue(This,aPrefName,aType,aValue) (This)->lpVtbl->GetComplexValue(This,aPrefName,aType,aValue)
#define nsIPrefBranch_SetComplexValue(This,aPrefName,aType,aValue) (This)->lpVtbl->SetComplexValue(This,aPrefName,aType,aValue)
#define nsIPrefBranch_ClearUserPref(This,aPrefName) (This)->lpVtbl->ClearUserPref(This,aPrefName)
#define nsIPrefBranch_LockPref(This,aPrefName) (This)->lpVtbl->LockPref(This,aPrefName)
#define nsIPrefBranch_PrefHasUserValue(This,aPrefName,_retval) (This)->lpVtbl->PrefHasUserValue(This,aPrefName,_retval)
#define nsIPrefBranch_PrefIsLocked(This,aPrefName,_retval) (This)->lpVtbl->PrefIsLocked(This,aPrefName,_retval)
#define nsIPrefBranch_UnlockPref(This,aPrefName) (This)->lpVtbl->UnlockPref(This,aPrefName)
#define nsIPrefBranch_DeleteBranch(This,aStartingAt) (This)->lpVtbl->DeleteBranch(This,aStartingAt)
#define nsIPrefBranch_GetChildList(This,aStartingAt,aCount,aChildArray) (This)->lpVtbl->GetChildList(This,aStartingAt,aCount,aChildArray)
#define nsIPrefBranch_ResetBranch(This,aStartingAt) (This)->lpVtbl->ResetBranch(This,aStartingAt)
#define nsIPrefBranch_AddObserver(This,aDomain,aObserver,aHoldWeak) (This)->lpVtbl->AddObserver(This,aDomain,aObserver,aHoldWeak)
#define nsIPrefBranch_RemoveObserver(This,aDomain,aObserver) (This)->lpVtbl->RemoveObserver(This,aDomain,aObserver)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIPrefBranch_QueryInterface(nsIPrefBranch* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIPrefBranch_AddRef(nsIPrefBranch* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIPrefBranch_Release(nsIPrefBranch* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIPrefBranch methods ***/
static FORCEINLINE nsresult nsIPrefBranch_GetRoot(nsIPrefBranch* This,char **aRoot) {
    return This->lpVtbl->GetRoot(This,aRoot);
}
static FORCEINLINE nsresult nsIPrefBranch_GetPrefType(nsIPrefBranch* This,const char *aPrefName,LONG *_retval) {
    return This->lpVtbl->GetPrefType(This,aPrefName,_retval);
}
static FORCEINLINE nsresult nsIPrefBranch_GetBoolPref(nsIPrefBranch* This,const char *aPrefName,cpp_bool *_retval) {
    return This->lpVtbl->GetBoolPref(This,aPrefName,_retval);
}
static FORCEINLINE nsresult nsIPrefBranch_SetBoolPref(nsIPrefBranch* This,const char *aPrefName,cpp_bool aValue) {
    return This->lpVtbl->SetBoolPref(This,aPrefName,aValue);
}
static FORCEINLINE nsresult nsIPrefBranch_GetFloatPref(nsIPrefBranch* This,const char *aPrefName,float *_retval) {
    return This->lpVtbl->GetFloatPref(This,aPrefName,_retval);
}
static FORCEINLINE nsresult nsIPrefBranch_GetCharPref(nsIPrefBranch* This,const char *aPrefName,char **_retval) {
    return This->lpVtbl->GetCharPref(This,aPrefName,_retval);
}
static FORCEINLINE nsresult nsIPrefBranch_SetCharPref(nsIPrefBranch* This,const char *aPrefName,const char *aValue) {
    return This->lpVtbl->SetCharPref(This,aPrefName,aValue);
}
static FORCEINLINE nsresult nsIPrefBranch_GetIntPref(nsIPrefBranch* This,const char *aPrefName,LONG *_retval) {
    return This->lpVtbl->GetIntPref(This,aPrefName,_retval);
}
static FORCEINLINE nsresult nsIPrefBranch_SetIntPref(nsIPrefBranch* This,const char *aPrefName,LONG aValue) {
    return This->lpVtbl->SetIntPref(This,aPrefName,aValue);
}
static FORCEINLINE nsresult nsIPrefBranch_GetComplexValue(nsIPrefBranch* This,const char *aPrefName,const nsIID *aType,void **aValue) {
    return This->lpVtbl->GetComplexValue(This,aPrefName,aType,aValue);
}
static FORCEINLINE nsresult nsIPrefBranch_SetComplexValue(nsIPrefBranch* This,const char *aPrefName,const nsIID *aType,nsISupports *aValue) {
    return This->lpVtbl->SetComplexValue(This,aPrefName,aType,aValue);
}
static FORCEINLINE nsresult nsIPrefBranch_ClearUserPref(nsIPrefBranch* This,const char *aPrefName) {
    return This->lpVtbl->ClearUserPref(This,aPrefName);
}
static FORCEINLINE nsresult nsIPrefBranch_LockPref(nsIPrefBranch* This,const char *aPrefName) {
    return This->lpVtbl->LockPref(This,aPrefName);
}
static FORCEINLINE nsresult nsIPrefBranch_PrefHasUserValue(nsIPrefBranch* This,const char *aPrefName,cpp_bool *_retval) {
    return This->lpVtbl->PrefHasUserValue(This,aPrefName,_retval);
}
static FORCEINLINE nsresult nsIPrefBranch_PrefIsLocked(nsIPrefBranch* This,const char *aPrefName,cpp_bool *_retval) {
    return This->lpVtbl->PrefIsLocked(This,aPrefName,_retval);
}
static FORCEINLINE nsresult nsIPrefBranch_UnlockPref(nsIPrefBranch* This,const char *aPrefName) {
    return This->lpVtbl->UnlockPref(This,aPrefName);
}
static FORCEINLINE nsresult nsIPrefBranch_DeleteBranch(nsIPrefBranch* This,const char *aStartingAt) {
    return This->lpVtbl->DeleteBranch(This,aStartingAt);
}
static FORCEINLINE nsresult nsIPrefBranch_GetChildList(nsIPrefBranch* This,const char *aStartingAt,UINT32 *aCount,char ***aChildArray) {
    return This->lpVtbl->GetChildList(This,aStartingAt,aCount,aChildArray);
}
static FORCEINLINE nsresult nsIPrefBranch_ResetBranch(nsIPrefBranch* This,const char *aStartingAt) {
    return This->lpVtbl->ResetBranch(This,aStartingAt);
}
static FORCEINLINE nsresult nsIPrefBranch_AddObserver(nsIPrefBranch* This,const char *aDomain,nsIObserver *aObserver,cpp_bool aHoldWeak) {
    return This->lpVtbl->AddObserver(This,aDomain,aObserver,aHoldWeak);
}
static FORCEINLINE nsresult nsIPrefBranch_RemoveObserver(nsIPrefBranch* This,const char *aDomain,nsIObserver *aObserver) {
    return This->lpVtbl->RemoveObserver(This,aDomain,aObserver);
}
#endif
#endif

#endif


#endif  /* __nsIPrefBranch_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDirectoryServiceProvider interface
 */
#ifndef __nsIDirectoryServiceProvider_INTERFACE_DEFINED__
#define __nsIDirectoryServiceProvider_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDirectoryServiceProvider, 0xbbf8cab0, 0xd43a, 0x11d3, 0x8c,0xc2, 0x00,0x60,0x97,0x92,0x27,0x8c);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("bbf8cab0-d43a-11d3-8cc2-00609792278c")
nsIDirectoryServiceProvider : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetFile(
        const char *prop,
        cpp_bool *persistent,
        nsIFile **_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDirectoryServiceProvider, 0xbbf8cab0, 0xd43a, 0x11d3, 0x8c,0xc2, 0x00,0x60,0x97,0x92,0x27,0x8c)
#endif
#else
typedef struct nsIDirectoryServiceProviderVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDirectoryServiceProvider *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDirectoryServiceProvider *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDirectoryServiceProvider *This);

    /*** nsIDirectoryServiceProvider methods ***/
    nsresult (STDMETHODCALLTYPE *GetFile)(
        nsIDirectoryServiceProvider *This,
        const char *prop,
        cpp_bool *persistent,
        nsIFile **_retval);

    END_INTERFACE
} nsIDirectoryServiceProviderVtbl;

interface nsIDirectoryServiceProvider {
    CONST_VTBL nsIDirectoryServiceProviderVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDirectoryServiceProvider_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDirectoryServiceProvider_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDirectoryServiceProvider_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDirectoryServiceProvider methods ***/
#define nsIDirectoryServiceProvider_GetFile(This,prop,persistent,_retval) (This)->lpVtbl->GetFile(This,prop,persistent,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDirectoryServiceProvider_QueryInterface(nsIDirectoryServiceProvider* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDirectoryServiceProvider_AddRef(nsIDirectoryServiceProvider* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDirectoryServiceProvider_Release(nsIDirectoryServiceProvider* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDirectoryServiceProvider methods ***/
static FORCEINLINE nsresult nsIDirectoryServiceProvider_GetFile(nsIDirectoryServiceProvider* This,const char *prop,cpp_bool *persistent,nsIFile **_retval) {
    return This->lpVtbl->GetFile(This,prop,persistent,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIDirectoryServiceProvider_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDirectoryServiceProvider2 interface
 */
#ifndef __nsIDirectoryServiceProvider2_INTERFACE_DEFINED__
#define __nsIDirectoryServiceProvider2_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDirectoryServiceProvider2, 0x2f977d4b, 0x5485, 0x11d4, 0x87,0xe2, 0x00,0x10,0xa4,0xe7,0x5e,0xf2);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("2f977d4b-5485-11d4-87e2-0010a4e75ef2")
nsIDirectoryServiceProvider2 : public nsIDirectoryServiceProvider
{
    virtual nsresult STDMETHODCALLTYPE GetFiles(
        const char *prop,
        nsISimpleEnumerator **_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDirectoryServiceProvider2, 0x2f977d4b, 0x5485, 0x11d4, 0x87,0xe2, 0x00,0x10,0xa4,0xe7,0x5e,0xf2)
#endif
#else
typedef struct nsIDirectoryServiceProvider2Vtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDirectoryServiceProvider2 *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDirectoryServiceProvider2 *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDirectoryServiceProvider2 *This);

    /*** nsIDirectoryServiceProvider methods ***/
    nsresult (STDMETHODCALLTYPE *GetFile)(
        nsIDirectoryServiceProvider2 *This,
        const char *prop,
        cpp_bool *persistent,
        nsIFile **_retval);

    /*** nsIDirectoryServiceProvider2 methods ***/
    nsresult (STDMETHODCALLTYPE *GetFiles)(
        nsIDirectoryServiceProvider2 *This,
        const char *prop,
        nsISimpleEnumerator **_retval);

    END_INTERFACE
} nsIDirectoryServiceProvider2Vtbl;

interface nsIDirectoryServiceProvider2 {
    CONST_VTBL nsIDirectoryServiceProvider2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDirectoryServiceProvider2_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDirectoryServiceProvider2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDirectoryServiceProvider2_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDirectoryServiceProvider methods ***/
#define nsIDirectoryServiceProvider2_GetFile(This,prop,persistent,_retval) (This)->lpVtbl->GetFile(This,prop,persistent,_retval)
/*** nsIDirectoryServiceProvider2 methods ***/
#define nsIDirectoryServiceProvider2_GetFiles(This,prop,_retval) (This)->lpVtbl->GetFiles(This,prop,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDirectoryServiceProvider2_QueryInterface(nsIDirectoryServiceProvider2* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDirectoryServiceProvider2_AddRef(nsIDirectoryServiceProvider2* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDirectoryServiceProvider2_Release(nsIDirectoryServiceProvider2* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDirectoryServiceProvider methods ***/
static FORCEINLINE nsresult nsIDirectoryServiceProvider2_GetFile(nsIDirectoryServiceProvider2* This,const char *prop,cpp_bool *persistent,nsIFile **_retval) {
    return This->lpVtbl->GetFile(This,prop,persistent,_retval);
}
/*** nsIDirectoryServiceProvider2 methods ***/
static FORCEINLINE nsresult nsIDirectoryServiceProvider2_GetFiles(nsIDirectoryServiceProvider2* This,const char *prop,nsISimpleEnumerator **_retval) {
    return This->lpVtbl->GetFiles(This,prop,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIDirectoryServiceProvider2_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIProtocolHandler interface
 */
#ifndef __nsIProtocolHandler_INTERFACE_DEFINED__
#define __nsIProtocolHandler_INTERFACE_DEFINED__

#define URI_STD (0)

#define URI_NORELATIVE (1 << 0)

#define URI_NOAUTH (1 << 1)

#define ALLOWS_PROXY (1 << 2)

#define ALLOWS_PROXY_HTTP (1 << 3)

#define URI_INHERITS_SECURITY_CONTEXT (1 << 4)

#define URI_FORBIDS_AUTOMATIC_DOCUMENT_REPLACEMENT (1 << 5)

#define URI_LOADABLE_BY_ANYONE (1 << 6)

#define URI_DANGEROUS_TO_LOAD (1 << 7)

#define URI_IS_UI_RESOURCE (1 << 8)

#define URI_IS_LOCAL_FILE (1 << 9)

#define URI_LOADABLE_BY_SUBSUMERS (1 << 10)

#define URI_DOES_NOT_RETURN_DATA (1 << 11)

#define URI_IS_LOCAL_RESOURCE (1 << 12)

#define URI_OPENING_EXECUTES_SCRIPT (1 << 13)

#define URI_NON_PERSISTABLE (1 << 14)

#define URI_FORBIDS_COOKIE_ACCESS (1 << 15)

#define URI_CROSS_ORIGIN_NEEDS_WEBAPPS_PERM (1 << 16)

#define URI_SYNC_LOAD_IS_OK (1 << 17)

#define URI_SAFE_TO_LOAD_IN_SECURE_CONTEXT (1 << 18)

#define URI_FETCHABLE_BY_ANYONE (1 << 19)

DEFINE_GUID(IID_nsIProtocolHandler, 0xa87210e6, 0x7c8c, 0x41f7, 0x86,0x4d, 0xdf,0x80,0x90,0x15,0x19,0x3e);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("a87210e6-7c8c-41f7-864d-df809015193e")
nsIProtocolHandler : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetScheme(
        nsACString *aScheme) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDefaultPort(
        LONG *aDefaultPort) = 0;

    virtual nsresult STDMETHODCALLTYPE GetProtocolFlags(
        UINT32 *aProtocolFlags) = 0;

    virtual nsresult STDMETHODCALLTYPE NewURI(
        const nsACString *aSpec,
        const char *aOriginCharset,
        nsIURI *aBaseURI,
        nsIURI **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE NewChannel2(
        nsIURI *aURI,
        nsILoadInfo *aLoadinfo,
        nsIChannel **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE NewChannel(
        nsIURI *aURI,
        nsIChannel **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE AllowPort(
        LONG port,
        const char *scheme,
        cpp_bool *_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIProtocolHandler, 0xa87210e6, 0x7c8c, 0x41f7, 0x86,0x4d, 0xdf,0x80,0x90,0x15,0x19,0x3e)
#endif
#else
typedef struct nsIProtocolHandlerVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIProtocolHandler *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIProtocolHandler *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIProtocolHandler *This);

    /*** nsIProtocolHandler methods ***/
    nsresult (STDMETHODCALLTYPE *GetScheme)(
        nsIProtocolHandler *This,
        nsACString *aScheme);

    nsresult (STDMETHODCALLTYPE *GetDefaultPort)(
        nsIProtocolHandler *This,
        LONG *aDefaultPort);

    nsresult (STDMETHODCALLTYPE *GetProtocolFlags)(
        nsIProtocolHandler *This,
        UINT32 *aProtocolFlags);

    nsresult (STDMETHODCALLTYPE *NewURI)(
        nsIProtocolHandler *This,
        const nsACString *aSpec,
        const char *aOriginCharset,
        nsIURI *aBaseURI,
        nsIURI **_retval);

    nsresult (STDMETHODCALLTYPE *NewChannel2)(
        nsIProtocolHandler *This,
        nsIURI *aURI,
        nsILoadInfo *aLoadinfo,
        nsIChannel **_retval);

    nsresult (STDMETHODCALLTYPE *NewChannel)(
        nsIProtocolHandler *This,
        nsIURI *aURI,
        nsIChannel **_retval);

    nsresult (STDMETHODCALLTYPE *AllowPort)(
        nsIProtocolHandler *This,
        LONG port,
        const char *scheme,
        cpp_bool *_retval);

    END_INTERFACE
} nsIProtocolHandlerVtbl;

interface nsIProtocolHandler {
    CONST_VTBL nsIProtocolHandlerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIProtocolHandler_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIProtocolHandler_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIProtocolHandler_Release(This) (This)->lpVtbl->Release(This)
/*** nsIProtocolHandler methods ***/
#define nsIProtocolHandler_GetScheme(This,aScheme) (This)->lpVtbl->GetScheme(This,aScheme)
#define nsIProtocolHandler_GetDefaultPort(This,aDefaultPort) (This)->lpVtbl->GetDefaultPort(This,aDefaultPort)
#define nsIProtocolHandler_GetProtocolFlags(This,aProtocolFlags) (This)->lpVtbl->GetProtocolFlags(This,aProtocolFlags)
#define nsIProtocolHandler_NewURI(This,aSpec,aOriginCharset,aBaseURI,_retval) (This)->lpVtbl->NewURI(This,aSpec,aOriginCharset,aBaseURI,_retval)
#define nsIProtocolHandler_NewChannel2(This,aURI,aLoadinfo,_retval) (This)->lpVtbl->NewChannel2(This,aURI,aLoadinfo,_retval)
#define nsIProtocolHandler_NewChannel(This,aURI,_retval) (This)->lpVtbl->NewChannel(This,aURI,_retval)
#define nsIProtocolHandler_AllowPort(This,port,scheme,_retval) (This)->lpVtbl->AllowPort(This,port,scheme,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIProtocolHandler_QueryInterface(nsIProtocolHandler* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIProtocolHandler_AddRef(nsIProtocolHandler* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIProtocolHandler_Release(nsIProtocolHandler* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIProtocolHandler methods ***/
static FORCEINLINE nsresult nsIProtocolHandler_GetScheme(nsIProtocolHandler* This,nsACString *aScheme) {
    return This->lpVtbl->GetScheme(This,aScheme);
}
static FORCEINLINE nsresult nsIProtocolHandler_GetDefaultPort(nsIProtocolHandler* This,LONG *aDefaultPort) {
    return This->lpVtbl->GetDefaultPort(This,aDefaultPort);
}
static FORCEINLINE nsresult nsIProtocolHandler_GetProtocolFlags(nsIProtocolHandler* This,UINT32 *aProtocolFlags) {
    return This->lpVtbl->GetProtocolFlags(This,aProtocolFlags);
}
static FORCEINLINE nsresult nsIProtocolHandler_NewURI(nsIProtocolHandler* This,const nsACString *aSpec,const char *aOriginCharset,nsIURI *aBaseURI,nsIURI **_retval) {
    return This->lpVtbl->NewURI(This,aSpec,aOriginCharset,aBaseURI,_retval);
}
static FORCEINLINE nsresult nsIProtocolHandler_NewChannel2(nsIProtocolHandler* This,nsIURI *aURI,nsILoadInfo *aLoadinfo,nsIChannel **_retval) {
    return This->lpVtbl->NewChannel2(This,aURI,aLoadinfo,_retval);
}
static FORCEINLINE nsresult nsIProtocolHandler_NewChannel(nsIProtocolHandler* This,nsIURI *aURI,nsIChannel **_retval) {
    return This->lpVtbl->NewChannel(This,aURI,_retval);
}
static FORCEINLINE nsresult nsIProtocolHandler_AllowPort(nsIProtocolHandler* This,LONG port,const char *scheme,cpp_bool *_retval) {
    return This->lpVtbl->AllowPort(This,port,scheme,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIProtocolHandler_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIExternalProtocolHandler interface
 */
#ifndef __nsIExternalProtocolHandler_INTERFACE_DEFINED__
#define __nsIExternalProtocolHandler_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIExternalProtocolHandler, 0x0e61f3b2, 0x34d7, 0x4c79, 0xbf,0xdc, 0x48,0x60,0xbc,0x73,0x41,0xb7);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("0e61f3b2-34d7-4c79-bfdc-4860bc7341b7")
nsIExternalProtocolHandler : public nsIProtocolHandler
{
    virtual nsresult STDMETHODCALLTYPE ExternalAppExistsForScheme(
        const nsACString *scheme,
        cpp_bool *_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIExternalProtocolHandler, 0x0e61f3b2, 0x34d7, 0x4c79, 0xbf,0xdc, 0x48,0x60,0xbc,0x73,0x41,0xb7)
#endif
#else
typedef struct nsIExternalProtocolHandlerVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIExternalProtocolHandler *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIExternalProtocolHandler *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIExternalProtocolHandler *This);

    /*** nsIProtocolHandler methods ***/
    nsresult (STDMETHODCALLTYPE *GetScheme)(
        nsIExternalProtocolHandler *This,
        nsACString *aScheme);

    nsresult (STDMETHODCALLTYPE *GetDefaultPort)(
        nsIExternalProtocolHandler *This,
        LONG *aDefaultPort);

    nsresult (STDMETHODCALLTYPE *GetProtocolFlags)(
        nsIExternalProtocolHandler *This,
        UINT32 *aProtocolFlags);

    nsresult (STDMETHODCALLTYPE *NewURI)(
        nsIExternalProtocolHandler *This,
        const nsACString *aSpec,
        const char *aOriginCharset,
        nsIURI *aBaseURI,
        nsIURI **_retval);

    nsresult (STDMETHODCALLTYPE *NewChannel2)(
        nsIExternalProtocolHandler *This,
        nsIURI *aURI,
        nsILoadInfo *aLoadinfo,
        nsIChannel **_retval);

    nsresult (STDMETHODCALLTYPE *NewChannel)(
        nsIExternalProtocolHandler *This,
        nsIURI *aURI,
        nsIChannel **_retval);

    nsresult (STDMETHODCALLTYPE *AllowPort)(
        nsIExternalProtocolHandler *This,
        LONG port,
        const char *scheme,
        cpp_bool *_retval);

    /*** nsIExternalProtocolHandler methods ***/
    nsresult (STDMETHODCALLTYPE *ExternalAppExistsForScheme)(
        nsIExternalProtocolHandler *This,
        const nsACString *scheme,
        cpp_bool *_retval);

    END_INTERFACE
} nsIExternalProtocolHandlerVtbl;

interface nsIExternalProtocolHandler {
    CONST_VTBL nsIExternalProtocolHandlerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIExternalProtocolHandler_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIExternalProtocolHandler_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIExternalProtocolHandler_Release(This) (This)->lpVtbl->Release(This)
/*** nsIProtocolHandler methods ***/
#define nsIExternalProtocolHandler_GetScheme(This,aScheme) (This)->lpVtbl->GetScheme(This,aScheme)
#define nsIExternalProtocolHandler_GetDefaultPort(This,aDefaultPort) (This)->lpVtbl->GetDefaultPort(This,aDefaultPort)
#define nsIExternalProtocolHandler_GetProtocolFlags(This,aProtocolFlags) (This)->lpVtbl->GetProtocolFlags(This,aProtocolFlags)
#define nsIExternalProtocolHandler_NewURI(This,aSpec,aOriginCharset,aBaseURI,_retval) (This)->lpVtbl->NewURI(This,aSpec,aOriginCharset,aBaseURI,_retval)
#define nsIExternalProtocolHandler_NewChannel2(This,aURI,aLoadinfo,_retval) (This)->lpVtbl->NewChannel2(This,aURI,aLoadinfo,_retval)
#define nsIExternalProtocolHandler_NewChannel(This,aURI,_retval) (This)->lpVtbl->NewChannel(This,aURI,_retval)
#define nsIExternalProtocolHandler_AllowPort(This,port,scheme,_retval) (This)->lpVtbl->AllowPort(This,port,scheme,_retval)
/*** nsIExternalProtocolHandler methods ***/
#define nsIExternalProtocolHandler_ExternalAppExistsForScheme(This,scheme,_retval) (This)->lpVtbl->ExternalAppExistsForScheme(This,scheme,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIExternalProtocolHandler_QueryInterface(nsIExternalProtocolHandler* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIExternalProtocolHandler_AddRef(nsIExternalProtocolHandler* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIExternalProtocolHandler_Release(nsIExternalProtocolHandler* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIProtocolHandler methods ***/
static FORCEINLINE nsresult nsIExternalProtocolHandler_GetScheme(nsIExternalProtocolHandler* This,nsACString *aScheme) {
    return This->lpVtbl->GetScheme(This,aScheme);
}
static FORCEINLINE nsresult nsIExternalProtocolHandler_GetDefaultPort(nsIExternalProtocolHandler* This,LONG *aDefaultPort) {
    return This->lpVtbl->GetDefaultPort(This,aDefaultPort);
}
static FORCEINLINE nsresult nsIExternalProtocolHandler_GetProtocolFlags(nsIExternalProtocolHandler* This,UINT32 *aProtocolFlags) {
    return This->lpVtbl->GetProtocolFlags(This,aProtocolFlags);
}
static FORCEINLINE nsresult nsIExternalProtocolHandler_NewURI(nsIExternalProtocolHandler* This,const nsACString *aSpec,const char *aOriginCharset,nsIURI *aBaseURI,nsIURI **_retval) {
    return This->lpVtbl->NewURI(This,aSpec,aOriginCharset,aBaseURI,_retval);
}
static FORCEINLINE nsresult nsIExternalProtocolHandler_NewChannel2(nsIExternalProtocolHandler* This,nsIURI *aURI,nsILoadInfo *aLoadinfo,nsIChannel **_retval) {
    return This->lpVtbl->NewChannel2(This,aURI,aLoadinfo,_retval);
}
static FORCEINLINE nsresult nsIExternalProtocolHandler_NewChannel(nsIExternalProtocolHandler* This,nsIURI *aURI,nsIChannel **_retval) {
    return This->lpVtbl->NewChannel(This,aURI,_retval);
}
static FORCEINLINE nsresult nsIExternalProtocolHandler_AllowPort(nsIExternalProtocolHandler* This,LONG port,const char *scheme,cpp_bool *_retval) {
    return This->lpVtbl->AllowPort(This,port,scheme,_retval);
}
/*** nsIExternalProtocolHandler methods ***/
static FORCEINLINE nsresult nsIExternalProtocolHandler_ExternalAppExistsForScheme(nsIExternalProtocolHandler* This,const nsACString *scheme,cpp_bool *_retval) {
    return This->lpVtbl->ExternalAppExistsForScheme(This,scheme,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIExternalProtocolHandler_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIIOServiceHook interface
 */
#ifndef __nsIIOServiceHook_INTERFACE_DEFINED__
#define __nsIIOServiceHook_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIIOServiceHook, 0xd13c21ca, 0x7329, 0x45a5, 0x89,0x12, 0x9d,0x2e,0x2f,0xef,0x12,0x31);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d13c21ca-7329-45a5-8912-9d2e2fef1231")
nsIIOServiceHook : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE NewChannel(
        nsIURI *aURI,
        nsILoadInfo *aLoadInfo,
        nsIChannel **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetProtocolHandler(
        nsIProtocolHandler *aHandler,
        nsIProtocolHandler **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE NewURI(
        const nsACString *aSpec,
        const char *aOriginCharset,
        nsIURI *aBaseURI,
        nsIURI **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE ProtocolHasFlags(
        nsIURI *aURI,
        UINT32 aFlag,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE URIChainHasFlags(
        nsIURI *aURI,
        UINT32 aFlags,
        cpp_bool *_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIIOServiceHook, 0xd13c21ca, 0x7329, 0x45a5, 0x89,0x12, 0x9d,0x2e,0x2f,0xef,0x12,0x31)
#endif
#else
typedef struct nsIIOServiceHookVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIIOServiceHook *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIIOServiceHook *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIIOServiceHook *This);

    /*** nsIIOServiceHook methods ***/
    nsresult (STDMETHODCALLTYPE *NewChannel)(
        nsIIOServiceHook *This,
        nsIURI *aURI,
        nsILoadInfo *aLoadInfo,
        nsIChannel **_retval);

    nsresult (STDMETHODCALLTYPE *GetProtocolHandler)(
        nsIIOServiceHook *This,
        nsIProtocolHandler *aHandler,
        nsIProtocolHandler **_retval);

    nsresult (STDMETHODCALLTYPE *NewURI)(
        nsIIOServiceHook *This,
        const nsACString *aSpec,
        const char *aOriginCharset,
        nsIURI *aBaseURI,
        nsIURI **_retval);

    nsresult (STDMETHODCALLTYPE *ProtocolHasFlags)(
        nsIIOServiceHook *This,
        nsIURI *aURI,
        UINT32 aFlag,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *URIChainHasFlags)(
        nsIIOServiceHook *This,
        nsIURI *aURI,
        UINT32 aFlags,
        cpp_bool *_retval);

    END_INTERFACE
} nsIIOServiceHookVtbl;

interface nsIIOServiceHook {
    CONST_VTBL nsIIOServiceHookVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIIOServiceHook_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIIOServiceHook_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIIOServiceHook_Release(This) (This)->lpVtbl->Release(This)
/*** nsIIOServiceHook methods ***/
#define nsIIOServiceHook_NewChannel(This,aURI,aLoadInfo,_retval) (This)->lpVtbl->NewChannel(This,aURI,aLoadInfo,_retval)
#define nsIIOServiceHook_GetProtocolHandler(This,aHandler,_retval) (This)->lpVtbl->GetProtocolHandler(This,aHandler,_retval)
#define nsIIOServiceHook_NewURI(This,aSpec,aOriginCharset,aBaseURI,_retval) (This)->lpVtbl->NewURI(This,aSpec,aOriginCharset,aBaseURI,_retval)
#define nsIIOServiceHook_ProtocolHasFlags(This,aURI,aFlag,_retval) (This)->lpVtbl->ProtocolHasFlags(This,aURI,aFlag,_retval)
#define nsIIOServiceHook_URIChainHasFlags(This,aURI,aFlags,_retval) (This)->lpVtbl->URIChainHasFlags(This,aURI,aFlags,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIIOServiceHook_QueryInterface(nsIIOServiceHook* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIIOServiceHook_AddRef(nsIIOServiceHook* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIIOServiceHook_Release(nsIIOServiceHook* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIIOServiceHook methods ***/
static FORCEINLINE nsresult nsIIOServiceHook_NewChannel(nsIIOServiceHook* This,nsIURI *aURI,nsILoadInfo *aLoadInfo,nsIChannel **_retval) {
    return This->lpVtbl->NewChannel(This,aURI,aLoadInfo,_retval);
}
static FORCEINLINE nsresult nsIIOServiceHook_GetProtocolHandler(nsIIOServiceHook* This,nsIProtocolHandler *aHandler,nsIProtocolHandler **_retval) {
    return This->lpVtbl->GetProtocolHandler(This,aHandler,_retval);
}
static FORCEINLINE nsresult nsIIOServiceHook_NewURI(nsIIOServiceHook* This,const nsACString *aSpec,const char *aOriginCharset,nsIURI *aBaseURI,nsIURI **_retval) {
    return This->lpVtbl->NewURI(This,aSpec,aOriginCharset,aBaseURI,_retval);
}
static FORCEINLINE nsresult nsIIOServiceHook_ProtocolHasFlags(nsIIOServiceHook* This,nsIURI *aURI,UINT32 aFlag,cpp_bool *_retval) {
    return This->lpVtbl->ProtocolHasFlags(This,aURI,aFlag,_retval);
}
static FORCEINLINE nsresult nsIIOServiceHook_URIChainHasFlags(nsIIOServiceHook* This,nsIURI *aURI,UINT32 aFlags,cpp_bool *_retval) {
    return This->lpVtbl->URIChainHasFlags(This,aURI,aFlags,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIIOServiceHook_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIIOService interface
 */
#ifndef __nsIIOService_INTERFACE_DEFINED__
#define __nsIIOService_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIIOService, 0x4286de5a, 0xb2ea, 0x446f, 0x8f,0x70, 0xe2,0xa4,0x61,0xf4,0x26,0x94);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("4286de5a-b2ea-446f-8f70-e2a461f42694")
nsIIOService : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetProtocolHandler(
        const char *aScheme,
        nsIProtocolHandler **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetProtocolFlags(
        const char *aScheme,
        UINT32 *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE NewURI(
        const nsACString *aSpec,
        const char *aOriginCharset,
        nsIURI *aBaseURI,
        nsIURI **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE NewFileURI(
        nsIFile *aFile,
        nsIURI **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE NewChannelFromURI2(
        nsIURI *aURI,
        nsIDOMNode *aLoadingNode,
        nsIPrincipal *aLoadingPrincipal,
        nsIPrincipal *aTriggeringPrincipal,
        UINT32 aSecurityFlags,
        UINT32 aContentPolicyType,
        nsIChannel **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE NewChannelFromURIWithLoadInfo(
        nsIURI *aURI,
        nsILoadInfo *aLoadInfo,
        nsIChannel **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE NewChannelFromURI(
        nsIURI *aURI,
        nsIChannel **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE NewChannel2(
        const nsACString *aSpec,
        const char *aOriginCharset,
        nsIURI *aBaseURI,
        nsIDOMNode *aLoadingNode,
        nsIPrincipal *aLoadingPrincipal,
        nsIPrincipal *aTriggeringPrincipal,
        UINT32 aSecurityFlags,
        UINT32 aContentPolicyType,
        nsIChannel **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE NewChannel(
        const nsACString *aSpec,
        const char *aOriginCharset,
        nsIURI *aBaseURI,
        nsIChannel **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOffline(
        cpp_bool *aOffline) = 0;

    virtual nsresult STDMETHODCALLTYPE SetOffline(
        cpp_bool aOffline) = 0;

    virtual nsresult STDMETHODCALLTYPE GetConnectivity(
        cpp_bool *aConnectivity) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAppOffline(
        UINT32 appId,
        LONG state) = 0;

    virtual nsresult STDMETHODCALLTYPE IsAppOffline(
        UINT32 appId,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAppOfflineState(
        UINT32 appId,
        LONG *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE AllowPort(
        LONG aPort,
        const char *aScheme,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE ExtractScheme(
        const nsACString *urlString,
        nsACString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHook(
        nsIIOServiceHook *aHook) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIIOService, 0x4286de5a, 0xb2ea, 0x446f, 0x8f,0x70, 0xe2,0xa4,0x61,0xf4,0x26,0x94)
#endif
#else
typedef struct nsIIOServiceVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIIOService *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIIOService *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIIOService *This);

    /*** nsIIOService methods ***/
    nsresult (STDMETHODCALLTYPE *GetProtocolHandler)(
        nsIIOService *This,
        const char *aScheme,
        nsIProtocolHandler **_retval);

    nsresult (STDMETHODCALLTYPE *GetProtocolFlags)(
        nsIIOService *This,
        const char *aScheme,
        UINT32 *_retval);

    nsresult (STDMETHODCALLTYPE *NewURI)(
        nsIIOService *This,
        const nsACString *aSpec,
        const char *aOriginCharset,
        nsIURI *aBaseURI,
        nsIURI **_retval);

    nsresult (STDMETHODCALLTYPE *NewFileURI)(
        nsIIOService *This,
        nsIFile *aFile,
        nsIURI **_retval);

    nsresult (STDMETHODCALLTYPE *NewChannelFromURI2)(
        nsIIOService *This,
        nsIURI *aURI,
        nsIDOMNode *aLoadingNode,
        nsIPrincipal *aLoadingPrincipal,
        nsIPrincipal *aTriggeringPrincipal,
        UINT32 aSecurityFlags,
        UINT32 aContentPolicyType,
        nsIChannel **_retval);

    nsresult (STDMETHODCALLTYPE *NewChannelFromURIWithLoadInfo)(
        nsIIOService *This,
        nsIURI *aURI,
        nsILoadInfo *aLoadInfo,
        nsIChannel **_retval);

    nsresult (STDMETHODCALLTYPE *NewChannelFromURI)(
        nsIIOService *This,
        nsIURI *aURI,
        nsIChannel **_retval);

    nsresult (STDMETHODCALLTYPE *NewChannel2)(
        nsIIOService *This,
        const nsACString *aSpec,
        const char *aOriginCharset,
        nsIURI *aBaseURI,
        nsIDOMNode *aLoadingNode,
        nsIPrincipal *aLoadingPrincipal,
        nsIPrincipal *aTriggeringPrincipal,
        UINT32 aSecurityFlags,
        UINT32 aContentPolicyType,
        nsIChannel **_retval);

    nsresult (STDMETHODCALLTYPE *NewChannel)(
        nsIIOService *This,
        const nsACString *aSpec,
        const char *aOriginCharset,
        nsIURI *aBaseURI,
        nsIChannel **_retval);

    nsresult (STDMETHODCALLTYPE *GetOffline)(
        nsIIOService *This,
        cpp_bool *aOffline);

    nsresult (STDMETHODCALLTYPE *SetOffline)(
        nsIIOService *This,
        cpp_bool aOffline);

    nsresult (STDMETHODCALLTYPE *GetConnectivity)(
        nsIIOService *This,
        cpp_bool *aConnectivity);

    nsresult (STDMETHODCALLTYPE *SetAppOffline)(
        nsIIOService *This,
        UINT32 appId,
        LONG state);

    nsresult (STDMETHODCALLTYPE *IsAppOffline)(
        nsIIOService *This,
        UINT32 appId,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetAppOfflineState)(
        nsIIOService *This,
        UINT32 appId,
        LONG *_retval);

    nsresult (STDMETHODCALLTYPE *AllowPort)(
        nsIIOService *This,
        LONG aPort,
        const char *aScheme,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *ExtractScheme)(
        nsIIOService *This,
        const nsACString *urlString,
        nsACString *_retval);

    nsresult (STDMETHODCALLTYPE *SetHook)(
        nsIIOService *This,
        nsIIOServiceHook *aHook);

    END_INTERFACE
} nsIIOServiceVtbl;

interface nsIIOService {
    CONST_VTBL nsIIOServiceVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIIOService_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIIOService_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIIOService_Release(This) (This)->lpVtbl->Release(This)
/*** nsIIOService methods ***/
#define nsIIOService_GetProtocolHandler(This,aScheme,_retval) (This)->lpVtbl->GetProtocolHandler(This,aScheme,_retval)
#define nsIIOService_GetProtocolFlags(This,aScheme,_retval) (This)->lpVtbl->GetProtocolFlags(This,aScheme,_retval)
#define nsIIOService_NewURI(This,aSpec,aOriginCharset,aBaseURI,_retval) (This)->lpVtbl->NewURI(This,aSpec,aOriginCharset,aBaseURI,_retval)
#define nsIIOService_NewFileURI(This,aFile,_retval) (This)->lpVtbl->NewFileURI(This,aFile,_retval)
#define nsIIOService_NewChannelFromURI2(This,aURI,aLoadingNode,aLoadingPrincipal,aTriggeringPrincipal,aSecurityFlags,aContentPolicyType,_retval) (This)->lpVtbl->NewChannelFromURI2(This,aURI,aLoadingNode,aLoadingPrincipal,aTriggeringPrincipal,aSecurityFlags,aContentPolicyType,_retval)
#define nsIIOService_NewChannelFromURIWithLoadInfo(This,aURI,aLoadInfo,_retval) (This)->lpVtbl->NewChannelFromURIWithLoadInfo(This,aURI,aLoadInfo,_retval)
#define nsIIOService_NewChannelFromURI(This,aURI,_retval) (This)->lpVtbl->NewChannelFromURI(This,aURI,_retval)
#define nsIIOService_NewChannel2(This,aSpec,aOriginCharset,aBaseURI,aLoadingNode,aLoadingPrincipal,aTriggeringPrincipal,aSecurityFlags,aContentPolicyType,_retval) (This)->lpVtbl->NewChannel2(This,aSpec,aOriginCharset,aBaseURI,aLoadingNode,aLoadingPrincipal,aTriggeringPrincipal,aSecurityFlags,aContentPolicyType,_retval)
#define nsIIOService_NewChannel(This,aSpec,aOriginCharset,aBaseURI,_retval) (This)->lpVtbl->NewChannel(This,aSpec,aOriginCharset,aBaseURI,_retval)
#define nsIIOService_GetOffline(This,aOffline) (This)->lpVtbl->GetOffline(This,aOffline)
#define nsIIOService_SetOffline(This,aOffline) (This)->lpVtbl->SetOffline(This,aOffline)
#define nsIIOService_GetConnectivity(This,aConnectivity) (This)->lpVtbl->GetConnectivity(This,aConnectivity)
#define nsIIOService_SetAppOffline(This,appId,state) (This)->lpVtbl->SetAppOffline(This,appId,state)
#define nsIIOService_IsAppOffline(This,appId,_retval) (This)->lpVtbl->IsAppOffline(This,appId,_retval)
#define nsIIOService_GetAppOfflineState(This,appId,_retval) (This)->lpVtbl->GetAppOfflineState(This,appId,_retval)
#define nsIIOService_AllowPort(This,aPort,aScheme,_retval) (This)->lpVtbl->AllowPort(This,aPort,aScheme,_retval)
#define nsIIOService_ExtractScheme(This,urlString,_retval) (This)->lpVtbl->ExtractScheme(This,urlString,_retval)
#define nsIIOService_SetHook(This,aHook) (This)->lpVtbl->SetHook(This,aHook)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIIOService_QueryInterface(nsIIOService* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIIOService_AddRef(nsIIOService* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIIOService_Release(nsIIOService* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIIOService methods ***/
static FORCEINLINE nsresult nsIIOService_GetProtocolHandler(nsIIOService* This,const char *aScheme,nsIProtocolHandler **_retval) {
    return This->lpVtbl->GetProtocolHandler(This,aScheme,_retval);
}
static FORCEINLINE nsresult nsIIOService_GetProtocolFlags(nsIIOService* This,const char *aScheme,UINT32 *_retval) {
    return This->lpVtbl->GetProtocolFlags(This,aScheme,_retval);
}
static FORCEINLINE nsresult nsIIOService_NewURI(nsIIOService* This,const nsACString *aSpec,const char *aOriginCharset,nsIURI *aBaseURI,nsIURI **_retval) {
    return This->lpVtbl->NewURI(This,aSpec,aOriginCharset,aBaseURI,_retval);
}
static FORCEINLINE nsresult nsIIOService_NewFileURI(nsIIOService* This,nsIFile *aFile,nsIURI **_retval) {
    return This->lpVtbl->NewFileURI(This,aFile,_retval);
}
static FORCEINLINE nsresult nsIIOService_NewChannelFromURI2(nsIIOService* This,nsIURI *aURI,nsIDOMNode *aLoadingNode,nsIPrincipal *aLoadingPrincipal,nsIPrincipal *aTriggeringPrincipal,UINT32 aSecurityFlags,UINT32 aContentPolicyType,nsIChannel **_retval) {
    return This->lpVtbl->NewChannelFromURI2(This,aURI,aLoadingNode,aLoadingPrincipal,aTriggeringPrincipal,aSecurityFlags,aContentPolicyType,_retval);
}
static FORCEINLINE nsresult nsIIOService_NewChannelFromURIWithLoadInfo(nsIIOService* This,nsIURI *aURI,nsILoadInfo *aLoadInfo,nsIChannel **_retval) {
    return This->lpVtbl->NewChannelFromURIWithLoadInfo(This,aURI,aLoadInfo,_retval);
}
static FORCEINLINE nsresult nsIIOService_NewChannelFromURI(nsIIOService* This,nsIURI *aURI,nsIChannel **_retval) {
    return This->lpVtbl->NewChannelFromURI(This,aURI,_retval);
}
static FORCEINLINE nsresult nsIIOService_NewChannel2(nsIIOService* This,const nsACString *aSpec,const char *aOriginCharset,nsIURI *aBaseURI,nsIDOMNode *aLoadingNode,nsIPrincipal *aLoadingPrincipal,nsIPrincipal *aTriggeringPrincipal,UINT32 aSecurityFlags,UINT32 aContentPolicyType,nsIChannel **_retval) {
    return This->lpVtbl->NewChannel2(This,aSpec,aOriginCharset,aBaseURI,aLoadingNode,aLoadingPrincipal,aTriggeringPrincipal,aSecurityFlags,aContentPolicyType,_retval);
}
static FORCEINLINE nsresult nsIIOService_NewChannel(nsIIOService* This,const nsACString *aSpec,const char *aOriginCharset,nsIURI *aBaseURI,nsIChannel **_retval) {
    return This->lpVtbl->NewChannel(This,aSpec,aOriginCharset,aBaseURI,_retval);
}
static FORCEINLINE nsresult nsIIOService_GetOffline(nsIIOService* This,cpp_bool *aOffline) {
    return This->lpVtbl->GetOffline(This,aOffline);
}
static FORCEINLINE nsresult nsIIOService_SetOffline(nsIIOService* This,cpp_bool aOffline) {
    return This->lpVtbl->SetOffline(This,aOffline);
}
static FORCEINLINE nsresult nsIIOService_GetConnectivity(nsIIOService* This,cpp_bool *aConnectivity) {
    return This->lpVtbl->GetConnectivity(This,aConnectivity);
}
static FORCEINLINE nsresult nsIIOService_SetAppOffline(nsIIOService* This,UINT32 appId,LONG state) {
    return This->lpVtbl->SetAppOffline(This,appId,state);
}
static FORCEINLINE nsresult nsIIOService_IsAppOffline(nsIIOService* This,UINT32 appId,cpp_bool *_retval) {
    return This->lpVtbl->IsAppOffline(This,appId,_retval);
}
static FORCEINLINE nsresult nsIIOService_GetAppOfflineState(nsIIOService* This,UINT32 appId,LONG *_retval) {
    return This->lpVtbl->GetAppOfflineState(This,appId,_retval);
}
static FORCEINLINE nsresult nsIIOService_AllowPort(nsIIOService* This,LONG aPort,const char *aScheme,cpp_bool *_retval) {
    return This->lpVtbl->AllowPort(This,aPort,aScheme,_retval);
}
static FORCEINLINE nsresult nsIIOService_ExtractScheme(nsIIOService* This,const nsACString *urlString,nsACString *_retval) {
    return This->lpVtbl->ExtractScheme(This,urlString,_retval);
}
static FORCEINLINE nsresult nsIIOService_SetHook(nsIIOService* This,nsIIOServiceHook *aHook) {
    return This->lpVtbl->SetHook(This,aHook);
}
#endif
#endif

#endif


#endif  /* __nsIIOService_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIWebBrowserFocus interface
 */
#ifndef __nsIWebBrowserFocus_INTERFACE_DEFINED__
#define __nsIWebBrowserFocus_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIWebBrowserFocus, 0x7f8c754e, 0x5b36, 0x44be, 0xbc,0x96, 0x19,0x1b,0x49,0xf0,0x8e,0xa6);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("7f8c754e-5b36-44be-bc96-191b49f08ea6")
nsIWebBrowserFocus : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE Activate(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE Deactivate(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFocusAtFirstElement(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFocusAtLastElement(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFocusedWindow(
        mozIDOMWindowProxy **aFocusedWindow) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFocusedWindow(
        mozIDOMWindowProxy *aFocusedWindow) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFocusedElement(
        nsIDOMElement **aFocusedElement) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFocusedElement(
        nsIDOMElement *aFocusedElement) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIWebBrowserFocus, 0x7f8c754e, 0x5b36, 0x44be, 0xbc,0x96, 0x19,0x1b,0x49,0xf0,0x8e,0xa6)
#endif
#else
typedef struct nsIWebBrowserFocusVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIWebBrowserFocus *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIWebBrowserFocus *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIWebBrowserFocus *This);

    /*** nsIWebBrowserFocus methods ***/
    nsresult (STDMETHODCALLTYPE *Activate)(
        nsIWebBrowserFocus *This);

    nsresult (STDMETHODCALLTYPE *Deactivate)(
        nsIWebBrowserFocus *This);

    nsresult (STDMETHODCALLTYPE *SetFocusAtFirstElement)(
        nsIWebBrowserFocus *This);

    nsresult (STDMETHODCALLTYPE *SetFocusAtLastElement)(
        nsIWebBrowserFocus *This);

    nsresult (STDMETHODCALLTYPE *GetFocusedWindow)(
        nsIWebBrowserFocus *This,
        mozIDOMWindowProxy **aFocusedWindow);

    nsresult (STDMETHODCALLTYPE *SetFocusedWindow)(
        nsIWebBrowserFocus *This,
        mozIDOMWindowProxy *aFocusedWindow);

    nsresult (STDMETHODCALLTYPE *GetFocusedElement)(
        nsIWebBrowserFocus *This,
        nsIDOMElement **aFocusedElement);

    nsresult (STDMETHODCALLTYPE *SetFocusedElement)(
        nsIWebBrowserFocus *This,
        nsIDOMElement *aFocusedElement);

    END_INTERFACE
} nsIWebBrowserFocusVtbl;

interface nsIWebBrowserFocus {
    CONST_VTBL nsIWebBrowserFocusVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIWebBrowserFocus_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIWebBrowserFocus_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIWebBrowserFocus_Release(This) (This)->lpVtbl->Release(This)
/*** nsIWebBrowserFocus methods ***/
#define nsIWebBrowserFocus_Activate(This) (This)->lpVtbl->Activate(This)
#define nsIWebBrowserFocus_Deactivate(This) (This)->lpVtbl->Deactivate(This)
#define nsIWebBrowserFocus_SetFocusAtFirstElement(This) (This)->lpVtbl->SetFocusAtFirstElement(This)
#define nsIWebBrowserFocus_SetFocusAtLastElement(This) (This)->lpVtbl->SetFocusAtLastElement(This)
#define nsIWebBrowserFocus_GetFocusedWindow(This,aFocusedWindow) (This)->lpVtbl->GetFocusedWindow(This,aFocusedWindow)
#define nsIWebBrowserFocus_SetFocusedWindow(This,aFocusedWindow) (This)->lpVtbl->SetFocusedWindow(This,aFocusedWindow)
#define nsIWebBrowserFocus_GetFocusedElement(This,aFocusedElement) (This)->lpVtbl->GetFocusedElement(This,aFocusedElement)
#define nsIWebBrowserFocus_SetFocusedElement(This,aFocusedElement) (This)->lpVtbl->SetFocusedElement(This,aFocusedElement)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIWebBrowserFocus_QueryInterface(nsIWebBrowserFocus* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIWebBrowserFocus_AddRef(nsIWebBrowserFocus* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIWebBrowserFocus_Release(nsIWebBrowserFocus* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIWebBrowserFocus methods ***/
static FORCEINLINE nsresult nsIWebBrowserFocus_Activate(nsIWebBrowserFocus* This) {
    return This->lpVtbl->Activate(This);
}
static FORCEINLINE nsresult nsIWebBrowserFocus_Deactivate(nsIWebBrowserFocus* This) {
    return This->lpVtbl->Deactivate(This);
}
static FORCEINLINE nsresult nsIWebBrowserFocus_SetFocusAtFirstElement(nsIWebBrowserFocus* This) {
    return This->lpVtbl->SetFocusAtFirstElement(This);
}
static FORCEINLINE nsresult nsIWebBrowserFocus_SetFocusAtLastElement(nsIWebBrowserFocus* This) {
    return This->lpVtbl->SetFocusAtLastElement(This);
}
static FORCEINLINE nsresult nsIWebBrowserFocus_GetFocusedWindow(nsIWebBrowserFocus* This,mozIDOMWindowProxy **aFocusedWindow) {
    return This->lpVtbl->GetFocusedWindow(This,aFocusedWindow);
}
static FORCEINLINE nsresult nsIWebBrowserFocus_SetFocusedWindow(nsIWebBrowserFocus* This,mozIDOMWindowProxy *aFocusedWindow) {
    return This->lpVtbl->SetFocusedWindow(This,aFocusedWindow);
}
static FORCEINLINE nsresult nsIWebBrowserFocus_GetFocusedElement(nsIWebBrowserFocus* This,nsIDOMElement **aFocusedElement) {
    return This->lpVtbl->GetFocusedElement(This,aFocusedElement);
}
static FORCEINLINE nsresult nsIWebBrowserFocus_SetFocusedElement(nsIWebBrowserFocus* This,nsIDOMElement *aFocusedElement) {
    return This->lpVtbl->SetFocusedElement(This,aFocusedElement);
}
#endif
#endif

#endif


#endif  /* __nsIWebBrowserFocus_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIWebBrowserChrome interface
 */
#ifndef __nsIWebBrowserChrome_INTERFACE_DEFINED__
#define __nsIWebBrowserChrome_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIWebBrowserChrome, 0xe8c414c4, 0xdc38, 0x4ba3, 0xab,0x4e, 0xec,0x4c,0xbb,0xe2,0x29,0x07);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("e8c414c4-dc38-4ba3-ab4e-ec4cbbe22907")
nsIWebBrowserChrome : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE SetStatus(
        UINT32 statusType,
        const PRUnichar *status) = 0;

    virtual nsresult STDMETHODCALLTYPE GetWebBrowser(
        nsIWebBrowser **aWebBrowser) = 0;

    virtual nsresult STDMETHODCALLTYPE SetWebBrowser(
        nsIWebBrowser *aWebBrowser) = 0;

    virtual nsresult STDMETHODCALLTYPE GetChromeFlags(
        UINT32 *aChromeFlags) = 0;

    virtual nsresult STDMETHODCALLTYPE SetChromeFlags(
        UINT32 aChromeFlags) = 0;

    virtual nsresult STDMETHODCALLTYPE DestroyBrowserWindow(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE SizeBrowserTo(
        LONG aCX,
        LONG aCY) = 0;

    virtual nsresult STDMETHODCALLTYPE ShowAsModal(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE IsWindowModal(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE ExitModalEventLoop(
        nsresult aStatus) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIWebBrowserChrome, 0xe8c414c4, 0xdc38, 0x4ba3, 0xab,0x4e, 0xec,0x4c,0xbb,0xe2,0x29,0x07)
#endif
#else
typedef struct nsIWebBrowserChromeVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIWebBrowserChrome *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIWebBrowserChrome *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIWebBrowserChrome *This);

    /*** nsIWebBrowserChrome methods ***/
    nsresult (STDMETHODCALLTYPE *SetStatus)(
        nsIWebBrowserChrome *This,
        UINT32 statusType,
        const PRUnichar *status);

    nsresult (STDMETHODCALLTYPE *GetWebBrowser)(
        nsIWebBrowserChrome *This,
        nsIWebBrowser **aWebBrowser);

    nsresult (STDMETHODCALLTYPE *SetWebBrowser)(
        nsIWebBrowserChrome *This,
        nsIWebBrowser *aWebBrowser);

    nsresult (STDMETHODCALLTYPE *GetChromeFlags)(
        nsIWebBrowserChrome *This,
        UINT32 *aChromeFlags);

    nsresult (STDMETHODCALLTYPE *SetChromeFlags)(
        nsIWebBrowserChrome *This,
        UINT32 aChromeFlags);

    nsresult (STDMETHODCALLTYPE *DestroyBrowserWindow)(
        nsIWebBrowserChrome *This);

    nsresult (STDMETHODCALLTYPE *SizeBrowserTo)(
        nsIWebBrowserChrome *This,
        LONG aCX,
        LONG aCY);

    nsresult (STDMETHODCALLTYPE *ShowAsModal)(
        nsIWebBrowserChrome *This);

    nsresult (STDMETHODCALLTYPE *IsWindowModal)(
        nsIWebBrowserChrome *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *ExitModalEventLoop)(
        nsIWebBrowserChrome *This,
        nsresult aStatus);

    END_INTERFACE
} nsIWebBrowserChromeVtbl;

interface nsIWebBrowserChrome {
    CONST_VTBL nsIWebBrowserChromeVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIWebBrowserChrome_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIWebBrowserChrome_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIWebBrowserChrome_Release(This) (This)->lpVtbl->Release(This)
/*** nsIWebBrowserChrome methods ***/
#define nsIWebBrowserChrome_SetStatus(This,statusType,status) (This)->lpVtbl->SetStatus(This,statusType,status)
#define nsIWebBrowserChrome_GetWebBrowser(This,aWebBrowser) (This)->lpVtbl->GetWebBrowser(This,aWebBrowser)
#define nsIWebBrowserChrome_SetWebBrowser(This,aWebBrowser) (This)->lpVtbl->SetWebBrowser(This,aWebBrowser)
#define nsIWebBrowserChrome_GetChromeFlags(This,aChromeFlags) (This)->lpVtbl->GetChromeFlags(This,aChromeFlags)
#define nsIWebBrowserChrome_SetChromeFlags(This,aChromeFlags) (This)->lpVtbl->SetChromeFlags(This,aChromeFlags)
#define nsIWebBrowserChrome_DestroyBrowserWindow(This) (This)->lpVtbl->DestroyBrowserWindow(This)
#define nsIWebBrowserChrome_SizeBrowserTo(This,aCX,aCY) (This)->lpVtbl->SizeBrowserTo(This,aCX,aCY)
#define nsIWebBrowserChrome_ShowAsModal(This) (This)->lpVtbl->ShowAsModal(This)
#define nsIWebBrowserChrome_IsWindowModal(This,_retval) (This)->lpVtbl->IsWindowModal(This,_retval)
#define nsIWebBrowserChrome_ExitModalEventLoop(This,aStatus) (This)->lpVtbl->ExitModalEventLoop(This,aStatus)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIWebBrowserChrome_QueryInterface(nsIWebBrowserChrome* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIWebBrowserChrome_AddRef(nsIWebBrowserChrome* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIWebBrowserChrome_Release(nsIWebBrowserChrome* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIWebBrowserChrome methods ***/
static FORCEINLINE nsresult nsIWebBrowserChrome_SetStatus(nsIWebBrowserChrome* This,UINT32 statusType,const PRUnichar *status) {
    return This->lpVtbl->SetStatus(This,statusType,status);
}
static FORCEINLINE nsresult nsIWebBrowserChrome_GetWebBrowser(nsIWebBrowserChrome* This,nsIWebBrowser **aWebBrowser) {
    return This->lpVtbl->GetWebBrowser(This,aWebBrowser);
}
static FORCEINLINE nsresult nsIWebBrowserChrome_SetWebBrowser(nsIWebBrowserChrome* This,nsIWebBrowser *aWebBrowser) {
    return This->lpVtbl->SetWebBrowser(This,aWebBrowser);
}
static FORCEINLINE nsresult nsIWebBrowserChrome_GetChromeFlags(nsIWebBrowserChrome* This,UINT32 *aChromeFlags) {
    return This->lpVtbl->GetChromeFlags(This,aChromeFlags);
}
static FORCEINLINE nsresult nsIWebBrowserChrome_SetChromeFlags(nsIWebBrowserChrome* This,UINT32 aChromeFlags) {
    return This->lpVtbl->SetChromeFlags(This,aChromeFlags);
}
static FORCEINLINE nsresult nsIWebBrowserChrome_DestroyBrowserWindow(nsIWebBrowserChrome* This) {
    return This->lpVtbl->DestroyBrowserWindow(This);
}
static FORCEINLINE nsresult nsIWebBrowserChrome_SizeBrowserTo(nsIWebBrowserChrome* This,LONG aCX,LONG aCY) {
    return This->lpVtbl->SizeBrowserTo(This,aCX,aCY);
}
static FORCEINLINE nsresult nsIWebBrowserChrome_ShowAsModal(nsIWebBrowserChrome* This) {
    return This->lpVtbl->ShowAsModal(This);
}
static FORCEINLINE nsresult nsIWebBrowserChrome_IsWindowModal(nsIWebBrowserChrome* This,cpp_bool *_retval) {
    return This->lpVtbl->IsWindowModal(This,_retval);
}
static FORCEINLINE nsresult nsIWebBrowserChrome_ExitModalEventLoop(nsIWebBrowserChrome* This,nsresult aStatus) {
    return This->lpVtbl->ExitModalEventLoop(This,aStatus);
}
#endif
#endif

#endif


#endif  /* __nsIWebBrowserChrome_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMEventListener interface
 */
#ifndef __nsIDOMEventListener_INTERFACE_DEFINED__
#define __nsIDOMEventListener_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMEventListener, 0xdf31c120, 0xded6, 0x11d1, 0xbd,0x85, 0x00,0x80,0x5f,0x8a,0xe3,0xf4);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("df31c120-ded6-11d1-bd85-00805f8ae3f4")
nsIDOMEventListener : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE HandleEvent(
        nsIDOMEvent *event) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMEventListener, 0xdf31c120, 0xded6, 0x11d1, 0xbd,0x85, 0x00,0x80,0x5f,0x8a,0xe3,0xf4)
#endif
#else
typedef struct nsIDOMEventListenerVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMEventListener *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMEventListener *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMEventListener *This);

    /*** nsIDOMEventListener methods ***/
    nsresult (STDMETHODCALLTYPE *HandleEvent)(
        nsIDOMEventListener *This,
        nsIDOMEvent *event);

    END_INTERFACE
} nsIDOMEventListenerVtbl;

interface nsIDOMEventListener {
    CONST_VTBL nsIDOMEventListenerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMEventListener_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMEventListener_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMEventListener_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMEventListener methods ***/
#define nsIDOMEventListener_HandleEvent(This,event) (This)->lpVtbl->HandleEvent(This,event)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMEventListener_QueryInterface(nsIDOMEventListener* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMEventListener_AddRef(nsIDOMEventListener* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMEventListener_Release(nsIDOMEventListener* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMEventListener methods ***/
static FORCEINLINE nsresult nsIDOMEventListener_HandleEvent(nsIDOMEventListener* This,nsIDOMEvent *event) {
    return This->lpVtbl->HandleEvent(This,event);
}
#endif
#endif

#endif


#endif  /* __nsIDOMEventListener_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMEventTarget interface
 */
#ifndef __nsIDOMEventTarget_INTERFACE_DEFINED__
#define __nsIDOMEventTarget_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMEventTarget, 0x9a78ac3c, 0x9507, 0x4d00, 0xb2,0xd6, 0x10,0xb5,0x08,0xd2,0xec,0x31);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("9a78ac3c-9507-4d00-b2d6-10b508d2ec31")
nsIDOMEventTarget : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE AddEventListener(
        const nsAString *type,
        nsIDOMEventListener *listener,
        cpp_bool useCapture,
        cpp_bool wantsUntrusted,
        UINT8 _argc) = 0;

    virtual nsresult STDMETHODCALLTYPE AddSystemEventListener(
        const nsAString *type,
        nsIDOMEventListener *listener,
        cpp_bool aUseCapture,
        cpp_bool aWantsUntrusted,
        UINT8 _argc) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveEventListener(
        const nsAString *type,
        nsIDOMEventListener *listener,
        cpp_bool useCapture) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveSystemEventListener(
        const nsAString *type,
        nsIDOMEventListener *listener,
        cpp_bool aUseCapture) = 0;

    virtual nsresult STDMETHODCALLTYPE DispatchEvent(
        nsIDOMEvent *evt,
        cpp_bool *_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMEventTarget, 0x9a78ac3c, 0x9507, 0x4d00, 0xb2,0xd6, 0x10,0xb5,0x08,0xd2,0xec,0x31)
#endif
#else
typedef struct nsIDOMEventTargetVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMEventTarget *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMEventTarget *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMEventTarget *This);

    /*** nsIDOMEventTarget methods ***/
    nsresult (STDMETHODCALLTYPE *AddEventListener)(
        nsIDOMEventTarget *This,
        const nsAString *type,
        nsIDOMEventListener *listener,
        cpp_bool useCapture,
        cpp_bool wantsUntrusted,
        UINT8 _argc);

    nsresult (STDMETHODCALLTYPE *AddSystemEventListener)(
        nsIDOMEventTarget *This,
        const nsAString *type,
        nsIDOMEventListener *listener,
        cpp_bool aUseCapture,
        cpp_bool aWantsUntrusted,
        UINT8 _argc);

    nsresult (STDMETHODCALLTYPE *RemoveEventListener)(
        nsIDOMEventTarget *This,
        const nsAString *type,
        nsIDOMEventListener *listener,
        cpp_bool useCapture);

    nsresult (STDMETHODCALLTYPE *RemoveSystemEventListener)(
        nsIDOMEventTarget *This,
        const nsAString *type,
        nsIDOMEventListener *listener,
        cpp_bool aUseCapture);

    nsresult (STDMETHODCALLTYPE *DispatchEvent)(
        nsIDOMEventTarget *This,
        nsIDOMEvent *evt,
        cpp_bool *_retval);

    END_INTERFACE
} nsIDOMEventTargetVtbl;

interface nsIDOMEventTarget {
    CONST_VTBL nsIDOMEventTargetVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMEventTarget_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMEventTarget_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMEventTarget_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMEventTarget methods ***/
#define nsIDOMEventTarget_AddEventListener(This,type,listener,useCapture,wantsUntrusted,_argc) (This)->lpVtbl->AddEventListener(This,type,listener,useCapture,wantsUntrusted,_argc)
#define nsIDOMEventTarget_AddSystemEventListener(This,type,listener,aUseCapture,aWantsUntrusted,_argc) (This)->lpVtbl->AddSystemEventListener(This,type,listener,aUseCapture,aWantsUntrusted,_argc)
#define nsIDOMEventTarget_RemoveEventListener(This,type,listener,useCapture) (This)->lpVtbl->RemoveEventListener(This,type,listener,useCapture)
#define nsIDOMEventTarget_RemoveSystemEventListener(This,type,listener,aUseCapture) (This)->lpVtbl->RemoveSystemEventListener(This,type,listener,aUseCapture)
#define nsIDOMEventTarget_DispatchEvent(This,evt,_retval) (This)->lpVtbl->DispatchEvent(This,evt,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMEventTarget_QueryInterface(nsIDOMEventTarget* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMEventTarget_AddRef(nsIDOMEventTarget* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMEventTarget_Release(nsIDOMEventTarget* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMEventTarget methods ***/
static FORCEINLINE nsresult nsIDOMEventTarget_AddEventListener(nsIDOMEventTarget* This,const nsAString *type,nsIDOMEventListener *listener,cpp_bool useCapture,cpp_bool wantsUntrusted,UINT8 _argc) {
    return This->lpVtbl->AddEventListener(This,type,listener,useCapture,wantsUntrusted,_argc);
}
static FORCEINLINE nsresult nsIDOMEventTarget_AddSystemEventListener(nsIDOMEventTarget* This,const nsAString *type,nsIDOMEventListener *listener,cpp_bool aUseCapture,cpp_bool aWantsUntrusted,UINT8 _argc) {
    return This->lpVtbl->AddSystemEventListener(This,type,listener,aUseCapture,aWantsUntrusted,_argc);
}
static FORCEINLINE nsresult nsIDOMEventTarget_RemoveEventListener(nsIDOMEventTarget* This,const nsAString *type,nsIDOMEventListener *listener,cpp_bool useCapture) {
    return This->lpVtbl->RemoveEventListener(This,type,listener,useCapture);
}
static FORCEINLINE nsresult nsIDOMEventTarget_RemoveSystemEventListener(nsIDOMEventTarget* This,const nsAString *type,nsIDOMEventListener *listener,cpp_bool aUseCapture) {
    return This->lpVtbl->RemoveSystemEventListener(This,type,listener,aUseCapture);
}
static FORCEINLINE nsresult nsIDOMEventTarget_DispatchEvent(nsIDOMEventTarget* This,nsIDOMEvent *evt,cpp_bool *_retval) {
    return This->lpVtbl->DispatchEvent(This,evt,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIDOMEventTarget_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMEvent interface
 */
#ifndef __nsIDOMEvent_INTERFACE_DEFINED__
#define __nsIDOMEvent_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMEvent, 0xf58daacf, 0x4d1a, 0x4002, 0x8f,0xd7, 0x06,0xb6,0x14,0xdf,0xbc,0xf6);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("f58daacf-4d1a-4002-8fd7-06b614dfbcf6")
nsIDOMEvent : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetType(
        nsAString *aType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTarget(
        nsIDOMEventTarget **aTarget) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCurrentTarget(
        nsIDOMEventTarget **aCurrentTarget) = 0;

    virtual nsresult STDMETHODCALLTYPE GetEventPhase(
        UINT16 *aEventPhase) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBubbles(
        cpp_bool *aBubbles) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCancelable(
        cpp_bool *aCancelable) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTimeStamp(
        DOMTimeStamp *aTimeStamp) = 0;

    virtual nsresult STDMETHODCALLTYPE StopPropagation(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE PreventDefault(
        ) = 0;

    virtual void STDMETHODCALLTYPE InitEvent(
        const nsAString *eventTypeArg,
        cpp_bool canBubbleArg,
        cpp_bool cancelableArg) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDefaultPrevented(
        cpp_bool *aDefaultPrevented) = 0;

    virtual nsresult STDMETHODCALLTYPE StopImmediatePropagation(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOriginalTarget(
        nsIDOMEventTarget **aOriginalTarget) = 0;

    virtual nsresult STDMETHODCALLTYPE GetExplicitOriginalTarget(
        nsIDOMEventTarget **aExplicitOriginalTarget) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPreventDefault(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsTrusted(
        cpp_bool *aIsTrusted) = 0;

    virtual nsresult STDMETHODCALLTYPE DuplicatePrivateData(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE SetTarget(
        nsIDOMEventTarget *aTarget) = 0;

    virtual cpp_bool STDMETHODCALLTYPE IsDispatchStopped(
        ) = 0;

    virtual void * STDMETHODCALLTYPE WidgetEventPtr(
        ) = 0;

    virtual void STDMETHODCALLTYPE SetTrusted(
        cpp_bool aTrusted) = 0;

    virtual void STDMETHODCALLTYPE Serialize(
        void *aMsg,
        cpp_bool aSerializeInterfaceType) = 0;

    virtual cpp_bool STDMETHODCALLTYPE Deserialize(
        const void *aMsg,
        void **aIter) = 0;

    virtual void STDMETHODCALLTYPE SetOwner(
        void *aOwner) = 0;

    virtual void * STDMETHODCALLTYPE InternalDOMEvent(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE StopCrossProcessForwarding(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMEvent, 0xf58daacf, 0x4d1a, 0x4002, 0x8f,0xd7, 0x06,0xb6,0x14,0xdf,0xbc,0xf6)
#endif
#else
typedef struct nsIDOMEventVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMEvent *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMEvent *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMEvent *This);

    /*** nsIDOMEvent methods ***/
    nsresult (STDMETHODCALLTYPE *GetType)(
        nsIDOMEvent *This,
        nsAString *aType);

    nsresult (STDMETHODCALLTYPE *GetTarget)(
        nsIDOMEvent *This,
        nsIDOMEventTarget **aTarget);

    nsresult (STDMETHODCALLTYPE *GetCurrentTarget)(
        nsIDOMEvent *This,
        nsIDOMEventTarget **aCurrentTarget);

    nsresult (STDMETHODCALLTYPE *GetEventPhase)(
        nsIDOMEvent *This,
        UINT16 *aEventPhase);

    nsresult (STDMETHODCALLTYPE *GetBubbles)(
        nsIDOMEvent *This,
        cpp_bool *aBubbles);

    nsresult (STDMETHODCALLTYPE *GetCancelable)(
        nsIDOMEvent *This,
        cpp_bool *aCancelable);

    nsresult (STDMETHODCALLTYPE *GetTimeStamp)(
        nsIDOMEvent *This,
        DOMTimeStamp *aTimeStamp);

    nsresult (STDMETHODCALLTYPE *StopPropagation)(
        nsIDOMEvent *This);

    nsresult (STDMETHODCALLTYPE *PreventDefault)(
        nsIDOMEvent *This);

    void (STDMETHODCALLTYPE *InitEvent)(
        nsIDOMEvent *This,
        const nsAString *eventTypeArg,
        cpp_bool canBubbleArg,
        cpp_bool cancelableArg);

    nsresult (STDMETHODCALLTYPE *GetDefaultPrevented)(
        nsIDOMEvent *This,
        cpp_bool *aDefaultPrevented);

    nsresult (STDMETHODCALLTYPE *StopImmediatePropagation)(
        nsIDOMEvent *This);

    nsresult (STDMETHODCALLTYPE *GetOriginalTarget)(
        nsIDOMEvent *This,
        nsIDOMEventTarget **aOriginalTarget);

    nsresult (STDMETHODCALLTYPE *GetExplicitOriginalTarget)(
        nsIDOMEvent *This,
        nsIDOMEventTarget **aExplicitOriginalTarget);

    nsresult (STDMETHODCALLTYPE *GetPreventDefault)(
        nsIDOMEvent *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetIsTrusted)(
        nsIDOMEvent *This,
        cpp_bool *aIsTrusted);

    nsresult (STDMETHODCALLTYPE *DuplicatePrivateData)(
        nsIDOMEvent *This);

    nsresult (STDMETHODCALLTYPE *SetTarget)(
        nsIDOMEvent *This,
        nsIDOMEventTarget *aTarget);

    cpp_bool (STDMETHODCALLTYPE *IsDispatchStopped)(
        nsIDOMEvent *This);

    void * (STDMETHODCALLTYPE *WidgetEventPtr)(
        nsIDOMEvent *This);

    void (STDMETHODCALLTYPE *SetTrusted)(
        nsIDOMEvent *This,
        cpp_bool aTrusted);

    void (STDMETHODCALLTYPE *Serialize)(
        nsIDOMEvent *This,
        void *aMsg,
        cpp_bool aSerializeInterfaceType);

    cpp_bool (STDMETHODCALLTYPE *Deserialize)(
        nsIDOMEvent *This,
        const void *aMsg,
        void **aIter);

    void (STDMETHODCALLTYPE *SetOwner)(
        nsIDOMEvent *This,
        void *aOwner);

    void * (STDMETHODCALLTYPE *InternalDOMEvent)(
        nsIDOMEvent *This);

    nsresult (STDMETHODCALLTYPE *StopCrossProcessForwarding)(
        nsIDOMEvent *This);

    END_INTERFACE
} nsIDOMEventVtbl;

interface nsIDOMEvent {
    CONST_VTBL nsIDOMEventVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMEvent_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMEvent_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMEvent_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMEvent methods ***/
#define nsIDOMEvent_GetType(This,aType) (This)->lpVtbl->GetType(This,aType)
#define nsIDOMEvent_GetTarget(This,aTarget) (This)->lpVtbl->GetTarget(This,aTarget)
#define nsIDOMEvent_GetCurrentTarget(This,aCurrentTarget) (This)->lpVtbl->GetCurrentTarget(This,aCurrentTarget)
#define nsIDOMEvent_GetEventPhase(This,aEventPhase) (This)->lpVtbl->GetEventPhase(This,aEventPhase)
#define nsIDOMEvent_GetBubbles(This,aBubbles) (This)->lpVtbl->GetBubbles(This,aBubbles)
#define nsIDOMEvent_GetCancelable(This,aCancelable) (This)->lpVtbl->GetCancelable(This,aCancelable)
#define nsIDOMEvent_GetTimeStamp(This,aTimeStamp) (This)->lpVtbl->GetTimeStamp(This,aTimeStamp)
#define nsIDOMEvent_StopPropagation(This) (This)->lpVtbl->StopPropagation(This)
#define nsIDOMEvent_PreventDefault(This) (This)->lpVtbl->PreventDefault(This)
#define nsIDOMEvent_InitEvent(This,eventTypeArg,canBubbleArg,cancelableArg) (This)->lpVtbl->InitEvent(This,eventTypeArg,canBubbleArg,cancelableArg)
#define nsIDOMEvent_GetDefaultPrevented(This,aDefaultPrevented) (This)->lpVtbl->GetDefaultPrevented(This,aDefaultPrevented)
#define nsIDOMEvent_StopImmediatePropagation(This) (This)->lpVtbl->StopImmediatePropagation(This)
#define nsIDOMEvent_GetOriginalTarget(This,aOriginalTarget) (This)->lpVtbl->GetOriginalTarget(This,aOriginalTarget)
#define nsIDOMEvent_GetExplicitOriginalTarget(This,aExplicitOriginalTarget) (This)->lpVtbl->GetExplicitOriginalTarget(This,aExplicitOriginalTarget)
#define nsIDOMEvent_GetPreventDefault(This,_retval) (This)->lpVtbl->GetPreventDefault(This,_retval)
#define nsIDOMEvent_GetIsTrusted(This,aIsTrusted) (This)->lpVtbl->GetIsTrusted(This,aIsTrusted)
#define nsIDOMEvent_DuplicatePrivateData(This) (This)->lpVtbl->DuplicatePrivateData(This)
#define nsIDOMEvent_SetTarget(This,aTarget) (This)->lpVtbl->SetTarget(This,aTarget)
#define nsIDOMEvent_IsDispatchStopped(This) (This)->lpVtbl->IsDispatchStopped(This)
#define nsIDOMEvent_WidgetEventPtr(This) (This)->lpVtbl->WidgetEventPtr(This)
#define nsIDOMEvent_SetTrusted(This,aTrusted) (This)->lpVtbl->SetTrusted(This,aTrusted)
#define nsIDOMEvent_Serialize(This,aMsg,aSerializeInterfaceType) (This)->lpVtbl->Serialize(This,aMsg,aSerializeInterfaceType)
#define nsIDOMEvent_Deserialize(This,aMsg,aIter) (This)->lpVtbl->Deserialize(This,aMsg,aIter)
#define nsIDOMEvent_SetOwner(This,aOwner) (This)->lpVtbl->SetOwner(This,aOwner)
#define nsIDOMEvent_InternalDOMEvent(This) (This)->lpVtbl->InternalDOMEvent(This)
#define nsIDOMEvent_StopCrossProcessForwarding(This) (This)->lpVtbl->StopCrossProcessForwarding(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMEvent_QueryInterface(nsIDOMEvent* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMEvent_AddRef(nsIDOMEvent* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMEvent_Release(nsIDOMEvent* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMEvent methods ***/
static FORCEINLINE nsresult nsIDOMEvent_GetType(nsIDOMEvent* This,nsAString *aType) {
    return This->lpVtbl->GetType(This,aType);
}
static FORCEINLINE nsresult nsIDOMEvent_GetTarget(nsIDOMEvent* This,nsIDOMEventTarget **aTarget) {
    return This->lpVtbl->GetTarget(This,aTarget);
}
static FORCEINLINE nsresult nsIDOMEvent_GetCurrentTarget(nsIDOMEvent* This,nsIDOMEventTarget **aCurrentTarget) {
    return This->lpVtbl->GetCurrentTarget(This,aCurrentTarget);
}
static FORCEINLINE nsresult nsIDOMEvent_GetEventPhase(nsIDOMEvent* This,UINT16 *aEventPhase) {
    return This->lpVtbl->GetEventPhase(This,aEventPhase);
}
static FORCEINLINE nsresult nsIDOMEvent_GetBubbles(nsIDOMEvent* This,cpp_bool *aBubbles) {
    return This->lpVtbl->GetBubbles(This,aBubbles);
}
static FORCEINLINE nsresult nsIDOMEvent_GetCancelable(nsIDOMEvent* This,cpp_bool *aCancelable) {
    return This->lpVtbl->GetCancelable(This,aCancelable);
}
static FORCEINLINE nsresult nsIDOMEvent_GetTimeStamp(nsIDOMEvent* This,DOMTimeStamp *aTimeStamp) {
    return This->lpVtbl->GetTimeStamp(This,aTimeStamp);
}
static FORCEINLINE nsresult nsIDOMEvent_StopPropagation(nsIDOMEvent* This) {
    return This->lpVtbl->StopPropagation(This);
}
static FORCEINLINE nsresult nsIDOMEvent_PreventDefault(nsIDOMEvent* This) {
    return This->lpVtbl->PreventDefault(This);
}
static FORCEINLINE void nsIDOMEvent_InitEvent(nsIDOMEvent* This,const nsAString *eventTypeArg,cpp_bool canBubbleArg,cpp_bool cancelableArg) {
    This->lpVtbl->InitEvent(This,eventTypeArg,canBubbleArg,cancelableArg);
}
static FORCEINLINE nsresult nsIDOMEvent_GetDefaultPrevented(nsIDOMEvent* This,cpp_bool *aDefaultPrevented) {
    return This->lpVtbl->GetDefaultPrevented(This,aDefaultPrevented);
}
static FORCEINLINE nsresult nsIDOMEvent_StopImmediatePropagation(nsIDOMEvent* This) {
    return This->lpVtbl->StopImmediatePropagation(This);
}
static FORCEINLINE nsresult nsIDOMEvent_GetOriginalTarget(nsIDOMEvent* This,nsIDOMEventTarget **aOriginalTarget) {
    return This->lpVtbl->GetOriginalTarget(This,aOriginalTarget);
}
static FORCEINLINE nsresult nsIDOMEvent_GetExplicitOriginalTarget(nsIDOMEvent* This,nsIDOMEventTarget **aExplicitOriginalTarget) {
    return This->lpVtbl->GetExplicitOriginalTarget(This,aExplicitOriginalTarget);
}
static FORCEINLINE nsresult nsIDOMEvent_GetPreventDefault(nsIDOMEvent* This,cpp_bool *_retval) {
    return This->lpVtbl->GetPreventDefault(This,_retval);
}
static FORCEINLINE nsresult nsIDOMEvent_GetIsTrusted(nsIDOMEvent* This,cpp_bool *aIsTrusted) {
    return This->lpVtbl->GetIsTrusted(This,aIsTrusted);
}
static FORCEINLINE nsresult nsIDOMEvent_DuplicatePrivateData(nsIDOMEvent* This) {
    return This->lpVtbl->DuplicatePrivateData(This);
}
static FORCEINLINE nsresult nsIDOMEvent_SetTarget(nsIDOMEvent* This,nsIDOMEventTarget *aTarget) {
    return This->lpVtbl->SetTarget(This,aTarget);
}
static FORCEINLINE cpp_bool nsIDOMEvent_IsDispatchStopped(nsIDOMEvent* This) {
    return This->lpVtbl->IsDispatchStopped(This);
}
static FORCEINLINE void * nsIDOMEvent_WidgetEventPtr(nsIDOMEvent* This) {
    return This->lpVtbl->WidgetEventPtr(This);
}
static FORCEINLINE void nsIDOMEvent_SetTrusted(nsIDOMEvent* This,cpp_bool aTrusted) {
    This->lpVtbl->SetTrusted(This,aTrusted);
}
static FORCEINLINE void nsIDOMEvent_Serialize(nsIDOMEvent* This,void *aMsg,cpp_bool aSerializeInterfaceType) {
    This->lpVtbl->Serialize(This,aMsg,aSerializeInterfaceType);
}
static FORCEINLINE cpp_bool nsIDOMEvent_Deserialize(nsIDOMEvent* This,const void *aMsg,void **aIter) {
    return This->lpVtbl->Deserialize(This,aMsg,aIter);
}
static FORCEINLINE void nsIDOMEvent_SetOwner(nsIDOMEvent* This,void *aOwner) {
    This->lpVtbl->SetOwner(This,aOwner);
}
static FORCEINLINE void * nsIDOMEvent_InternalDOMEvent(nsIDOMEvent* This) {
    return This->lpVtbl->InternalDOMEvent(This);
}
static FORCEINLINE nsresult nsIDOMEvent_StopCrossProcessForwarding(nsIDOMEvent* This) {
    return This->lpVtbl->StopCrossProcessForwarding(This);
}
#endif
#endif

#endif


#endif  /* __nsIDOMEvent_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMWindowUtils interface
 */
#ifndef __nsIDOMWindowUtils_INTERFACE_DEFINED__
#define __nsIDOMWindowUtils_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMWindowUtils, 0x46b44e33, 0x13c2, 0x4eb3, 0xbf,0x80, 0x76,0xa4,0xe0,0x85,0x7c,0xcc);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("46b44e33-13c2-4eb3-bf80-76a4e0857ccc")
nsIDOMWindowUtils : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetImageAnimationMode(
        UINT16 *aImageAnimationMode) = 0;

    virtual nsresult STDMETHODCALLTYPE SetImageAnimationMode(
        UINT16 aImageAnimationMode) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDocCharsetIsForced(
        cpp_bool *aDocCharsetIsForced) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCursorType(
        short *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDocumentMetadata(
        const nsAString *aName,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Redraw(
        UINT32 aCount,
        UINT32 *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE UpdateLayerTree(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetViewportInfo(
        UINT32 aDisplayWidth,
        UINT32 aDisplayHeight,
        double *aDefaultZoom,
        cpp_bool *aAllowZoom,
        double *aMinZoom,
        double *aMaxZoom,
        UINT32 *aWidth,
        UINT32 *aHeight,
        cpp_bool *aAutoSize) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDisplayPortForElement(
        float aXPx,
        float aYPx,
        float aWidthPx,
        float aHeightPx,
        nsIDOMElement *aElement,
        UINT32 aPriority) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDisplayPortMarginsForElement(
        float aLeftMargin,
        float aTopMargin,
        float aRightMargin,
        float aBottomMargin,
        nsIDOMElement *aElement,
        UINT32 aPriority) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDisplayPortBaseForElement(
        LONG aX,
        LONG aY,
        LONG aWidth,
        LONG aHeight,
        nsIDOMElement *aElement) = 0;

    virtual nsresult STDMETHODCALLTYPE SetResolution(
        float aResolution) = 0;

    virtual nsresult STDMETHODCALLTYPE GetResolution(
        float *aResolution) = 0;

    virtual nsresult STDMETHODCALLTYPE SetResolutionAndScaleTo(
        float aResolution) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsResolutionSet(
        cpp_bool *aIsResolutionSet) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsFirstPaint(
        cpp_bool *aIsFirstPaint) = 0;

    virtual nsresult STDMETHODCALLTYPE SetIsFirstPaint(
        cpp_bool aIsFirstPaint) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPresShellId(
        UINT32 *aPresShellId) = 0;

    virtual nsresult STDMETHODCALLTYPE SendMouseEvent(
        const nsAString *aType,
        float aX,
        float aY,
        LONG aButton,
        LONG aClickCount,
        LONG aModifiers,
        cpp_bool aIgnoreRootScrollFrame,
        float aPressure,
        UINT16 aInputSourceArg,
        cpp_bool aIsSynthesized,
        UINT8 _argc,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SendPointerEvent(
        const nsAString *aType,
        float aX,
        float aY,
        LONG aButton,
        LONG aClickCount,
        LONG aModifiers,
        cpp_bool aIgnoreRootScrollFrame,
        float aPressure,
        UINT16 aInputSourceArg,
        LONG aPointerId,
        LONG aWidth,
        LONG aHeight,
        LONG tiltX,
        LONG tiltY,
        cpp_bool aIsPrimary,
        cpp_bool aIsSynthesized,
        UINT8 _argc,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SendTouchEvent(
        const nsAString *aType,
        UINT32 *aIdentifiers,
        LONG *aXs,
        LONG *aYs,
        UINT32 *aRxs,
        UINT32 *aRys,
        float *aRotationAngles,
        float *aForces,
        UINT32 count,
        LONG aModifiers,
        cpp_bool aIgnoreRootScrollFrame,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SendMouseEventToWindow(
        const nsAString *aType,
        float aX,
        float aY,
        LONG aButton,
        LONG aClickCount,
        LONG aModifiers,
        cpp_bool aIgnoreRootScrollFrame,
        float aPressure,
        UINT16 aInputSourceArg,
        cpp_bool aIsSynthesized,
        UINT8 _argc) = 0;

    virtual nsresult STDMETHODCALLTYPE SendPointerEventToWindow(
        const nsAString *aType,
        float aX,
        float aY,
        LONG aButton,
        LONG aClickCount,
        LONG aModifiers,
        cpp_bool aIgnoreRootScrollFrame,
        float aPressure,
        UINT16 aInputSourceArg,
        LONG aPointerId,
        LONG aWidth,
        LONG aHeight,
        LONG aTiltX,
        LONG aTiltY,
        cpp_bool aIsPrimary,
        cpp_bool aIsSynthesized,
        UINT8 _argc) = 0;

    virtual nsresult STDMETHODCALLTYPE SendTouchEventToWindow(
        const nsAString *aType,
        UINT32 *aIdentifiers,
        LONG *aXs,
        LONG *aYs,
        UINT32 *aRxs,
        UINT32 *aRys,
        float *aRotationAngles,
        float *aForces,
        UINT32 count,
        LONG aModifiers,
        cpp_bool aIgnoreRootScrollFrame,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SendWheelEvent(
        float aX,
        float aY,
        double aDeltaX,
        double aDeltaY,
        double aDeltaZ,
        UINT32 aDeltaMode,
        LONG aModifiers,
        LONG aLineOrPageDeltaX,
        LONG aLineOrPageDeltaY,
        UINT32 aOptions) = 0;

    virtual nsresult STDMETHODCALLTYPE SendKeyEvent(
        const nsAString *aType,
        LONG aKeyCode,
        LONG aCharCode,
        LONG aModifiers,
        UINT32 aAdditionalFlags,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SendNativeKeyEvent(
        LONG aNativeKeyboardLayout,
        LONG aNativeKeyCode,
        LONG aModifierFlags,
        const nsAString *aCharacters,
        const nsAString *aUnmodifiedCharacters,
        nsIObserver *aObserver) = 0;

    virtual nsresult STDMETHODCALLTYPE SendNativeMouseEvent(
        LONG aScreenX,
        LONG aScreenY,
        LONG aNativeMessage,
        LONG aModifierFlags,
        nsIDOMElement *aElement,
        nsIObserver *aObserver) = 0;

    virtual nsresult STDMETHODCALLTYPE SendNativeMouseMove(
        LONG aScreenX,
        LONG aScreenY,
        nsIDOMElement *aElement,
        nsIObserver *aObserver) = 0;

    virtual nsresult STDMETHODCALLTYPE SendNativeMouseScrollEvent(
        LONG aScreenX,
        LONG aScreenY,
        UINT32 aNativeMessage,
        double aDeltaX,
        double aDeltaY,
        double aDeltaZ,
        UINT32 aModifierFlags,
        UINT32 aAdditionalFlags,
        nsIDOMElement *aElement,
        nsIObserver *aObserver) = 0;

    virtual nsresult STDMETHODCALLTYPE SendNativeTouchPoint(
        UINT32 aPointerId,
        UINT32 aTouchState,
        LONG aScreenX,
        LONG aScreenY,
        double aPressure,
        UINT32 aOrientation,
        nsIObserver *aObserver) = 0;

    virtual nsresult STDMETHODCALLTYPE SendNativeTouchTap(
        LONG aScreenX,
        LONG aScreenY,
        cpp_bool aLongTap,
        nsIObserver *aObserver) = 0;

    virtual nsresult STDMETHODCALLTYPE ClearNativeTouchSequence(
        nsIObserver *aObserver) = 0;

    virtual nsresult STDMETHODCALLTYPE ActivateNativeMenuItemAt(
        const nsAString *indexString) = 0;

    virtual nsresult STDMETHODCALLTYPE ForceUpdateNativeMenuAt(
        const nsAString *indexString) = 0;

    virtual nsresult STDMETHODCALLTYPE Focus(
        nsIDOMElement *aElement) = 0;

    virtual nsresult STDMETHODCALLTYPE GarbageCollect(
        nsICycleCollectorListener *aListener,
        LONG aExtraForgetSkippableCalls) = 0;

    virtual nsresult STDMETHODCALLTYPE CycleCollect(
        nsICycleCollectorListener *aListener,
        LONG aExtraForgetSkippableCalls) = 0;

    virtual nsresult STDMETHODCALLTYPE RunNextCollectorTimer(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE SendSimpleGestureEvent(
        const nsAString *aType,
        float aX,
        float aY,
        UINT32 aDirection,
        double aDelta,
        LONG aModifiers,
        UINT32 aClickCount) = 0;

    virtual nsresult STDMETHODCALLTYPE ElementFromPoint(
        float aX,
        float aY,
        cpp_bool aIgnoreRootScrollFrame,
        cpp_bool aFlushLayout,
        nsIDOMElement **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE NodesFromRect(
        float aX,
        float aY,
        float aTopSize,
        float aRightSize,
        float aBottomSize,
        float aLeftSize,
        cpp_bool aIgnoreRootScrollFrame,
        cpp_bool aFlushLayout,
        nsIDOMNodeList **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTranslationNodes(
        nsIDOMNode *aRoot,
        int **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CompareCanvases(
        nsIDOMHTMLCanvasElement *aCanvas1,
        nsIDOMHTMLCanvasElement *aCanvas2,
        UINT32 *aMaxDifference,
        UINT32 *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsMozAfterPaintPending(
        cpp_bool *aIsMozAfterPaintPending) = 0;

    virtual nsresult STDMETHODCALLTYPE SuppressEventHandling(
        cpp_bool aSuppress) = 0;

    virtual nsresult STDMETHODCALLTYPE ClearMozAfterPaintEvents(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE DisableNonTestMouseEvents(
        cpp_bool aDisable) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScrollXY(
        cpp_bool aFlushLayout,
        LONG *aScrollX,
        LONG *aScrollY) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScrollXYFloat(
        cpp_bool aFlushLayout,
        float *aScrollX,
        float *aScrollY) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScrollbarSize(
        cpp_bool aFlushLayout,
        LONG *aWidth,
        LONG *aHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBoundsWithoutFlushing(
        nsIDOMElement *aElement,
        nsIDOMClientRect **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRootBounds(
        nsIDOMClientRect **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIMEIsOpen(
        cpp_bool *aIMEIsOpen) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIMEStatus(
        UINT32 *aIMEStatus) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScreenPixelsPerCSSPixel(
        float *aScreenPixelsPerCSSPixel) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFullZoom(
        float *aFullZoom) = 0;

    virtual nsresult STDMETHODCALLTYPE DispatchDOMEventViaPresShell(
        nsIDOMNode *aTarget,
        nsIDOMEvent *aEvent,
        cpp_bool aTrusted,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE DispatchEventToChromeOnly(
        nsIDOMEventTarget *aTarget,
        nsIDOMEvent *aEvent,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetClassName(
        const void *aObject,
        JSContext *cx,
        char **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SendContentCommandEvent(
        const nsAString *aType,
        nsITransferable *aTransferable) = 0;

    virtual nsresult STDMETHODCALLTYPE SendQueryContentEvent(
        UINT32 aType,
        UINT32 aOffset,
        UINT32 aLength,
        LONG aX,
        LONG aY,
        UINT32 aAdditionalFlags,
        nsIQueryContentEventResult **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoteFrameFullscreenChanged(
        nsIDOMElement *aFrameElement) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoteFrameFullscreenReverted(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE HandleFullscreenRequests(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE ExitFullscreen(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE SendSelectionSetEvent(
        UINT32 aOffset,
        UINT32 aLength,
        UINT32 aAdditionalFlags,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SelectAtPoint(
        float aX,
        float aY,
        UINT32 aSelectBehavior,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetVisitedDependentComputedStyle(
        nsIDOMElement *aElement,
        const nsAString *aPseudoElement,
        const nsAString *aPropertyName,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOuterWindowID(
        UINT64 *aOuterWindowID) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCurrentInnerWindowID(
        UINT64 *aCurrentInnerWindowID) = 0;

    virtual nsresult STDMETHODCALLTYPE EnterModalState(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE LeaveModalState(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE IsInModalState(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDesktopModeViewport(
        cpp_bool aDesktopModeViewport) = 0;

    virtual nsresult STDMETHODCALLTYPE SuspendTimeouts(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE ResumeTimeouts(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLayerManagerType(
        nsAString *aLayerManagerType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLayerManagerRemote(
        cpp_bool *aLayerManagerRemote) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSupportsHardwareH264Decoding(
        void *aSupportsHardwareH264Decoding) = 0;

    virtual nsresult STDMETHODCALLTYPE StartFrameTimeRecording(
        UINT32 *startIndex) = 0;

    virtual nsresult STDMETHODCALLTYPE StopFrameTimeRecording(
        UINT32 startIndex,
        UINT32 *frameCount,
        float **frameIntervals) = 0;

    virtual nsresult STDMETHODCALLTYPE BeginTabSwitch(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDisplayDPI(
        float *aDisplayDPI) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOuterWindowWithId(
        UINT64 aOuterWindowID,
        nsIDOMWindow **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetContainerElement(
        nsIDOMElement **aContainerElement) = 0;

    virtual nsresult STDMETHODCALLTYPE RenderDocument(
        const void *aRect,
        UINT32 aFlags,
        int aBackgroundColor,
        void *aThebesContext) = 0;

    virtual nsresult STDMETHODCALLTYPE AdvanceTimeAndRefresh(
        INT64 aMilliseconds) = 0;

    virtual nsresult STDMETHODCALLTYPE RestoreNormalRefresh(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsTestControllingRefreshes(
        cpp_bool *aIsTestControllingRefreshes) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsyncPanZoomEnabled(
        cpp_bool *aAsyncPanZoomEnabled) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsyncScrollOffset(
        nsIDOMNode *aNode,
        float aX,
        float aY) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAsyncZoom(
        nsIDOMNode *aRootElement,
        float aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE FlushApzRepaints(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE ZoomToFocusedInput(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE ComputeAnimationDistance(
        nsIDOMElement *element,
        const nsAString *property,
        const nsAString *value1,
        const nsAString *value2,
        double *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE WrapDOMFile(
        nsIFile *aFile,
        nsISupports **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFocusedInputType(
        char **aFocusedInputType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetViewId(
        nsIDOMElement *aElement,
        LONG *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE LeafLayersPartitionWindow(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CheckAndClearPaintedState(
        nsIDOMElement *aElement,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE IsPartOfOpaqueLayer(
        nsIDOMElement *aElement,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE NumberOfAssignedPaintedLayers(
        nsIDOMElement **aElements,
        UINT32 count,
        UINT32 *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFileId(
        const void *aFile,
        JSContext *cx,
        INT64 *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFilePath(
        void *aFile,
        JSContext *cx,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFileReferences(
        const nsAString *aDatabaseName,
        INT64 aId,
        void *aOptions,
        LONG *aRefCnt,
        LONG *aDBRefCnt,
        LONG *aSliceRefCnt,
        JSContext *cx,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE FlushPendingFileDeletions(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE IsIncrementalGCEnabled(
        JSContext *cx,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE StartPCCountProfiling(
        JSContext *cx) = 0;

    virtual nsresult STDMETHODCALLTYPE StopPCCountProfiling(
        JSContext *cx) = 0;

    virtual nsresult STDMETHODCALLTYPE PurgePCCounts(
        JSContext *cx) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPCCountScriptCount(
        JSContext *cx,
        LONG *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPCCountScriptSummary(
        LONG script,
        JSContext *cx,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPCCountScriptContents(
        LONG script,
        JSContext *cx,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPaintingSuppressed(
        cpp_bool *aPaintingSuppressed) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPlugins(
        JSContext *cx,
        void *aPlugins) = 0;

    virtual nsresult STDMETHODCALLTYPE SetScrollPositionClampingScrollPortSize(
        float aWidth,
        float aHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE DisableDialogs(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE EnableDialogs(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE AreDialogsEnabled(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE LoadSheet(
        nsIURI *sheetURI,
        UINT32 type) = 0;

    virtual nsresult STDMETHODCALLTYPE LoadSheetUsingURIString(
        const nsACString *sheetURI,
        UINT32 type) = 0;

    virtual nsresult STDMETHODCALLTYPE AddSheet(
        nsIDOMStyleSheet *sheet,
        UINT32 type) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveSheet(
        nsIURI *sheetURI,
        UINT32 type) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveSheetUsingURIString(
        const nsACString *sheetURI,
        UINT32 type) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsHandlingUserInput(
        cpp_bool *aIsHandlingUserInput) = 0;

    virtual nsresult STDMETHODCALLTYPE AllowScriptsToClose(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsParentWindowMainWidgetVisible(
        cpp_bool *aIsParentWindowMainWidgetVisible) = 0;

    virtual nsresult STDMETHODCALLTYPE IsNodeDisabledForEvents(
        nsIDOMNode *aNode,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPaintFlashing(
        cpp_bool *aPaintFlashing) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPaintFlashing(
        cpp_bool aPaintFlashing) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOMTAStyle(
        nsIDOMElement *aElement,
        const nsAString *aProperty,
        const nsAString *aPseudoElement,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE RequestCompositorProperty(
        const nsAString *aProperty,
        float *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHandlingUserInput(
        cpp_bool aHandlingInput,
        void **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetContentAPZTestData(
        JSContext *cx,
        int _retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCompositorAPZTestData(
        JSContext *cx,
        void *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE PostRestyleSelfEvent(
        nsIDOMElement *aElement) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAudioMuted(
        cpp_bool *aAudioMuted) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAudioMuted(
        cpp_bool aAudioMuted) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAudioVolume(
        float *aAudioVolume) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAudioVolume(
        float aAudioVolume) = 0;

    virtual nsresult STDMETHODCALLTYPE XpconnectArgument(
        nsIDOMWindowUtils *aThis) = 0;

    virtual nsresult STDMETHODCALLTYPE AskPermission(
        void *aRequest) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFramesConstructed(
        UINT64 *aFramesConstructed) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFramesReflowed(
        UINT64 *aFramesReflowed) = 0;

    virtual nsresult STDMETHODCALLTYPE SetChromeMargin(
        LONG aTop,
        LONG aRight,
        LONG aBottom,
        LONG aLeft) = 0;

    virtual nsresult STDMETHODCALLTYPE GetServiceWorkersTestingEnabled(
        cpp_bool *aServiceWorkersTestingEnabled) = 0;

    virtual nsresult STDMETHODCALLTYPE SetServiceWorkersTestingEnabled(
        cpp_bool aServiceWorkersTestingEnabled) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFrameUniformityTestData(
        JSContext *cx,
        int *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE EnterChaosMode(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE LeaveChaosMode(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE HasRuleProcessorUsedByMultipleStyleSets(
        UINT32 aSheetType,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE ForceUseCounterFlush(
        nsIDOMNode *aNode) = 0;

    virtual nsresult STDMETHODCALLTYPE SetNextPaintSyncId(
        LONG aSyncId) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMWindowUtils, 0x46b44e33, 0x13c2, 0x4eb3, 0xbf,0x80, 0x76,0xa4,0xe0,0x85,0x7c,0xcc)
#endif
#else
typedef struct nsIDOMWindowUtilsVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMWindowUtils *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMWindowUtils *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMWindowUtils *This);

    /*** nsIDOMWindowUtils methods ***/
    nsresult (STDMETHODCALLTYPE *GetImageAnimationMode)(
        nsIDOMWindowUtils *This,
        UINT16 *aImageAnimationMode);

    nsresult (STDMETHODCALLTYPE *SetImageAnimationMode)(
        nsIDOMWindowUtils *This,
        UINT16 aImageAnimationMode);

    nsresult (STDMETHODCALLTYPE *GetDocCharsetIsForced)(
        nsIDOMWindowUtils *This,
        cpp_bool *aDocCharsetIsForced);

    nsresult (STDMETHODCALLTYPE *GetCursorType)(
        nsIDOMWindowUtils *This,
        short *_retval);

    nsresult (STDMETHODCALLTYPE *GetDocumentMetadata)(
        nsIDOMWindowUtils *This,
        const nsAString *aName,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *Redraw)(
        nsIDOMWindowUtils *This,
        UINT32 aCount,
        UINT32 *_retval);

    nsresult (STDMETHODCALLTYPE *UpdateLayerTree)(
        nsIDOMWindowUtils *This);

    nsresult (STDMETHODCALLTYPE *GetViewportInfo)(
        nsIDOMWindowUtils *This,
        UINT32 aDisplayWidth,
        UINT32 aDisplayHeight,
        double *aDefaultZoom,
        cpp_bool *aAllowZoom,
        double *aMinZoom,
        double *aMaxZoom,
        UINT32 *aWidth,
        UINT32 *aHeight,
        cpp_bool *aAutoSize);

    nsresult (STDMETHODCALLTYPE *SetDisplayPortForElement)(
        nsIDOMWindowUtils *This,
        float aXPx,
        float aYPx,
        float aWidthPx,
        float aHeightPx,
        nsIDOMElement *aElement,
        UINT32 aPriority);

    nsresult (STDMETHODCALLTYPE *SetDisplayPortMarginsForElement)(
        nsIDOMWindowUtils *This,
        float aLeftMargin,
        float aTopMargin,
        float aRightMargin,
        float aBottomMargin,
        nsIDOMElement *aElement,
        UINT32 aPriority);

    nsresult (STDMETHODCALLTYPE *SetDisplayPortBaseForElement)(
        nsIDOMWindowUtils *This,
        LONG aX,
        LONG aY,
        LONG aWidth,
        LONG aHeight,
        nsIDOMElement *aElement);

    nsresult (STDMETHODCALLTYPE *SetResolution)(
        nsIDOMWindowUtils *This,
        float aResolution);

    nsresult (STDMETHODCALLTYPE *GetResolution)(
        nsIDOMWindowUtils *This,
        float *aResolution);

    nsresult (STDMETHODCALLTYPE *SetResolutionAndScaleTo)(
        nsIDOMWindowUtils *This,
        float aResolution);

    nsresult (STDMETHODCALLTYPE *GetIsResolutionSet)(
        nsIDOMWindowUtils *This,
        cpp_bool *aIsResolutionSet);

    nsresult (STDMETHODCALLTYPE *GetIsFirstPaint)(
        nsIDOMWindowUtils *This,
        cpp_bool *aIsFirstPaint);

    nsresult (STDMETHODCALLTYPE *SetIsFirstPaint)(
        nsIDOMWindowUtils *This,
        cpp_bool aIsFirstPaint);

    nsresult (STDMETHODCALLTYPE *GetPresShellId)(
        nsIDOMWindowUtils *This,
        UINT32 *aPresShellId);

    nsresult (STDMETHODCALLTYPE *SendMouseEvent)(
        nsIDOMWindowUtils *This,
        const nsAString *aType,
        float aX,
        float aY,
        LONG aButton,
        LONG aClickCount,
        LONG aModifiers,
        cpp_bool aIgnoreRootScrollFrame,
        float aPressure,
        UINT16 aInputSourceArg,
        cpp_bool aIsSynthesized,
        UINT8 _argc,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SendPointerEvent)(
        nsIDOMWindowUtils *This,
        const nsAString *aType,
        float aX,
        float aY,
        LONG aButton,
        LONG aClickCount,
        LONG aModifiers,
        cpp_bool aIgnoreRootScrollFrame,
        float aPressure,
        UINT16 aInputSourceArg,
        LONG aPointerId,
        LONG aWidth,
        LONG aHeight,
        LONG tiltX,
        LONG tiltY,
        cpp_bool aIsPrimary,
        cpp_bool aIsSynthesized,
        UINT8 _argc,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SendTouchEvent)(
        nsIDOMWindowUtils *This,
        const nsAString *aType,
        UINT32 *aIdentifiers,
        LONG *aXs,
        LONG *aYs,
        UINT32 *aRxs,
        UINT32 *aRys,
        float *aRotationAngles,
        float *aForces,
        UINT32 count,
        LONG aModifiers,
        cpp_bool aIgnoreRootScrollFrame,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SendMouseEventToWindow)(
        nsIDOMWindowUtils *This,
        const nsAString *aType,
        float aX,
        float aY,
        LONG aButton,
        LONG aClickCount,
        LONG aModifiers,
        cpp_bool aIgnoreRootScrollFrame,
        float aPressure,
        UINT16 aInputSourceArg,
        cpp_bool aIsSynthesized,
        UINT8 _argc);

    nsresult (STDMETHODCALLTYPE *SendPointerEventToWindow)(
        nsIDOMWindowUtils *This,
        const nsAString *aType,
        float aX,
        float aY,
        LONG aButton,
        LONG aClickCount,
        LONG aModifiers,
        cpp_bool aIgnoreRootScrollFrame,
        float aPressure,
        UINT16 aInputSourceArg,
        LONG aPointerId,
        LONG aWidth,
        LONG aHeight,
        LONG aTiltX,
        LONG aTiltY,
        cpp_bool aIsPrimary,
        cpp_bool aIsSynthesized,
        UINT8 _argc);

    nsresult (STDMETHODCALLTYPE *SendTouchEventToWindow)(
        nsIDOMWindowUtils *This,
        const nsAString *aType,
        UINT32 *aIdentifiers,
        LONG *aXs,
        LONG *aYs,
        UINT32 *aRxs,
        UINT32 *aRys,
        float *aRotationAngles,
        float *aForces,
        UINT32 count,
        LONG aModifiers,
        cpp_bool aIgnoreRootScrollFrame,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SendWheelEvent)(
        nsIDOMWindowUtils *This,
        float aX,
        float aY,
        double aDeltaX,
        double aDeltaY,
        double aDeltaZ,
        UINT32 aDeltaMode,
        LONG aModifiers,
        LONG aLineOrPageDeltaX,
        LONG aLineOrPageDeltaY,
        UINT32 aOptions);

    nsresult (STDMETHODCALLTYPE *SendKeyEvent)(
        nsIDOMWindowUtils *This,
        const nsAString *aType,
        LONG aKeyCode,
        LONG aCharCode,
        LONG aModifiers,
        UINT32 aAdditionalFlags,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SendNativeKeyEvent)(
        nsIDOMWindowUtils *This,
        LONG aNativeKeyboardLayout,
        LONG aNativeKeyCode,
        LONG aModifierFlags,
        const nsAString *aCharacters,
        const nsAString *aUnmodifiedCharacters,
        nsIObserver *aObserver);

    nsresult (STDMETHODCALLTYPE *SendNativeMouseEvent)(
        nsIDOMWindowUtils *This,
        LONG aScreenX,
        LONG aScreenY,
        LONG aNativeMessage,
        LONG aModifierFlags,
        nsIDOMElement *aElement,
        nsIObserver *aObserver);

    nsresult (STDMETHODCALLTYPE *SendNativeMouseMove)(
        nsIDOMWindowUtils *This,
        LONG aScreenX,
        LONG aScreenY,
        nsIDOMElement *aElement,
        nsIObserver *aObserver);

    nsresult (STDMETHODCALLTYPE *SendNativeMouseScrollEvent)(
        nsIDOMWindowUtils *This,
        LONG aScreenX,
        LONG aScreenY,
        UINT32 aNativeMessage,
        double aDeltaX,
        double aDeltaY,
        double aDeltaZ,
        UINT32 aModifierFlags,
        UINT32 aAdditionalFlags,
        nsIDOMElement *aElement,
        nsIObserver *aObserver);

    nsresult (STDMETHODCALLTYPE *SendNativeTouchPoint)(
        nsIDOMWindowUtils *This,
        UINT32 aPointerId,
        UINT32 aTouchState,
        LONG aScreenX,
        LONG aScreenY,
        double aPressure,
        UINT32 aOrientation,
        nsIObserver *aObserver);

    nsresult (STDMETHODCALLTYPE *SendNativeTouchTap)(
        nsIDOMWindowUtils *This,
        LONG aScreenX,
        LONG aScreenY,
        cpp_bool aLongTap,
        nsIObserver *aObserver);

    nsresult (STDMETHODCALLTYPE *ClearNativeTouchSequence)(
        nsIDOMWindowUtils *This,
        nsIObserver *aObserver);

    nsresult (STDMETHODCALLTYPE *ActivateNativeMenuItemAt)(
        nsIDOMWindowUtils *This,
        const nsAString *indexString);

    nsresult (STDMETHODCALLTYPE *ForceUpdateNativeMenuAt)(
        nsIDOMWindowUtils *This,
        const nsAString *indexString);

    nsresult (STDMETHODCALLTYPE *Focus)(
        nsIDOMWindowUtils *This,
        nsIDOMElement *aElement);

    nsresult (STDMETHODCALLTYPE *GarbageCollect)(
        nsIDOMWindowUtils *This,
        nsICycleCollectorListener *aListener,
        LONG aExtraForgetSkippableCalls);

    nsresult (STDMETHODCALLTYPE *CycleCollect)(
        nsIDOMWindowUtils *This,
        nsICycleCollectorListener *aListener,
        LONG aExtraForgetSkippableCalls);

    nsresult (STDMETHODCALLTYPE *RunNextCollectorTimer)(
        nsIDOMWindowUtils *This);

    nsresult (STDMETHODCALLTYPE *SendSimpleGestureEvent)(
        nsIDOMWindowUtils *This,
        const nsAString *aType,
        float aX,
        float aY,
        UINT32 aDirection,
        double aDelta,
        LONG aModifiers,
        UINT32 aClickCount);

    nsresult (STDMETHODCALLTYPE *ElementFromPoint)(
        nsIDOMWindowUtils *This,
        float aX,
        float aY,
        cpp_bool aIgnoreRootScrollFrame,
        cpp_bool aFlushLayout,
        nsIDOMElement **_retval);

    nsresult (STDMETHODCALLTYPE *NodesFromRect)(
        nsIDOMWindowUtils *This,
        float aX,
        float aY,
        float aTopSize,
        float aRightSize,
        float aBottomSize,
        float aLeftSize,
        cpp_bool aIgnoreRootScrollFrame,
        cpp_bool aFlushLayout,
        nsIDOMNodeList **_retval);

    nsresult (STDMETHODCALLTYPE *GetTranslationNodes)(
        nsIDOMWindowUtils *This,
        nsIDOMNode *aRoot,
        int **_retval);

    nsresult (STDMETHODCALLTYPE *CompareCanvases)(
        nsIDOMWindowUtils *This,
        nsIDOMHTMLCanvasElement *aCanvas1,
        nsIDOMHTMLCanvasElement *aCanvas2,
        UINT32 *aMaxDifference,
        UINT32 *_retval);

    nsresult (STDMETHODCALLTYPE *GetIsMozAfterPaintPending)(
        nsIDOMWindowUtils *This,
        cpp_bool *aIsMozAfterPaintPending);

    nsresult (STDMETHODCALLTYPE *SuppressEventHandling)(
        nsIDOMWindowUtils *This,
        cpp_bool aSuppress);

    nsresult (STDMETHODCALLTYPE *ClearMozAfterPaintEvents)(
        nsIDOMWindowUtils *This);

    nsresult (STDMETHODCALLTYPE *DisableNonTestMouseEvents)(
        nsIDOMWindowUtils *This,
        cpp_bool aDisable);

    nsresult (STDMETHODCALLTYPE *GetScrollXY)(
        nsIDOMWindowUtils *This,
        cpp_bool aFlushLayout,
        LONG *aScrollX,
        LONG *aScrollY);

    nsresult (STDMETHODCALLTYPE *GetScrollXYFloat)(
        nsIDOMWindowUtils *This,
        cpp_bool aFlushLayout,
        float *aScrollX,
        float *aScrollY);

    nsresult (STDMETHODCALLTYPE *GetScrollbarSize)(
        nsIDOMWindowUtils *This,
        cpp_bool aFlushLayout,
        LONG *aWidth,
        LONG *aHeight);

    nsresult (STDMETHODCALLTYPE *GetBoundsWithoutFlushing)(
        nsIDOMWindowUtils *This,
        nsIDOMElement *aElement,
        nsIDOMClientRect **_retval);

    nsresult (STDMETHODCALLTYPE *GetRootBounds)(
        nsIDOMWindowUtils *This,
        nsIDOMClientRect **_retval);

    nsresult (STDMETHODCALLTYPE *GetIMEIsOpen)(
        nsIDOMWindowUtils *This,
        cpp_bool *aIMEIsOpen);

    nsresult (STDMETHODCALLTYPE *GetIMEStatus)(
        nsIDOMWindowUtils *This,
        UINT32 *aIMEStatus);

    nsresult (STDMETHODCALLTYPE *GetScreenPixelsPerCSSPixel)(
        nsIDOMWindowUtils *This,
        float *aScreenPixelsPerCSSPixel);

    nsresult (STDMETHODCALLTYPE *GetFullZoom)(
        nsIDOMWindowUtils *This,
        float *aFullZoom);

    nsresult (STDMETHODCALLTYPE *DispatchDOMEventViaPresShell)(
        nsIDOMWindowUtils *This,
        nsIDOMNode *aTarget,
        nsIDOMEvent *aEvent,
        cpp_bool aTrusted,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *DispatchEventToChromeOnly)(
        nsIDOMWindowUtils *This,
        nsIDOMEventTarget *aTarget,
        nsIDOMEvent *aEvent,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetClassName)(
        nsIDOMWindowUtils *This,
        const void *aObject,
        JSContext *cx,
        char **_retval);

    nsresult (STDMETHODCALLTYPE *SendContentCommandEvent)(
        nsIDOMWindowUtils *This,
        const nsAString *aType,
        nsITransferable *aTransferable);

    nsresult (STDMETHODCALLTYPE *SendQueryContentEvent)(
        nsIDOMWindowUtils *This,
        UINT32 aType,
        UINT32 aOffset,
        UINT32 aLength,
        LONG aX,
        LONG aY,
        UINT32 aAdditionalFlags,
        nsIQueryContentEventResult **_retval);

    nsresult (STDMETHODCALLTYPE *RemoteFrameFullscreenChanged)(
        nsIDOMWindowUtils *This,
        nsIDOMElement *aFrameElement);

    nsresult (STDMETHODCALLTYPE *RemoteFrameFullscreenReverted)(
        nsIDOMWindowUtils *This);

    nsresult (STDMETHODCALLTYPE *HandleFullscreenRequests)(
        nsIDOMWindowUtils *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *ExitFullscreen)(
        nsIDOMWindowUtils *This);

    nsresult (STDMETHODCALLTYPE *SendSelectionSetEvent)(
        nsIDOMWindowUtils *This,
        UINT32 aOffset,
        UINT32 aLength,
        UINT32 aAdditionalFlags,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SelectAtPoint)(
        nsIDOMWindowUtils *This,
        float aX,
        float aY,
        UINT32 aSelectBehavior,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetVisitedDependentComputedStyle)(
        nsIDOMWindowUtils *This,
        nsIDOMElement *aElement,
        const nsAString *aPseudoElement,
        const nsAString *aPropertyName,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *GetOuterWindowID)(
        nsIDOMWindowUtils *This,
        UINT64 *aOuterWindowID);

    nsresult (STDMETHODCALLTYPE *GetCurrentInnerWindowID)(
        nsIDOMWindowUtils *This,
        UINT64 *aCurrentInnerWindowID);

    nsresult (STDMETHODCALLTYPE *EnterModalState)(
        nsIDOMWindowUtils *This);

    nsresult (STDMETHODCALLTYPE *LeaveModalState)(
        nsIDOMWindowUtils *This);

    nsresult (STDMETHODCALLTYPE *IsInModalState)(
        nsIDOMWindowUtils *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetDesktopModeViewport)(
        nsIDOMWindowUtils *This,
        cpp_bool aDesktopModeViewport);

    nsresult (STDMETHODCALLTYPE *SuspendTimeouts)(
        nsIDOMWindowUtils *This);

    nsresult (STDMETHODCALLTYPE *ResumeTimeouts)(
        nsIDOMWindowUtils *This);

    nsresult (STDMETHODCALLTYPE *GetLayerManagerType)(
        nsIDOMWindowUtils *This,
        nsAString *aLayerManagerType);

    nsresult (STDMETHODCALLTYPE *GetLayerManagerRemote)(
        nsIDOMWindowUtils *This,
        cpp_bool *aLayerManagerRemote);

    nsresult (STDMETHODCALLTYPE *GetSupportsHardwareH264Decoding)(
        nsIDOMWindowUtils *This,
        void *aSupportsHardwareH264Decoding);

    nsresult (STDMETHODCALLTYPE *StartFrameTimeRecording)(
        nsIDOMWindowUtils *This,
        UINT32 *startIndex);

    nsresult (STDMETHODCALLTYPE *StopFrameTimeRecording)(
        nsIDOMWindowUtils *This,
        UINT32 startIndex,
        UINT32 *frameCount,
        float **frameIntervals);

    nsresult (STDMETHODCALLTYPE *BeginTabSwitch)(
        nsIDOMWindowUtils *This);

    nsresult (STDMETHODCALLTYPE *GetDisplayDPI)(
        nsIDOMWindowUtils *This,
        float *aDisplayDPI);

    nsresult (STDMETHODCALLTYPE *GetOuterWindowWithId)(
        nsIDOMWindowUtils *This,
        UINT64 aOuterWindowID,
        nsIDOMWindow **_retval);

    nsresult (STDMETHODCALLTYPE *GetContainerElement)(
        nsIDOMWindowUtils *This,
        nsIDOMElement **aContainerElement);

    nsresult (STDMETHODCALLTYPE *RenderDocument)(
        nsIDOMWindowUtils *This,
        const void *aRect,
        UINT32 aFlags,
        int aBackgroundColor,
        void *aThebesContext);

    nsresult (STDMETHODCALLTYPE *AdvanceTimeAndRefresh)(
        nsIDOMWindowUtils *This,
        INT64 aMilliseconds);

    nsresult (STDMETHODCALLTYPE *RestoreNormalRefresh)(
        nsIDOMWindowUtils *This);

    nsresult (STDMETHODCALLTYPE *GetIsTestControllingRefreshes)(
        nsIDOMWindowUtils *This,
        cpp_bool *aIsTestControllingRefreshes);

    nsresult (STDMETHODCALLTYPE *GetAsyncPanZoomEnabled)(
        nsIDOMWindowUtils *This,
        cpp_bool *aAsyncPanZoomEnabled);

    nsresult (STDMETHODCALLTYPE *SetAsyncScrollOffset)(
        nsIDOMWindowUtils *This,
        nsIDOMNode *aNode,
        float aX,
        float aY);

    nsresult (STDMETHODCALLTYPE *SetAsyncZoom)(
        nsIDOMWindowUtils *This,
        nsIDOMNode *aRootElement,
        float aValue);

    nsresult (STDMETHODCALLTYPE *FlushApzRepaints)(
        nsIDOMWindowUtils *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *ZoomToFocusedInput)(
        nsIDOMWindowUtils *This);

    nsresult (STDMETHODCALLTYPE *ComputeAnimationDistance)(
        nsIDOMWindowUtils *This,
        nsIDOMElement *element,
        const nsAString *property,
        const nsAString *value1,
        const nsAString *value2,
        double *_retval);

    nsresult (STDMETHODCALLTYPE *WrapDOMFile)(
        nsIDOMWindowUtils *This,
        nsIFile *aFile,
        nsISupports **_retval);

    nsresult (STDMETHODCALLTYPE *GetFocusedInputType)(
        nsIDOMWindowUtils *This,
        char **aFocusedInputType);

    nsresult (STDMETHODCALLTYPE *GetViewId)(
        nsIDOMWindowUtils *This,
        nsIDOMElement *aElement,
        LONG *_retval);

    nsresult (STDMETHODCALLTYPE *LeafLayersPartitionWindow)(
        nsIDOMWindowUtils *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CheckAndClearPaintedState)(
        nsIDOMWindowUtils *This,
        nsIDOMElement *aElement,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *IsPartOfOpaqueLayer)(
        nsIDOMWindowUtils *This,
        nsIDOMElement *aElement,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *NumberOfAssignedPaintedLayers)(
        nsIDOMWindowUtils *This,
        nsIDOMElement **aElements,
        UINT32 count,
        UINT32 *_retval);

    nsresult (STDMETHODCALLTYPE *GetFileId)(
        nsIDOMWindowUtils *This,
        const void *aFile,
        JSContext *cx,
        INT64 *_retval);

    nsresult (STDMETHODCALLTYPE *GetFilePath)(
        nsIDOMWindowUtils *This,
        void *aFile,
        JSContext *cx,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *GetFileReferences)(
        nsIDOMWindowUtils *This,
        const nsAString *aDatabaseName,
        INT64 aId,
        void *aOptions,
        LONG *aRefCnt,
        LONG *aDBRefCnt,
        LONG *aSliceRefCnt,
        JSContext *cx,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *FlushPendingFileDeletions)(
        nsIDOMWindowUtils *This);

    nsresult (STDMETHODCALLTYPE *IsIncrementalGCEnabled)(
        nsIDOMWindowUtils *This,
        JSContext *cx,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *StartPCCountProfiling)(
        nsIDOMWindowUtils *This,
        JSContext *cx);

    nsresult (STDMETHODCALLTYPE *StopPCCountProfiling)(
        nsIDOMWindowUtils *This,
        JSContext *cx);

    nsresult (STDMETHODCALLTYPE *PurgePCCounts)(
        nsIDOMWindowUtils *This,
        JSContext *cx);

    nsresult (STDMETHODCALLTYPE *GetPCCountScriptCount)(
        nsIDOMWindowUtils *This,
        JSContext *cx,
        LONG *_retval);

    nsresult (STDMETHODCALLTYPE *GetPCCountScriptSummary)(
        nsIDOMWindowUtils *This,
        LONG script,
        JSContext *cx,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *GetPCCountScriptContents)(
        nsIDOMWindowUtils *This,
        LONG script,
        JSContext *cx,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *GetPaintingSuppressed)(
        nsIDOMWindowUtils *This,
        cpp_bool *aPaintingSuppressed);

    nsresult (STDMETHODCALLTYPE *GetPlugins)(
        nsIDOMWindowUtils *This,
        JSContext *cx,
        void *aPlugins);

    nsresult (STDMETHODCALLTYPE *SetScrollPositionClampingScrollPortSize)(
        nsIDOMWindowUtils *This,
        float aWidth,
        float aHeight);

    nsresult (STDMETHODCALLTYPE *DisableDialogs)(
        nsIDOMWindowUtils *This);

    nsresult (STDMETHODCALLTYPE *EnableDialogs)(
        nsIDOMWindowUtils *This);

    nsresult (STDMETHODCALLTYPE *AreDialogsEnabled)(
        nsIDOMWindowUtils *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *LoadSheet)(
        nsIDOMWindowUtils *This,
        nsIURI *sheetURI,
        UINT32 type);

    nsresult (STDMETHODCALLTYPE *LoadSheetUsingURIString)(
        nsIDOMWindowUtils *This,
        const nsACString *sheetURI,
        UINT32 type);

    nsresult (STDMETHODCALLTYPE *AddSheet)(
        nsIDOMWindowUtils *This,
        nsIDOMStyleSheet *sheet,
        UINT32 type);

    nsresult (STDMETHODCALLTYPE *RemoveSheet)(
        nsIDOMWindowUtils *This,
        nsIURI *sheetURI,
        UINT32 type);

    nsresult (STDMETHODCALLTYPE *RemoveSheetUsingURIString)(
        nsIDOMWindowUtils *This,
        const nsACString *sheetURI,
        UINT32 type);

    nsresult (STDMETHODCALLTYPE *GetIsHandlingUserInput)(
        nsIDOMWindowUtils *This,
        cpp_bool *aIsHandlingUserInput);

    nsresult (STDMETHODCALLTYPE *AllowScriptsToClose)(
        nsIDOMWindowUtils *This);

    nsresult (STDMETHODCALLTYPE *GetIsParentWindowMainWidgetVisible)(
        nsIDOMWindowUtils *This,
        cpp_bool *aIsParentWindowMainWidgetVisible);

    nsresult (STDMETHODCALLTYPE *IsNodeDisabledForEvents)(
        nsIDOMWindowUtils *This,
        nsIDOMNode *aNode,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetPaintFlashing)(
        nsIDOMWindowUtils *This,
        cpp_bool *aPaintFlashing);

    nsresult (STDMETHODCALLTYPE *SetPaintFlashing)(
        nsIDOMWindowUtils *This,
        cpp_bool aPaintFlashing);

    nsresult (STDMETHODCALLTYPE *GetOMTAStyle)(
        nsIDOMWindowUtils *This,
        nsIDOMElement *aElement,
        const nsAString *aProperty,
        const nsAString *aPseudoElement,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *RequestCompositorProperty)(
        nsIDOMWindowUtils *This,
        const nsAString *aProperty,
        float *_retval);

    nsresult (STDMETHODCALLTYPE *SetHandlingUserInput)(
        nsIDOMWindowUtils *This,
        cpp_bool aHandlingInput,
        void **_retval);

    nsresult (STDMETHODCALLTYPE *GetContentAPZTestData)(
        nsIDOMWindowUtils *This,
        JSContext *cx,
        int _retval);

    nsresult (STDMETHODCALLTYPE *GetCompositorAPZTestData)(
        nsIDOMWindowUtils *This,
        JSContext *cx,
        void *_retval);

    nsresult (STDMETHODCALLTYPE *PostRestyleSelfEvent)(
        nsIDOMWindowUtils *This,
        nsIDOMElement *aElement);

    nsresult (STDMETHODCALLTYPE *GetAudioMuted)(
        nsIDOMWindowUtils *This,
        cpp_bool *aAudioMuted);

    nsresult (STDMETHODCALLTYPE *SetAudioMuted)(
        nsIDOMWindowUtils *This,
        cpp_bool aAudioMuted);

    nsresult (STDMETHODCALLTYPE *GetAudioVolume)(
        nsIDOMWindowUtils *This,
        float *aAudioVolume);

    nsresult (STDMETHODCALLTYPE *SetAudioVolume)(
        nsIDOMWindowUtils *This,
        float aAudioVolume);

    nsresult (STDMETHODCALLTYPE *XpconnectArgument)(
        nsIDOMWindowUtils *This,
        nsIDOMWindowUtils *aThis);

    nsresult (STDMETHODCALLTYPE *AskPermission)(
        nsIDOMWindowUtils *This,
        void *aRequest);

    nsresult (STDMETHODCALLTYPE *GetFramesConstructed)(
        nsIDOMWindowUtils *This,
        UINT64 *aFramesConstructed);

    nsresult (STDMETHODCALLTYPE *GetFramesReflowed)(
        nsIDOMWindowUtils *This,
        UINT64 *aFramesReflowed);

    nsresult (STDMETHODCALLTYPE *SetChromeMargin)(
        nsIDOMWindowUtils *This,
        LONG aTop,
        LONG aRight,
        LONG aBottom,
        LONG aLeft);

    nsresult (STDMETHODCALLTYPE *GetServiceWorkersTestingEnabled)(
        nsIDOMWindowUtils *This,
        cpp_bool *aServiceWorkersTestingEnabled);

    nsresult (STDMETHODCALLTYPE *SetServiceWorkersTestingEnabled)(
        nsIDOMWindowUtils *This,
        cpp_bool aServiceWorkersTestingEnabled);

    nsresult (STDMETHODCALLTYPE *GetFrameUniformityTestData)(
        nsIDOMWindowUtils *This,
        JSContext *cx,
        int *_retval);

    nsresult (STDMETHODCALLTYPE *EnterChaosMode)(
        nsIDOMWindowUtils *This);

    nsresult (STDMETHODCALLTYPE *LeaveChaosMode)(
        nsIDOMWindowUtils *This);

    nsresult (STDMETHODCALLTYPE *HasRuleProcessorUsedByMultipleStyleSets)(
        nsIDOMWindowUtils *This,
        UINT32 aSheetType,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *ForceUseCounterFlush)(
        nsIDOMWindowUtils *This,
        nsIDOMNode *aNode);

    nsresult (STDMETHODCALLTYPE *SetNextPaintSyncId)(
        nsIDOMWindowUtils *This,
        LONG aSyncId);

    END_INTERFACE
} nsIDOMWindowUtilsVtbl;

interface nsIDOMWindowUtils {
    CONST_VTBL nsIDOMWindowUtilsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMWindowUtils_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMWindowUtils_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMWindowUtils_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMWindowUtils methods ***/
#define nsIDOMWindowUtils_GetImageAnimationMode(This,aImageAnimationMode) (This)->lpVtbl->GetImageAnimationMode(This,aImageAnimationMode)
#define nsIDOMWindowUtils_SetImageAnimationMode(This,aImageAnimationMode) (This)->lpVtbl->SetImageAnimationMode(This,aImageAnimationMode)
#define nsIDOMWindowUtils_GetDocCharsetIsForced(This,aDocCharsetIsForced) (This)->lpVtbl->GetDocCharsetIsForced(This,aDocCharsetIsForced)
#define nsIDOMWindowUtils_GetCursorType(This,_retval) (This)->lpVtbl->GetCursorType(This,_retval)
#define nsIDOMWindowUtils_GetDocumentMetadata(This,aName,_retval) (This)->lpVtbl->GetDocumentMetadata(This,aName,_retval)
#define nsIDOMWindowUtils_Redraw(This,aCount,_retval) (This)->lpVtbl->Redraw(This,aCount,_retval)
#define nsIDOMWindowUtils_UpdateLayerTree(This) (This)->lpVtbl->UpdateLayerTree(This)
#define nsIDOMWindowUtils_GetViewportInfo(This,aDisplayWidth,aDisplayHeight,aDefaultZoom,aAllowZoom,aMinZoom,aMaxZoom,aWidth,aHeight,aAutoSize) (This)->lpVtbl->GetViewportInfo(This,aDisplayWidth,aDisplayHeight,aDefaultZoom,aAllowZoom,aMinZoom,aMaxZoom,aWidth,aHeight,aAutoSize)
#define nsIDOMWindowUtils_SetDisplayPortForElement(This,aXPx,aYPx,aWidthPx,aHeightPx,aElement,aPriority) (This)->lpVtbl->SetDisplayPortForElement(This,aXPx,aYPx,aWidthPx,aHeightPx,aElement,aPriority)
#define nsIDOMWindowUtils_SetDisplayPortMarginsForElement(This,aLeftMargin,aTopMargin,aRightMargin,aBottomMargin,aElement,aPriority) (This)->lpVtbl->SetDisplayPortMarginsForElement(This,aLeftMargin,aTopMargin,aRightMargin,aBottomMargin,aElement,aPriority)
#define nsIDOMWindowUtils_SetDisplayPortBaseForElement(This,aX,aY,aWidth,aHeight,aElement) (This)->lpVtbl->SetDisplayPortBaseForElement(This,aX,aY,aWidth,aHeight,aElement)
#define nsIDOMWindowUtils_SetResolution(This,aResolution) (This)->lpVtbl->SetResolution(This,aResolution)
#define nsIDOMWindowUtils_GetResolution(This,aResolution) (This)->lpVtbl->GetResolution(This,aResolution)
#define nsIDOMWindowUtils_SetResolutionAndScaleTo(This,aResolution) (This)->lpVtbl->SetResolutionAndScaleTo(This,aResolution)
#define nsIDOMWindowUtils_GetIsResolutionSet(This,aIsResolutionSet) (This)->lpVtbl->GetIsResolutionSet(This,aIsResolutionSet)
#define nsIDOMWindowUtils_GetIsFirstPaint(This,aIsFirstPaint) (This)->lpVtbl->GetIsFirstPaint(This,aIsFirstPaint)
#define nsIDOMWindowUtils_SetIsFirstPaint(This,aIsFirstPaint) (This)->lpVtbl->SetIsFirstPaint(This,aIsFirstPaint)
#define nsIDOMWindowUtils_GetPresShellId(This,aPresShellId) (This)->lpVtbl->GetPresShellId(This,aPresShellId)
#define nsIDOMWindowUtils_SendMouseEvent(This,aType,aX,aY,aButton,aClickCount,aModifiers,aIgnoreRootScrollFrame,aPressure,aInputSourceArg,aIsSynthesized,_argc,_retval) (This)->lpVtbl->SendMouseEvent(This,aType,aX,aY,aButton,aClickCount,aModifiers,aIgnoreRootScrollFrame,aPressure,aInputSourceArg,aIsSynthesized,_argc,_retval)
#define nsIDOMWindowUtils_SendPointerEvent(This,aType,aX,aY,aButton,aClickCount,aModifiers,aIgnoreRootScrollFrame,aPressure,aInputSourceArg,aPointerId,aWidth,aHeight,tiltX,tiltY,aIsPrimary,aIsSynthesized,_argc,_retval) (This)->lpVtbl->SendPointerEvent(This,aType,aX,aY,aButton,aClickCount,aModifiers,aIgnoreRootScrollFrame,aPressure,aInputSourceArg,aPointerId,aWidth,aHeight,tiltX,tiltY,aIsPrimary,aIsSynthesized,_argc,_retval)
#define nsIDOMWindowUtils_SendTouchEvent(This,aType,aIdentifiers,aXs,aYs,aRxs,aRys,aRotationAngles,aForces,count,aModifiers,aIgnoreRootScrollFrame,_retval) (This)->lpVtbl->SendTouchEvent(This,aType,aIdentifiers,aXs,aYs,aRxs,aRys,aRotationAngles,aForces,count,aModifiers,aIgnoreRootScrollFrame,_retval)
#define nsIDOMWindowUtils_SendMouseEventToWindow(This,aType,aX,aY,aButton,aClickCount,aModifiers,aIgnoreRootScrollFrame,aPressure,aInputSourceArg,aIsSynthesized,_argc) (This)->lpVtbl->SendMouseEventToWindow(This,aType,aX,aY,aButton,aClickCount,aModifiers,aIgnoreRootScrollFrame,aPressure,aInputSourceArg,aIsSynthesized,_argc)
#define nsIDOMWindowUtils_SendPointerEventToWindow(This,aType,aX,aY,aButton,aClickCount,aModifiers,aIgnoreRootScrollFrame,aPressure,aInputSourceArg,aPointerId,aWidth,aHeight,aTiltX,aTiltY,aIsPrimary,aIsSynthesized,_argc) (This)->lpVtbl->SendPointerEventToWindow(This,aType,aX,aY,aButton,aClickCount,aModifiers,aIgnoreRootScrollFrame,aPressure,aInputSourceArg,aPointerId,aWidth,aHeight,aTiltX,aTiltY,aIsPrimary,aIsSynthesized,_argc)
#define nsIDOMWindowUtils_SendTouchEventToWindow(This,aType,aIdentifiers,aXs,aYs,aRxs,aRys,aRotationAngles,aForces,count,aModifiers,aIgnoreRootScrollFrame,_retval) (This)->lpVtbl->SendTouchEventToWindow(This,aType,aIdentifiers,aXs,aYs,aRxs,aRys,aRotationAngles,aForces,count,aModifiers,aIgnoreRootScrollFrame,_retval)
#define nsIDOMWindowUtils_SendWheelEvent(This,aX,aY,aDeltaX,aDeltaY,aDeltaZ,aDeltaMode,aModifiers,aLineOrPageDeltaX,aLineOrPageDeltaY,aOptions) (This)->lpVtbl->SendWheelEvent(This,aX,aY,aDeltaX,aDeltaY,aDeltaZ,aDeltaMode,aModifiers,aLineOrPageDeltaX,aLineOrPageDeltaY,aOptions)
#define nsIDOMWindowUtils_SendKeyEvent(This,aType,aKeyCode,aCharCode,aModifiers,aAdditionalFlags,_retval) (This)->lpVtbl->SendKeyEvent(This,aType,aKeyCode,aCharCode,aModifiers,aAdditionalFlags,_retval)
#define nsIDOMWindowUtils_SendNativeKeyEvent(This,aNativeKeyboardLayout,aNativeKeyCode,aModifierFlags,aCharacters,aUnmodifiedCharacters,aObserver) (This)->lpVtbl->SendNativeKeyEvent(This,aNativeKeyboardLayout,aNativeKeyCode,aModifierFlags,aCharacters,aUnmodifiedCharacters,aObserver)
#define nsIDOMWindowUtils_SendNativeMouseEvent(This,aScreenX,aScreenY,aNativeMessage,aModifierFlags,aElement,aObserver) (This)->lpVtbl->SendNativeMouseEvent(This,aScreenX,aScreenY,aNativeMessage,aModifierFlags,aElement,aObserver)
#define nsIDOMWindowUtils_SendNativeMouseMove(This,aScreenX,aScreenY,aElement,aObserver) (This)->lpVtbl->SendNativeMouseMove(This,aScreenX,aScreenY,aElement,aObserver)
#define nsIDOMWindowUtils_SendNativeMouseScrollEvent(This,aScreenX,aScreenY,aNativeMessage,aDeltaX,aDeltaY,aDeltaZ,aModifierFlags,aAdditionalFlags,aElement,aObserver) (This)->lpVtbl->SendNativeMouseScrollEvent(This,aScreenX,aScreenY,aNativeMessage,aDeltaX,aDeltaY,aDeltaZ,aModifierFlags,aAdditionalFlags,aElement,aObserver)
#define nsIDOMWindowUtils_SendNativeTouchPoint(This,aPointerId,aTouchState,aScreenX,aScreenY,aPressure,aOrientation,aObserver) (This)->lpVtbl->SendNativeTouchPoint(This,aPointerId,aTouchState,aScreenX,aScreenY,aPressure,aOrientation,aObserver)
#define nsIDOMWindowUtils_SendNativeTouchTap(This,aScreenX,aScreenY,aLongTap,aObserver) (This)->lpVtbl->SendNativeTouchTap(This,aScreenX,aScreenY,aLongTap,aObserver)
#define nsIDOMWindowUtils_ClearNativeTouchSequence(This,aObserver) (This)->lpVtbl->ClearNativeTouchSequence(This,aObserver)
#define nsIDOMWindowUtils_ActivateNativeMenuItemAt(This,indexString) (This)->lpVtbl->ActivateNativeMenuItemAt(This,indexString)
#define nsIDOMWindowUtils_ForceUpdateNativeMenuAt(This,indexString) (This)->lpVtbl->ForceUpdateNativeMenuAt(This,indexString)
#define nsIDOMWindowUtils_Focus(This,aElement) (This)->lpVtbl->Focus(This,aElement)
#define nsIDOMWindowUtils_GarbageCollect(This,aListener,aExtraForgetSkippableCalls) (This)->lpVtbl->GarbageCollect(This,aListener,aExtraForgetSkippableCalls)
#define nsIDOMWindowUtils_CycleCollect(This,aListener,aExtraForgetSkippableCalls) (This)->lpVtbl->CycleCollect(This,aListener,aExtraForgetSkippableCalls)
#define nsIDOMWindowUtils_RunNextCollectorTimer(This) (This)->lpVtbl->RunNextCollectorTimer(This)
#define nsIDOMWindowUtils_SendSimpleGestureEvent(This,aType,aX,aY,aDirection,aDelta,aModifiers,aClickCount) (This)->lpVtbl->SendSimpleGestureEvent(This,aType,aX,aY,aDirection,aDelta,aModifiers,aClickCount)
#define nsIDOMWindowUtils_ElementFromPoint(This,aX,aY,aIgnoreRootScrollFrame,aFlushLayout,_retval) (This)->lpVtbl->ElementFromPoint(This,aX,aY,aIgnoreRootScrollFrame,aFlushLayout,_retval)
#define nsIDOMWindowUtils_NodesFromRect(This,aX,aY,aTopSize,aRightSize,aBottomSize,aLeftSize,aIgnoreRootScrollFrame,aFlushLayout,_retval) (This)->lpVtbl->NodesFromRect(This,aX,aY,aTopSize,aRightSize,aBottomSize,aLeftSize,aIgnoreRootScrollFrame,aFlushLayout,_retval)
#define nsIDOMWindowUtils_GetTranslationNodes(This,aRoot,_retval) (This)->lpVtbl->GetTranslationNodes(This,aRoot,_retval)
#define nsIDOMWindowUtils_CompareCanvases(This,aCanvas1,aCanvas2,aMaxDifference,_retval) (This)->lpVtbl->CompareCanvases(This,aCanvas1,aCanvas2,aMaxDifference,_retval)
#define nsIDOMWindowUtils_GetIsMozAfterPaintPending(This,aIsMozAfterPaintPending) (This)->lpVtbl->GetIsMozAfterPaintPending(This,aIsMozAfterPaintPending)
#define nsIDOMWindowUtils_SuppressEventHandling(This,aSuppress) (This)->lpVtbl->SuppressEventHandling(This,aSuppress)
#define nsIDOMWindowUtils_ClearMozAfterPaintEvents(This) (This)->lpVtbl->ClearMozAfterPaintEvents(This)
#define nsIDOMWindowUtils_DisableNonTestMouseEvents(This,aDisable) (This)->lpVtbl->DisableNonTestMouseEvents(This,aDisable)
#define nsIDOMWindowUtils_GetScrollXY(This,aFlushLayout,aScrollX,aScrollY) (This)->lpVtbl->GetScrollXY(This,aFlushLayout,aScrollX,aScrollY)
#define nsIDOMWindowUtils_GetScrollXYFloat(This,aFlushLayout,aScrollX,aScrollY) (This)->lpVtbl->GetScrollXYFloat(This,aFlushLayout,aScrollX,aScrollY)
#define nsIDOMWindowUtils_GetScrollbarSize(This,aFlushLayout,aWidth,aHeight) (This)->lpVtbl->GetScrollbarSize(This,aFlushLayout,aWidth,aHeight)
#define nsIDOMWindowUtils_GetBoundsWithoutFlushing(This,aElement,_retval) (This)->lpVtbl->GetBoundsWithoutFlushing(This,aElement,_retval)
#define nsIDOMWindowUtils_GetRootBounds(This,_retval) (This)->lpVtbl->GetRootBounds(This,_retval)
#define nsIDOMWindowUtils_GetIMEIsOpen(This,aIMEIsOpen) (This)->lpVtbl->GetIMEIsOpen(This,aIMEIsOpen)
#define nsIDOMWindowUtils_GetIMEStatus(This,aIMEStatus) (This)->lpVtbl->GetIMEStatus(This,aIMEStatus)
#define nsIDOMWindowUtils_GetScreenPixelsPerCSSPixel(This,aScreenPixelsPerCSSPixel) (This)->lpVtbl->GetScreenPixelsPerCSSPixel(This,aScreenPixelsPerCSSPixel)
#define nsIDOMWindowUtils_GetFullZoom(This,aFullZoom) (This)->lpVtbl->GetFullZoom(This,aFullZoom)
#define nsIDOMWindowUtils_DispatchDOMEventViaPresShell(This,aTarget,aEvent,aTrusted,_retval) (This)->lpVtbl->DispatchDOMEventViaPresShell(This,aTarget,aEvent,aTrusted,_retval)
#define nsIDOMWindowUtils_DispatchEventToChromeOnly(This,aTarget,aEvent,_retval) (This)->lpVtbl->DispatchEventToChromeOnly(This,aTarget,aEvent,_retval)
#define nsIDOMWindowUtils_GetClassName(This,aObject,cx,_retval) (This)->lpVtbl->GetClassName(This,aObject,cx,_retval)
#define nsIDOMWindowUtils_SendContentCommandEvent(This,aType,aTransferable) (This)->lpVtbl->SendContentCommandEvent(This,aType,aTransferable)
#define nsIDOMWindowUtils_SendQueryContentEvent(This,aType,aOffset,aLength,aX,aY,aAdditionalFlags,_retval) (This)->lpVtbl->SendQueryContentEvent(This,aType,aOffset,aLength,aX,aY,aAdditionalFlags,_retval)
#define nsIDOMWindowUtils_RemoteFrameFullscreenChanged(This,aFrameElement) (This)->lpVtbl->RemoteFrameFullscreenChanged(This,aFrameElement)
#define nsIDOMWindowUtils_RemoteFrameFullscreenReverted(This) (This)->lpVtbl->RemoteFrameFullscreenReverted(This)
#define nsIDOMWindowUtils_HandleFullscreenRequests(This,_retval) (This)->lpVtbl->HandleFullscreenRequests(This,_retval)
#define nsIDOMWindowUtils_ExitFullscreen(This) (This)->lpVtbl->ExitFullscreen(This)
#define nsIDOMWindowUtils_SendSelectionSetEvent(This,aOffset,aLength,aAdditionalFlags,_retval) (This)->lpVtbl->SendSelectionSetEvent(This,aOffset,aLength,aAdditionalFlags,_retval)
#define nsIDOMWindowUtils_SelectAtPoint(This,aX,aY,aSelectBehavior,_retval) (This)->lpVtbl->SelectAtPoint(This,aX,aY,aSelectBehavior,_retval)
#define nsIDOMWindowUtils_GetVisitedDependentComputedStyle(This,aElement,aPseudoElement,aPropertyName,_retval) (This)->lpVtbl->GetVisitedDependentComputedStyle(This,aElement,aPseudoElement,aPropertyName,_retval)
#define nsIDOMWindowUtils_GetOuterWindowID(This,aOuterWindowID) (This)->lpVtbl->GetOuterWindowID(This,aOuterWindowID)
#define nsIDOMWindowUtils_GetCurrentInnerWindowID(This,aCurrentInnerWindowID) (This)->lpVtbl->GetCurrentInnerWindowID(This,aCurrentInnerWindowID)
#define nsIDOMWindowUtils_EnterModalState(This) (This)->lpVtbl->EnterModalState(This)
#define nsIDOMWindowUtils_LeaveModalState(This) (This)->lpVtbl->LeaveModalState(This)
#define nsIDOMWindowUtils_IsInModalState(This,_retval) (This)->lpVtbl->IsInModalState(This,_retval)
#define nsIDOMWindowUtils_SetDesktopModeViewport(This,aDesktopModeViewport) (This)->lpVtbl->SetDesktopModeViewport(This,aDesktopModeViewport)
#define nsIDOMWindowUtils_SuspendTimeouts(This) (This)->lpVtbl->SuspendTimeouts(This)
#define nsIDOMWindowUtils_ResumeTimeouts(This) (This)->lpVtbl->ResumeTimeouts(This)
#define nsIDOMWindowUtils_GetLayerManagerType(This,aLayerManagerType) (This)->lpVtbl->GetLayerManagerType(This,aLayerManagerType)
#define nsIDOMWindowUtils_GetLayerManagerRemote(This,aLayerManagerRemote) (This)->lpVtbl->GetLayerManagerRemote(This,aLayerManagerRemote)
#define nsIDOMWindowUtils_GetSupportsHardwareH264Decoding(This,aSupportsHardwareH264Decoding) (This)->lpVtbl->GetSupportsHardwareH264Decoding(This,aSupportsHardwareH264Decoding)
#define nsIDOMWindowUtils_StartFrameTimeRecording(This,startIndex) (This)->lpVtbl->StartFrameTimeRecording(This,startIndex)
#define nsIDOMWindowUtils_StopFrameTimeRecording(This,startIndex,frameCount,frameIntervals) (This)->lpVtbl->StopFrameTimeRecording(This,startIndex,frameCount,frameIntervals)
#define nsIDOMWindowUtils_BeginTabSwitch(This) (This)->lpVtbl->BeginTabSwitch(This)
#define nsIDOMWindowUtils_GetDisplayDPI(This,aDisplayDPI) (This)->lpVtbl->GetDisplayDPI(This,aDisplayDPI)
#define nsIDOMWindowUtils_GetOuterWindowWithId(This,aOuterWindowID,_retval) (This)->lpVtbl->GetOuterWindowWithId(This,aOuterWindowID,_retval)
#define nsIDOMWindowUtils_GetContainerElement(This,aContainerElement) (This)->lpVtbl->GetContainerElement(This,aContainerElement)
#define nsIDOMWindowUtils_RenderDocument(This,aRect,aFlags,aBackgroundColor,aThebesContext) (This)->lpVtbl->RenderDocument(This,aRect,aFlags,aBackgroundColor,aThebesContext)
#define nsIDOMWindowUtils_AdvanceTimeAndRefresh(This,aMilliseconds) (This)->lpVtbl->AdvanceTimeAndRefresh(This,aMilliseconds)
#define nsIDOMWindowUtils_RestoreNormalRefresh(This) (This)->lpVtbl->RestoreNormalRefresh(This)
#define nsIDOMWindowUtils_GetIsTestControllingRefreshes(This,aIsTestControllingRefreshes) (This)->lpVtbl->GetIsTestControllingRefreshes(This,aIsTestControllingRefreshes)
#define nsIDOMWindowUtils_GetAsyncPanZoomEnabled(This,aAsyncPanZoomEnabled) (This)->lpVtbl->GetAsyncPanZoomEnabled(This,aAsyncPanZoomEnabled)
#define nsIDOMWindowUtils_SetAsyncScrollOffset(This,aNode,aX,aY) (This)->lpVtbl->SetAsyncScrollOffset(This,aNode,aX,aY)
#define nsIDOMWindowUtils_SetAsyncZoom(This,aRootElement,aValue) (This)->lpVtbl->SetAsyncZoom(This,aRootElement,aValue)
#define nsIDOMWindowUtils_FlushApzRepaints(This,_retval) (This)->lpVtbl->FlushApzRepaints(This,_retval)
#define nsIDOMWindowUtils_ZoomToFocusedInput(This) (This)->lpVtbl->ZoomToFocusedInput(This)
#define nsIDOMWindowUtils_ComputeAnimationDistance(This,element,property,value1,value2,_retval) (This)->lpVtbl->ComputeAnimationDistance(This,element,property,value1,value2,_retval)
#define nsIDOMWindowUtils_WrapDOMFile(This,aFile,_retval) (This)->lpVtbl->WrapDOMFile(This,aFile,_retval)
#define nsIDOMWindowUtils_GetFocusedInputType(This,aFocusedInputType) (This)->lpVtbl->GetFocusedInputType(This,aFocusedInputType)
#define nsIDOMWindowUtils_GetViewId(This,aElement,_retval) (This)->lpVtbl->GetViewId(This,aElement,_retval)
#define nsIDOMWindowUtils_LeafLayersPartitionWindow(This,_retval) (This)->lpVtbl->LeafLayersPartitionWindow(This,_retval)
#define nsIDOMWindowUtils_CheckAndClearPaintedState(This,aElement,_retval) (This)->lpVtbl->CheckAndClearPaintedState(This,aElement,_retval)
#define nsIDOMWindowUtils_IsPartOfOpaqueLayer(This,aElement,_retval) (This)->lpVtbl->IsPartOfOpaqueLayer(This,aElement,_retval)
#define nsIDOMWindowUtils_NumberOfAssignedPaintedLayers(This,aElements,count,_retval) (This)->lpVtbl->NumberOfAssignedPaintedLayers(This,aElements,count,_retval)
#define nsIDOMWindowUtils_GetFileId(This,aFile,cx,_retval) (This)->lpVtbl->GetFileId(This,aFile,cx,_retval)
#define nsIDOMWindowUtils_GetFilePath(This,aFile,cx,_retval) (This)->lpVtbl->GetFilePath(This,aFile,cx,_retval)
#define nsIDOMWindowUtils_GetFileReferences(This,aDatabaseName,aId,aOptions,aRefCnt,aDBRefCnt,aSliceRefCnt,cx,_retval) (This)->lpVtbl->GetFileReferences(This,aDatabaseName,aId,aOptions,aRefCnt,aDBRefCnt,aSliceRefCnt,cx,_retval)
#define nsIDOMWindowUtils_FlushPendingFileDeletions(This) (This)->lpVtbl->FlushPendingFileDeletions(This)
#define nsIDOMWindowUtils_IsIncrementalGCEnabled(This,cx,_retval) (This)->lpVtbl->IsIncrementalGCEnabled(This,cx,_retval)
#define nsIDOMWindowUtils_StartPCCountProfiling(This,cx) (This)->lpVtbl->StartPCCountProfiling(This,cx)
#define nsIDOMWindowUtils_StopPCCountProfiling(This,cx) (This)->lpVtbl->StopPCCountProfiling(This,cx)
#define nsIDOMWindowUtils_PurgePCCounts(This,cx) (This)->lpVtbl->PurgePCCounts(This,cx)
#define nsIDOMWindowUtils_GetPCCountScriptCount(This,cx,_retval) (This)->lpVtbl->GetPCCountScriptCount(This,cx,_retval)
#define nsIDOMWindowUtils_GetPCCountScriptSummary(This,script,cx,_retval) (This)->lpVtbl->GetPCCountScriptSummary(This,script,cx,_retval)
#define nsIDOMWindowUtils_GetPCCountScriptContents(This,script,cx,_retval) (This)->lpVtbl->GetPCCountScriptContents(This,script,cx,_retval)
#define nsIDOMWindowUtils_GetPaintingSuppressed(This,aPaintingSuppressed) (This)->lpVtbl->GetPaintingSuppressed(This,aPaintingSuppressed)
#define nsIDOMWindowUtils_GetPlugins(This,cx,aPlugins) (This)->lpVtbl->GetPlugins(This,cx,aPlugins)
#define nsIDOMWindowUtils_SetScrollPositionClampingScrollPortSize(This,aWidth,aHeight) (This)->lpVtbl->SetScrollPositionClampingScrollPortSize(This,aWidth,aHeight)
#define nsIDOMWindowUtils_DisableDialogs(This) (This)->lpVtbl->DisableDialogs(This)
#define nsIDOMWindowUtils_EnableDialogs(This) (This)->lpVtbl->EnableDialogs(This)
#define nsIDOMWindowUtils_AreDialogsEnabled(This,_retval) (This)->lpVtbl->AreDialogsEnabled(This,_retval)
#define nsIDOMWindowUtils_LoadSheet(This,sheetURI,type) (This)->lpVtbl->LoadSheet(This,sheetURI,type)
#define nsIDOMWindowUtils_LoadSheetUsingURIString(This,sheetURI,type) (This)->lpVtbl->LoadSheetUsingURIString(This,sheetURI,type)
#define nsIDOMWindowUtils_AddSheet(This,sheet,type) (This)->lpVtbl->AddSheet(This,sheet,type)
#define nsIDOMWindowUtils_RemoveSheet(This,sheetURI,type) (This)->lpVtbl->RemoveSheet(This,sheetURI,type)
#define nsIDOMWindowUtils_RemoveSheetUsingURIString(This,sheetURI,type) (This)->lpVtbl->RemoveSheetUsingURIString(This,sheetURI,type)
#define nsIDOMWindowUtils_GetIsHandlingUserInput(This,aIsHandlingUserInput) (This)->lpVtbl->GetIsHandlingUserInput(This,aIsHandlingUserInput)
#define nsIDOMWindowUtils_AllowScriptsToClose(This) (This)->lpVtbl->AllowScriptsToClose(This)
#define nsIDOMWindowUtils_GetIsParentWindowMainWidgetVisible(This,aIsParentWindowMainWidgetVisible) (This)->lpVtbl->GetIsParentWindowMainWidgetVisible(This,aIsParentWindowMainWidgetVisible)
#define nsIDOMWindowUtils_IsNodeDisabledForEvents(This,aNode,_retval) (This)->lpVtbl->IsNodeDisabledForEvents(This,aNode,_retval)
#define nsIDOMWindowUtils_GetPaintFlashing(This,aPaintFlashing) (This)->lpVtbl->GetPaintFlashing(This,aPaintFlashing)
#define nsIDOMWindowUtils_SetPaintFlashing(This,aPaintFlashing) (This)->lpVtbl->SetPaintFlashing(This,aPaintFlashing)
#define nsIDOMWindowUtils_GetOMTAStyle(This,aElement,aProperty,aPseudoElement,_retval) (This)->lpVtbl->GetOMTAStyle(This,aElement,aProperty,aPseudoElement,_retval)
#define nsIDOMWindowUtils_RequestCompositorProperty(This,aProperty,_retval) (This)->lpVtbl->RequestCompositorProperty(This,aProperty,_retval)
#define nsIDOMWindowUtils_SetHandlingUserInput(This,aHandlingInput,_retval) (This)->lpVtbl->SetHandlingUserInput(This,aHandlingInput,_retval)
#define nsIDOMWindowUtils_GetContentAPZTestData(This,cx,_retval) (This)->lpVtbl->GetContentAPZTestData(This,cx,_retval)
#define nsIDOMWindowUtils_GetCompositorAPZTestData(This,cx,_retval) (This)->lpVtbl->GetCompositorAPZTestData(This,cx,_retval)
#define nsIDOMWindowUtils_PostRestyleSelfEvent(This,aElement) (This)->lpVtbl->PostRestyleSelfEvent(This,aElement)
#define nsIDOMWindowUtils_GetAudioMuted(This,aAudioMuted) (This)->lpVtbl->GetAudioMuted(This,aAudioMuted)
#define nsIDOMWindowUtils_SetAudioMuted(This,aAudioMuted) (This)->lpVtbl->SetAudioMuted(This,aAudioMuted)
#define nsIDOMWindowUtils_GetAudioVolume(This,aAudioVolume) (This)->lpVtbl->GetAudioVolume(This,aAudioVolume)
#define nsIDOMWindowUtils_SetAudioVolume(This,aAudioVolume) (This)->lpVtbl->SetAudioVolume(This,aAudioVolume)
#define nsIDOMWindowUtils_XpconnectArgument(This,aThis) (This)->lpVtbl->XpconnectArgument(This,aThis)
#define nsIDOMWindowUtils_AskPermission(This,aRequest) (This)->lpVtbl->AskPermission(This,aRequest)
#define nsIDOMWindowUtils_GetFramesConstructed(This,aFramesConstructed) (This)->lpVtbl->GetFramesConstructed(This,aFramesConstructed)
#define nsIDOMWindowUtils_GetFramesReflowed(This,aFramesReflowed) (This)->lpVtbl->GetFramesReflowed(This,aFramesReflowed)
#define nsIDOMWindowUtils_SetChromeMargin(This,aTop,aRight,aBottom,aLeft) (This)->lpVtbl->SetChromeMargin(This,aTop,aRight,aBottom,aLeft)
#define nsIDOMWindowUtils_GetServiceWorkersTestingEnabled(This,aServiceWorkersTestingEnabled) (This)->lpVtbl->GetServiceWorkersTestingEnabled(This,aServiceWorkersTestingEnabled)
#define nsIDOMWindowUtils_SetServiceWorkersTestingEnabled(This,aServiceWorkersTestingEnabled) (This)->lpVtbl->SetServiceWorkersTestingEnabled(This,aServiceWorkersTestingEnabled)
#define nsIDOMWindowUtils_GetFrameUniformityTestData(This,cx,_retval) (This)->lpVtbl->GetFrameUniformityTestData(This,cx,_retval)
#define nsIDOMWindowUtils_EnterChaosMode(This) (This)->lpVtbl->EnterChaosMode(This)
#define nsIDOMWindowUtils_LeaveChaosMode(This) (This)->lpVtbl->LeaveChaosMode(This)
#define nsIDOMWindowUtils_HasRuleProcessorUsedByMultipleStyleSets(This,aSheetType,_retval) (This)->lpVtbl->HasRuleProcessorUsedByMultipleStyleSets(This,aSheetType,_retval)
#define nsIDOMWindowUtils_ForceUseCounterFlush(This,aNode) (This)->lpVtbl->ForceUseCounterFlush(This,aNode)
#define nsIDOMWindowUtils_SetNextPaintSyncId(This,aSyncId) (This)->lpVtbl->SetNextPaintSyncId(This,aSyncId)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMWindowUtils_QueryInterface(nsIDOMWindowUtils* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMWindowUtils_AddRef(nsIDOMWindowUtils* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMWindowUtils_Release(nsIDOMWindowUtils* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMWindowUtils methods ***/
static FORCEINLINE nsresult nsIDOMWindowUtils_GetImageAnimationMode(nsIDOMWindowUtils* This,UINT16 *aImageAnimationMode) {
    return This->lpVtbl->GetImageAnimationMode(This,aImageAnimationMode);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SetImageAnimationMode(nsIDOMWindowUtils* This,UINT16 aImageAnimationMode) {
    return This->lpVtbl->SetImageAnimationMode(This,aImageAnimationMode);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetDocCharsetIsForced(nsIDOMWindowUtils* This,cpp_bool *aDocCharsetIsForced) {
    return This->lpVtbl->GetDocCharsetIsForced(This,aDocCharsetIsForced);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetCursorType(nsIDOMWindowUtils* This,short *_retval) {
    return This->lpVtbl->GetCursorType(This,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetDocumentMetadata(nsIDOMWindowUtils* This,const nsAString *aName,nsAString *_retval) {
    return This->lpVtbl->GetDocumentMetadata(This,aName,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_Redraw(nsIDOMWindowUtils* This,UINT32 aCount,UINT32 *_retval) {
    return This->lpVtbl->Redraw(This,aCount,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_UpdateLayerTree(nsIDOMWindowUtils* This) {
    return This->lpVtbl->UpdateLayerTree(This);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetViewportInfo(nsIDOMWindowUtils* This,UINT32 aDisplayWidth,UINT32 aDisplayHeight,double *aDefaultZoom,cpp_bool *aAllowZoom,double *aMinZoom,double *aMaxZoom,UINT32 *aWidth,UINT32 *aHeight,cpp_bool *aAutoSize) {
    return This->lpVtbl->GetViewportInfo(This,aDisplayWidth,aDisplayHeight,aDefaultZoom,aAllowZoom,aMinZoom,aMaxZoom,aWidth,aHeight,aAutoSize);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SetDisplayPortForElement(nsIDOMWindowUtils* This,float aXPx,float aYPx,float aWidthPx,float aHeightPx,nsIDOMElement *aElement,UINT32 aPriority) {
    return This->lpVtbl->SetDisplayPortForElement(This,aXPx,aYPx,aWidthPx,aHeightPx,aElement,aPriority);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SetDisplayPortMarginsForElement(nsIDOMWindowUtils* This,float aLeftMargin,float aTopMargin,float aRightMargin,float aBottomMargin,nsIDOMElement *aElement,UINT32 aPriority) {
    return This->lpVtbl->SetDisplayPortMarginsForElement(This,aLeftMargin,aTopMargin,aRightMargin,aBottomMargin,aElement,aPriority);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SetDisplayPortBaseForElement(nsIDOMWindowUtils* This,LONG aX,LONG aY,LONG aWidth,LONG aHeight,nsIDOMElement *aElement) {
    return This->lpVtbl->SetDisplayPortBaseForElement(This,aX,aY,aWidth,aHeight,aElement);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SetResolution(nsIDOMWindowUtils* This,float aResolution) {
    return This->lpVtbl->SetResolution(This,aResolution);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetResolution(nsIDOMWindowUtils* This,float *aResolution) {
    return This->lpVtbl->GetResolution(This,aResolution);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SetResolutionAndScaleTo(nsIDOMWindowUtils* This,float aResolution) {
    return This->lpVtbl->SetResolutionAndScaleTo(This,aResolution);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetIsResolutionSet(nsIDOMWindowUtils* This,cpp_bool *aIsResolutionSet) {
    return This->lpVtbl->GetIsResolutionSet(This,aIsResolutionSet);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetIsFirstPaint(nsIDOMWindowUtils* This,cpp_bool *aIsFirstPaint) {
    return This->lpVtbl->GetIsFirstPaint(This,aIsFirstPaint);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SetIsFirstPaint(nsIDOMWindowUtils* This,cpp_bool aIsFirstPaint) {
    return This->lpVtbl->SetIsFirstPaint(This,aIsFirstPaint);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetPresShellId(nsIDOMWindowUtils* This,UINT32 *aPresShellId) {
    return This->lpVtbl->GetPresShellId(This,aPresShellId);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SendMouseEvent(nsIDOMWindowUtils* This,const nsAString *aType,float aX,float aY,LONG aButton,LONG aClickCount,LONG aModifiers,cpp_bool aIgnoreRootScrollFrame,float aPressure,UINT16 aInputSourceArg,cpp_bool aIsSynthesized,UINT8 _argc,cpp_bool *_retval) {
    return This->lpVtbl->SendMouseEvent(This,aType,aX,aY,aButton,aClickCount,aModifiers,aIgnoreRootScrollFrame,aPressure,aInputSourceArg,aIsSynthesized,_argc,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SendPointerEvent(nsIDOMWindowUtils* This,const nsAString *aType,float aX,float aY,LONG aButton,LONG aClickCount,LONG aModifiers,cpp_bool aIgnoreRootScrollFrame,float aPressure,UINT16 aInputSourceArg,LONG aPointerId,LONG aWidth,LONG aHeight,LONG tiltX,LONG tiltY,cpp_bool aIsPrimary,cpp_bool aIsSynthesized,UINT8 _argc,cpp_bool *_retval) {
    return This->lpVtbl->SendPointerEvent(This,aType,aX,aY,aButton,aClickCount,aModifiers,aIgnoreRootScrollFrame,aPressure,aInputSourceArg,aPointerId,aWidth,aHeight,tiltX,tiltY,aIsPrimary,aIsSynthesized,_argc,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SendTouchEvent(nsIDOMWindowUtils* This,const nsAString *aType,UINT32 *aIdentifiers,LONG *aXs,LONG *aYs,UINT32 *aRxs,UINT32 *aRys,float *aRotationAngles,float *aForces,UINT32 count,LONG aModifiers,cpp_bool aIgnoreRootScrollFrame,cpp_bool *_retval) {
    return This->lpVtbl->SendTouchEvent(This,aType,aIdentifiers,aXs,aYs,aRxs,aRys,aRotationAngles,aForces,count,aModifiers,aIgnoreRootScrollFrame,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SendMouseEventToWindow(nsIDOMWindowUtils* This,const nsAString *aType,float aX,float aY,LONG aButton,LONG aClickCount,LONG aModifiers,cpp_bool aIgnoreRootScrollFrame,float aPressure,UINT16 aInputSourceArg,cpp_bool aIsSynthesized,UINT8 _argc) {
    return This->lpVtbl->SendMouseEventToWindow(This,aType,aX,aY,aButton,aClickCount,aModifiers,aIgnoreRootScrollFrame,aPressure,aInputSourceArg,aIsSynthesized,_argc);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SendPointerEventToWindow(nsIDOMWindowUtils* This,const nsAString *aType,float aX,float aY,LONG aButton,LONG aClickCount,LONG aModifiers,cpp_bool aIgnoreRootScrollFrame,float aPressure,UINT16 aInputSourceArg,LONG aPointerId,LONG aWidth,LONG aHeight,LONG aTiltX,LONG aTiltY,cpp_bool aIsPrimary,cpp_bool aIsSynthesized,UINT8 _argc) {
    return This->lpVtbl->SendPointerEventToWindow(This,aType,aX,aY,aButton,aClickCount,aModifiers,aIgnoreRootScrollFrame,aPressure,aInputSourceArg,aPointerId,aWidth,aHeight,aTiltX,aTiltY,aIsPrimary,aIsSynthesized,_argc);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SendTouchEventToWindow(nsIDOMWindowUtils* This,const nsAString *aType,UINT32 *aIdentifiers,LONG *aXs,LONG *aYs,UINT32 *aRxs,UINT32 *aRys,float *aRotationAngles,float *aForces,UINT32 count,LONG aModifiers,cpp_bool aIgnoreRootScrollFrame,cpp_bool *_retval) {
    return This->lpVtbl->SendTouchEventToWindow(This,aType,aIdentifiers,aXs,aYs,aRxs,aRys,aRotationAngles,aForces,count,aModifiers,aIgnoreRootScrollFrame,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SendWheelEvent(nsIDOMWindowUtils* This,float aX,float aY,double aDeltaX,double aDeltaY,double aDeltaZ,UINT32 aDeltaMode,LONG aModifiers,LONG aLineOrPageDeltaX,LONG aLineOrPageDeltaY,UINT32 aOptions) {
    return This->lpVtbl->SendWheelEvent(This,aX,aY,aDeltaX,aDeltaY,aDeltaZ,aDeltaMode,aModifiers,aLineOrPageDeltaX,aLineOrPageDeltaY,aOptions);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SendKeyEvent(nsIDOMWindowUtils* This,const nsAString *aType,LONG aKeyCode,LONG aCharCode,LONG aModifiers,UINT32 aAdditionalFlags,cpp_bool *_retval) {
    return This->lpVtbl->SendKeyEvent(This,aType,aKeyCode,aCharCode,aModifiers,aAdditionalFlags,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SendNativeKeyEvent(nsIDOMWindowUtils* This,LONG aNativeKeyboardLayout,LONG aNativeKeyCode,LONG aModifierFlags,const nsAString *aCharacters,const nsAString *aUnmodifiedCharacters,nsIObserver *aObserver) {
    return This->lpVtbl->SendNativeKeyEvent(This,aNativeKeyboardLayout,aNativeKeyCode,aModifierFlags,aCharacters,aUnmodifiedCharacters,aObserver);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SendNativeMouseEvent(nsIDOMWindowUtils* This,LONG aScreenX,LONG aScreenY,LONG aNativeMessage,LONG aModifierFlags,nsIDOMElement *aElement,nsIObserver *aObserver) {
    return This->lpVtbl->SendNativeMouseEvent(This,aScreenX,aScreenY,aNativeMessage,aModifierFlags,aElement,aObserver);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SendNativeMouseMove(nsIDOMWindowUtils* This,LONG aScreenX,LONG aScreenY,nsIDOMElement *aElement,nsIObserver *aObserver) {
    return This->lpVtbl->SendNativeMouseMove(This,aScreenX,aScreenY,aElement,aObserver);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SendNativeMouseScrollEvent(nsIDOMWindowUtils* This,LONG aScreenX,LONG aScreenY,UINT32 aNativeMessage,double aDeltaX,double aDeltaY,double aDeltaZ,UINT32 aModifierFlags,UINT32 aAdditionalFlags,nsIDOMElement *aElement,nsIObserver *aObserver) {
    return This->lpVtbl->SendNativeMouseScrollEvent(This,aScreenX,aScreenY,aNativeMessage,aDeltaX,aDeltaY,aDeltaZ,aModifierFlags,aAdditionalFlags,aElement,aObserver);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SendNativeTouchPoint(nsIDOMWindowUtils* This,UINT32 aPointerId,UINT32 aTouchState,LONG aScreenX,LONG aScreenY,double aPressure,UINT32 aOrientation,nsIObserver *aObserver) {
    return This->lpVtbl->SendNativeTouchPoint(This,aPointerId,aTouchState,aScreenX,aScreenY,aPressure,aOrientation,aObserver);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SendNativeTouchTap(nsIDOMWindowUtils* This,LONG aScreenX,LONG aScreenY,cpp_bool aLongTap,nsIObserver *aObserver) {
    return This->lpVtbl->SendNativeTouchTap(This,aScreenX,aScreenY,aLongTap,aObserver);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_ClearNativeTouchSequence(nsIDOMWindowUtils* This,nsIObserver *aObserver) {
    return This->lpVtbl->ClearNativeTouchSequence(This,aObserver);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_ActivateNativeMenuItemAt(nsIDOMWindowUtils* This,const nsAString *indexString) {
    return This->lpVtbl->ActivateNativeMenuItemAt(This,indexString);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_ForceUpdateNativeMenuAt(nsIDOMWindowUtils* This,const nsAString *indexString) {
    return This->lpVtbl->ForceUpdateNativeMenuAt(This,indexString);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_Focus(nsIDOMWindowUtils* This,nsIDOMElement *aElement) {
    return This->lpVtbl->Focus(This,aElement);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GarbageCollect(nsIDOMWindowUtils* This,nsICycleCollectorListener *aListener,LONG aExtraForgetSkippableCalls) {
    return This->lpVtbl->GarbageCollect(This,aListener,aExtraForgetSkippableCalls);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_CycleCollect(nsIDOMWindowUtils* This,nsICycleCollectorListener *aListener,LONG aExtraForgetSkippableCalls) {
    return This->lpVtbl->CycleCollect(This,aListener,aExtraForgetSkippableCalls);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_RunNextCollectorTimer(nsIDOMWindowUtils* This) {
    return This->lpVtbl->RunNextCollectorTimer(This);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SendSimpleGestureEvent(nsIDOMWindowUtils* This,const nsAString *aType,float aX,float aY,UINT32 aDirection,double aDelta,LONG aModifiers,UINT32 aClickCount) {
    return This->lpVtbl->SendSimpleGestureEvent(This,aType,aX,aY,aDirection,aDelta,aModifiers,aClickCount);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_ElementFromPoint(nsIDOMWindowUtils* This,float aX,float aY,cpp_bool aIgnoreRootScrollFrame,cpp_bool aFlushLayout,nsIDOMElement **_retval) {
    return This->lpVtbl->ElementFromPoint(This,aX,aY,aIgnoreRootScrollFrame,aFlushLayout,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_NodesFromRect(nsIDOMWindowUtils* This,float aX,float aY,float aTopSize,float aRightSize,float aBottomSize,float aLeftSize,cpp_bool aIgnoreRootScrollFrame,cpp_bool aFlushLayout,nsIDOMNodeList **_retval) {
    return This->lpVtbl->NodesFromRect(This,aX,aY,aTopSize,aRightSize,aBottomSize,aLeftSize,aIgnoreRootScrollFrame,aFlushLayout,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetTranslationNodes(nsIDOMWindowUtils* This,nsIDOMNode *aRoot,int **_retval) {
    return This->lpVtbl->GetTranslationNodes(This,aRoot,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_CompareCanvases(nsIDOMWindowUtils* This,nsIDOMHTMLCanvasElement *aCanvas1,nsIDOMHTMLCanvasElement *aCanvas2,UINT32 *aMaxDifference,UINT32 *_retval) {
    return This->lpVtbl->CompareCanvases(This,aCanvas1,aCanvas2,aMaxDifference,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetIsMozAfterPaintPending(nsIDOMWindowUtils* This,cpp_bool *aIsMozAfterPaintPending) {
    return This->lpVtbl->GetIsMozAfterPaintPending(This,aIsMozAfterPaintPending);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SuppressEventHandling(nsIDOMWindowUtils* This,cpp_bool aSuppress) {
    return This->lpVtbl->SuppressEventHandling(This,aSuppress);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_ClearMozAfterPaintEvents(nsIDOMWindowUtils* This) {
    return This->lpVtbl->ClearMozAfterPaintEvents(This);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_DisableNonTestMouseEvents(nsIDOMWindowUtils* This,cpp_bool aDisable) {
    return This->lpVtbl->DisableNonTestMouseEvents(This,aDisable);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetScrollXY(nsIDOMWindowUtils* This,cpp_bool aFlushLayout,LONG *aScrollX,LONG *aScrollY) {
    return This->lpVtbl->GetScrollXY(This,aFlushLayout,aScrollX,aScrollY);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetScrollXYFloat(nsIDOMWindowUtils* This,cpp_bool aFlushLayout,float *aScrollX,float *aScrollY) {
    return This->lpVtbl->GetScrollXYFloat(This,aFlushLayout,aScrollX,aScrollY);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetScrollbarSize(nsIDOMWindowUtils* This,cpp_bool aFlushLayout,LONG *aWidth,LONG *aHeight) {
    return This->lpVtbl->GetScrollbarSize(This,aFlushLayout,aWidth,aHeight);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetBoundsWithoutFlushing(nsIDOMWindowUtils* This,nsIDOMElement *aElement,nsIDOMClientRect **_retval) {
    return This->lpVtbl->GetBoundsWithoutFlushing(This,aElement,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetRootBounds(nsIDOMWindowUtils* This,nsIDOMClientRect **_retval) {
    return This->lpVtbl->GetRootBounds(This,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetIMEIsOpen(nsIDOMWindowUtils* This,cpp_bool *aIMEIsOpen) {
    return This->lpVtbl->GetIMEIsOpen(This,aIMEIsOpen);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetIMEStatus(nsIDOMWindowUtils* This,UINT32 *aIMEStatus) {
    return This->lpVtbl->GetIMEStatus(This,aIMEStatus);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetScreenPixelsPerCSSPixel(nsIDOMWindowUtils* This,float *aScreenPixelsPerCSSPixel) {
    return This->lpVtbl->GetScreenPixelsPerCSSPixel(This,aScreenPixelsPerCSSPixel);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetFullZoom(nsIDOMWindowUtils* This,float *aFullZoom) {
    return This->lpVtbl->GetFullZoom(This,aFullZoom);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_DispatchDOMEventViaPresShell(nsIDOMWindowUtils* This,nsIDOMNode *aTarget,nsIDOMEvent *aEvent,cpp_bool aTrusted,cpp_bool *_retval) {
    return This->lpVtbl->DispatchDOMEventViaPresShell(This,aTarget,aEvent,aTrusted,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_DispatchEventToChromeOnly(nsIDOMWindowUtils* This,nsIDOMEventTarget *aTarget,nsIDOMEvent *aEvent,cpp_bool *_retval) {
    return This->lpVtbl->DispatchEventToChromeOnly(This,aTarget,aEvent,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetClassName(nsIDOMWindowUtils* This,const void *aObject,JSContext *cx,char **_retval) {
    return This->lpVtbl->GetClassName(This,aObject,cx,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SendContentCommandEvent(nsIDOMWindowUtils* This,const nsAString *aType,nsITransferable *aTransferable) {
    return This->lpVtbl->SendContentCommandEvent(This,aType,aTransferable);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SendQueryContentEvent(nsIDOMWindowUtils* This,UINT32 aType,UINT32 aOffset,UINT32 aLength,LONG aX,LONG aY,UINT32 aAdditionalFlags,nsIQueryContentEventResult **_retval) {
    return This->lpVtbl->SendQueryContentEvent(This,aType,aOffset,aLength,aX,aY,aAdditionalFlags,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_RemoteFrameFullscreenChanged(nsIDOMWindowUtils* This,nsIDOMElement *aFrameElement) {
    return This->lpVtbl->RemoteFrameFullscreenChanged(This,aFrameElement);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_RemoteFrameFullscreenReverted(nsIDOMWindowUtils* This) {
    return This->lpVtbl->RemoteFrameFullscreenReverted(This);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_HandleFullscreenRequests(nsIDOMWindowUtils* This,cpp_bool *_retval) {
    return This->lpVtbl->HandleFullscreenRequests(This,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_ExitFullscreen(nsIDOMWindowUtils* This) {
    return This->lpVtbl->ExitFullscreen(This);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SendSelectionSetEvent(nsIDOMWindowUtils* This,UINT32 aOffset,UINT32 aLength,UINT32 aAdditionalFlags,cpp_bool *_retval) {
    return This->lpVtbl->SendSelectionSetEvent(This,aOffset,aLength,aAdditionalFlags,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SelectAtPoint(nsIDOMWindowUtils* This,float aX,float aY,UINT32 aSelectBehavior,cpp_bool *_retval) {
    return This->lpVtbl->SelectAtPoint(This,aX,aY,aSelectBehavior,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetVisitedDependentComputedStyle(nsIDOMWindowUtils* This,nsIDOMElement *aElement,const nsAString *aPseudoElement,const nsAString *aPropertyName,nsAString *_retval) {
    return This->lpVtbl->GetVisitedDependentComputedStyle(This,aElement,aPseudoElement,aPropertyName,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetOuterWindowID(nsIDOMWindowUtils* This,UINT64 *aOuterWindowID) {
    return This->lpVtbl->GetOuterWindowID(This,aOuterWindowID);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetCurrentInnerWindowID(nsIDOMWindowUtils* This,UINT64 *aCurrentInnerWindowID) {
    return This->lpVtbl->GetCurrentInnerWindowID(This,aCurrentInnerWindowID);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_EnterModalState(nsIDOMWindowUtils* This) {
    return This->lpVtbl->EnterModalState(This);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_LeaveModalState(nsIDOMWindowUtils* This) {
    return This->lpVtbl->LeaveModalState(This);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_IsInModalState(nsIDOMWindowUtils* This,cpp_bool *_retval) {
    return This->lpVtbl->IsInModalState(This,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SetDesktopModeViewport(nsIDOMWindowUtils* This,cpp_bool aDesktopModeViewport) {
    return This->lpVtbl->SetDesktopModeViewport(This,aDesktopModeViewport);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SuspendTimeouts(nsIDOMWindowUtils* This) {
    return This->lpVtbl->SuspendTimeouts(This);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_ResumeTimeouts(nsIDOMWindowUtils* This) {
    return This->lpVtbl->ResumeTimeouts(This);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetLayerManagerType(nsIDOMWindowUtils* This,nsAString *aLayerManagerType) {
    return This->lpVtbl->GetLayerManagerType(This,aLayerManagerType);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetLayerManagerRemote(nsIDOMWindowUtils* This,cpp_bool *aLayerManagerRemote) {
    return This->lpVtbl->GetLayerManagerRemote(This,aLayerManagerRemote);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetSupportsHardwareH264Decoding(nsIDOMWindowUtils* This,void *aSupportsHardwareH264Decoding) {
    return This->lpVtbl->GetSupportsHardwareH264Decoding(This,aSupportsHardwareH264Decoding);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_StartFrameTimeRecording(nsIDOMWindowUtils* This,UINT32 *startIndex) {
    return This->lpVtbl->StartFrameTimeRecording(This,startIndex);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_StopFrameTimeRecording(nsIDOMWindowUtils* This,UINT32 startIndex,UINT32 *frameCount,float **frameIntervals) {
    return This->lpVtbl->StopFrameTimeRecording(This,startIndex,frameCount,frameIntervals);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_BeginTabSwitch(nsIDOMWindowUtils* This) {
    return This->lpVtbl->BeginTabSwitch(This);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetDisplayDPI(nsIDOMWindowUtils* This,float *aDisplayDPI) {
    return This->lpVtbl->GetDisplayDPI(This,aDisplayDPI);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetOuterWindowWithId(nsIDOMWindowUtils* This,UINT64 aOuterWindowID,nsIDOMWindow **_retval) {
    return This->lpVtbl->GetOuterWindowWithId(This,aOuterWindowID,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetContainerElement(nsIDOMWindowUtils* This,nsIDOMElement **aContainerElement) {
    return This->lpVtbl->GetContainerElement(This,aContainerElement);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_RenderDocument(nsIDOMWindowUtils* This,const void *aRect,UINT32 aFlags,int aBackgroundColor,void *aThebesContext) {
    return This->lpVtbl->RenderDocument(This,aRect,aFlags,aBackgroundColor,aThebesContext);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_AdvanceTimeAndRefresh(nsIDOMWindowUtils* This,INT64 aMilliseconds) {
    return This->lpVtbl->AdvanceTimeAndRefresh(This,aMilliseconds);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_RestoreNormalRefresh(nsIDOMWindowUtils* This) {
    return This->lpVtbl->RestoreNormalRefresh(This);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetIsTestControllingRefreshes(nsIDOMWindowUtils* This,cpp_bool *aIsTestControllingRefreshes) {
    return This->lpVtbl->GetIsTestControllingRefreshes(This,aIsTestControllingRefreshes);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetAsyncPanZoomEnabled(nsIDOMWindowUtils* This,cpp_bool *aAsyncPanZoomEnabled) {
    return This->lpVtbl->GetAsyncPanZoomEnabled(This,aAsyncPanZoomEnabled);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SetAsyncScrollOffset(nsIDOMWindowUtils* This,nsIDOMNode *aNode,float aX,float aY) {
    return This->lpVtbl->SetAsyncScrollOffset(This,aNode,aX,aY);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SetAsyncZoom(nsIDOMWindowUtils* This,nsIDOMNode *aRootElement,float aValue) {
    return This->lpVtbl->SetAsyncZoom(This,aRootElement,aValue);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_FlushApzRepaints(nsIDOMWindowUtils* This,cpp_bool *_retval) {
    return This->lpVtbl->FlushApzRepaints(This,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_ZoomToFocusedInput(nsIDOMWindowUtils* This) {
    return This->lpVtbl->ZoomToFocusedInput(This);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_ComputeAnimationDistance(nsIDOMWindowUtils* This,nsIDOMElement *element,const nsAString *property,const nsAString *value1,const nsAString *value2,double *_retval) {
    return This->lpVtbl->ComputeAnimationDistance(This,element,property,value1,value2,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_WrapDOMFile(nsIDOMWindowUtils* This,nsIFile *aFile,nsISupports **_retval) {
    return This->lpVtbl->WrapDOMFile(This,aFile,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetFocusedInputType(nsIDOMWindowUtils* This,char **aFocusedInputType) {
    return This->lpVtbl->GetFocusedInputType(This,aFocusedInputType);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetViewId(nsIDOMWindowUtils* This,nsIDOMElement *aElement,LONG *_retval) {
    return This->lpVtbl->GetViewId(This,aElement,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_LeafLayersPartitionWindow(nsIDOMWindowUtils* This,cpp_bool *_retval) {
    return This->lpVtbl->LeafLayersPartitionWindow(This,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_CheckAndClearPaintedState(nsIDOMWindowUtils* This,nsIDOMElement *aElement,cpp_bool *_retval) {
    return This->lpVtbl->CheckAndClearPaintedState(This,aElement,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_IsPartOfOpaqueLayer(nsIDOMWindowUtils* This,nsIDOMElement *aElement,cpp_bool *_retval) {
    return This->lpVtbl->IsPartOfOpaqueLayer(This,aElement,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_NumberOfAssignedPaintedLayers(nsIDOMWindowUtils* This,nsIDOMElement **aElements,UINT32 count,UINT32 *_retval) {
    return This->lpVtbl->NumberOfAssignedPaintedLayers(This,aElements,count,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetFileId(nsIDOMWindowUtils* This,const void *aFile,JSContext *cx,INT64 *_retval) {
    return This->lpVtbl->GetFileId(This,aFile,cx,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetFilePath(nsIDOMWindowUtils* This,void *aFile,JSContext *cx,nsAString *_retval) {
    return This->lpVtbl->GetFilePath(This,aFile,cx,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetFileReferences(nsIDOMWindowUtils* This,const nsAString *aDatabaseName,INT64 aId,void *aOptions,LONG *aRefCnt,LONG *aDBRefCnt,LONG *aSliceRefCnt,JSContext *cx,cpp_bool *_retval) {
    return This->lpVtbl->GetFileReferences(This,aDatabaseName,aId,aOptions,aRefCnt,aDBRefCnt,aSliceRefCnt,cx,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_FlushPendingFileDeletions(nsIDOMWindowUtils* This) {
    return This->lpVtbl->FlushPendingFileDeletions(This);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_IsIncrementalGCEnabled(nsIDOMWindowUtils* This,JSContext *cx,cpp_bool *_retval) {
    return This->lpVtbl->IsIncrementalGCEnabled(This,cx,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_StartPCCountProfiling(nsIDOMWindowUtils* This,JSContext *cx) {
    return This->lpVtbl->StartPCCountProfiling(This,cx);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_StopPCCountProfiling(nsIDOMWindowUtils* This,JSContext *cx) {
    return This->lpVtbl->StopPCCountProfiling(This,cx);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_PurgePCCounts(nsIDOMWindowUtils* This,JSContext *cx) {
    return This->lpVtbl->PurgePCCounts(This,cx);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetPCCountScriptCount(nsIDOMWindowUtils* This,JSContext *cx,LONG *_retval) {
    return This->lpVtbl->GetPCCountScriptCount(This,cx,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetPCCountScriptSummary(nsIDOMWindowUtils* This,LONG script,JSContext *cx,nsAString *_retval) {
    return This->lpVtbl->GetPCCountScriptSummary(This,script,cx,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetPCCountScriptContents(nsIDOMWindowUtils* This,LONG script,JSContext *cx,nsAString *_retval) {
    return This->lpVtbl->GetPCCountScriptContents(This,script,cx,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetPaintingSuppressed(nsIDOMWindowUtils* This,cpp_bool *aPaintingSuppressed) {
    return This->lpVtbl->GetPaintingSuppressed(This,aPaintingSuppressed);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetPlugins(nsIDOMWindowUtils* This,JSContext *cx,void *aPlugins) {
    return This->lpVtbl->GetPlugins(This,cx,aPlugins);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SetScrollPositionClampingScrollPortSize(nsIDOMWindowUtils* This,float aWidth,float aHeight) {
    return This->lpVtbl->SetScrollPositionClampingScrollPortSize(This,aWidth,aHeight);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_DisableDialogs(nsIDOMWindowUtils* This) {
    return This->lpVtbl->DisableDialogs(This);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_EnableDialogs(nsIDOMWindowUtils* This) {
    return This->lpVtbl->EnableDialogs(This);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_AreDialogsEnabled(nsIDOMWindowUtils* This,cpp_bool *_retval) {
    return This->lpVtbl->AreDialogsEnabled(This,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_LoadSheet(nsIDOMWindowUtils* This,nsIURI *sheetURI,UINT32 type) {
    return This->lpVtbl->LoadSheet(This,sheetURI,type);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_LoadSheetUsingURIString(nsIDOMWindowUtils* This,const nsACString *sheetURI,UINT32 type) {
    return This->lpVtbl->LoadSheetUsingURIString(This,sheetURI,type);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_AddSheet(nsIDOMWindowUtils* This,nsIDOMStyleSheet *sheet,UINT32 type) {
    return This->lpVtbl->AddSheet(This,sheet,type);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_RemoveSheet(nsIDOMWindowUtils* This,nsIURI *sheetURI,UINT32 type) {
    return This->lpVtbl->RemoveSheet(This,sheetURI,type);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_RemoveSheetUsingURIString(nsIDOMWindowUtils* This,const nsACString *sheetURI,UINT32 type) {
    return This->lpVtbl->RemoveSheetUsingURIString(This,sheetURI,type);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetIsHandlingUserInput(nsIDOMWindowUtils* This,cpp_bool *aIsHandlingUserInput) {
    return This->lpVtbl->GetIsHandlingUserInput(This,aIsHandlingUserInput);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_AllowScriptsToClose(nsIDOMWindowUtils* This) {
    return This->lpVtbl->AllowScriptsToClose(This);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetIsParentWindowMainWidgetVisible(nsIDOMWindowUtils* This,cpp_bool *aIsParentWindowMainWidgetVisible) {
    return This->lpVtbl->GetIsParentWindowMainWidgetVisible(This,aIsParentWindowMainWidgetVisible);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_IsNodeDisabledForEvents(nsIDOMWindowUtils* This,nsIDOMNode *aNode,cpp_bool *_retval) {
    return This->lpVtbl->IsNodeDisabledForEvents(This,aNode,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetPaintFlashing(nsIDOMWindowUtils* This,cpp_bool *aPaintFlashing) {
    return This->lpVtbl->GetPaintFlashing(This,aPaintFlashing);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SetPaintFlashing(nsIDOMWindowUtils* This,cpp_bool aPaintFlashing) {
    return This->lpVtbl->SetPaintFlashing(This,aPaintFlashing);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetOMTAStyle(nsIDOMWindowUtils* This,nsIDOMElement *aElement,const nsAString *aProperty,const nsAString *aPseudoElement,nsAString *_retval) {
    return This->lpVtbl->GetOMTAStyle(This,aElement,aProperty,aPseudoElement,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_RequestCompositorProperty(nsIDOMWindowUtils* This,const nsAString *aProperty,float *_retval) {
    return This->lpVtbl->RequestCompositorProperty(This,aProperty,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SetHandlingUserInput(nsIDOMWindowUtils* This,cpp_bool aHandlingInput,void **_retval) {
    return This->lpVtbl->SetHandlingUserInput(This,aHandlingInput,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetContentAPZTestData(nsIDOMWindowUtils* This,JSContext *cx,int _retval) {
    return This->lpVtbl->GetContentAPZTestData(This,cx,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetCompositorAPZTestData(nsIDOMWindowUtils* This,JSContext *cx,void *_retval) {
    return This->lpVtbl->GetCompositorAPZTestData(This,cx,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_PostRestyleSelfEvent(nsIDOMWindowUtils* This,nsIDOMElement *aElement) {
    return This->lpVtbl->PostRestyleSelfEvent(This,aElement);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetAudioMuted(nsIDOMWindowUtils* This,cpp_bool *aAudioMuted) {
    return This->lpVtbl->GetAudioMuted(This,aAudioMuted);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SetAudioMuted(nsIDOMWindowUtils* This,cpp_bool aAudioMuted) {
    return This->lpVtbl->SetAudioMuted(This,aAudioMuted);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetAudioVolume(nsIDOMWindowUtils* This,float *aAudioVolume) {
    return This->lpVtbl->GetAudioVolume(This,aAudioVolume);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SetAudioVolume(nsIDOMWindowUtils* This,float aAudioVolume) {
    return This->lpVtbl->SetAudioVolume(This,aAudioVolume);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_XpconnectArgument(nsIDOMWindowUtils* This,nsIDOMWindowUtils *aThis) {
    return This->lpVtbl->XpconnectArgument(This,aThis);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_AskPermission(nsIDOMWindowUtils* This,void *aRequest) {
    return This->lpVtbl->AskPermission(This,aRequest);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetFramesConstructed(nsIDOMWindowUtils* This,UINT64 *aFramesConstructed) {
    return This->lpVtbl->GetFramesConstructed(This,aFramesConstructed);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetFramesReflowed(nsIDOMWindowUtils* This,UINT64 *aFramesReflowed) {
    return This->lpVtbl->GetFramesReflowed(This,aFramesReflowed);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SetChromeMargin(nsIDOMWindowUtils* This,LONG aTop,LONG aRight,LONG aBottom,LONG aLeft) {
    return This->lpVtbl->SetChromeMargin(This,aTop,aRight,aBottom,aLeft);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetServiceWorkersTestingEnabled(nsIDOMWindowUtils* This,cpp_bool *aServiceWorkersTestingEnabled) {
    return This->lpVtbl->GetServiceWorkersTestingEnabled(This,aServiceWorkersTestingEnabled);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SetServiceWorkersTestingEnabled(nsIDOMWindowUtils* This,cpp_bool aServiceWorkersTestingEnabled) {
    return This->lpVtbl->SetServiceWorkersTestingEnabled(This,aServiceWorkersTestingEnabled);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_GetFrameUniformityTestData(nsIDOMWindowUtils* This,JSContext *cx,int *_retval) {
    return This->lpVtbl->GetFrameUniformityTestData(This,cx,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_EnterChaosMode(nsIDOMWindowUtils* This) {
    return This->lpVtbl->EnterChaosMode(This);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_LeaveChaosMode(nsIDOMWindowUtils* This) {
    return This->lpVtbl->LeaveChaosMode(This);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_HasRuleProcessorUsedByMultipleStyleSets(nsIDOMWindowUtils* This,UINT32 aSheetType,cpp_bool *_retval) {
    return This->lpVtbl->HasRuleProcessorUsedByMultipleStyleSets(This,aSheetType,_retval);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_ForceUseCounterFlush(nsIDOMWindowUtils* This,nsIDOMNode *aNode) {
    return This->lpVtbl->ForceUseCounterFlush(This,aNode);
}
static FORCEINLINE nsresult nsIDOMWindowUtils_SetNextPaintSyncId(nsIDOMWindowUtils* This,LONG aSyncId) {
    return This->lpVtbl->SetNextPaintSyncId(This,aSyncId);
}
#endif
#endif

#endif


#endif  /* __nsIDOMWindowUtils_INTERFACE_DEFINED__ */

#define CONTEXT_NONE              0x00
#define CONTEXT_LINK              0x01
#define CONTEXT_IMAGE             0x02
#define CONTEXT_DOCUMENT          0x04
#define CONTEXT_TEXT              0x08
#define CONTEXT_INPUT             0x10
#define CONTEXT_BACKGROUND_IMAGE  0x20
/*****************************************************************************
 * nsIContextMenuListener interface
 */
#ifndef __nsIContextMenuListener_INTERFACE_DEFINED__
#define __nsIContextMenuListener_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIContextMenuListener, 0x3478b6b0, 0x3875, 0x11d4, 0x94,0xef, 0x00,0x20,0x18,0x3b,0xf1,0x81);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("3478b6b0-3875-11d4-94ef-0020183bf181")
nsIContextMenuListener : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE OnShowContextMenu(
        UINT32 aContextFlags,
        nsIDOMEvent *aEvent,
        nsIDOMNode *aNode) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIContextMenuListener, 0x3478b6b0, 0x3875, 0x11d4, 0x94,0xef, 0x00,0x20,0x18,0x3b,0xf1,0x81)
#endif
#else
typedef struct nsIContextMenuListenerVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIContextMenuListener *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIContextMenuListener *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIContextMenuListener *This);

    /*** nsIContextMenuListener methods ***/
    nsresult (STDMETHODCALLTYPE *OnShowContextMenu)(
        nsIContextMenuListener *This,
        UINT32 aContextFlags,
        nsIDOMEvent *aEvent,
        nsIDOMNode *aNode);

    END_INTERFACE
} nsIContextMenuListenerVtbl;

interface nsIContextMenuListener {
    CONST_VTBL nsIContextMenuListenerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIContextMenuListener_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIContextMenuListener_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIContextMenuListener_Release(This) (This)->lpVtbl->Release(This)
/*** nsIContextMenuListener methods ***/
#define nsIContextMenuListener_OnShowContextMenu(This,aContextFlags,aEvent,aNode) (This)->lpVtbl->OnShowContextMenu(This,aContextFlags,aEvent,aNode)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIContextMenuListener_QueryInterface(nsIContextMenuListener* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIContextMenuListener_AddRef(nsIContextMenuListener* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIContextMenuListener_Release(nsIContextMenuListener* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIContextMenuListener methods ***/
static FORCEINLINE nsresult nsIContextMenuListener_OnShowContextMenu(nsIContextMenuListener* This,UINT32 aContextFlags,nsIDOMEvent *aEvent,nsIDOMNode *aNode) {
    return This->lpVtbl->OnShowContextMenu(This,aContextFlags,aEvent,aNode);
}
#endif
#endif

#endif


#endif  /* __nsIContextMenuListener_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMUIEvent interface
 */
#ifndef __nsIDOMUIEvent_INTERFACE_DEFINED__
#define __nsIDOMUIEvent_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMUIEvent, 0x85ae52eb, 0x37fa, 0x4fd9, 0xa2,0xe6, 0xc7,0xd0,0xf2,0xa5,0x21,0xb3);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("85ae52eb-37fa-4fd9-a2e6-c7d0f2a521b3")
nsIDOMUIEvent : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetView(
        mozIDOMWindowProxy **aView) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDetail(
        LONG *aDetail) = 0;

    virtual nsresult STDMETHODCALLTYPE InitUIEvent(
        const nsAString *typeArg,
        cpp_bool canBubbleArg,
        cpp_bool cancelableArg,
        mozIDOMWindow *viewArg,
        LONG detailArg) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLayerX(
        LONG *aLayerX) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLayerY(
        LONG *aLayerY) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPageX(
        LONG *aPageX) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPageY(
        LONG *aPageY) = 0;

    virtual nsresult STDMETHODCALLTYPE GetWhich(
        UINT32 *aWhich) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRangeParent(
        nsIDOMNode **aRangeParent) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRangeOffset(
        LONG *aRangeOffset) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCancelBubble(
        cpp_bool *aCancelBubble) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCancelBubble(
        cpp_bool aCancelBubble) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsChar(
        cpp_bool *aIsChar) = 0;

    virtual void * STDMETHODCALLTYPE AsEvent(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMUIEvent, 0x85ae52eb, 0x37fa, 0x4fd9, 0xa2,0xe6, 0xc7,0xd0,0xf2,0xa5,0x21,0xb3)
#endif
#else
typedef struct nsIDOMUIEventVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMUIEvent *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMUIEvent *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMUIEvent *This);

    /*** nsIDOMUIEvent methods ***/
    nsresult (STDMETHODCALLTYPE *GetView)(
        nsIDOMUIEvent *This,
        mozIDOMWindowProxy **aView);

    nsresult (STDMETHODCALLTYPE *GetDetail)(
        nsIDOMUIEvent *This,
        LONG *aDetail);

    nsresult (STDMETHODCALLTYPE *InitUIEvent)(
        nsIDOMUIEvent *This,
        const nsAString *typeArg,
        cpp_bool canBubbleArg,
        cpp_bool cancelableArg,
        mozIDOMWindow *viewArg,
        LONG detailArg);

    nsresult (STDMETHODCALLTYPE *GetLayerX)(
        nsIDOMUIEvent *This,
        LONG *aLayerX);

    nsresult (STDMETHODCALLTYPE *GetLayerY)(
        nsIDOMUIEvent *This,
        LONG *aLayerY);

    nsresult (STDMETHODCALLTYPE *GetPageX)(
        nsIDOMUIEvent *This,
        LONG *aPageX);

    nsresult (STDMETHODCALLTYPE *GetPageY)(
        nsIDOMUIEvent *This,
        LONG *aPageY);

    nsresult (STDMETHODCALLTYPE *GetWhich)(
        nsIDOMUIEvent *This,
        UINT32 *aWhich);

    nsresult (STDMETHODCALLTYPE *GetRangeParent)(
        nsIDOMUIEvent *This,
        nsIDOMNode **aRangeParent);

    nsresult (STDMETHODCALLTYPE *GetRangeOffset)(
        nsIDOMUIEvent *This,
        LONG *aRangeOffset);

    nsresult (STDMETHODCALLTYPE *GetCancelBubble)(
        nsIDOMUIEvent *This,
        cpp_bool *aCancelBubble);

    nsresult (STDMETHODCALLTYPE *SetCancelBubble)(
        nsIDOMUIEvent *This,
        cpp_bool aCancelBubble);

    nsresult (STDMETHODCALLTYPE *GetIsChar)(
        nsIDOMUIEvent *This,
        cpp_bool *aIsChar);

    void * (STDMETHODCALLTYPE *AsEvent)(
        nsIDOMUIEvent *This);

    END_INTERFACE
} nsIDOMUIEventVtbl;

interface nsIDOMUIEvent {
    CONST_VTBL nsIDOMUIEventVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMUIEvent_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMUIEvent_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMUIEvent_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMUIEvent methods ***/
#define nsIDOMUIEvent_GetView(This,aView) (This)->lpVtbl->GetView(This,aView)
#define nsIDOMUIEvent_GetDetail(This,aDetail) (This)->lpVtbl->GetDetail(This,aDetail)
#define nsIDOMUIEvent_InitUIEvent(This,typeArg,canBubbleArg,cancelableArg,viewArg,detailArg) (This)->lpVtbl->InitUIEvent(This,typeArg,canBubbleArg,cancelableArg,viewArg,detailArg)
#define nsIDOMUIEvent_GetLayerX(This,aLayerX) (This)->lpVtbl->GetLayerX(This,aLayerX)
#define nsIDOMUIEvent_GetLayerY(This,aLayerY) (This)->lpVtbl->GetLayerY(This,aLayerY)
#define nsIDOMUIEvent_GetPageX(This,aPageX) (This)->lpVtbl->GetPageX(This,aPageX)
#define nsIDOMUIEvent_GetPageY(This,aPageY) (This)->lpVtbl->GetPageY(This,aPageY)
#define nsIDOMUIEvent_GetWhich(This,aWhich) (This)->lpVtbl->GetWhich(This,aWhich)
#define nsIDOMUIEvent_GetRangeParent(This,aRangeParent) (This)->lpVtbl->GetRangeParent(This,aRangeParent)
#define nsIDOMUIEvent_GetRangeOffset(This,aRangeOffset) (This)->lpVtbl->GetRangeOffset(This,aRangeOffset)
#define nsIDOMUIEvent_GetCancelBubble(This,aCancelBubble) (This)->lpVtbl->GetCancelBubble(This,aCancelBubble)
#define nsIDOMUIEvent_SetCancelBubble(This,aCancelBubble) (This)->lpVtbl->SetCancelBubble(This,aCancelBubble)
#define nsIDOMUIEvent_GetIsChar(This,aIsChar) (This)->lpVtbl->GetIsChar(This,aIsChar)
#define nsIDOMUIEvent_AsEvent(This) (This)->lpVtbl->AsEvent(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMUIEvent_QueryInterface(nsIDOMUIEvent* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMUIEvent_AddRef(nsIDOMUIEvent* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMUIEvent_Release(nsIDOMUIEvent* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMUIEvent methods ***/
static FORCEINLINE nsresult nsIDOMUIEvent_GetView(nsIDOMUIEvent* This,mozIDOMWindowProxy **aView) {
    return This->lpVtbl->GetView(This,aView);
}
static FORCEINLINE nsresult nsIDOMUIEvent_GetDetail(nsIDOMUIEvent* This,LONG *aDetail) {
    return This->lpVtbl->GetDetail(This,aDetail);
}
static FORCEINLINE nsresult nsIDOMUIEvent_InitUIEvent(nsIDOMUIEvent* This,const nsAString *typeArg,cpp_bool canBubbleArg,cpp_bool cancelableArg,mozIDOMWindow *viewArg,LONG detailArg) {
    return This->lpVtbl->InitUIEvent(This,typeArg,canBubbleArg,cancelableArg,viewArg,detailArg);
}
static FORCEINLINE nsresult nsIDOMUIEvent_GetLayerX(nsIDOMUIEvent* This,LONG *aLayerX) {
    return This->lpVtbl->GetLayerX(This,aLayerX);
}
static FORCEINLINE nsresult nsIDOMUIEvent_GetLayerY(nsIDOMUIEvent* This,LONG *aLayerY) {
    return This->lpVtbl->GetLayerY(This,aLayerY);
}
static FORCEINLINE nsresult nsIDOMUIEvent_GetPageX(nsIDOMUIEvent* This,LONG *aPageX) {
    return This->lpVtbl->GetPageX(This,aPageX);
}
static FORCEINLINE nsresult nsIDOMUIEvent_GetPageY(nsIDOMUIEvent* This,LONG *aPageY) {
    return This->lpVtbl->GetPageY(This,aPageY);
}
static FORCEINLINE nsresult nsIDOMUIEvent_GetWhich(nsIDOMUIEvent* This,UINT32 *aWhich) {
    return This->lpVtbl->GetWhich(This,aWhich);
}
static FORCEINLINE nsresult nsIDOMUIEvent_GetRangeParent(nsIDOMUIEvent* This,nsIDOMNode **aRangeParent) {
    return This->lpVtbl->GetRangeParent(This,aRangeParent);
}
static FORCEINLINE nsresult nsIDOMUIEvent_GetRangeOffset(nsIDOMUIEvent* This,LONG *aRangeOffset) {
    return This->lpVtbl->GetRangeOffset(This,aRangeOffset);
}
static FORCEINLINE nsresult nsIDOMUIEvent_GetCancelBubble(nsIDOMUIEvent* This,cpp_bool *aCancelBubble) {
    return This->lpVtbl->GetCancelBubble(This,aCancelBubble);
}
static FORCEINLINE nsresult nsIDOMUIEvent_SetCancelBubble(nsIDOMUIEvent* This,cpp_bool aCancelBubble) {
    return This->lpVtbl->SetCancelBubble(This,aCancelBubble);
}
static FORCEINLINE nsresult nsIDOMUIEvent_GetIsChar(nsIDOMUIEvent* This,cpp_bool *aIsChar) {
    return This->lpVtbl->GetIsChar(This,aIsChar);
}
static FORCEINLINE void * nsIDOMUIEvent_AsEvent(nsIDOMUIEvent* This) {
    return This->lpVtbl->AsEvent(This);
}
#endif
#endif

#endif


#endif  /* __nsIDOMUIEvent_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMMouseEvent interface
 */
#ifndef __nsIDOMMouseEvent_INTERFACE_DEFINED__
#define __nsIDOMMouseEvent_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMMouseEvent, 0x5bdab8d8, 0x7933, 0x4c5c, 0xb6,0xd1, 0xab,0x34,0x48,0x12,0x37,0xf7);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("5bdab8d8-7933-4c5c-b6d1-ab34481237f7")
nsIDOMMouseEvent : public nsIDOMUIEvent
{
    virtual nsresult STDMETHODCALLTYPE GetScreenX(
        LONG *aScreenX) = 0;

    virtual nsresult STDMETHODCALLTYPE GetScreenY(
        LONG *aScreenY) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMozMovementX(
        LONG *aMozMovementX) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMozMovementY(
        LONG *aMozMovementY) = 0;

    virtual nsresult STDMETHODCALLTYPE GetClientX(
        LONG *aClientX) = 0;

    virtual nsresult STDMETHODCALLTYPE GetClientY(
        LONG *aClientY) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCtrlKey(
        cpp_bool *aCtrlKey) = 0;

    virtual nsresult STDMETHODCALLTYPE GetShiftKey(
        cpp_bool *aShiftKey) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAltKey(
        cpp_bool *aAltKey) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMetaKey(
        cpp_bool *aMetaKey) = 0;

    virtual nsresult STDMETHODCALLTYPE GetButton(
        short *aButton) = 0;

    virtual nsresult STDMETHODCALLTYPE GetButtons(
        UINT16 *aButtons) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRelatedTarget(
        nsIDOMEventTarget **aRelatedTarget) = 0;

    virtual nsresult STDMETHODCALLTYPE InitMouseEvent(
        const nsAString *typeArg,
        cpp_bool canBubbleArg,
        cpp_bool cancelableArg,
        mozIDOMWindow *viewArg,
        LONG detailArg,
        LONG screenXArg,
        LONG screenYArg,
        LONG clientXArg,
        LONG clientYArg,
        cpp_bool ctrlKeyArg,
        cpp_bool altKeyArg,
        cpp_bool shiftKeyArg,
        cpp_bool metaKeyArg,
        UINT16 buttonArg,
        nsIDOMEventTarget *relatedTargetArg) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMozPressure(
        float *aMozPressure) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMozInputSource(
        UINT16 *aMozInputSource) = 0;

    virtual nsresult STDMETHODCALLTYPE GetModifierState(
        const nsAString *keyArg,
        cpp_bool *_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMMouseEvent, 0x5bdab8d8, 0x7933, 0x4c5c, 0xb6,0xd1, 0xab,0x34,0x48,0x12,0x37,0xf7)
#endif
#else
typedef struct nsIDOMMouseEventVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMMouseEvent *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMMouseEvent *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMMouseEvent *This);

    /*** nsIDOMUIEvent methods ***/
    nsresult (STDMETHODCALLTYPE *GetView)(
        nsIDOMMouseEvent *This,
        mozIDOMWindowProxy **aView);

    nsresult (STDMETHODCALLTYPE *GetDetail)(
        nsIDOMMouseEvent *This,
        LONG *aDetail);

    nsresult (STDMETHODCALLTYPE *InitUIEvent)(
        nsIDOMMouseEvent *This,
        const nsAString *typeArg,
        cpp_bool canBubbleArg,
        cpp_bool cancelableArg,
        mozIDOMWindow *viewArg,
        LONG detailArg);

    nsresult (STDMETHODCALLTYPE *GetLayerX)(
        nsIDOMMouseEvent *This,
        LONG *aLayerX);

    nsresult (STDMETHODCALLTYPE *GetLayerY)(
        nsIDOMMouseEvent *This,
        LONG *aLayerY);

    nsresult (STDMETHODCALLTYPE *GetPageX)(
        nsIDOMMouseEvent *This,
        LONG *aPageX);

    nsresult (STDMETHODCALLTYPE *GetPageY)(
        nsIDOMMouseEvent *This,
        LONG *aPageY);

    nsresult (STDMETHODCALLTYPE *GetWhich)(
        nsIDOMMouseEvent *This,
        UINT32 *aWhich);

    nsresult (STDMETHODCALLTYPE *GetRangeParent)(
        nsIDOMMouseEvent *This,
        nsIDOMNode **aRangeParent);

    nsresult (STDMETHODCALLTYPE *GetRangeOffset)(
        nsIDOMMouseEvent *This,
        LONG *aRangeOffset);

    nsresult (STDMETHODCALLTYPE *GetCancelBubble)(
        nsIDOMMouseEvent *This,
        cpp_bool *aCancelBubble);

    nsresult (STDMETHODCALLTYPE *SetCancelBubble)(
        nsIDOMMouseEvent *This,
        cpp_bool aCancelBubble);

    nsresult (STDMETHODCALLTYPE *GetIsChar)(
        nsIDOMMouseEvent *This,
        cpp_bool *aIsChar);

    void * (STDMETHODCALLTYPE *AsEvent)(
        nsIDOMMouseEvent *This);

    /*** nsIDOMMouseEvent methods ***/
    nsresult (STDMETHODCALLTYPE *GetScreenX)(
        nsIDOMMouseEvent *This,
        LONG *aScreenX);

    nsresult (STDMETHODCALLTYPE *GetScreenY)(
        nsIDOMMouseEvent *This,
        LONG *aScreenY);

    nsresult (STDMETHODCALLTYPE *GetMozMovementX)(
        nsIDOMMouseEvent *This,
        LONG *aMozMovementX);

    nsresult (STDMETHODCALLTYPE *GetMozMovementY)(
        nsIDOMMouseEvent *This,
        LONG *aMozMovementY);

    nsresult (STDMETHODCALLTYPE *GetClientX)(
        nsIDOMMouseEvent *This,
        LONG *aClientX);

    nsresult (STDMETHODCALLTYPE *GetClientY)(
        nsIDOMMouseEvent *This,
        LONG *aClientY);

    nsresult (STDMETHODCALLTYPE *GetCtrlKey)(
        nsIDOMMouseEvent *This,
        cpp_bool *aCtrlKey);

    nsresult (STDMETHODCALLTYPE *GetShiftKey)(
        nsIDOMMouseEvent *This,
        cpp_bool *aShiftKey);

    nsresult (STDMETHODCALLTYPE *GetAltKey)(
        nsIDOMMouseEvent *This,
        cpp_bool *aAltKey);

    nsresult (STDMETHODCALLTYPE *GetMetaKey)(
        nsIDOMMouseEvent *This,
        cpp_bool *aMetaKey);

    nsresult (STDMETHODCALLTYPE *GetButton)(
        nsIDOMMouseEvent *This,
        short *aButton);

    nsresult (STDMETHODCALLTYPE *GetButtons)(
        nsIDOMMouseEvent *This,
        UINT16 *aButtons);

    nsresult (STDMETHODCALLTYPE *GetRelatedTarget)(
        nsIDOMMouseEvent *This,
        nsIDOMEventTarget **aRelatedTarget);

    nsresult (STDMETHODCALLTYPE *InitMouseEvent)(
        nsIDOMMouseEvent *This,
        const nsAString *typeArg,
        cpp_bool canBubbleArg,
        cpp_bool cancelableArg,
        mozIDOMWindow *viewArg,
        LONG detailArg,
        LONG screenXArg,
        LONG screenYArg,
        LONG clientXArg,
        LONG clientYArg,
        cpp_bool ctrlKeyArg,
        cpp_bool altKeyArg,
        cpp_bool shiftKeyArg,
        cpp_bool metaKeyArg,
        UINT16 buttonArg,
        nsIDOMEventTarget *relatedTargetArg);

    nsresult (STDMETHODCALLTYPE *GetMozPressure)(
        nsIDOMMouseEvent *This,
        float *aMozPressure);

    nsresult (STDMETHODCALLTYPE *GetMozInputSource)(
        nsIDOMMouseEvent *This,
        UINT16 *aMozInputSource);

    nsresult (STDMETHODCALLTYPE *GetModifierState)(
        nsIDOMMouseEvent *This,
        const nsAString *keyArg,
        cpp_bool *_retval);

    END_INTERFACE
} nsIDOMMouseEventVtbl;

interface nsIDOMMouseEvent {
    CONST_VTBL nsIDOMMouseEventVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMMouseEvent_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMMouseEvent_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMMouseEvent_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMUIEvent methods ***/
#define nsIDOMMouseEvent_GetView(This,aView) (This)->lpVtbl->GetView(This,aView)
#define nsIDOMMouseEvent_GetDetail(This,aDetail) (This)->lpVtbl->GetDetail(This,aDetail)
#define nsIDOMMouseEvent_InitUIEvent(This,typeArg,canBubbleArg,cancelableArg,viewArg,detailArg) (This)->lpVtbl->InitUIEvent(This,typeArg,canBubbleArg,cancelableArg,viewArg,detailArg)
#define nsIDOMMouseEvent_GetLayerX(This,aLayerX) (This)->lpVtbl->GetLayerX(This,aLayerX)
#define nsIDOMMouseEvent_GetLayerY(This,aLayerY) (This)->lpVtbl->GetLayerY(This,aLayerY)
#define nsIDOMMouseEvent_GetPageX(This,aPageX) (This)->lpVtbl->GetPageX(This,aPageX)
#define nsIDOMMouseEvent_GetPageY(This,aPageY) (This)->lpVtbl->GetPageY(This,aPageY)
#define nsIDOMMouseEvent_GetWhich(This,aWhich) (This)->lpVtbl->GetWhich(This,aWhich)
#define nsIDOMMouseEvent_GetRangeParent(This,aRangeParent) (This)->lpVtbl->GetRangeParent(This,aRangeParent)
#define nsIDOMMouseEvent_GetRangeOffset(This,aRangeOffset) (This)->lpVtbl->GetRangeOffset(This,aRangeOffset)
#define nsIDOMMouseEvent_GetCancelBubble(This,aCancelBubble) (This)->lpVtbl->GetCancelBubble(This,aCancelBubble)
#define nsIDOMMouseEvent_SetCancelBubble(This,aCancelBubble) (This)->lpVtbl->SetCancelBubble(This,aCancelBubble)
#define nsIDOMMouseEvent_GetIsChar(This,aIsChar) (This)->lpVtbl->GetIsChar(This,aIsChar)
#define nsIDOMMouseEvent_AsEvent(This) (This)->lpVtbl->AsEvent(This)
/*** nsIDOMMouseEvent methods ***/
#define nsIDOMMouseEvent_GetScreenX(This,aScreenX) (This)->lpVtbl->GetScreenX(This,aScreenX)
#define nsIDOMMouseEvent_GetScreenY(This,aScreenY) (This)->lpVtbl->GetScreenY(This,aScreenY)
#define nsIDOMMouseEvent_GetMozMovementX(This,aMozMovementX) (This)->lpVtbl->GetMozMovementX(This,aMozMovementX)
#define nsIDOMMouseEvent_GetMozMovementY(This,aMozMovementY) (This)->lpVtbl->GetMozMovementY(This,aMozMovementY)
#define nsIDOMMouseEvent_GetClientX(This,aClientX) (This)->lpVtbl->GetClientX(This,aClientX)
#define nsIDOMMouseEvent_GetClientY(This,aClientY) (This)->lpVtbl->GetClientY(This,aClientY)
#define nsIDOMMouseEvent_GetCtrlKey(This,aCtrlKey) (This)->lpVtbl->GetCtrlKey(This,aCtrlKey)
#define nsIDOMMouseEvent_GetShiftKey(This,aShiftKey) (This)->lpVtbl->GetShiftKey(This,aShiftKey)
#define nsIDOMMouseEvent_GetAltKey(This,aAltKey) (This)->lpVtbl->GetAltKey(This,aAltKey)
#define nsIDOMMouseEvent_GetMetaKey(This,aMetaKey) (This)->lpVtbl->GetMetaKey(This,aMetaKey)
#define nsIDOMMouseEvent_GetButton(This,aButton) (This)->lpVtbl->GetButton(This,aButton)
#define nsIDOMMouseEvent_GetButtons(This,aButtons) (This)->lpVtbl->GetButtons(This,aButtons)
#define nsIDOMMouseEvent_GetRelatedTarget(This,aRelatedTarget) (This)->lpVtbl->GetRelatedTarget(This,aRelatedTarget)
#define nsIDOMMouseEvent_InitMouseEvent(This,typeArg,canBubbleArg,cancelableArg,viewArg,detailArg,screenXArg,screenYArg,clientXArg,clientYArg,ctrlKeyArg,altKeyArg,shiftKeyArg,metaKeyArg,buttonArg,relatedTargetArg) (This)->lpVtbl->InitMouseEvent(This,typeArg,canBubbleArg,cancelableArg,viewArg,detailArg,screenXArg,screenYArg,clientXArg,clientYArg,ctrlKeyArg,altKeyArg,shiftKeyArg,metaKeyArg,buttonArg,relatedTargetArg)
#define nsIDOMMouseEvent_GetMozPressure(This,aMozPressure) (This)->lpVtbl->GetMozPressure(This,aMozPressure)
#define nsIDOMMouseEvent_GetMozInputSource(This,aMozInputSource) (This)->lpVtbl->GetMozInputSource(This,aMozInputSource)
#define nsIDOMMouseEvent_GetModifierState(This,keyArg,_retval) (This)->lpVtbl->GetModifierState(This,keyArg,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMMouseEvent_QueryInterface(nsIDOMMouseEvent* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMMouseEvent_AddRef(nsIDOMMouseEvent* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMMouseEvent_Release(nsIDOMMouseEvent* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMUIEvent methods ***/
static FORCEINLINE nsresult nsIDOMMouseEvent_GetView(nsIDOMMouseEvent* This,mozIDOMWindowProxy **aView) {
    return This->lpVtbl->GetView(This,aView);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetDetail(nsIDOMMouseEvent* This,LONG *aDetail) {
    return This->lpVtbl->GetDetail(This,aDetail);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_InitUIEvent(nsIDOMMouseEvent* This,const nsAString *typeArg,cpp_bool canBubbleArg,cpp_bool cancelableArg,mozIDOMWindow *viewArg,LONG detailArg) {
    return This->lpVtbl->InitUIEvent(This,typeArg,canBubbleArg,cancelableArg,viewArg,detailArg);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetLayerX(nsIDOMMouseEvent* This,LONG *aLayerX) {
    return This->lpVtbl->GetLayerX(This,aLayerX);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetLayerY(nsIDOMMouseEvent* This,LONG *aLayerY) {
    return This->lpVtbl->GetLayerY(This,aLayerY);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetPageX(nsIDOMMouseEvent* This,LONG *aPageX) {
    return This->lpVtbl->GetPageX(This,aPageX);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetPageY(nsIDOMMouseEvent* This,LONG *aPageY) {
    return This->lpVtbl->GetPageY(This,aPageY);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetWhich(nsIDOMMouseEvent* This,UINT32 *aWhich) {
    return This->lpVtbl->GetWhich(This,aWhich);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetRangeParent(nsIDOMMouseEvent* This,nsIDOMNode **aRangeParent) {
    return This->lpVtbl->GetRangeParent(This,aRangeParent);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetRangeOffset(nsIDOMMouseEvent* This,LONG *aRangeOffset) {
    return This->lpVtbl->GetRangeOffset(This,aRangeOffset);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetCancelBubble(nsIDOMMouseEvent* This,cpp_bool *aCancelBubble) {
    return This->lpVtbl->GetCancelBubble(This,aCancelBubble);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_SetCancelBubble(nsIDOMMouseEvent* This,cpp_bool aCancelBubble) {
    return This->lpVtbl->SetCancelBubble(This,aCancelBubble);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetIsChar(nsIDOMMouseEvent* This,cpp_bool *aIsChar) {
    return This->lpVtbl->GetIsChar(This,aIsChar);
}
static FORCEINLINE void * nsIDOMMouseEvent_AsEvent(nsIDOMMouseEvent* This) {
    return This->lpVtbl->AsEvent(This);
}
/*** nsIDOMMouseEvent methods ***/
static FORCEINLINE nsresult nsIDOMMouseEvent_GetScreenX(nsIDOMMouseEvent* This,LONG *aScreenX) {
    return This->lpVtbl->GetScreenX(This,aScreenX);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetScreenY(nsIDOMMouseEvent* This,LONG *aScreenY) {
    return This->lpVtbl->GetScreenY(This,aScreenY);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetMozMovementX(nsIDOMMouseEvent* This,LONG *aMozMovementX) {
    return This->lpVtbl->GetMozMovementX(This,aMozMovementX);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetMozMovementY(nsIDOMMouseEvent* This,LONG *aMozMovementY) {
    return This->lpVtbl->GetMozMovementY(This,aMozMovementY);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetClientX(nsIDOMMouseEvent* This,LONG *aClientX) {
    return This->lpVtbl->GetClientX(This,aClientX);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetClientY(nsIDOMMouseEvent* This,LONG *aClientY) {
    return This->lpVtbl->GetClientY(This,aClientY);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetCtrlKey(nsIDOMMouseEvent* This,cpp_bool *aCtrlKey) {
    return This->lpVtbl->GetCtrlKey(This,aCtrlKey);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetShiftKey(nsIDOMMouseEvent* This,cpp_bool *aShiftKey) {
    return This->lpVtbl->GetShiftKey(This,aShiftKey);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetAltKey(nsIDOMMouseEvent* This,cpp_bool *aAltKey) {
    return This->lpVtbl->GetAltKey(This,aAltKey);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetMetaKey(nsIDOMMouseEvent* This,cpp_bool *aMetaKey) {
    return This->lpVtbl->GetMetaKey(This,aMetaKey);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetButton(nsIDOMMouseEvent* This,short *aButton) {
    return This->lpVtbl->GetButton(This,aButton);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetButtons(nsIDOMMouseEvent* This,UINT16 *aButtons) {
    return This->lpVtbl->GetButtons(This,aButtons);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetRelatedTarget(nsIDOMMouseEvent* This,nsIDOMEventTarget **aRelatedTarget) {
    return This->lpVtbl->GetRelatedTarget(This,aRelatedTarget);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_InitMouseEvent(nsIDOMMouseEvent* This,const nsAString *typeArg,cpp_bool canBubbleArg,cpp_bool cancelableArg,mozIDOMWindow *viewArg,LONG detailArg,LONG screenXArg,LONG screenYArg,LONG clientXArg,LONG clientYArg,cpp_bool ctrlKeyArg,cpp_bool altKeyArg,cpp_bool shiftKeyArg,cpp_bool metaKeyArg,UINT16 buttonArg,nsIDOMEventTarget *relatedTargetArg) {
    return This->lpVtbl->InitMouseEvent(This,typeArg,canBubbleArg,cancelableArg,viewArg,detailArg,screenXArg,screenYArg,clientXArg,clientYArg,ctrlKeyArg,altKeyArg,shiftKeyArg,metaKeyArg,buttonArg,relatedTargetArg);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetMozPressure(nsIDOMMouseEvent* This,float *aMozPressure) {
    return This->lpVtbl->GetMozPressure(This,aMozPressure);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetMozInputSource(nsIDOMMouseEvent* This,UINT16 *aMozInputSource) {
    return This->lpVtbl->GetMozInputSource(This,aMozInputSource);
}
static FORCEINLINE nsresult nsIDOMMouseEvent_GetModifierState(nsIDOMMouseEvent* This,const nsAString *keyArg,cpp_bool *_retval) {
    return This->lpVtbl->GetModifierState(This,keyArg,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIDOMMouseEvent_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDOMKeyEvent interface
 */
#ifndef __nsIDOMKeyEvent_INTERFACE_DEFINED__
#define __nsIDOMKeyEvent_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDOMKeyEvent, 0x2e52eb99, 0x670d, 0x469a, 0xb5,0x1f, 0x8e,0xfe,0xe2,0xdd,0x09,0x1d);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("2e52eb99-670d-469a-b51f-8efee2dd091d")
nsIDOMKeyEvent : public nsIDOMUIEvent
{
    virtual nsresult STDMETHODCALLTYPE GetCharCode(
        UINT32 *aCharCode) = 0;

    virtual nsresult STDMETHODCALLTYPE GetKeyCode(
        UINT32 *aKeyCode) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAltKey(
        cpp_bool *aAltKey) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCtrlKey(
        cpp_bool *aCtrlKey) = 0;

    virtual nsresult STDMETHODCALLTYPE GetShiftKey(
        cpp_bool *aShiftKey) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMetaKey(
        cpp_bool *aMetaKey) = 0;

    virtual nsresult STDMETHODCALLTYPE InitKeyEvent(
        const nsAString *typeArg,
        cpp_bool canBubbleArg,
        cpp_bool cancelableArg,
        mozIDOMWindowProxy *viewArg,
        cpp_bool ctrlKeyArg,
        cpp_bool altKeyArg,
        cpp_bool shiftKeyArg,
        cpp_bool metaKeyArg,
        UINT32 keyCodeArg,
        UINT32 charCodeArg) = 0;

    virtual nsresult STDMETHODCALLTYPE GetModifierState(
        const nsAString *keyArg,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLocation(
        UINT32 *aLocation) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRepeat(
        cpp_bool *aRepeat) = 0;

    virtual nsresult STDMETHODCALLTYPE GetKey(
        nsAString *aKey) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDOMKeyEvent, 0x2e52eb99, 0x670d, 0x469a, 0xb5,0x1f, 0x8e,0xfe,0xe2,0xdd,0x09,0x1d)
#endif
#else
typedef struct nsIDOMKeyEventVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDOMKeyEvent *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDOMKeyEvent *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDOMKeyEvent *This);

    /*** nsIDOMUIEvent methods ***/
    nsresult (STDMETHODCALLTYPE *GetView)(
        nsIDOMKeyEvent *This,
        mozIDOMWindowProxy **aView);

    nsresult (STDMETHODCALLTYPE *GetDetail)(
        nsIDOMKeyEvent *This,
        LONG *aDetail);

    nsresult (STDMETHODCALLTYPE *InitUIEvent)(
        nsIDOMKeyEvent *This,
        const nsAString *typeArg,
        cpp_bool canBubbleArg,
        cpp_bool cancelableArg,
        mozIDOMWindow *viewArg,
        LONG detailArg);

    nsresult (STDMETHODCALLTYPE *GetLayerX)(
        nsIDOMKeyEvent *This,
        LONG *aLayerX);

    nsresult (STDMETHODCALLTYPE *GetLayerY)(
        nsIDOMKeyEvent *This,
        LONG *aLayerY);

    nsresult (STDMETHODCALLTYPE *GetPageX)(
        nsIDOMKeyEvent *This,
        LONG *aPageX);

    nsresult (STDMETHODCALLTYPE *GetPageY)(
        nsIDOMKeyEvent *This,
        LONG *aPageY);

    nsresult (STDMETHODCALLTYPE *GetWhich)(
        nsIDOMKeyEvent *This,
        UINT32 *aWhich);

    nsresult (STDMETHODCALLTYPE *GetRangeParent)(
        nsIDOMKeyEvent *This,
        nsIDOMNode **aRangeParent);

    nsresult (STDMETHODCALLTYPE *GetRangeOffset)(
        nsIDOMKeyEvent *This,
        LONG *aRangeOffset);

    nsresult (STDMETHODCALLTYPE *GetCancelBubble)(
        nsIDOMKeyEvent *This,
        cpp_bool *aCancelBubble);

    nsresult (STDMETHODCALLTYPE *SetCancelBubble)(
        nsIDOMKeyEvent *This,
        cpp_bool aCancelBubble);

    nsresult (STDMETHODCALLTYPE *GetIsChar)(
        nsIDOMKeyEvent *This,
        cpp_bool *aIsChar);

    void * (STDMETHODCALLTYPE *AsEvent)(
        nsIDOMKeyEvent *This);

    /*** nsIDOMKeyEvent methods ***/
    nsresult (STDMETHODCALLTYPE *GetCharCode)(
        nsIDOMKeyEvent *This,
        UINT32 *aCharCode);

    nsresult (STDMETHODCALLTYPE *GetKeyCode)(
        nsIDOMKeyEvent *This,
        UINT32 *aKeyCode);

    nsresult (STDMETHODCALLTYPE *GetAltKey)(
        nsIDOMKeyEvent *This,
        cpp_bool *aAltKey);

    nsresult (STDMETHODCALLTYPE *GetCtrlKey)(
        nsIDOMKeyEvent *This,
        cpp_bool *aCtrlKey);

    nsresult (STDMETHODCALLTYPE *GetShiftKey)(
        nsIDOMKeyEvent *This,
        cpp_bool *aShiftKey);

    nsresult (STDMETHODCALLTYPE *GetMetaKey)(
        nsIDOMKeyEvent *This,
        cpp_bool *aMetaKey);

    nsresult (STDMETHODCALLTYPE *InitKeyEvent)(
        nsIDOMKeyEvent *This,
        const nsAString *typeArg,
        cpp_bool canBubbleArg,
        cpp_bool cancelableArg,
        mozIDOMWindowProxy *viewArg,
        cpp_bool ctrlKeyArg,
        cpp_bool altKeyArg,
        cpp_bool shiftKeyArg,
        cpp_bool metaKeyArg,
        UINT32 keyCodeArg,
        UINT32 charCodeArg);

    nsresult (STDMETHODCALLTYPE *GetModifierState)(
        nsIDOMKeyEvent *This,
        const nsAString *keyArg,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetLocation)(
        nsIDOMKeyEvent *This,
        UINT32 *aLocation);

    nsresult (STDMETHODCALLTYPE *GetRepeat)(
        nsIDOMKeyEvent *This,
        cpp_bool *aRepeat);

    nsresult (STDMETHODCALLTYPE *GetKey)(
        nsIDOMKeyEvent *This,
        nsAString *aKey);

    END_INTERFACE
} nsIDOMKeyEventVtbl;

interface nsIDOMKeyEvent {
    CONST_VTBL nsIDOMKeyEventVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDOMKeyEvent_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDOMKeyEvent_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDOMKeyEvent_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDOMUIEvent methods ***/
#define nsIDOMKeyEvent_GetView(This,aView) (This)->lpVtbl->GetView(This,aView)
#define nsIDOMKeyEvent_GetDetail(This,aDetail) (This)->lpVtbl->GetDetail(This,aDetail)
#define nsIDOMKeyEvent_InitUIEvent(This,typeArg,canBubbleArg,cancelableArg,viewArg,detailArg) (This)->lpVtbl->InitUIEvent(This,typeArg,canBubbleArg,cancelableArg,viewArg,detailArg)
#define nsIDOMKeyEvent_GetLayerX(This,aLayerX) (This)->lpVtbl->GetLayerX(This,aLayerX)
#define nsIDOMKeyEvent_GetLayerY(This,aLayerY) (This)->lpVtbl->GetLayerY(This,aLayerY)
#define nsIDOMKeyEvent_GetPageX(This,aPageX) (This)->lpVtbl->GetPageX(This,aPageX)
#define nsIDOMKeyEvent_GetPageY(This,aPageY) (This)->lpVtbl->GetPageY(This,aPageY)
#define nsIDOMKeyEvent_GetWhich(This,aWhich) (This)->lpVtbl->GetWhich(This,aWhich)
#define nsIDOMKeyEvent_GetRangeParent(This,aRangeParent) (This)->lpVtbl->GetRangeParent(This,aRangeParent)
#define nsIDOMKeyEvent_GetRangeOffset(This,aRangeOffset) (This)->lpVtbl->GetRangeOffset(This,aRangeOffset)
#define nsIDOMKeyEvent_GetCancelBubble(This,aCancelBubble) (This)->lpVtbl->GetCancelBubble(This,aCancelBubble)
#define nsIDOMKeyEvent_SetCancelBubble(This,aCancelBubble) (This)->lpVtbl->SetCancelBubble(This,aCancelBubble)
#define nsIDOMKeyEvent_GetIsChar(This,aIsChar) (This)->lpVtbl->GetIsChar(This,aIsChar)
#define nsIDOMKeyEvent_AsEvent(This) (This)->lpVtbl->AsEvent(This)
/*** nsIDOMKeyEvent methods ***/
#define nsIDOMKeyEvent_GetCharCode(This,aCharCode) (This)->lpVtbl->GetCharCode(This,aCharCode)
#define nsIDOMKeyEvent_GetKeyCode(This,aKeyCode) (This)->lpVtbl->GetKeyCode(This,aKeyCode)
#define nsIDOMKeyEvent_GetAltKey(This,aAltKey) (This)->lpVtbl->GetAltKey(This,aAltKey)
#define nsIDOMKeyEvent_GetCtrlKey(This,aCtrlKey) (This)->lpVtbl->GetCtrlKey(This,aCtrlKey)
#define nsIDOMKeyEvent_GetShiftKey(This,aShiftKey) (This)->lpVtbl->GetShiftKey(This,aShiftKey)
#define nsIDOMKeyEvent_GetMetaKey(This,aMetaKey) (This)->lpVtbl->GetMetaKey(This,aMetaKey)
#define nsIDOMKeyEvent_InitKeyEvent(This,typeArg,canBubbleArg,cancelableArg,viewArg,ctrlKeyArg,altKeyArg,shiftKeyArg,metaKeyArg,keyCodeArg,charCodeArg) (This)->lpVtbl->InitKeyEvent(This,typeArg,canBubbleArg,cancelableArg,viewArg,ctrlKeyArg,altKeyArg,shiftKeyArg,metaKeyArg,keyCodeArg,charCodeArg)
#define nsIDOMKeyEvent_GetModifierState(This,keyArg,_retval) (This)->lpVtbl->GetModifierState(This,keyArg,_retval)
#define nsIDOMKeyEvent_GetLocation(This,aLocation) (This)->lpVtbl->GetLocation(This,aLocation)
#define nsIDOMKeyEvent_GetRepeat(This,aRepeat) (This)->lpVtbl->GetRepeat(This,aRepeat)
#define nsIDOMKeyEvent_GetKey(This,aKey) (This)->lpVtbl->GetKey(This,aKey)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDOMKeyEvent_QueryInterface(nsIDOMKeyEvent* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDOMKeyEvent_AddRef(nsIDOMKeyEvent* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDOMKeyEvent_Release(nsIDOMKeyEvent* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDOMUIEvent methods ***/
static FORCEINLINE nsresult nsIDOMKeyEvent_GetView(nsIDOMKeyEvent* This,mozIDOMWindowProxy **aView) {
    return This->lpVtbl->GetView(This,aView);
}
static FORCEINLINE nsresult nsIDOMKeyEvent_GetDetail(nsIDOMKeyEvent* This,LONG *aDetail) {
    return This->lpVtbl->GetDetail(This,aDetail);
}
static FORCEINLINE nsresult nsIDOMKeyEvent_InitUIEvent(nsIDOMKeyEvent* This,const nsAString *typeArg,cpp_bool canBubbleArg,cpp_bool cancelableArg,mozIDOMWindow *viewArg,LONG detailArg) {
    return This->lpVtbl->InitUIEvent(This,typeArg,canBubbleArg,cancelableArg,viewArg,detailArg);
}
static FORCEINLINE nsresult nsIDOMKeyEvent_GetLayerX(nsIDOMKeyEvent* This,LONG *aLayerX) {
    return This->lpVtbl->GetLayerX(This,aLayerX);
}
static FORCEINLINE nsresult nsIDOMKeyEvent_GetLayerY(nsIDOMKeyEvent* This,LONG *aLayerY) {
    return This->lpVtbl->GetLayerY(This,aLayerY);
}
static FORCEINLINE nsresult nsIDOMKeyEvent_GetPageX(nsIDOMKeyEvent* This,LONG *aPageX) {
    return This->lpVtbl->GetPageX(This,aPageX);
}
static FORCEINLINE nsresult nsIDOMKeyEvent_GetPageY(nsIDOMKeyEvent* This,LONG *aPageY) {
    return This->lpVtbl->GetPageY(This,aPageY);
}
static FORCEINLINE nsresult nsIDOMKeyEvent_GetWhich(nsIDOMKeyEvent* This,UINT32 *aWhich) {
    return This->lpVtbl->GetWhich(This,aWhich);
}
static FORCEINLINE nsresult nsIDOMKeyEvent_GetRangeParent(nsIDOMKeyEvent* This,nsIDOMNode **aRangeParent) {
    return This->lpVtbl->GetRangeParent(This,aRangeParent);
}
static FORCEINLINE nsresult nsIDOMKeyEvent_GetRangeOffset(nsIDOMKeyEvent* This,LONG *aRangeOffset) {
    return This->lpVtbl->GetRangeOffset(This,aRangeOffset);
}
static FORCEINLINE nsresult nsIDOMKeyEvent_GetCancelBubble(nsIDOMKeyEvent* This,cpp_bool *aCancelBubble) {
    return This->lpVtbl->GetCancelBubble(This,aCancelBubble);
}
static FORCEINLINE nsresult nsIDOMKeyEvent_SetCancelBubble(nsIDOMKeyEvent* This,cpp_bool aCancelBubble) {
    return This->lpVtbl->SetCancelBubble(This,aCancelBubble);
}
static FORCEINLINE nsresult nsIDOMKeyEvent_GetIsChar(nsIDOMKeyEvent* This,cpp_bool *aIsChar) {
    return This->lpVtbl->GetIsChar(This,aIsChar);
}
static FORCEINLINE void * nsIDOMKeyEvent_AsEvent(nsIDOMKeyEvent* This) {
    return This->lpVtbl->AsEvent(This);
}
/*** nsIDOMKeyEvent methods ***/
static FORCEINLINE nsresult nsIDOMKeyEvent_GetCharCode(nsIDOMKeyEvent* This,UINT32 *aCharCode) {
    return This->lpVtbl->GetCharCode(This,aCharCode);
}
static FORCEINLINE nsresult nsIDOMKeyEvent_GetKeyCode(nsIDOMKeyEvent* This,UINT32 *aKeyCode) {
    return This->lpVtbl->GetKeyCode(This,aKeyCode);
}
static FORCEINLINE nsresult nsIDOMKeyEvent_GetAltKey(nsIDOMKeyEvent* This,cpp_bool *aAltKey) {
    return This->lpVtbl->GetAltKey(This,aAltKey);
}
static FORCEINLINE nsresult nsIDOMKeyEvent_GetCtrlKey(nsIDOMKeyEvent* This,cpp_bool *aCtrlKey) {
    return This->lpVtbl->GetCtrlKey(This,aCtrlKey);
}
static FORCEINLINE nsresult nsIDOMKeyEvent_GetShiftKey(nsIDOMKeyEvent* This,cpp_bool *aShiftKey) {
    return This->lpVtbl->GetShiftKey(This,aShiftKey);
}
static FORCEINLINE nsresult nsIDOMKeyEvent_GetMetaKey(nsIDOMKeyEvent* This,cpp_bool *aMetaKey) {
    return This->lpVtbl->GetMetaKey(This,aMetaKey);
}
static FORCEINLINE nsresult nsIDOMKeyEvent_InitKeyEvent(nsIDOMKeyEvent* This,const nsAString *typeArg,cpp_bool canBubbleArg,cpp_bool cancelableArg,mozIDOMWindowProxy *viewArg,cpp_bool ctrlKeyArg,cpp_bool altKeyArg,cpp_bool shiftKeyArg,cpp_bool metaKeyArg,UINT32 keyCodeArg,UINT32 charCodeArg) {
    return This->lpVtbl->InitKeyEvent(This,typeArg,canBubbleArg,cancelableArg,viewArg,ctrlKeyArg,altKeyArg,shiftKeyArg,metaKeyArg,keyCodeArg,charCodeArg);
}
static FORCEINLINE nsresult nsIDOMKeyEvent_GetModifierState(nsIDOMKeyEvent* This,const nsAString *keyArg,cpp_bool *_retval) {
    return This->lpVtbl->GetModifierState(This,keyArg,_retval);
}
static FORCEINLINE nsresult nsIDOMKeyEvent_GetLocation(nsIDOMKeyEvent* This,UINT32 *aLocation) {
    return This->lpVtbl->GetLocation(This,aLocation);
}
static FORCEINLINE nsresult nsIDOMKeyEvent_GetRepeat(nsIDOMKeyEvent* This,cpp_bool *aRepeat) {
    return This->lpVtbl->GetRepeat(This,aRepeat);
}
static FORCEINLINE nsresult nsIDOMKeyEvent_GetKey(nsIDOMKeyEvent* This,nsAString *aKey) {
    return This->lpVtbl->GetKey(This,aKey);
}
#endif
#endif

#endif


#endif  /* __nsIDOMKeyEvent_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIEmbeddingSiteWindow interface
 */
#ifndef __nsIEmbeddingSiteWindow_INTERFACE_DEFINED__
#define __nsIEmbeddingSiteWindow_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIEmbeddingSiteWindow, 0x0b976267, 0x4aaa, 0x4f36, 0xa2,0xd4, 0x27,0xb5,0xca,0x8d,0x73,0xbb);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("0b976267-4aaa-4f36-a2d4-27b5ca8d73bb")
nsIEmbeddingSiteWindow : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE SetDimensions(
        UINT32 flags,
        LONG x,
        LONG y,
        LONG cx,
        LONG cy) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDimensions(
        UINT32 flags,
        LONG *x,
        LONG *y,
        LONG *cx,
        LONG *cy) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFocus(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetVisibility(
        cpp_bool *aVisibility) = 0;

    virtual nsresult STDMETHODCALLTYPE SetVisibility(
        cpp_bool aVisibility) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTitle(
        PRUnichar **aTitle) = 0;

    virtual nsresult STDMETHODCALLTYPE SetTitle(
        const PRUnichar *aTitle) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSiteWindow(
        void **aSiteWindow) = 0;

    virtual nsresult STDMETHODCALLTYPE Blur(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIEmbeddingSiteWindow, 0x0b976267, 0x4aaa, 0x4f36, 0xa2,0xd4, 0x27,0xb5,0xca,0x8d,0x73,0xbb)
#endif
#else
typedef struct nsIEmbeddingSiteWindowVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIEmbeddingSiteWindow *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIEmbeddingSiteWindow *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIEmbeddingSiteWindow *This);

    /*** nsIEmbeddingSiteWindow methods ***/
    nsresult (STDMETHODCALLTYPE *SetDimensions)(
        nsIEmbeddingSiteWindow *This,
        UINT32 flags,
        LONG x,
        LONG y,
        LONG cx,
        LONG cy);

    nsresult (STDMETHODCALLTYPE *GetDimensions)(
        nsIEmbeddingSiteWindow *This,
        UINT32 flags,
        LONG *x,
        LONG *y,
        LONG *cx,
        LONG *cy);

    nsresult (STDMETHODCALLTYPE *SetFocus)(
        nsIEmbeddingSiteWindow *This);

    nsresult (STDMETHODCALLTYPE *GetVisibility)(
        nsIEmbeddingSiteWindow *This,
        cpp_bool *aVisibility);

    nsresult (STDMETHODCALLTYPE *SetVisibility)(
        nsIEmbeddingSiteWindow *This,
        cpp_bool aVisibility);

    nsresult (STDMETHODCALLTYPE *GetTitle)(
        nsIEmbeddingSiteWindow *This,
        PRUnichar **aTitle);

    nsresult (STDMETHODCALLTYPE *SetTitle)(
        nsIEmbeddingSiteWindow *This,
        const PRUnichar *aTitle);

    nsresult (STDMETHODCALLTYPE *GetSiteWindow)(
        nsIEmbeddingSiteWindow *This,
        void **aSiteWindow);

    nsresult (STDMETHODCALLTYPE *Blur)(
        nsIEmbeddingSiteWindow *This);

    END_INTERFACE
} nsIEmbeddingSiteWindowVtbl;

interface nsIEmbeddingSiteWindow {
    CONST_VTBL nsIEmbeddingSiteWindowVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIEmbeddingSiteWindow_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIEmbeddingSiteWindow_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIEmbeddingSiteWindow_Release(This) (This)->lpVtbl->Release(This)
/*** nsIEmbeddingSiteWindow methods ***/
#define nsIEmbeddingSiteWindow_SetDimensions(This,flags,x,y,cx,cy) (This)->lpVtbl->SetDimensions(This,flags,x,y,cx,cy)
#define nsIEmbeddingSiteWindow_GetDimensions(This,flags,x,y,cx,cy) (This)->lpVtbl->GetDimensions(This,flags,x,y,cx,cy)
#define nsIEmbeddingSiteWindow_SetFocus(This) (This)->lpVtbl->SetFocus(This)
#define nsIEmbeddingSiteWindow_GetVisibility(This,aVisibility) (This)->lpVtbl->GetVisibility(This,aVisibility)
#define nsIEmbeddingSiteWindow_SetVisibility(This,aVisibility) (This)->lpVtbl->SetVisibility(This,aVisibility)
#define nsIEmbeddingSiteWindow_GetTitle(This,aTitle) (This)->lpVtbl->GetTitle(This,aTitle)
#define nsIEmbeddingSiteWindow_SetTitle(This,aTitle) (This)->lpVtbl->SetTitle(This,aTitle)
#define nsIEmbeddingSiteWindow_GetSiteWindow(This,aSiteWindow) (This)->lpVtbl->GetSiteWindow(This,aSiteWindow)
#define nsIEmbeddingSiteWindow_Blur(This) (This)->lpVtbl->Blur(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIEmbeddingSiteWindow_QueryInterface(nsIEmbeddingSiteWindow* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIEmbeddingSiteWindow_AddRef(nsIEmbeddingSiteWindow* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIEmbeddingSiteWindow_Release(nsIEmbeddingSiteWindow* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIEmbeddingSiteWindow methods ***/
static FORCEINLINE nsresult nsIEmbeddingSiteWindow_SetDimensions(nsIEmbeddingSiteWindow* This,UINT32 flags,LONG x,LONG y,LONG cx,LONG cy) {
    return This->lpVtbl->SetDimensions(This,flags,x,y,cx,cy);
}
static FORCEINLINE nsresult nsIEmbeddingSiteWindow_GetDimensions(nsIEmbeddingSiteWindow* This,UINT32 flags,LONG *x,LONG *y,LONG *cx,LONG *cy) {
    return This->lpVtbl->GetDimensions(This,flags,x,y,cx,cy);
}
static FORCEINLINE nsresult nsIEmbeddingSiteWindow_SetFocus(nsIEmbeddingSiteWindow* This) {
    return This->lpVtbl->SetFocus(This);
}
static FORCEINLINE nsresult nsIEmbeddingSiteWindow_GetVisibility(nsIEmbeddingSiteWindow* This,cpp_bool *aVisibility) {
    return This->lpVtbl->GetVisibility(This,aVisibility);
}
static FORCEINLINE nsresult nsIEmbeddingSiteWindow_SetVisibility(nsIEmbeddingSiteWindow* This,cpp_bool aVisibility) {
    return This->lpVtbl->SetVisibility(This,aVisibility);
}
static FORCEINLINE nsresult nsIEmbeddingSiteWindow_GetTitle(nsIEmbeddingSiteWindow* This,PRUnichar **aTitle) {
    return This->lpVtbl->GetTitle(This,aTitle);
}
static FORCEINLINE nsresult nsIEmbeddingSiteWindow_SetTitle(nsIEmbeddingSiteWindow* This,const PRUnichar *aTitle) {
    return This->lpVtbl->SetTitle(This,aTitle);
}
static FORCEINLINE nsresult nsIEmbeddingSiteWindow_GetSiteWindow(nsIEmbeddingSiteWindow* This,void **aSiteWindow) {
    return This->lpVtbl->GetSiteWindow(This,aSiteWindow);
}
static FORCEINLINE nsresult nsIEmbeddingSiteWindow_Blur(nsIEmbeddingSiteWindow* This) {
    return This->lpVtbl->Blur(This);
}
#endif
#endif

#endif


#endif  /* __nsIEmbeddingSiteWindow_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIComponentRegistrar interface
 */
#ifndef __nsIComponentRegistrar_INTERFACE_DEFINED__
#define __nsIComponentRegistrar_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIComponentRegistrar, 0x2417cbfe, 0x65ad, 0x48a6, 0xb4,0xb6, 0xeb,0x84,0xdb,0x17,0x43,0x92);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("2417cbfe-65ad-48a6-b4b6-eb84db174392")
nsIComponentRegistrar : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE AutoRegister(
        nsIFile *aSpec) = 0;

    virtual nsresult STDMETHODCALLTYPE AutoUnregister(
        nsIFile *aSpec) = 0;

    virtual nsresult STDMETHODCALLTYPE RegisterFactory(
        const nsCID *aClass,
        const char *aClassName,
        const char *aContractID,
        nsIFactory *aFactory) = 0;

    virtual nsresult STDMETHODCALLTYPE UnregisterFactory(
        const nsCID *aClass,
        nsIFactory *aFactory) = 0;

    virtual nsresult STDMETHODCALLTYPE RegisterFactoryLocation(
        const nsCID *aClass,
        const char *aClassName,
        const char *aContractID,
        nsIFile *aFile,
        const char *aLoaderStr,
        const char *aType) = 0;

    virtual nsresult STDMETHODCALLTYPE UnregisterFactoryLocation(
        const nsCID *aClass,
        nsIFile *aFile) = 0;

    virtual nsresult STDMETHODCALLTYPE IsCIDRegistered(
        const nsCID *aClass,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE IsContractIDRegistered(
        const char *aContractID,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE EnumerateCIDs(
        nsISimpleEnumerator **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE EnumerateContractIDs(
        nsISimpleEnumerator **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CIDToContractID(
        const nsCID *aClass,
        char **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE ContractIDToCID(
        const char *aContractID,
        nsCID **_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIComponentRegistrar, 0x2417cbfe, 0x65ad, 0x48a6, 0xb4,0xb6, 0xeb,0x84,0xdb,0x17,0x43,0x92)
#endif
#else
typedef struct nsIComponentRegistrarVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIComponentRegistrar *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIComponentRegistrar *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIComponentRegistrar *This);

    /*** nsIComponentRegistrar methods ***/
    nsresult (STDMETHODCALLTYPE *AutoRegister)(
        nsIComponentRegistrar *This,
        nsIFile *aSpec);

    nsresult (STDMETHODCALLTYPE *AutoUnregister)(
        nsIComponentRegistrar *This,
        nsIFile *aSpec);

    nsresult (STDMETHODCALLTYPE *RegisterFactory)(
        nsIComponentRegistrar *This,
        const nsCID *aClass,
        const char *aClassName,
        const char *aContractID,
        nsIFactory *aFactory);

    nsresult (STDMETHODCALLTYPE *UnregisterFactory)(
        nsIComponentRegistrar *This,
        const nsCID *aClass,
        nsIFactory *aFactory);

    nsresult (STDMETHODCALLTYPE *RegisterFactoryLocation)(
        nsIComponentRegistrar *This,
        const nsCID *aClass,
        const char *aClassName,
        const char *aContractID,
        nsIFile *aFile,
        const char *aLoaderStr,
        const char *aType);

    nsresult (STDMETHODCALLTYPE *UnregisterFactoryLocation)(
        nsIComponentRegistrar *This,
        const nsCID *aClass,
        nsIFile *aFile);

    nsresult (STDMETHODCALLTYPE *IsCIDRegistered)(
        nsIComponentRegistrar *This,
        const nsCID *aClass,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *IsContractIDRegistered)(
        nsIComponentRegistrar *This,
        const char *aContractID,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *EnumerateCIDs)(
        nsIComponentRegistrar *This,
        nsISimpleEnumerator **_retval);

    nsresult (STDMETHODCALLTYPE *EnumerateContractIDs)(
        nsIComponentRegistrar *This,
        nsISimpleEnumerator **_retval);

    nsresult (STDMETHODCALLTYPE *CIDToContractID)(
        nsIComponentRegistrar *This,
        const nsCID *aClass,
        char **_retval);

    nsresult (STDMETHODCALLTYPE *ContractIDToCID)(
        nsIComponentRegistrar *This,
        const char *aContractID,
        nsCID **_retval);

    END_INTERFACE
} nsIComponentRegistrarVtbl;

interface nsIComponentRegistrar {
    CONST_VTBL nsIComponentRegistrarVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIComponentRegistrar_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIComponentRegistrar_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIComponentRegistrar_Release(This) (This)->lpVtbl->Release(This)
/*** nsIComponentRegistrar methods ***/
#define nsIComponentRegistrar_AutoRegister(This,aSpec) (This)->lpVtbl->AutoRegister(This,aSpec)
#define nsIComponentRegistrar_AutoUnregister(This,aSpec) (This)->lpVtbl->AutoUnregister(This,aSpec)
#define nsIComponentRegistrar_RegisterFactory(This,aClass,aClassName,aContractID,aFactory) (This)->lpVtbl->RegisterFactory(This,aClass,aClassName,aContractID,aFactory)
#define nsIComponentRegistrar_UnregisterFactory(This,aClass,aFactory) (This)->lpVtbl->UnregisterFactory(This,aClass,aFactory)
#define nsIComponentRegistrar_RegisterFactoryLocation(This,aClass,aClassName,aContractID,aFile,aLoaderStr,aType) (This)->lpVtbl->RegisterFactoryLocation(This,aClass,aClassName,aContractID,aFile,aLoaderStr,aType)
#define nsIComponentRegistrar_UnregisterFactoryLocation(This,aClass,aFile) (This)->lpVtbl->UnregisterFactoryLocation(This,aClass,aFile)
#define nsIComponentRegistrar_IsCIDRegistered(This,aClass,_retval) (This)->lpVtbl->IsCIDRegistered(This,aClass,_retval)
#define nsIComponentRegistrar_IsContractIDRegistered(This,aContractID,_retval) (This)->lpVtbl->IsContractIDRegistered(This,aContractID,_retval)
#define nsIComponentRegistrar_EnumerateCIDs(This,_retval) (This)->lpVtbl->EnumerateCIDs(This,_retval)
#define nsIComponentRegistrar_EnumerateContractIDs(This,_retval) (This)->lpVtbl->EnumerateContractIDs(This,_retval)
#define nsIComponentRegistrar_CIDToContractID(This,aClass,_retval) (This)->lpVtbl->CIDToContractID(This,aClass,_retval)
#define nsIComponentRegistrar_ContractIDToCID(This,aContractID,_retval) (This)->lpVtbl->ContractIDToCID(This,aContractID,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIComponentRegistrar_QueryInterface(nsIComponentRegistrar* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIComponentRegistrar_AddRef(nsIComponentRegistrar* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIComponentRegistrar_Release(nsIComponentRegistrar* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIComponentRegistrar methods ***/
static FORCEINLINE nsresult nsIComponentRegistrar_AutoRegister(nsIComponentRegistrar* This,nsIFile *aSpec) {
    return This->lpVtbl->AutoRegister(This,aSpec);
}
static FORCEINLINE nsresult nsIComponentRegistrar_AutoUnregister(nsIComponentRegistrar* This,nsIFile *aSpec) {
    return This->lpVtbl->AutoUnregister(This,aSpec);
}
static FORCEINLINE nsresult nsIComponentRegistrar_RegisterFactory(nsIComponentRegistrar* This,const nsCID *aClass,const char *aClassName,const char *aContractID,nsIFactory *aFactory) {
    return This->lpVtbl->RegisterFactory(This,aClass,aClassName,aContractID,aFactory);
}
static FORCEINLINE nsresult nsIComponentRegistrar_UnregisterFactory(nsIComponentRegistrar* This,const nsCID *aClass,nsIFactory *aFactory) {
    return This->lpVtbl->UnregisterFactory(This,aClass,aFactory);
}
static FORCEINLINE nsresult nsIComponentRegistrar_RegisterFactoryLocation(nsIComponentRegistrar* This,const nsCID *aClass,const char *aClassName,const char *aContractID,nsIFile *aFile,const char *aLoaderStr,const char *aType) {
    return This->lpVtbl->RegisterFactoryLocation(This,aClass,aClassName,aContractID,aFile,aLoaderStr,aType);
}
static FORCEINLINE nsresult nsIComponentRegistrar_UnregisterFactoryLocation(nsIComponentRegistrar* This,const nsCID *aClass,nsIFile *aFile) {
    return This->lpVtbl->UnregisterFactoryLocation(This,aClass,aFile);
}
static FORCEINLINE nsresult nsIComponentRegistrar_IsCIDRegistered(nsIComponentRegistrar* This,const nsCID *aClass,cpp_bool *_retval) {
    return This->lpVtbl->IsCIDRegistered(This,aClass,_retval);
}
static FORCEINLINE nsresult nsIComponentRegistrar_IsContractIDRegistered(nsIComponentRegistrar* This,const char *aContractID,cpp_bool *_retval) {
    return This->lpVtbl->IsContractIDRegistered(This,aContractID,_retval);
}
static FORCEINLINE nsresult nsIComponentRegistrar_EnumerateCIDs(nsIComponentRegistrar* This,nsISimpleEnumerator **_retval) {
    return This->lpVtbl->EnumerateCIDs(This,_retval);
}
static FORCEINLINE nsresult nsIComponentRegistrar_EnumerateContractIDs(nsIComponentRegistrar* This,nsISimpleEnumerator **_retval) {
    return This->lpVtbl->EnumerateContractIDs(This,_retval);
}
static FORCEINLINE nsresult nsIComponentRegistrar_CIDToContractID(nsIComponentRegistrar* This,const nsCID *aClass,char **_retval) {
    return This->lpVtbl->CIDToContractID(This,aClass,_retval);
}
static FORCEINLINE nsresult nsIComponentRegistrar_ContractIDToCID(nsIComponentRegistrar* This,const char *aContractID,nsCID **_retval) {
    return This->lpVtbl->ContractIDToCID(This,aContractID,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIComponentRegistrar_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIPromptService interface
 */
#ifndef __nsIPromptService_INTERFACE_DEFINED__
#define __nsIPromptService_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIPromptService, 0x404ebfa2, 0xd8f4, 0x4c94, 0x84,0x16, 0xe6,0x5a,0x55,0xf9,0xdf,0x5a);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("404ebfa2-d8f4-4c94-8416-e65a55f9df5a")
nsIPromptService : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE Alert(
        mozIDOMWindowProxy *aParent,
        const PRUnichar *aDialogTitle,
        const PRUnichar *aText) = 0;

    virtual nsresult STDMETHODCALLTYPE AlertCheck(
        mozIDOMWindowProxy *aParent,
        const PRUnichar *aDialogTitle,
        const PRUnichar *aText,
        const PRUnichar *aCheckMsg,
        cpp_bool *aCheckState) = 0;

    virtual nsresult STDMETHODCALLTYPE Confirm(
        mozIDOMWindowProxy *aParent,
        const PRUnichar *aDialogTitle,
        const PRUnichar *aText,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE ConfirmCheck(
        mozIDOMWindowProxy *aParent,
        const PRUnichar *aDialogTitle,
        const PRUnichar *aText,
        const PRUnichar *aCheckMsg,
        cpp_bool *aCheckState,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE ConfirmEx(
        mozIDOMWindowProxy *aParent,
        const PRUnichar *aDialogTitle,
        const PRUnichar *aText,
        UINT32 aButtonFlags,
        const PRUnichar *aButton0Title,
        const PRUnichar *aButton1Title,
        const PRUnichar *aButton2Title,
        const PRUnichar *aCheckMsg,
        cpp_bool *aCheckState,
        LONG *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Prompt(
        mozIDOMWindowProxy *aParent,
        const PRUnichar *aDialogTitle,
        const PRUnichar *aText,
        PRUnichar **aValue,
        const PRUnichar *aCheckMsg,
        cpp_bool *aCheckState,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE PromptUsernameAndPassword(
        mozIDOMWindowProxy *aParent,
        const PRUnichar *aDialogTitle,
        const PRUnichar *aText,
        PRUnichar **aUsername,
        PRUnichar **aPassword,
        const PRUnichar *aCheckMsg,
        cpp_bool *aCheckState,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE PromptPassword(
        mozIDOMWindowProxy *aParent,
        const PRUnichar *aDialogTitle,
        const PRUnichar *aText,
        PRUnichar **aPassword,
        const PRUnichar *aCheckMsg,
        cpp_bool *aCheckState,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Select(
        mozIDOMWindowProxy *aParent,
        const PRUnichar *aDialogTitle,
        const PRUnichar *aText,
        UINT32 aCount,
        const PRUnichar **aSelectList,
        LONG *aOutSelection,
        cpp_bool *_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIPromptService, 0x404ebfa2, 0xd8f4, 0x4c94, 0x84,0x16, 0xe6,0x5a,0x55,0xf9,0xdf,0x5a)
#endif
#else
typedef struct nsIPromptServiceVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIPromptService *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIPromptService *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIPromptService *This);

    /*** nsIPromptService methods ***/
    nsresult (STDMETHODCALLTYPE *Alert)(
        nsIPromptService *This,
        mozIDOMWindowProxy *aParent,
        const PRUnichar *aDialogTitle,
        const PRUnichar *aText);

    nsresult (STDMETHODCALLTYPE *AlertCheck)(
        nsIPromptService *This,
        mozIDOMWindowProxy *aParent,
        const PRUnichar *aDialogTitle,
        const PRUnichar *aText,
        const PRUnichar *aCheckMsg,
        cpp_bool *aCheckState);

    nsresult (STDMETHODCALLTYPE *Confirm)(
        nsIPromptService *This,
        mozIDOMWindowProxy *aParent,
        const PRUnichar *aDialogTitle,
        const PRUnichar *aText,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *ConfirmCheck)(
        nsIPromptService *This,
        mozIDOMWindowProxy *aParent,
        const PRUnichar *aDialogTitle,
        const PRUnichar *aText,
        const PRUnichar *aCheckMsg,
        cpp_bool *aCheckState,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *ConfirmEx)(
        nsIPromptService *This,
        mozIDOMWindowProxy *aParent,
        const PRUnichar *aDialogTitle,
        const PRUnichar *aText,
        UINT32 aButtonFlags,
        const PRUnichar *aButton0Title,
        const PRUnichar *aButton1Title,
        const PRUnichar *aButton2Title,
        const PRUnichar *aCheckMsg,
        cpp_bool *aCheckState,
        LONG *_retval);

    nsresult (STDMETHODCALLTYPE *Prompt)(
        nsIPromptService *This,
        mozIDOMWindowProxy *aParent,
        const PRUnichar *aDialogTitle,
        const PRUnichar *aText,
        PRUnichar **aValue,
        const PRUnichar *aCheckMsg,
        cpp_bool *aCheckState,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *PromptUsernameAndPassword)(
        nsIPromptService *This,
        mozIDOMWindowProxy *aParent,
        const PRUnichar *aDialogTitle,
        const PRUnichar *aText,
        PRUnichar **aUsername,
        PRUnichar **aPassword,
        const PRUnichar *aCheckMsg,
        cpp_bool *aCheckState,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *PromptPassword)(
        nsIPromptService *This,
        mozIDOMWindowProxy *aParent,
        const PRUnichar *aDialogTitle,
        const PRUnichar *aText,
        PRUnichar **aPassword,
        const PRUnichar *aCheckMsg,
        cpp_bool *aCheckState,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *Select)(
        nsIPromptService *This,
        mozIDOMWindowProxy *aParent,
        const PRUnichar *aDialogTitle,
        const PRUnichar *aText,
        UINT32 aCount,
        const PRUnichar **aSelectList,
        LONG *aOutSelection,
        cpp_bool *_retval);

    END_INTERFACE
} nsIPromptServiceVtbl;

interface nsIPromptService {
    CONST_VTBL nsIPromptServiceVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIPromptService_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIPromptService_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIPromptService_Release(This) (This)->lpVtbl->Release(This)
/*** nsIPromptService methods ***/
#define nsIPromptService_Alert(This,aParent,aDialogTitle,aText) (This)->lpVtbl->Alert(This,aParent,aDialogTitle,aText)
#define nsIPromptService_AlertCheck(This,aParent,aDialogTitle,aText,aCheckMsg,aCheckState) (This)->lpVtbl->AlertCheck(This,aParent,aDialogTitle,aText,aCheckMsg,aCheckState)
#define nsIPromptService_Confirm(This,aParent,aDialogTitle,aText,_retval) (This)->lpVtbl->Confirm(This,aParent,aDialogTitle,aText,_retval)
#define nsIPromptService_ConfirmCheck(This,aParent,aDialogTitle,aText,aCheckMsg,aCheckState,_retval) (This)->lpVtbl->ConfirmCheck(This,aParent,aDialogTitle,aText,aCheckMsg,aCheckState,_retval)
#define nsIPromptService_ConfirmEx(This,aParent,aDialogTitle,aText,aButtonFlags,aButton0Title,aButton1Title,aButton2Title,aCheckMsg,aCheckState,_retval) (This)->lpVtbl->ConfirmEx(This,aParent,aDialogTitle,aText,aButtonFlags,aButton0Title,aButton1Title,aButton2Title,aCheckMsg,aCheckState,_retval)
#define nsIPromptService_Prompt(This,aParent,aDialogTitle,aText,aValue,aCheckMsg,aCheckState,_retval) (This)->lpVtbl->Prompt(This,aParent,aDialogTitle,aText,aValue,aCheckMsg,aCheckState,_retval)
#define nsIPromptService_PromptUsernameAndPassword(This,aParent,aDialogTitle,aText,aUsername,aPassword,aCheckMsg,aCheckState,_retval) (This)->lpVtbl->PromptUsernameAndPassword(This,aParent,aDialogTitle,aText,aUsername,aPassword,aCheckMsg,aCheckState,_retval)
#define nsIPromptService_PromptPassword(This,aParent,aDialogTitle,aText,aPassword,aCheckMsg,aCheckState,_retval) (This)->lpVtbl->PromptPassword(This,aParent,aDialogTitle,aText,aPassword,aCheckMsg,aCheckState,_retval)
#define nsIPromptService_Select(This,aParent,aDialogTitle,aText,aCount,aSelectList,aOutSelection,_retval) (This)->lpVtbl->Select(This,aParent,aDialogTitle,aText,aCount,aSelectList,aOutSelection,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIPromptService_QueryInterface(nsIPromptService* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIPromptService_AddRef(nsIPromptService* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIPromptService_Release(nsIPromptService* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIPromptService methods ***/
static FORCEINLINE nsresult nsIPromptService_Alert(nsIPromptService* This,mozIDOMWindowProxy *aParent,const PRUnichar *aDialogTitle,const PRUnichar *aText) {
    return This->lpVtbl->Alert(This,aParent,aDialogTitle,aText);
}
static FORCEINLINE nsresult nsIPromptService_AlertCheck(nsIPromptService* This,mozIDOMWindowProxy *aParent,const PRUnichar *aDialogTitle,const PRUnichar *aText,const PRUnichar *aCheckMsg,cpp_bool *aCheckState) {
    return This->lpVtbl->AlertCheck(This,aParent,aDialogTitle,aText,aCheckMsg,aCheckState);
}
static FORCEINLINE nsresult nsIPromptService_Confirm(nsIPromptService* This,mozIDOMWindowProxy *aParent,const PRUnichar *aDialogTitle,const PRUnichar *aText,cpp_bool *_retval) {
    return This->lpVtbl->Confirm(This,aParent,aDialogTitle,aText,_retval);
}
static FORCEINLINE nsresult nsIPromptService_ConfirmCheck(nsIPromptService* This,mozIDOMWindowProxy *aParent,const PRUnichar *aDialogTitle,const PRUnichar *aText,const PRUnichar *aCheckMsg,cpp_bool *aCheckState,cpp_bool *_retval) {
    return This->lpVtbl->ConfirmCheck(This,aParent,aDialogTitle,aText,aCheckMsg,aCheckState,_retval);
}
static FORCEINLINE nsresult nsIPromptService_ConfirmEx(nsIPromptService* This,mozIDOMWindowProxy *aParent,const PRUnichar *aDialogTitle,const PRUnichar *aText,UINT32 aButtonFlags,const PRUnichar *aButton0Title,const PRUnichar *aButton1Title,const PRUnichar *aButton2Title,const PRUnichar *aCheckMsg,cpp_bool *aCheckState,LONG *_retval) {
    return This->lpVtbl->ConfirmEx(This,aParent,aDialogTitle,aText,aButtonFlags,aButton0Title,aButton1Title,aButton2Title,aCheckMsg,aCheckState,_retval);
}
static FORCEINLINE nsresult nsIPromptService_Prompt(nsIPromptService* This,mozIDOMWindowProxy *aParent,const PRUnichar *aDialogTitle,const PRUnichar *aText,PRUnichar **aValue,const PRUnichar *aCheckMsg,cpp_bool *aCheckState,cpp_bool *_retval) {
    return This->lpVtbl->Prompt(This,aParent,aDialogTitle,aText,aValue,aCheckMsg,aCheckState,_retval);
}
static FORCEINLINE nsresult nsIPromptService_PromptUsernameAndPassword(nsIPromptService* This,mozIDOMWindowProxy *aParent,const PRUnichar *aDialogTitle,const PRUnichar *aText,PRUnichar **aUsername,PRUnichar **aPassword,const PRUnichar *aCheckMsg,cpp_bool *aCheckState,cpp_bool *_retval) {
    return This->lpVtbl->PromptUsernameAndPassword(This,aParent,aDialogTitle,aText,aUsername,aPassword,aCheckMsg,aCheckState,_retval);
}
static FORCEINLINE nsresult nsIPromptService_PromptPassword(nsIPromptService* This,mozIDOMWindowProxy *aParent,const PRUnichar *aDialogTitle,const PRUnichar *aText,PRUnichar **aPassword,const PRUnichar *aCheckMsg,cpp_bool *aCheckState,cpp_bool *_retval) {
    return This->lpVtbl->PromptPassword(This,aParent,aDialogTitle,aText,aPassword,aCheckMsg,aCheckState,_retval);
}
static FORCEINLINE nsresult nsIPromptService_Select(nsIPromptService* This,mozIDOMWindowProxy *aParent,const PRUnichar *aDialogTitle,const PRUnichar *aText,UINT32 aCount,const PRUnichar **aSelectList,LONG *aOutSelection,cpp_bool *_retval) {
    return This->lpVtbl->Select(This,aParent,aDialogTitle,aText,aCount,aSelectList,aOutSelection,_retval);
}
#endif
#endif

#endif


#endif  /* __nsIPromptService_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsITooltipTextProvider interface
 */
#ifndef __nsITooltipTextProvider_INTERFACE_DEFINED__
#define __nsITooltipTextProvider_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsITooltipTextProvider, 0xb128a1e6, 0x44f3, 0x4331, 0x8f,0xbe, 0x5a,0xf3,0x60,0xff,0x21,0xee);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("b128a1e6-44f3-4331-8fbe-5af360ff21ee")
nsITooltipTextProvider : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetNodeText(
        nsIDOMNode *aNode,
        PRUnichar **aText,
        cpp_bool *_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsITooltipTextProvider, 0xb128a1e6, 0x44f3, 0x4331, 0x8f,0xbe, 0x5a,0xf3,0x60,0xff,0x21,0xee)
#endif
#else
typedef struct nsITooltipTextProviderVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsITooltipTextProvider *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsITooltipTextProvider *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsITooltipTextProvider *This);

    /*** nsITooltipTextProvider methods ***/
    nsresult (STDMETHODCALLTYPE *GetNodeText)(
        nsITooltipTextProvider *This,
        nsIDOMNode *aNode,
        PRUnichar **aText,
        cpp_bool *_retval);

    END_INTERFACE
} nsITooltipTextProviderVtbl;

interface nsITooltipTextProvider {
    CONST_VTBL nsITooltipTextProviderVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsITooltipTextProvider_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsITooltipTextProvider_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsITooltipTextProvider_Release(This) (This)->lpVtbl->Release(This)
/*** nsITooltipTextProvider methods ***/
#define nsITooltipTextProvider_GetNodeText(This,aNode,aText,_retval) (This)->lpVtbl->GetNodeText(This,aNode,aText,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsITooltipTextProvider_QueryInterface(nsITooltipTextProvider* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsITooltipTextProvider_AddRef(nsITooltipTextProvider* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsITooltipTextProvider_Release(nsITooltipTextProvider* This) {
    return This->lpVtbl->Release(This);
}
/*** nsITooltipTextProvider methods ***/
static FORCEINLINE nsresult nsITooltipTextProvider_GetNodeText(nsITooltipTextProvider* This,nsIDOMNode *aNode,PRUnichar **aText,cpp_bool *_retval) {
    return This->lpVtbl->GetNodeText(This,aNode,aText,_retval);
}
#endif
#endif

#endif


#endif  /* __nsITooltipTextProvider_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIEditingSession interface
 */
#ifndef __nsIEditingSession_INTERFACE_DEFINED__
#define __nsIEditingSession_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIEditingSession, 0x24f963d1, 0xe6fc, 0x43ea, 0xa2,0x06, 0x99,0xac,0x5f,0xcc,0x52,0x65);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("24f963d1-e6fc-43ea-a206-99ac5fcc5265")
nsIEditingSession : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetEditorStatus(
        UINT32 *aEditorStatus) = 0;

    virtual nsresult STDMETHODCALLTYPE MakeWindowEditable(
        mozIDOMWindowProxy *window,
        const char *aEditorType,
        cpp_bool doAfterUriLoad,
        cpp_bool aMakeWholeDocumentEditable,
        cpp_bool aInteractive) = 0;

    virtual nsresult STDMETHODCALLTYPE WindowIsEditable(
        mozIDOMWindowProxy *window,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetEditorForWindow(
        mozIDOMWindowProxy *window,
        nsIEditor **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetupEditorOnWindow(
        mozIDOMWindowProxy *window) = 0;

    virtual nsresult STDMETHODCALLTYPE TearDownEditorOnWindow(
        mozIDOMWindowProxy *window) = 0;

    virtual nsresult STDMETHODCALLTYPE SetEditorOnControllers(
        mozIDOMWindowProxy *aWindow,
        nsIEditor *aEditor) = 0;

    virtual nsresult STDMETHODCALLTYPE DisableJSAndPlugins(
        mozIDOMWindowProxy *aWindow) = 0;

    virtual nsresult STDMETHODCALLTYPE RestoreJSAndPlugins(
        mozIDOMWindowProxy *aWindow) = 0;

    virtual nsresult STDMETHODCALLTYPE DetachFromWindow(
        mozIDOMWindowProxy *aWindow) = 0;

    virtual nsresult STDMETHODCALLTYPE ReattachToWindow(
        mozIDOMWindowProxy *aWindow) = 0;

    virtual nsresult STDMETHODCALLTYPE GetJsAndPluginsDisabled(
        cpp_bool *aJsAndPluginsDisabled) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIEditingSession, 0x24f963d1, 0xe6fc, 0x43ea, 0xa2,0x06, 0x99,0xac,0x5f,0xcc,0x52,0x65)
#endif
#else
typedef struct nsIEditingSessionVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIEditingSession *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIEditingSession *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIEditingSession *This);

    /*** nsIEditingSession methods ***/
    nsresult (STDMETHODCALLTYPE *GetEditorStatus)(
        nsIEditingSession *This,
        UINT32 *aEditorStatus);

    nsresult (STDMETHODCALLTYPE *MakeWindowEditable)(
        nsIEditingSession *This,
        mozIDOMWindowProxy *window,
        const char *aEditorType,
        cpp_bool doAfterUriLoad,
        cpp_bool aMakeWholeDocumentEditable,
        cpp_bool aInteractive);

    nsresult (STDMETHODCALLTYPE *WindowIsEditable)(
        nsIEditingSession *This,
        mozIDOMWindowProxy *window,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetEditorForWindow)(
        nsIEditingSession *This,
        mozIDOMWindowProxy *window,
        nsIEditor **_retval);

    nsresult (STDMETHODCALLTYPE *SetupEditorOnWindow)(
        nsIEditingSession *This,
        mozIDOMWindowProxy *window);

    nsresult (STDMETHODCALLTYPE *TearDownEditorOnWindow)(
        nsIEditingSession *This,
        mozIDOMWindowProxy *window);

    nsresult (STDMETHODCALLTYPE *SetEditorOnControllers)(
        nsIEditingSession *This,
        mozIDOMWindowProxy *aWindow,
        nsIEditor *aEditor);

    nsresult (STDMETHODCALLTYPE *DisableJSAndPlugins)(
        nsIEditingSession *This,
        mozIDOMWindowProxy *aWindow);

    nsresult (STDMETHODCALLTYPE *RestoreJSAndPlugins)(
        nsIEditingSession *This,
        mozIDOMWindowProxy *aWindow);

    nsresult (STDMETHODCALLTYPE *DetachFromWindow)(
        nsIEditingSession *This,
        mozIDOMWindowProxy *aWindow);

    nsresult (STDMETHODCALLTYPE *ReattachToWindow)(
        nsIEditingSession *This,
        mozIDOMWindowProxy *aWindow);

    nsresult (STDMETHODCALLTYPE *GetJsAndPluginsDisabled)(
        nsIEditingSession *This,
        cpp_bool *aJsAndPluginsDisabled);

    END_INTERFACE
} nsIEditingSessionVtbl;

interface nsIEditingSession {
    CONST_VTBL nsIEditingSessionVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIEditingSession_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIEditingSession_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIEditingSession_Release(This) (This)->lpVtbl->Release(This)
/*** nsIEditingSession methods ***/
#define nsIEditingSession_GetEditorStatus(This,aEditorStatus) (This)->lpVtbl->GetEditorStatus(This,aEditorStatus)
#define nsIEditingSession_MakeWindowEditable(This,window,aEditorType,doAfterUriLoad,aMakeWholeDocumentEditable,aInteractive) (This)->lpVtbl->MakeWindowEditable(This,window,aEditorType,doAfterUriLoad,aMakeWholeDocumentEditable,aInteractive)
#define nsIEditingSession_WindowIsEditable(This,window,_retval) (This)->lpVtbl->WindowIsEditable(This,window,_retval)
#define nsIEditingSession_GetEditorForWindow(This,window,_retval) (This)->lpVtbl->GetEditorForWindow(This,window,_retval)
#define nsIEditingSession_SetupEditorOnWindow(This,window) (This)->lpVtbl->SetupEditorOnWindow(This,window)
#define nsIEditingSession_TearDownEditorOnWindow(This,window) (This)->lpVtbl->TearDownEditorOnWindow(This,window)
#define nsIEditingSession_SetEditorOnControllers(This,aWindow,aEditor) (This)->lpVtbl->SetEditorOnControllers(This,aWindow,aEditor)
#define nsIEditingSession_DisableJSAndPlugins(This,aWindow) (This)->lpVtbl->DisableJSAndPlugins(This,aWindow)
#define nsIEditingSession_RestoreJSAndPlugins(This,aWindow) (This)->lpVtbl->RestoreJSAndPlugins(This,aWindow)
#define nsIEditingSession_DetachFromWindow(This,aWindow) (This)->lpVtbl->DetachFromWindow(This,aWindow)
#define nsIEditingSession_ReattachToWindow(This,aWindow) (This)->lpVtbl->ReattachToWindow(This,aWindow)
#define nsIEditingSession_GetJsAndPluginsDisabled(This,aJsAndPluginsDisabled) (This)->lpVtbl->GetJsAndPluginsDisabled(This,aJsAndPluginsDisabled)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIEditingSession_QueryInterface(nsIEditingSession* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIEditingSession_AddRef(nsIEditingSession* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIEditingSession_Release(nsIEditingSession* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIEditingSession methods ***/
static FORCEINLINE nsresult nsIEditingSession_GetEditorStatus(nsIEditingSession* This,UINT32 *aEditorStatus) {
    return This->lpVtbl->GetEditorStatus(This,aEditorStatus);
}
static FORCEINLINE nsresult nsIEditingSession_MakeWindowEditable(nsIEditingSession* This,mozIDOMWindowProxy *window,const char *aEditorType,cpp_bool doAfterUriLoad,cpp_bool aMakeWholeDocumentEditable,cpp_bool aInteractive) {
    return This->lpVtbl->MakeWindowEditable(This,window,aEditorType,doAfterUriLoad,aMakeWholeDocumentEditable,aInteractive);
}
static FORCEINLINE nsresult nsIEditingSession_WindowIsEditable(nsIEditingSession* This,mozIDOMWindowProxy *window,cpp_bool *_retval) {
    return This->lpVtbl->WindowIsEditable(This,window,_retval);
}
static FORCEINLINE nsresult nsIEditingSession_GetEditorForWindow(nsIEditingSession* This,mozIDOMWindowProxy *window,nsIEditor **_retval) {
    return This->lpVtbl->GetEditorForWindow(This,window,_retval);
}
static FORCEINLINE nsresult nsIEditingSession_SetupEditorOnWindow(nsIEditingSession* This,mozIDOMWindowProxy *window) {
    return This->lpVtbl->SetupEditorOnWindow(This,window);
}
static FORCEINLINE nsresult nsIEditingSession_TearDownEditorOnWindow(nsIEditingSession* This,mozIDOMWindowProxy *window) {
    return This->lpVtbl->TearDownEditorOnWindow(This,window);
}
static FORCEINLINE nsresult nsIEditingSession_SetEditorOnControllers(nsIEditingSession* This,mozIDOMWindowProxy *aWindow,nsIEditor *aEditor) {
    return This->lpVtbl->SetEditorOnControllers(This,aWindow,aEditor);
}
static FORCEINLINE nsresult nsIEditingSession_DisableJSAndPlugins(nsIEditingSession* This,mozIDOMWindowProxy *aWindow) {
    return This->lpVtbl->DisableJSAndPlugins(This,aWindow);
}
static FORCEINLINE nsresult nsIEditingSession_RestoreJSAndPlugins(nsIEditingSession* This,mozIDOMWindowProxy *aWindow) {
    return This->lpVtbl->RestoreJSAndPlugins(This,aWindow);
}
static FORCEINLINE nsresult nsIEditingSession_DetachFromWindow(nsIEditingSession* This,mozIDOMWindowProxy *aWindow) {
    return This->lpVtbl->DetachFromWindow(This,aWindow);
}
static FORCEINLINE nsresult nsIEditingSession_ReattachToWindow(nsIEditingSession* This,mozIDOMWindowProxy *aWindow) {
    return This->lpVtbl->ReattachToWindow(This,aWindow);
}
static FORCEINLINE nsresult nsIEditingSession_GetJsAndPluginsDisabled(nsIEditingSession* This,cpp_bool *aJsAndPluginsDisabled) {
    return This->lpVtbl->GetJsAndPluginsDisabled(This,aJsAndPluginsDisabled);
}
#endif
#endif

#endif


#endif  /* __nsIEditingSession_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsICommandParams interface
 */
#ifndef __nsICommandParams_INTERFACE_DEFINED__
#define __nsICommandParams_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsICommandParams, 0xb1fdf3c4, 0x74e3, 0x4f7d, 0xa1,0x4d, 0x2b,0x76,0xbc,0xf5,0x34,0x82);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("b1fdf3c4-74e3-4f7d-a14d-2b76bcf53482")
nsICommandParams : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetValueType(
        const char *name,
        short *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBooleanValue(
        const char *name,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLongValue(
        const char *name,
        LONG *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDoubleValue(
        const char *name,
        double *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetStringValue(
        const char *name,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCStringValue(
        const char *name,
        char **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetISupportsValue(
        const char *name,
        nsISupports **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetBooleanValue(
        const char *name,
        cpp_bool value) = 0;

    virtual nsresult STDMETHODCALLTYPE SetLongValue(
        const char *name,
        LONG value) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDoubleValue(
        const char *name,
        double value) = 0;

    virtual nsresult STDMETHODCALLTYPE SetStringValue(
        const char *name,
        const nsAString *value) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCStringValue(
        const char *name,
        const char *value) = 0;

    virtual nsresult STDMETHODCALLTYPE SetISupportsValue(
        const char *name,
        nsISupports *value) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveValue(
        const char *name) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsICommandParams, 0xb1fdf3c4, 0x74e3, 0x4f7d, 0xa1,0x4d, 0x2b,0x76,0xbc,0xf5,0x34,0x82)
#endif
#else
typedef struct nsICommandParamsVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsICommandParams *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsICommandParams *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsICommandParams *This);

    /*** nsICommandParams methods ***/
    nsresult (STDMETHODCALLTYPE *GetValueType)(
        nsICommandParams *This,
        const char *name,
        short *_retval);

    nsresult (STDMETHODCALLTYPE *GetBooleanValue)(
        nsICommandParams *This,
        const char *name,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetLongValue)(
        nsICommandParams *This,
        const char *name,
        LONG *_retval);

    nsresult (STDMETHODCALLTYPE *GetDoubleValue)(
        nsICommandParams *This,
        const char *name,
        double *_retval);

    nsresult (STDMETHODCALLTYPE *GetStringValue)(
        nsICommandParams *This,
        const char *name,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *GetCStringValue)(
        nsICommandParams *This,
        const char *name,
        char **_retval);

    nsresult (STDMETHODCALLTYPE *GetISupportsValue)(
        nsICommandParams *This,
        const char *name,
        nsISupports **_retval);

    nsresult (STDMETHODCALLTYPE *SetBooleanValue)(
        nsICommandParams *This,
        const char *name,
        cpp_bool value);

    nsresult (STDMETHODCALLTYPE *SetLongValue)(
        nsICommandParams *This,
        const char *name,
        LONG value);

    nsresult (STDMETHODCALLTYPE *SetDoubleValue)(
        nsICommandParams *This,
        const char *name,
        double value);

    nsresult (STDMETHODCALLTYPE *SetStringValue)(
        nsICommandParams *This,
        const char *name,
        const nsAString *value);

    nsresult (STDMETHODCALLTYPE *SetCStringValue)(
        nsICommandParams *This,
        const char *name,
        const char *value);

    nsresult (STDMETHODCALLTYPE *SetISupportsValue)(
        nsICommandParams *This,
        const char *name,
        nsISupports *value);

    nsresult (STDMETHODCALLTYPE *RemoveValue)(
        nsICommandParams *This,
        const char *name);

    END_INTERFACE
} nsICommandParamsVtbl;

interface nsICommandParams {
    CONST_VTBL nsICommandParamsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsICommandParams_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsICommandParams_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsICommandParams_Release(This) (This)->lpVtbl->Release(This)
/*** nsICommandParams methods ***/
#define nsICommandParams_GetValueType(This,name,_retval) (This)->lpVtbl->GetValueType(This,name,_retval)
#define nsICommandParams_GetBooleanValue(This,name,_retval) (This)->lpVtbl->GetBooleanValue(This,name,_retval)
#define nsICommandParams_GetLongValue(This,name,_retval) (This)->lpVtbl->GetLongValue(This,name,_retval)
#define nsICommandParams_GetDoubleValue(This,name,_retval) (This)->lpVtbl->GetDoubleValue(This,name,_retval)
#define nsICommandParams_GetStringValue(This,name,_retval) (This)->lpVtbl->GetStringValue(This,name,_retval)
#define nsICommandParams_GetCStringValue(This,name,_retval) (This)->lpVtbl->GetCStringValue(This,name,_retval)
#define nsICommandParams_GetISupportsValue(This,name,_retval) (This)->lpVtbl->GetISupportsValue(This,name,_retval)
#define nsICommandParams_SetBooleanValue(This,name,value) (This)->lpVtbl->SetBooleanValue(This,name,value)
#define nsICommandParams_SetLongValue(This,name,value) (This)->lpVtbl->SetLongValue(This,name,value)
#define nsICommandParams_SetDoubleValue(This,name,value) (This)->lpVtbl->SetDoubleValue(This,name,value)
#define nsICommandParams_SetStringValue(This,name,value) (This)->lpVtbl->SetStringValue(This,name,value)
#define nsICommandParams_SetCStringValue(This,name,value) (This)->lpVtbl->SetCStringValue(This,name,value)
#define nsICommandParams_SetISupportsValue(This,name,value) (This)->lpVtbl->SetISupportsValue(This,name,value)
#define nsICommandParams_RemoveValue(This,name) (This)->lpVtbl->RemoveValue(This,name)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsICommandParams_QueryInterface(nsICommandParams* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsICommandParams_AddRef(nsICommandParams* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsICommandParams_Release(nsICommandParams* This) {
    return This->lpVtbl->Release(This);
}
/*** nsICommandParams methods ***/
static FORCEINLINE nsresult nsICommandParams_GetValueType(nsICommandParams* This,const char *name,short *_retval) {
    return This->lpVtbl->GetValueType(This,name,_retval);
}
static FORCEINLINE nsresult nsICommandParams_GetBooleanValue(nsICommandParams* This,const char *name,cpp_bool *_retval) {
    return This->lpVtbl->GetBooleanValue(This,name,_retval);
}
static FORCEINLINE nsresult nsICommandParams_GetLongValue(nsICommandParams* This,const char *name,LONG *_retval) {
    return This->lpVtbl->GetLongValue(This,name,_retval);
}
static FORCEINLINE nsresult nsICommandParams_GetDoubleValue(nsICommandParams* This,const char *name,double *_retval) {
    return This->lpVtbl->GetDoubleValue(This,name,_retval);
}
static FORCEINLINE nsresult nsICommandParams_GetStringValue(nsICommandParams* This,const char *name,nsAString *_retval) {
    return This->lpVtbl->GetStringValue(This,name,_retval);
}
static FORCEINLINE nsresult nsICommandParams_GetCStringValue(nsICommandParams* This,const char *name,char **_retval) {
    return This->lpVtbl->GetCStringValue(This,name,_retval);
}
static FORCEINLINE nsresult nsICommandParams_GetISupportsValue(nsICommandParams* This,const char *name,nsISupports **_retval) {
    return This->lpVtbl->GetISupportsValue(This,name,_retval);
}
static FORCEINLINE nsresult nsICommandParams_SetBooleanValue(nsICommandParams* This,const char *name,cpp_bool value) {
    return This->lpVtbl->SetBooleanValue(This,name,value);
}
static FORCEINLINE nsresult nsICommandParams_SetLongValue(nsICommandParams* This,const char *name,LONG value) {
    return This->lpVtbl->SetLongValue(This,name,value);
}
static FORCEINLINE nsresult nsICommandParams_SetDoubleValue(nsICommandParams* This,const char *name,double value) {
    return This->lpVtbl->SetDoubleValue(This,name,value);
}
static FORCEINLINE nsresult nsICommandParams_SetStringValue(nsICommandParams* This,const char *name,const nsAString *value) {
    return This->lpVtbl->SetStringValue(This,name,value);
}
static FORCEINLINE nsresult nsICommandParams_SetCStringValue(nsICommandParams* This,const char *name,const char *value) {
    return This->lpVtbl->SetCStringValue(This,name,value);
}
static FORCEINLINE nsresult nsICommandParams_SetISupportsValue(nsICommandParams* This,const char *name,nsISupports *value) {
    return This->lpVtbl->SetISupportsValue(This,name,value);
}
static FORCEINLINE nsresult nsICommandParams_RemoveValue(nsICommandParams* This,const char *name) {
    return This->lpVtbl->RemoveValue(This,name);
}
#endif
#endif

#endif


#endif  /* __nsICommandParams_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsICommandManager interface
 */
#ifndef __nsICommandManager_INTERFACE_DEFINED__
#define __nsICommandManager_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsICommandManager, 0xbb5a1730, 0xd83b, 0x4fa2, 0x83,0x1b, 0x35,0xb9,0xd5,0x84,0x2e,0x84);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("bb5a1730-d83b-4fa2-831b-35b9d5842e84")
nsICommandManager : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE AddCommandObserver(
        nsIObserver *aCommandObserver,
        const char *aCommandToObserve) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveCommandObserver(
        nsIObserver *aCommandObserver,
        const char *aCommandObserved) = 0;

    virtual nsresult STDMETHODCALLTYPE IsCommandSupported(
        const char *aCommandName,
        mozIDOMWindowProxy *aTargetWindow,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE IsCommandEnabled(
        const char *aCommandName,
        mozIDOMWindowProxy *aTargetWindow,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCommandState(
        const char *aCommandName,
        mozIDOMWindowProxy *aTargetWindow,
        nsICommandParams *aCommandParams) = 0;

    virtual nsresult STDMETHODCALLTYPE DoCommand(
        const char *aCommandName,
        nsICommandParams *aCommandParams,
        mozIDOMWindowProxy *aTargetWindow) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsICommandManager, 0xbb5a1730, 0xd83b, 0x4fa2, 0x83,0x1b, 0x35,0xb9,0xd5,0x84,0x2e,0x84)
#endif
#else
typedef struct nsICommandManagerVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsICommandManager *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsICommandManager *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsICommandManager *This);

    /*** nsICommandManager methods ***/
    nsresult (STDMETHODCALLTYPE *AddCommandObserver)(
        nsICommandManager *This,
        nsIObserver *aCommandObserver,
        const char *aCommandToObserve);

    nsresult (STDMETHODCALLTYPE *RemoveCommandObserver)(
        nsICommandManager *This,
        nsIObserver *aCommandObserver,
        const char *aCommandObserved);

    nsresult (STDMETHODCALLTYPE *IsCommandSupported)(
        nsICommandManager *This,
        const char *aCommandName,
        mozIDOMWindowProxy *aTargetWindow,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *IsCommandEnabled)(
        nsICommandManager *This,
        const char *aCommandName,
        mozIDOMWindowProxy *aTargetWindow,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetCommandState)(
        nsICommandManager *This,
        const char *aCommandName,
        mozIDOMWindowProxy *aTargetWindow,
        nsICommandParams *aCommandParams);

    nsresult (STDMETHODCALLTYPE *DoCommand)(
        nsICommandManager *This,
        const char *aCommandName,
        nsICommandParams *aCommandParams,
        mozIDOMWindowProxy *aTargetWindow);

    END_INTERFACE
} nsICommandManagerVtbl;

interface nsICommandManager {
    CONST_VTBL nsICommandManagerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsICommandManager_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsICommandManager_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsICommandManager_Release(This) (This)->lpVtbl->Release(This)
/*** nsICommandManager methods ***/
#define nsICommandManager_AddCommandObserver(This,aCommandObserver,aCommandToObserve) (This)->lpVtbl->AddCommandObserver(This,aCommandObserver,aCommandToObserve)
#define nsICommandManager_RemoveCommandObserver(This,aCommandObserver,aCommandObserved) (This)->lpVtbl->RemoveCommandObserver(This,aCommandObserver,aCommandObserved)
#define nsICommandManager_IsCommandSupported(This,aCommandName,aTargetWindow,_retval) (This)->lpVtbl->IsCommandSupported(This,aCommandName,aTargetWindow,_retval)
#define nsICommandManager_IsCommandEnabled(This,aCommandName,aTargetWindow,_retval) (This)->lpVtbl->IsCommandEnabled(This,aCommandName,aTargetWindow,_retval)
#define nsICommandManager_GetCommandState(This,aCommandName,aTargetWindow,aCommandParams) (This)->lpVtbl->GetCommandState(This,aCommandName,aTargetWindow,aCommandParams)
#define nsICommandManager_DoCommand(This,aCommandName,aCommandParams,aTargetWindow) (This)->lpVtbl->DoCommand(This,aCommandName,aCommandParams,aTargetWindow)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsICommandManager_QueryInterface(nsICommandManager* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsICommandManager_AddRef(nsICommandManager* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsICommandManager_Release(nsICommandManager* This) {
    return This->lpVtbl->Release(This);
}
/*** nsICommandManager methods ***/
static FORCEINLINE nsresult nsICommandManager_AddCommandObserver(nsICommandManager* This,nsIObserver *aCommandObserver,const char *aCommandToObserve) {
    return This->lpVtbl->AddCommandObserver(This,aCommandObserver,aCommandToObserve);
}
static FORCEINLINE nsresult nsICommandManager_RemoveCommandObserver(nsICommandManager* This,nsIObserver *aCommandObserver,const char *aCommandObserved) {
    return This->lpVtbl->RemoveCommandObserver(This,aCommandObserver,aCommandObserved);
}
static FORCEINLINE nsresult nsICommandManager_IsCommandSupported(nsICommandManager* This,const char *aCommandName,mozIDOMWindowProxy *aTargetWindow,cpp_bool *_retval) {
    return This->lpVtbl->IsCommandSupported(This,aCommandName,aTargetWindow,_retval);
}
static FORCEINLINE nsresult nsICommandManager_IsCommandEnabled(nsICommandManager* This,const char *aCommandName,mozIDOMWindowProxy *aTargetWindow,cpp_bool *_retval) {
    return This->lpVtbl->IsCommandEnabled(This,aCommandName,aTargetWindow,_retval);
}
static FORCEINLINE nsresult nsICommandManager_GetCommandState(nsICommandManager* This,const char *aCommandName,mozIDOMWindowProxy *aTargetWindow,nsICommandParams *aCommandParams) {
    return This->lpVtbl->GetCommandState(This,aCommandName,aTargetWindow,aCommandParams);
}
static FORCEINLINE nsresult nsICommandManager_DoCommand(nsICommandManager* This,const char *aCommandName,nsICommandParams *aCommandParams,mozIDOMWindowProxy *aTargetWindow) {
    return This->lpVtbl->DoCommand(This,aCommandName,aCommandParams,aTargetWindow);
}
#endif
#endif

#endif


#endif  /* __nsICommandManager_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsICategoryManager interface
 */
#ifndef __nsICategoryManager_INTERFACE_DEFINED__
#define __nsICategoryManager_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsICategoryManager, 0x3275b2cd, 0xaf6d, 0x429a, 0x80,0xd7, 0xf0,0xc5,0x12,0x03,0x42,0xac);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("3275b2cd-af6d-429a-80d7-f0c5120342ac")
nsICategoryManager : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetCategoryEntry(
        const char *aCategory,
        const char *aEntry,
        char **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE AddCategoryEntry(
        const char *aCategory,
        const char *aEntry,
        const char *aValue,
        cpp_bool aPersist,
        cpp_bool aReplace,
        char **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE DeleteCategoryEntry(
        const char *aCategory,
        const char *aEntry,
        cpp_bool aPersist) = 0;

    virtual nsresult STDMETHODCALLTYPE DeleteCategory(
        const char *aCategory) = 0;

    virtual nsresult STDMETHODCALLTYPE EnumerateCategory(
        const char *aCategory,
        nsISimpleEnumerator **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE EnumerateCategories(
        nsISimpleEnumerator **_retval) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsICategoryManager, 0x3275b2cd, 0xaf6d, 0x429a, 0x80,0xd7, 0xf0,0xc5,0x12,0x03,0x42,0xac)
#endif
#else
typedef struct nsICategoryManagerVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsICategoryManager *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsICategoryManager *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsICategoryManager *This);

    /*** nsICategoryManager methods ***/
    nsresult (STDMETHODCALLTYPE *GetCategoryEntry)(
        nsICategoryManager *This,
        const char *aCategory,
        const char *aEntry,
        char **_retval);

    nsresult (STDMETHODCALLTYPE *AddCategoryEntry)(
        nsICategoryManager *This,
        const char *aCategory,
        const char *aEntry,
        const char *aValue,
        cpp_bool aPersist,
        cpp_bool aReplace,
        char **_retval);

    nsresult (STDMETHODCALLTYPE *DeleteCategoryEntry)(
        nsICategoryManager *This,
        const char *aCategory,
        const char *aEntry,
        cpp_bool aPersist);

    nsresult (STDMETHODCALLTYPE *DeleteCategory)(
        nsICategoryManager *This,
        const char *aCategory);

    nsresult (STDMETHODCALLTYPE *EnumerateCategory)(
        nsICategoryManager *This,
        const char *aCategory,
        nsISimpleEnumerator **_retval);

    nsresult (STDMETHODCALLTYPE *EnumerateCategories)(
        nsICategoryManager *This,
        nsISimpleEnumerator **_retval);

    END_INTERFACE
} nsICategoryManagerVtbl;

interface nsICategoryManager {
    CONST_VTBL nsICategoryManagerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsICategoryManager_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsICategoryManager_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsICategoryManager_Release(This) (This)->lpVtbl->Release(This)
/*** nsICategoryManager methods ***/
#define nsICategoryManager_GetCategoryEntry(This,aCategory,aEntry,_retval) (This)->lpVtbl->GetCategoryEntry(This,aCategory,aEntry,_retval)
#define nsICategoryManager_AddCategoryEntry(This,aCategory,aEntry,aValue,aPersist,aReplace,_retval) (This)->lpVtbl->AddCategoryEntry(This,aCategory,aEntry,aValue,aPersist,aReplace,_retval)
#define nsICategoryManager_DeleteCategoryEntry(This,aCategory,aEntry,aPersist) (This)->lpVtbl->DeleteCategoryEntry(This,aCategory,aEntry,aPersist)
#define nsICategoryManager_DeleteCategory(This,aCategory) (This)->lpVtbl->DeleteCategory(This,aCategory)
#define nsICategoryManager_EnumerateCategory(This,aCategory,_retval) (This)->lpVtbl->EnumerateCategory(This,aCategory,_retval)
#define nsICategoryManager_EnumerateCategories(This,_retval) (This)->lpVtbl->EnumerateCategories(This,_retval)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsICategoryManager_QueryInterface(nsICategoryManager* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsICategoryManager_AddRef(nsICategoryManager* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsICategoryManager_Release(nsICategoryManager* This) {
    return This->lpVtbl->Release(This);
}
/*** nsICategoryManager methods ***/
static FORCEINLINE nsresult nsICategoryManager_GetCategoryEntry(nsICategoryManager* This,const char *aCategory,const char *aEntry,char **_retval) {
    return This->lpVtbl->GetCategoryEntry(This,aCategory,aEntry,_retval);
}
static FORCEINLINE nsresult nsICategoryManager_AddCategoryEntry(nsICategoryManager* This,const char *aCategory,const char *aEntry,const char *aValue,cpp_bool aPersist,cpp_bool aReplace,char **_retval) {
    return This->lpVtbl->AddCategoryEntry(This,aCategory,aEntry,aValue,aPersist,aReplace,_retval);
}
static FORCEINLINE nsresult nsICategoryManager_DeleteCategoryEntry(nsICategoryManager* This,const char *aCategory,const char *aEntry,cpp_bool aPersist) {
    return This->lpVtbl->DeleteCategoryEntry(This,aCategory,aEntry,aPersist);
}
static FORCEINLINE nsresult nsICategoryManager_DeleteCategory(nsICategoryManager* This,const char *aCategory) {
    return This->lpVtbl->DeleteCategory(This,aCategory);
}
static FORCEINLINE nsresult nsICategoryManager_EnumerateCategory(nsICategoryManager* This,const char *aCategory,nsISimpleEnumerator **_retval) {
    return This->lpVtbl->EnumerateCategory(This,aCategory,_retval);
}
static FORCEINLINE nsresult nsICategoryManager_EnumerateCategories(nsICategoryManager* This,nsISimpleEnumerator **_retval) {
    return This->lpVtbl->EnumerateCategories(This,_retval);
}
#endif
#endif

#endif


#endif  /* __nsICategoryManager_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIControllerContext interface
 */
#ifndef __nsIControllerContext_INTERFACE_DEFINED__
#define __nsIControllerContext_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIControllerContext, 0x47b82b60, 0xa36f, 0x4167, 0x80,0x72, 0x6f,0x42,0x11,0x51,0xed,0x50);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("47b82b60-a36f-4167-8072-6f421151ed50")
nsIControllerContext : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE Init(
        nsIControllerCommandTable *aCommandTable) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCommandContext(
        nsISupports *aCommandContext) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIControllerContext, 0x47b82b60, 0xa36f, 0x4167, 0x80,0x72, 0x6f,0x42,0x11,0x51,0xed,0x50)
#endif
#else
typedef struct nsIControllerContextVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIControllerContext *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIControllerContext *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIControllerContext *This);

    /*** nsIControllerContext methods ***/
    nsresult (STDMETHODCALLTYPE *Init)(
        nsIControllerContext *This,
        nsIControllerCommandTable *aCommandTable);

    nsresult (STDMETHODCALLTYPE *SetCommandContext)(
        nsIControllerContext *This,
        nsISupports *aCommandContext);

    END_INTERFACE
} nsIControllerContextVtbl;

interface nsIControllerContext {
    CONST_VTBL nsIControllerContextVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIControllerContext_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIControllerContext_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIControllerContext_Release(This) (This)->lpVtbl->Release(This)
/*** nsIControllerContext methods ***/
#define nsIControllerContext_Init(This,aCommandTable) (This)->lpVtbl->Init(This,aCommandTable)
#define nsIControllerContext_SetCommandContext(This,aCommandContext) (This)->lpVtbl->SetCommandContext(This,aCommandContext)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIControllerContext_QueryInterface(nsIControllerContext* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIControllerContext_AddRef(nsIControllerContext* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIControllerContext_Release(nsIControllerContext* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIControllerContext methods ***/
static FORCEINLINE nsresult nsIControllerContext_Init(nsIControllerContext* This,nsIControllerCommandTable *aCommandTable) {
    return This->lpVtbl->Init(This,aCommandTable);
}
static FORCEINLINE nsresult nsIControllerContext_SetCommandContext(nsIControllerContext* This,nsISupports *aCommandContext) {
    return This->lpVtbl->SetCommandContext(This,aCommandContext);
}
#endif
#endif

#endif


#endif  /* __nsIControllerContext_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIController interface
 */
#ifndef __nsIController_INTERFACE_DEFINED__
#define __nsIController_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIController, 0xd5b61b82, 0x1da4, 0x11d3, 0xbf,0x87, 0x00,0x10,0x5a,0x1b,0x06,0x27);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d5b61b82-1da4-11d3-bf87-00105a1b0627")
nsIController : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE IsCommandEnabled(
        const char *command,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SupportsCommand(
        const char *command,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE DoCommand(
        const char *command) = 0;

    virtual nsresult STDMETHODCALLTYPE OnEvent(
        const char *eventName) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIController, 0xd5b61b82, 0x1da4, 0x11d3, 0xbf,0x87, 0x00,0x10,0x5a,0x1b,0x06,0x27)
#endif
#else
typedef struct nsIControllerVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIController *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIController *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIController *This);

    /*** nsIController methods ***/
    nsresult (STDMETHODCALLTYPE *IsCommandEnabled)(
        nsIController *This,
        const char *command,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SupportsCommand)(
        nsIController *This,
        const char *command,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *DoCommand)(
        nsIController *This,
        const char *command);

    nsresult (STDMETHODCALLTYPE *OnEvent)(
        nsIController *This,
        const char *eventName);

    END_INTERFACE
} nsIControllerVtbl;

interface nsIController {
    CONST_VTBL nsIControllerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIController_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIController_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIController_Release(This) (This)->lpVtbl->Release(This)
/*** nsIController methods ***/
#define nsIController_IsCommandEnabled(This,command,_retval) (This)->lpVtbl->IsCommandEnabled(This,command,_retval)
#define nsIController_SupportsCommand(This,command,_retval) (This)->lpVtbl->SupportsCommand(This,command,_retval)
#define nsIController_DoCommand(This,command) (This)->lpVtbl->DoCommand(This,command)
#define nsIController_OnEvent(This,eventName) (This)->lpVtbl->OnEvent(This,eventName)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIController_QueryInterface(nsIController* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIController_AddRef(nsIController* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIController_Release(nsIController* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIController methods ***/
static FORCEINLINE nsresult nsIController_IsCommandEnabled(nsIController* This,const char *command,cpp_bool *_retval) {
    return This->lpVtbl->IsCommandEnabled(This,command,_retval);
}
static FORCEINLINE nsresult nsIController_SupportsCommand(nsIController* This,const char *command,cpp_bool *_retval) {
    return This->lpVtbl->SupportsCommand(This,command,_retval);
}
static FORCEINLINE nsresult nsIController_DoCommand(nsIController* This,const char *command) {
    return This->lpVtbl->DoCommand(This,command);
}
static FORCEINLINE nsresult nsIController_OnEvent(nsIController* This,const char *eventName) {
    return This->lpVtbl->OnEvent(This,eventName);
}
#endif
#endif

#endif


#endif  /* __nsIController_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIContent interface
 */
#ifndef __nsIContent_INTERFACE_DEFINED__
#define __nsIContent_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIContent, 0x8e1bab9d, 0x8815, 0x4d2c, 0xa2,0x4d, 0x7a,0xba,0x52,0x39,0xdc,0x22);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("8e1bab9d-8815-4d2c-a24d-7aba5239dc22")
nsIContent : public nsISupports
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIContent, 0x8e1bab9d, 0x8815, 0x4d2c, 0xa2,0x4d, 0x7a,0xba,0x52,0x39,0xdc,0x22)
#endif
#else
typedef struct nsIContentVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIContent *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIContent *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIContent *This);

    END_INTERFACE
} nsIContentVtbl;

interface nsIContent {
    CONST_VTBL nsIContentVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIContent_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIContent_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIContent_Release(This) (This)->lpVtbl->Release(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIContent_QueryInterface(nsIContent* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIContent_AddRef(nsIContent* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIContent_Release(nsIContent* This) {
    return This->lpVtbl->Release(This);
}
#endif
#endif

#endif


#endif  /* __nsIContent_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDocument interface
 */
#ifndef __nsIDocument_INTERFACE_DEFINED__
#define __nsIDocument_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDocument, 0xce1f7627, 0x7109, 0x4977, 0xba,0x77, 0x49,0x0f,0xfd,0xe0,0x7a,0xaa);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ce1f7627-7109-4977-ba77-490ffde07aaa")
nsIDocument : public nsISupports
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDocument, 0xce1f7627, 0x7109, 0x4977, 0xba,0x77, 0x49,0x0f,0xfd,0xe0,0x7a,0xaa)
#endif
#else
typedef struct nsIDocumentVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDocument *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDocument *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDocument *This);

    END_INTERFACE
} nsIDocumentVtbl;

interface nsIDocument {
    CONST_VTBL nsIDocumentVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDocument_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDocument_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDocument_Release(This) (This)->lpVtbl->Release(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDocument_QueryInterface(nsIDocument* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDocument_AddRef(nsIDocument* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDocument_Release(nsIDocument* This) {
    return This->lpVtbl->Release(This);
}
#endif
#endif

#endif


#endif  /* __nsIDocument_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIContentSerializer interface
 */
#ifndef __nsIContentSerializer_INTERFACE_DEFINED__
#define __nsIContentSerializer_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIContentSerializer, 0xb1ee32f2, 0xb8c4, 0x49b9, 0x93,0xdf, 0xb6,0xfa,0xb5,0xd5,0x46,0x88);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("b1ee32f2-b8c4-49b9-93df-b6fab5d54688")
nsIContentSerializer : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE Init(
        UINT32 flags,
        UINT32 aWrapColumn,
        const char *aCharSet,
        cpp_bool aIsCopying,
        cpp_bool aIsWholeDocument) = 0;

    virtual nsresult STDMETHODCALLTYPE AppendText(
        nsIContent *aText,
        LONG aStartOffset,
        LONG aEndOffset,
        nsAString *aStr) = 0;

    virtual nsresult STDMETHODCALLTYPE AppendCDATASection(
        nsIContent *aCDATASection,
        LONG aStartOffset,
        LONG aEndOffset,
        nsAString *aStr) = 0;

    virtual nsresult STDMETHODCALLTYPE AppendProcessingInstruction(
        nsIContent *aPI,
        LONG aStartOffset,
        LONG aEndOffset,
        nsAString *aStr) = 0;

    virtual nsresult STDMETHODCALLTYPE AppendComment(
        nsIContent *aComment,
        LONG aStartOffset,
        LONG aEndOffset,
        nsAString *aStr) = 0;

    virtual nsresult STDMETHODCALLTYPE AppendDoctype(
        nsIContent *aDoctype,
        nsAString *aStr) = 0;

    virtual nsresult STDMETHODCALLTYPE AppendElementStart(
        nsIContent *aElement,
        nsIContent *aOriginalElement,
        nsAString *aStr) = 0;

    virtual nsresult STDMETHODCALLTYPE AppendElementEnd(
        nsIContent *aElement,
        nsAString *aStr) = 0;

    virtual nsresult STDMETHODCALLTYPE Flush(
        nsAString *aStr) = 0;

    virtual nsresult STDMETHODCALLTYPE AppendDocumentStart(
        nsIDocument *aDocument,
        nsAString *aStr) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIContentSerializer, 0xb1ee32f2, 0xb8c4, 0x49b9, 0x93,0xdf, 0xb6,0xfa,0xb5,0xd5,0x46,0x88)
#endif
#else
typedef struct nsIContentSerializerVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIContentSerializer *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIContentSerializer *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIContentSerializer *This);

    /*** nsIContentSerializer methods ***/
    nsresult (STDMETHODCALLTYPE *Init)(
        nsIContentSerializer *This,
        UINT32 flags,
        UINT32 aWrapColumn,
        const char *aCharSet,
        cpp_bool aIsCopying,
        cpp_bool aIsWholeDocument);

    nsresult (STDMETHODCALLTYPE *AppendText)(
        nsIContentSerializer *This,
        nsIContent *aText,
        LONG aStartOffset,
        LONG aEndOffset,
        nsAString *aStr);

    nsresult (STDMETHODCALLTYPE *AppendCDATASection)(
        nsIContentSerializer *This,
        nsIContent *aCDATASection,
        LONG aStartOffset,
        LONG aEndOffset,
        nsAString *aStr);

    nsresult (STDMETHODCALLTYPE *AppendProcessingInstruction)(
        nsIContentSerializer *This,
        nsIContent *aPI,
        LONG aStartOffset,
        LONG aEndOffset,
        nsAString *aStr);

    nsresult (STDMETHODCALLTYPE *AppendComment)(
        nsIContentSerializer *This,
        nsIContent *aComment,
        LONG aStartOffset,
        LONG aEndOffset,
        nsAString *aStr);

    nsresult (STDMETHODCALLTYPE *AppendDoctype)(
        nsIContentSerializer *This,
        nsIContent *aDoctype,
        nsAString *aStr);

    nsresult (STDMETHODCALLTYPE *AppendElementStart)(
        nsIContentSerializer *This,
        nsIContent *aElement,
        nsIContent *aOriginalElement,
        nsAString *aStr);

    nsresult (STDMETHODCALLTYPE *AppendElementEnd)(
        nsIContentSerializer *This,
        nsIContent *aElement,
        nsAString *aStr);

    nsresult (STDMETHODCALLTYPE *Flush)(
        nsIContentSerializer *This,
        nsAString *aStr);

    nsresult (STDMETHODCALLTYPE *AppendDocumentStart)(
        nsIContentSerializer *This,
        nsIDocument *aDocument,
        nsAString *aStr);

    END_INTERFACE
} nsIContentSerializerVtbl;

interface nsIContentSerializer {
    CONST_VTBL nsIContentSerializerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIContentSerializer_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIContentSerializer_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIContentSerializer_Release(This) (This)->lpVtbl->Release(This)
/*** nsIContentSerializer methods ***/
#define nsIContentSerializer_Init(This,flags,aWrapColumn,aCharSet,aIsCopying,aIsWholeDocument) (This)->lpVtbl->Init(This,flags,aWrapColumn,aCharSet,aIsCopying,aIsWholeDocument)
#define nsIContentSerializer_AppendText(This,aText,aStartOffset,aEndOffset,aStr) (This)->lpVtbl->AppendText(This,aText,aStartOffset,aEndOffset,aStr)
#define nsIContentSerializer_AppendCDATASection(This,aCDATASection,aStartOffset,aEndOffset,aStr) (This)->lpVtbl->AppendCDATASection(This,aCDATASection,aStartOffset,aEndOffset,aStr)
#define nsIContentSerializer_AppendProcessingInstruction(This,aPI,aStartOffset,aEndOffset,aStr) (This)->lpVtbl->AppendProcessingInstruction(This,aPI,aStartOffset,aEndOffset,aStr)
#define nsIContentSerializer_AppendComment(This,aComment,aStartOffset,aEndOffset,aStr) (This)->lpVtbl->AppendComment(This,aComment,aStartOffset,aEndOffset,aStr)
#define nsIContentSerializer_AppendDoctype(This,aDoctype,aStr) (This)->lpVtbl->AppendDoctype(This,aDoctype,aStr)
#define nsIContentSerializer_AppendElementStart(This,aElement,aOriginalElement,aStr) (This)->lpVtbl->AppendElementStart(This,aElement,aOriginalElement,aStr)
#define nsIContentSerializer_AppendElementEnd(This,aElement,aStr) (This)->lpVtbl->AppendElementEnd(This,aElement,aStr)
#define nsIContentSerializer_Flush(This,aStr) (This)->lpVtbl->Flush(This,aStr)
#define nsIContentSerializer_AppendDocumentStart(This,aDocument,aStr) (This)->lpVtbl->AppendDocumentStart(This,aDocument,aStr)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIContentSerializer_QueryInterface(nsIContentSerializer* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIContentSerializer_AddRef(nsIContentSerializer* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIContentSerializer_Release(nsIContentSerializer* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIContentSerializer methods ***/
static FORCEINLINE nsresult nsIContentSerializer_Init(nsIContentSerializer* This,UINT32 flags,UINT32 aWrapColumn,const char *aCharSet,cpp_bool aIsCopying,cpp_bool aIsWholeDocument) {
    return This->lpVtbl->Init(This,flags,aWrapColumn,aCharSet,aIsCopying,aIsWholeDocument);
}
static FORCEINLINE nsresult nsIContentSerializer_AppendText(nsIContentSerializer* This,nsIContent *aText,LONG aStartOffset,LONG aEndOffset,nsAString *aStr) {
    return This->lpVtbl->AppendText(This,aText,aStartOffset,aEndOffset,aStr);
}
static FORCEINLINE nsresult nsIContentSerializer_AppendCDATASection(nsIContentSerializer* This,nsIContent *aCDATASection,LONG aStartOffset,LONG aEndOffset,nsAString *aStr) {
    return This->lpVtbl->AppendCDATASection(This,aCDATASection,aStartOffset,aEndOffset,aStr);
}
static FORCEINLINE nsresult nsIContentSerializer_AppendProcessingInstruction(nsIContentSerializer* This,nsIContent *aPI,LONG aStartOffset,LONG aEndOffset,nsAString *aStr) {
    return This->lpVtbl->AppendProcessingInstruction(This,aPI,aStartOffset,aEndOffset,aStr);
}
static FORCEINLINE nsresult nsIContentSerializer_AppendComment(nsIContentSerializer* This,nsIContent *aComment,LONG aStartOffset,LONG aEndOffset,nsAString *aStr) {
    return This->lpVtbl->AppendComment(This,aComment,aStartOffset,aEndOffset,aStr);
}
static FORCEINLINE nsresult nsIContentSerializer_AppendDoctype(nsIContentSerializer* This,nsIContent *aDoctype,nsAString *aStr) {
    return This->lpVtbl->AppendDoctype(This,aDoctype,aStr);
}
static FORCEINLINE nsresult nsIContentSerializer_AppendElementStart(nsIContentSerializer* This,nsIContent *aElement,nsIContent *aOriginalElement,nsAString *aStr) {
    return This->lpVtbl->AppendElementStart(This,aElement,aOriginalElement,aStr);
}
static FORCEINLINE nsresult nsIContentSerializer_AppendElementEnd(nsIContentSerializer* This,nsIContent *aElement,nsAString *aStr) {
    return This->lpVtbl->AppendElementEnd(This,aElement,aStr);
}
static FORCEINLINE nsresult nsIContentSerializer_Flush(nsIContentSerializer* This,nsAString *aStr) {
    return This->lpVtbl->Flush(This,aStr);
}
static FORCEINLINE nsresult nsIContentSerializer_AppendDocumentStart(nsIContentSerializer* This,nsIDocument *aDocument,nsAString *aStr) {
    return This->lpVtbl->AppendDocumentStart(This,aDocument,aStr);
}
#endif
#endif

#endif


#endif  /* __nsIContentSerializer_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIEditor interface
 */
#ifndef __nsIEditor_INTERFACE_DEFINED__
#define __nsIEditor_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIEditor, 0x094be624, 0xf0bf, 0x400f, 0x89,0xe2, 0x6a,0x84,0xba,0xab,0x94,0x74);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("094be624-f0bf-400f-89e2-6a84baab9474")
nsIEditor : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetSelection(
        nsISelection *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE FinalizeSelection(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE Init(
        nsIDOMDocument *doc,
        nsIContent *aRoot,
        nsISelectionController *aSelCon,
        UINT32 aFlags,
        nsAString *initialValue) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAttributeOrEquivalent(
        nsIDOMElement *element,
        const nsAString *sourceAttrName,
        const nsAString *sourceAttrValue,
        cpp_bool aSuppressTransaction) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveAttributeOrEquivalent(
        nsIDOMElement *element,
        const nsAString *sourceAttrName,
        cpp_bool aSuppressTransaction) = 0;

    virtual nsresult STDMETHODCALLTYPE PostCreate(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE PreDestroy(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFlags(
        UINT32 *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFlags(
        UINT32 val) = 0;

    virtual nsresult STDMETHODCALLTYPE GetContentsMIMEType(
        char **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetContentsMIMEType(
        const char *val) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsDocumentEditable(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsSelectionEditable(
        cpp_bool *aIsSelectionEditable) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDocument(
        nsIDOMDocument **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRootElement(
        nsIDOMElement **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSelectionController(
        nsISelectionController **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE DeleteSelection(
        short action,
        short aStripWrappers) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDocumentIsEmpty(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDocumentModified(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDocumentCharacterSet(
        nsACString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDocumentCharacterSet(
        const nsACString *val) = 0;

    virtual nsresult STDMETHODCALLTYPE ResetModificationCount(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetModificationCount(
        LONG *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE IncrementModificationCount(
        LONG aModCount) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTransactionManager(
        nsITransactionManager **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetTransactionManager(
        nsITransactionManager *aTransactionManager) = 0;

    virtual nsresult STDMETHODCALLTYPE DoTransaction(
        nsITransaction *txn) = 0;

    virtual nsresult STDMETHODCALLTYPE EnableUndo(
        cpp_bool enable) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNumberOfUndoItems(
        LONG *aNumberOfUndoItems) = 0;

    virtual nsresult STDMETHODCALLTYPE GetNumberOfRedoItems(
        LONG *aNumberOfRedoItems) = 0;

    virtual nsresult STDMETHODCALLTYPE Undo(
        UINT32 count) = 0;

    virtual nsresult STDMETHODCALLTYPE CanUndo(
        cpp_bool *isEnabled,
        cpp_bool *canUndo) = 0;

    virtual nsresult STDMETHODCALLTYPE Redo(
        UINT32 count) = 0;

    virtual nsresult STDMETHODCALLTYPE CanRedo(
        cpp_bool *isEnabled,
        cpp_bool *canRedo) = 0;

    virtual nsresult STDMETHODCALLTYPE BeginTransaction(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE EndTransaction(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE BeginPlaceHolderTransaction(
        nsIAtom *name) = 0;

    virtual nsresult STDMETHODCALLTYPE EndPlaceHolderTransaction(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE ShouldTxnSetSelection(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetShouldTxnSetSelection(
        cpp_bool should) = 0;

    virtual nsresult STDMETHODCALLTYPE GetInlineSpellChecker(
        nsIInlineSpellChecker **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SyncRealTimeSpell(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSpellcheckUserOverride(
        cpp_bool enable) = 0;

    virtual nsresult STDMETHODCALLTYPE Cut(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE CanCut(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Copy(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE CanCopy(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CanDelete(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Paste(
        LONG aSelectionType) = 0;

    virtual nsresult STDMETHODCALLTYPE PasteTransferable(
        nsITransferable *aTransferable) = 0;

    virtual nsresult STDMETHODCALLTYPE CanPaste(
        LONG aSelectionType,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CanPasteTransferable(
        nsITransferable *aTransferable,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SelectAll(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE BeginningOfDocument(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE EndOfDocument(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAttribute(
        nsIDOMElement *aElement,
        const nsAString *attributestr,
        const nsAString *attvalue) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAttributeValue(
        nsIDOMElement *aElement,
        const nsAString *attributestr,
        nsAString *resultValue,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveAttribute(
        nsIDOMElement *aElement,
        const nsAString *aAttribute) = 0;

    virtual nsresult STDMETHODCALLTYPE CloneAttribute(
        const nsAString *aAttribute,
        nsIDOMNode *aDestNode,
        nsIDOMNode *aSourceNode) = 0;

    virtual nsresult STDMETHODCALLTYPE CloneAttributes(
        nsIDOMNode *destNode,
        nsIDOMNode *sourceNode) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateNode(
        const nsAString *tag,
        nsIDOMNode *parent,
        LONG position,
        nsIDOMNode **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE InsertNode(
        nsIDOMNode *node,
        nsIDOMNode *parent,
        LONG aPosition) = 0;

    virtual nsresult STDMETHODCALLTYPE SplitNode(
        nsIDOMNode *existingRightNode,
        LONG offset,
        nsIDOMNode **newLeftNode) = 0;

    virtual nsresult STDMETHODCALLTYPE JoinNodes(
        nsIDOMNode *leftNode,
        nsIDOMNode *rightNode,
        nsIDOMNode *parent) = 0;

    virtual nsresult STDMETHODCALLTYPE DeleteNode(
        nsIDOMNode *child) = 0;

    virtual cpp_bool STDMETHODCALLTYPE OutputsMozDirty(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE MarkNodeDirty(
        nsIDOMNode *node) = 0;

    virtual nsresult STDMETHODCALLTYPE SwitchTextDirection(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE OutputToString(
        nsAString formatType,
        UINT32 flags,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE OutputToStream(
        nsIOutputStream *aStream,
        nsAString *formatType,
        nsACString *charsetOverride,
        UINT32 flags) = 0;

    virtual nsresult STDMETHODCALLTYPE AddEditorObserver(
        nsIEditorObserver *observer) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveEditorObserver(
        nsIEditorObserver *observer) = 0;

    virtual nsresult STDMETHODCALLTYPE AddEditActionListener(
        nsIEditActionListener *listener) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveEditActionListener(
        nsIEditActionListener *listener) = 0;

    virtual nsresult STDMETHODCALLTYPE AddDocumentStateListener(
        nsIDocumentStateListener *listener) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveDocumentStateListener(
        nsIDocumentStateListener *listener) = 0;

    virtual nsresult STDMETHODCALLTYPE DumpContentTree(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE DebugDumpContent(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE DebugUnitTests(
        LONG *outNumTests,
        LONG *outNumTestsFailed) = 0;

    virtual cpp_bool STDMETHODCALLTYPE IsModifiableNode(
        nsIDOMNode *aNode) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSuppressDispatchingInputEvent(
        cpp_bool *aSuppressDispatchingInputEvent) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSuppressDispatchingInputEvent(
        cpp_bool aSuppressDispatchingInputEvent) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsInEditAction(
        cpp_bool *aIsInEditAction) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIEditor, 0x094be624, 0xf0bf, 0x400f, 0x89,0xe2, 0x6a,0x84,0xba,0xab,0x94,0x74)
#endif
#else
typedef struct nsIEditorVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIEditor *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIEditor *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIEditor *This);

    /*** nsIEditor methods ***/
    nsresult (STDMETHODCALLTYPE *GetSelection)(
        nsIEditor *This,
        nsISelection *_retval);

    nsresult (STDMETHODCALLTYPE *FinalizeSelection)(
        nsIEditor *This);

    nsresult (STDMETHODCALLTYPE *Init)(
        nsIEditor *This,
        nsIDOMDocument *doc,
        nsIContent *aRoot,
        nsISelectionController *aSelCon,
        UINT32 aFlags,
        nsAString *initialValue);

    nsresult (STDMETHODCALLTYPE *SetAttributeOrEquivalent)(
        nsIEditor *This,
        nsIDOMElement *element,
        const nsAString *sourceAttrName,
        const nsAString *sourceAttrValue,
        cpp_bool aSuppressTransaction);

    nsresult (STDMETHODCALLTYPE *RemoveAttributeOrEquivalent)(
        nsIEditor *This,
        nsIDOMElement *element,
        const nsAString *sourceAttrName,
        cpp_bool aSuppressTransaction);

    nsresult (STDMETHODCALLTYPE *PostCreate)(
        nsIEditor *This);

    nsresult (STDMETHODCALLTYPE *PreDestroy)(
        nsIEditor *This);

    nsresult (STDMETHODCALLTYPE *GetFlags)(
        nsIEditor *This,
        UINT32 *_retval);

    nsresult (STDMETHODCALLTYPE *SetFlags)(
        nsIEditor *This,
        UINT32 val);

    nsresult (STDMETHODCALLTYPE *GetContentsMIMEType)(
        nsIEditor *This,
        char **_retval);

    nsresult (STDMETHODCALLTYPE *SetContentsMIMEType)(
        nsIEditor *This,
        const char *val);

    nsresult (STDMETHODCALLTYPE *GetIsDocumentEditable)(
        nsIEditor *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetIsSelectionEditable)(
        nsIEditor *This,
        cpp_bool *aIsSelectionEditable);

    nsresult (STDMETHODCALLTYPE *GetDocument)(
        nsIEditor *This,
        nsIDOMDocument **_retval);

    nsresult (STDMETHODCALLTYPE *GetRootElement)(
        nsIEditor *This,
        nsIDOMElement **_retval);

    nsresult (STDMETHODCALLTYPE *GetSelectionController)(
        nsIEditor *This,
        nsISelectionController **_retval);

    nsresult (STDMETHODCALLTYPE *DeleteSelection)(
        nsIEditor *This,
        short action,
        short aStripWrappers);

    nsresult (STDMETHODCALLTYPE *GetDocumentIsEmpty)(
        nsIEditor *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetDocumentModified)(
        nsIEditor *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetDocumentCharacterSet)(
        nsIEditor *This,
        nsACString *_retval);

    nsresult (STDMETHODCALLTYPE *SetDocumentCharacterSet)(
        nsIEditor *This,
        const nsACString *val);

    nsresult (STDMETHODCALLTYPE *ResetModificationCount)(
        nsIEditor *This);

    nsresult (STDMETHODCALLTYPE *GetModificationCount)(
        nsIEditor *This,
        LONG *_retval);

    nsresult (STDMETHODCALLTYPE *IncrementModificationCount)(
        nsIEditor *This,
        LONG aModCount);

    nsresult (STDMETHODCALLTYPE *GetTransactionManager)(
        nsIEditor *This,
        nsITransactionManager **_retval);

    nsresult (STDMETHODCALLTYPE *SetTransactionManager)(
        nsIEditor *This,
        nsITransactionManager *aTransactionManager);

    nsresult (STDMETHODCALLTYPE *DoTransaction)(
        nsIEditor *This,
        nsITransaction *txn);

    nsresult (STDMETHODCALLTYPE *EnableUndo)(
        nsIEditor *This,
        cpp_bool enable);

    nsresult (STDMETHODCALLTYPE *GetNumberOfUndoItems)(
        nsIEditor *This,
        LONG *aNumberOfUndoItems);

    nsresult (STDMETHODCALLTYPE *GetNumberOfRedoItems)(
        nsIEditor *This,
        LONG *aNumberOfRedoItems);

    nsresult (STDMETHODCALLTYPE *Undo)(
        nsIEditor *This,
        UINT32 count);

    nsresult (STDMETHODCALLTYPE *CanUndo)(
        nsIEditor *This,
        cpp_bool *isEnabled,
        cpp_bool *canUndo);

    nsresult (STDMETHODCALLTYPE *Redo)(
        nsIEditor *This,
        UINT32 count);

    nsresult (STDMETHODCALLTYPE *CanRedo)(
        nsIEditor *This,
        cpp_bool *isEnabled,
        cpp_bool *canRedo);

    nsresult (STDMETHODCALLTYPE *BeginTransaction)(
        nsIEditor *This);

    nsresult (STDMETHODCALLTYPE *EndTransaction)(
        nsIEditor *This);

    nsresult (STDMETHODCALLTYPE *BeginPlaceHolderTransaction)(
        nsIEditor *This,
        nsIAtom *name);

    nsresult (STDMETHODCALLTYPE *EndPlaceHolderTransaction)(
        nsIEditor *This);

    nsresult (STDMETHODCALLTYPE *ShouldTxnSetSelection)(
        nsIEditor *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetShouldTxnSetSelection)(
        nsIEditor *This,
        cpp_bool should);

    nsresult (STDMETHODCALLTYPE *GetInlineSpellChecker)(
        nsIEditor *This,
        nsIInlineSpellChecker **_retval);

    nsresult (STDMETHODCALLTYPE *SyncRealTimeSpell)(
        nsIEditor *This);

    nsresult (STDMETHODCALLTYPE *SetSpellcheckUserOverride)(
        nsIEditor *This,
        cpp_bool enable);

    nsresult (STDMETHODCALLTYPE *Cut)(
        nsIEditor *This);

    nsresult (STDMETHODCALLTYPE *CanCut)(
        nsIEditor *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *Copy)(
        nsIEditor *This);

    nsresult (STDMETHODCALLTYPE *CanCopy)(
        nsIEditor *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CanDelete)(
        nsIEditor *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *Paste)(
        nsIEditor *This,
        LONG aSelectionType);

    nsresult (STDMETHODCALLTYPE *PasteTransferable)(
        nsIEditor *This,
        nsITransferable *aTransferable);

    nsresult (STDMETHODCALLTYPE *CanPaste)(
        nsIEditor *This,
        LONG aSelectionType,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CanPasteTransferable)(
        nsIEditor *This,
        nsITransferable *aTransferable,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SelectAll)(
        nsIEditor *This);

    nsresult (STDMETHODCALLTYPE *BeginningOfDocument)(
        nsIEditor *This);

    nsresult (STDMETHODCALLTYPE *EndOfDocument)(
        nsIEditor *This);

    nsresult (STDMETHODCALLTYPE *SetAttribute)(
        nsIEditor *This,
        nsIDOMElement *aElement,
        const nsAString *attributestr,
        const nsAString *attvalue);

    nsresult (STDMETHODCALLTYPE *GetAttributeValue)(
        nsIEditor *This,
        nsIDOMElement *aElement,
        const nsAString *attributestr,
        nsAString *resultValue,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *RemoveAttribute)(
        nsIEditor *This,
        nsIDOMElement *aElement,
        const nsAString *aAttribute);

    nsresult (STDMETHODCALLTYPE *CloneAttribute)(
        nsIEditor *This,
        const nsAString *aAttribute,
        nsIDOMNode *aDestNode,
        nsIDOMNode *aSourceNode);

    nsresult (STDMETHODCALLTYPE *CloneAttributes)(
        nsIEditor *This,
        nsIDOMNode *destNode,
        nsIDOMNode *sourceNode);

    nsresult (STDMETHODCALLTYPE *CreateNode)(
        nsIEditor *This,
        const nsAString *tag,
        nsIDOMNode *parent,
        LONG position,
        nsIDOMNode **_retval);

    nsresult (STDMETHODCALLTYPE *InsertNode)(
        nsIEditor *This,
        nsIDOMNode *node,
        nsIDOMNode *parent,
        LONG aPosition);

    nsresult (STDMETHODCALLTYPE *SplitNode)(
        nsIEditor *This,
        nsIDOMNode *existingRightNode,
        LONG offset,
        nsIDOMNode **newLeftNode);

    nsresult (STDMETHODCALLTYPE *JoinNodes)(
        nsIEditor *This,
        nsIDOMNode *leftNode,
        nsIDOMNode *rightNode,
        nsIDOMNode *parent);

    nsresult (STDMETHODCALLTYPE *DeleteNode)(
        nsIEditor *This,
        nsIDOMNode *child);

    cpp_bool (STDMETHODCALLTYPE *OutputsMozDirty)(
        nsIEditor *This);

    nsresult (STDMETHODCALLTYPE *MarkNodeDirty)(
        nsIEditor *This,
        nsIDOMNode *node);

    nsresult (STDMETHODCALLTYPE *SwitchTextDirection)(
        nsIEditor *This);

    nsresult (STDMETHODCALLTYPE *OutputToString)(
        nsIEditor *This,
        nsAString formatType,
        UINT32 flags,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *OutputToStream)(
        nsIEditor *This,
        nsIOutputStream *aStream,
        nsAString *formatType,
        nsACString *charsetOverride,
        UINT32 flags);

    nsresult (STDMETHODCALLTYPE *AddEditorObserver)(
        nsIEditor *This,
        nsIEditorObserver *observer);

    nsresult (STDMETHODCALLTYPE *RemoveEditorObserver)(
        nsIEditor *This,
        nsIEditorObserver *observer);

    nsresult (STDMETHODCALLTYPE *AddEditActionListener)(
        nsIEditor *This,
        nsIEditActionListener *listener);

    nsresult (STDMETHODCALLTYPE *RemoveEditActionListener)(
        nsIEditor *This,
        nsIEditActionListener *listener);

    nsresult (STDMETHODCALLTYPE *AddDocumentStateListener)(
        nsIEditor *This,
        nsIDocumentStateListener *listener);

    nsresult (STDMETHODCALLTYPE *RemoveDocumentStateListener)(
        nsIEditor *This,
        nsIDocumentStateListener *listener);

    nsresult (STDMETHODCALLTYPE *DumpContentTree)(
        nsIEditor *This);

    nsresult (STDMETHODCALLTYPE *DebugDumpContent)(
        nsIEditor *This);

    nsresult (STDMETHODCALLTYPE *DebugUnitTests)(
        nsIEditor *This,
        LONG *outNumTests,
        LONG *outNumTestsFailed);

    cpp_bool (STDMETHODCALLTYPE *IsModifiableNode)(
        nsIEditor *This,
        nsIDOMNode *aNode);

    nsresult (STDMETHODCALLTYPE *GetSuppressDispatchingInputEvent)(
        nsIEditor *This,
        cpp_bool *aSuppressDispatchingInputEvent);

    nsresult (STDMETHODCALLTYPE *SetSuppressDispatchingInputEvent)(
        nsIEditor *This,
        cpp_bool aSuppressDispatchingInputEvent);

    nsresult (STDMETHODCALLTYPE *GetIsInEditAction)(
        nsIEditor *This,
        cpp_bool *aIsInEditAction);

    END_INTERFACE
} nsIEditorVtbl;

interface nsIEditor {
    CONST_VTBL nsIEditorVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIEditor_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIEditor_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIEditor_Release(This) (This)->lpVtbl->Release(This)
/*** nsIEditor methods ***/
#define nsIEditor_GetSelection(This,_retval) (This)->lpVtbl->GetSelection(This,_retval)
#define nsIEditor_FinalizeSelection(This) (This)->lpVtbl->FinalizeSelection(This)
#define nsIEditor_Init(This,doc,aRoot,aSelCon,aFlags,initialValue) (This)->lpVtbl->Init(This,doc,aRoot,aSelCon,aFlags,initialValue)
#define nsIEditor_SetAttributeOrEquivalent(This,element,sourceAttrName,sourceAttrValue,aSuppressTransaction) (This)->lpVtbl->SetAttributeOrEquivalent(This,element,sourceAttrName,sourceAttrValue,aSuppressTransaction)
#define nsIEditor_RemoveAttributeOrEquivalent(This,element,sourceAttrName,aSuppressTransaction) (This)->lpVtbl->RemoveAttributeOrEquivalent(This,element,sourceAttrName,aSuppressTransaction)
#define nsIEditor_PostCreate(This) (This)->lpVtbl->PostCreate(This)
#define nsIEditor_PreDestroy(This) (This)->lpVtbl->PreDestroy(This)
#define nsIEditor_GetFlags(This,_retval) (This)->lpVtbl->GetFlags(This,_retval)
#define nsIEditor_SetFlags(This,val) (This)->lpVtbl->SetFlags(This,val)
#define nsIEditor_GetContentsMIMEType(This,_retval) (This)->lpVtbl->GetContentsMIMEType(This,_retval)
#define nsIEditor_SetContentsMIMEType(This,val) (This)->lpVtbl->SetContentsMIMEType(This,val)
#define nsIEditor_GetIsDocumentEditable(This,_retval) (This)->lpVtbl->GetIsDocumentEditable(This,_retval)
#define nsIEditor_GetIsSelectionEditable(This,aIsSelectionEditable) (This)->lpVtbl->GetIsSelectionEditable(This,aIsSelectionEditable)
#define nsIEditor_GetDocument(This,_retval) (This)->lpVtbl->GetDocument(This,_retval)
#define nsIEditor_GetRootElement(This,_retval) (This)->lpVtbl->GetRootElement(This,_retval)
#define nsIEditor_GetSelectionController(This,_retval) (This)->lpVtbl->GetSelectionController(This,_retval)
#define nsIEditor_DeleteSelection(This,action,aStripWrappers) (This)->lpVtbl->DeleteSelection(This,action,aStripWrappers)
#define nsIEditor_GetDocumentIsEmpty(This,_retval) (This)->lpVtbl->GetDocumentIsEmpty(This,_retval)
#define nsIEditor_GetDocumentModified(This,_retval) (This)->lpVtbl->GetDocumentModified(This,_retval)
#define nsIEditor_GetDocumentCharacterSet(This,_retval) (This)->lpVtbl->GetDocumentCharacterSet(This,_retval)
#define nsIEditor_SetDocumentCharacterSet(This,val) (This)->lpVtbl->SetDocumentCharacterSet(This,val)
#define nsIEditor_ResetModificationCount(This) (This)->lpVtbl->ResetModificationCount(This)
#define nsIEditor_GetModificationCount(This,_retval) (This)->lpVtbl->GetModificationCount(This,_retval)
#define nsIEditor_IncrementModificationCount(This,aModCount) (This)->lpVtbl->IncrementModificationCount(This,aModCount)
#define nsIEditor_GetTransactionManager(This,_retval) (This)->lpVtbl->GetTransactionManager(This,_retval)
#define nsIEditor_SetTransactionManager(This,aTransactionManager) (This)->lpVtbl->SetTransactionManager(This,aTransactionManager)
#define nsIEditor_DoTransaction(This,txn) (This)->lpVtbl->DoTransaction(This,txn)
#define nsIEditor_EnableUndo(This,enable) (This)->lpVtbl->EnableUndo(This,enable)
#define nsIEditor_GetNumberOfUndoItems(This,aNumberOfUndoItems) (This)->lpVtbl->GetNumberOfUndoItems(This,aNumberOfUndoItems)
#define nsIEditor_GetNumberOfRedoItems(This,aNumberOfRedoItems) (This)->lpVtbl->GetNumberOfRedoItems(This,aNumberOfRedoItems)
#define nsIEditor_Undo(This,count) (This)->lpVtbl->Undo(This,count)
#define nsIEditor_CanUndo(This,isEnabled,canUndo) (This)->lpVtbl->CanUndo(This,isEnabled,canUndo)
#define nsIEditor_Redo(This,count) (This)->lpVtbl->Redo(This,count)
#define nsIEditor_CanRedo(This,isEnabled,canRedo) (This)->lpVtbl->CanRedo(This,isEnabled,canRedo)
#define nsIEditor_BeginTransaction(This) (This)->lpVtbl->BeginTransaction(This)
#define nsIEditor_EndTransaction(This) (This)->lpVtbl->EndTransaction(This)
#define nsIEditor_BeginPlaceHolderTransaction(This,name) (This)->lpVtbl->BeginPlaceHolderTransaction(This,name)
#define nsIEditor_EndPlaceHolderTransaction(This) (This)->lpVtbl->EndPlaceHolderTransaction(This)
#define nsIEditor_ShouldTxnSetSelection(This,_retval) (This)->lpVtbl->ShouldTxnSetSelection(This,_retval)
#define nsIEditor_SetShouldTxnSetSelection(This,should) (This)->lpVtbl->SetShouldTxnSetSelection(This,should)
#define nsIEditor_GetInlineSpellChecker(This,_retval) (This)->lpVtbl->GetInlineSpellChecker(This,_retval)
#define nsIEditor_SyncRealTimeSpell(This) (This)->lpVtbl->SyncRealTimeSpell(This)
#define nsIEditor_SetSpellcheckUserOverride(This,enable) (This)->lpVtbl->SetSpellcheckUserOverride(This,enable)
#define nsIEditor_Cut(This) (This)->lpVtbl->Cut(This)
#define nsIEditor_CanCut(This,_retval) (This)->lpVtbl->CanCut(This,_retval)
#define nsIEditor_Copy(This) (This)->lpVtbl->Copy(This)
#define nsIEditor_CanCopy(This,_retval) (This)->lpVtbl->CanCopy(This,_retval)
#define nsIEditor_CanDelete(This,_retval) (This)->lpVtbl->CanDelete(This,_retval)
#define nsIEditor_Paste(This,aSelectionType) (This)->lpVtbl->Paste(This,aSelectionType)
#define nsIEditor_PasteTransferable(This,aTransferable) (This)->lpVtbl->PasteTransferable(This,aTransferable)
#define nsIEditor_CanPaste(This,aSelectionType,_retval) (This)->lpVtbl->CanPaste(This,aSelectionType,_retval)
#define nsIEditor_CanPasteTransferable(This,aTransferable,_retval) (This)->lpVtbl->CanPasteTransferable(This,aTransferable,_retval)
#define nsIEditor_SelectAll(This) (This)->lpVtbl->SelectAll(This)
#define nsIEditor_BeginningOfDocument(This) (This)->lpVtbl->BeginningOfDocument(This)
#define nsIEditor_EndOfDocument(This) (This)->lpVtbl->EndOfDocument(This)
#define nsIEditor_SetAttribute(This,aElement,attributestr,attvalue) (This)->lpVtbl->SetAttribute(This,aElement,attributestr,attvalue)
#define nsIEditor_GetAttributeValue(This,aElement,attributestr,resultValue,_retval) (This)->lpVtbl->GetAttributeValue(This,aElement,attributestr,resultValue,_retval)
#define nsIEditor_RemoveAttribute(This,aElement,aAttribute) (This)->lpVtbl->RemoveAttribute(This,aElement,aAttribute)
#define nsIEditor_CloneAttribute(This,aAttribute,aDestNode,aSourceNode) (This)->lpVtbl->CloneAttribute(This,aAttribute,aDestNode,aSourceNode)
#define nsIEditor_CloneAttributes(This,destNode,sourceNode) (This)->lpVtbl->CloneAttributes(This,destNode,sourceNode)
#define nsIEditor_CreateNode(This,tag,parent,position,_retval) (This)->lpVtbl->CreateNode(This,tag,parent,position,_retval)
#define nsIEditor_InsertNode(This,node,parent,aPosition) (This)->lpVtbl->InsertNode(This,node,parent,aPosition)
#define nsIEditor_SplitNode(This,existingRightNode,offset,newLeftNode) (This)->lpVtbl->SplitNode(This,existingRightNode,offset,newLeftNode)
#define nsIEditor_JoinNodes(This,leftNode,rightNode,parent) (This)->lpVtbl->JoinNodes(This,leftNode,rightNode,parent)
#define nsIEditor_DeleteNode(This,child) (This)->lpVtbl->DeleteNode(This,child)
#define nsIEditor_OutputsMozDirty(This) (This)->lpVtbl->OutputsMozDirty(This)
#define nsIEditor_MarkNodeDirty(This,node) (This)->lpVtbl->MarkNodeDirty(This,node)
#define nsIEditor_SwitchTextDirection(This) (This)->lpVtbl->SwitchTextDirection(This)
#define nsIEditor_OutputToString(This,formatType,flags,_retval) (This)->lpVtbl->OutputToString(This,formatType,flags,_retval)
#define nsIEditor_OutputToStream(This,aStream,formatType,charsetOverride,flags) (This)->lpVtbl->OutputToStream(This,aStream,formatType,charsetOverride,flags)
#define nsIEditor_AddEditorObserver(This,observer) (This)->lpVtbl->AddEditorObserver(This,observer)
#define nsIEditor_RemoveEditorObserver(This,observer) (This)->lpVtbl->RemoveEditorObserver(This,observer)
#define nsIEditor_AddEditActionListener(This,listener) (This)->lpVtbl->AddEditActionListener(This,listener)
#define nsIEditor_RemoveEditActionListener(This,listener) (This)->lpVtbl->RemoveEditActionListener(This,listener)
#define nsIEditor_AddDocumentStateListener(This,listener) (This)->lpVtbl->AddDocumentStateListener(This,listener)
#define nsIEditor_RemoveDocumentStateListener(This,listener) (This)->lpVtbl->RemoveDocumentStateListener(This,listener)
#define nsIEditor_DumpContentTree(This) (This)->lpVtbl->DumpContentTree(This)
#define nsIEditor_DebugDumpContent(This) (This)->lpVtbl->DebugDumpContent(This)
#define nsIEditor_DebugUnitTests(This,outNumTests,outNumTestsFailed) (This)->lpVtbl->DebugUnitTests(This,outNumTests,outNumTestsFailed)
#define nsIEditor_IsModifiableNode(This,aNode) (This)->lpVtbl->IsModifiableNode(This,aNode)
#define nsIEditor_GetSuppressDispatchingInputEvent(This,aSuppressDispatchingInputEvent) (This)->lpVtbl->GetSuppressDispatchingInputEvent(This,aSuppressDispatchingInputEvent)
#define nsIEditor_SetSuppressDispatchingInputEvent(This,aSuppressDispatchingInputEvent) (This)->lpVtbl->SetSuppressDispatchingInputEvent(This,aSuppressDispatchingInputEvent)
#define nsIEditor_GetIsInEditAction(This,aIsInEditAction) (This)->lpVtbl->GetIsInEditAction(This,aIsInEditAction)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIEditor_QueryInterface(nsIEditor* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIEditor_AddRef(nsIEditor* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIEditor_Release(nsIEditor* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIEditor methods ***/
static FORCEINLINE nsresult nsIEditor_GetSelection(nsIEditor* This,nsISelection *_retval) {
    return This->lpVtbl->GetSelection(This,_retval);
}
static FORCEINLINE nsresult nsIEditor_FinalizeSelection(nsIEditor* This) {
    return This->lpVtbl->FinalizeSelection(This);
}
static FORCEINLINE nsresult nsIEditor_Init(nsIEditor* This,nsIDOMDocument *doc,nsIContent *aRoot,nsISelectionController *aSelCon,UINT32 aFlags,nsAString *initialValue) {
    return This->lpVtbl->Init(This,doc,aRoot,aSelCon,aFlags,initialValue);
}
static FORCEINLINE nsresult nsIEditor_SetAttributeOrEquivalent(nsIEditor* This,nsIDOMElement *element,const nsAString *sourceAttrName,const nsAString *sourceAttrValue,cpp_bool aSuppressTransaction) {
    return This->lpVtbl->SetAttributeOrEquivalent(This,element,sourceAttrName,sourceAttrValue,aSuppressTransaction);
}
static FORCEINLINE nsresult nsIEditor_RemoveAttributeOrEquivalent(nsIEditor* This,nsIDOMElement *element,const nsAString *sourceAttrName,cpp_bool aSuppressTransaction) {
    return This->lpVtbl->RemoveAttributeOrEquivalent(This,element,sourceAttrName,aSuppressTransaction);
}
static FORCEINLINE nsresult nsIEditor_PostCreate(nsIEditor* This) {
    return This->lpVtbl->PostCreate(This);
}
static FORCEINLINE nsresult nsIEditor_PreDestroy(nsIEditor* This) {
    return This->lpVtbl->PreDestroy(This);
}
static FORCEINLINE nsresult nsIEditor_GetFlags(nsIEditor* This,UINT32 *_retval) {
    return This->lpVtbl->GetFlags(This,_retval);
}
static FORCEINLINE nsresult nsIEditor_SetFlags(nsIEditor* This,UINT32 val) {
    return This->lpVtbl->SetFlags(This,val);
}
static FORCEINLINE nsresult nsIEditor_GetContentsMIMEType(nsIEditor* This,char **_retval) {
    return This->lpVtbl->GetContentsMIMEType(This,_retval);
}
static FORCEINLINE nsresult nsIEditor_SetContentsMIMEType(nsIEditor* This,const char *val) {
    return This->lpVtbl->SetContentsMIMEType(This,val);
}
static FORCEINLINE nsresult nsIEditor_GetIsDocumentEditable(nsIEditor* This,cpp_bool *_retval) {
    return This->lpVtbl->GetIsDocumentEditable(This,_retval);
}
static FORCEINLINE nsresult nsIEditor_GetIsSelectionEditable(nsIEditor* This,cpp_bool *aIsSelectionEditable) {
    return This->lpVtbl->GetIsSelectionEditable(This,aIsSelectionEditable);
}
static FORCEINLINE nsresult nsIEditor_GetDocument(nsIEditor* This,nsIDOMDocument **_retval) {
    return This->lpVtbl->GetDocument(This,_retval);
}
static FORCEINLINE nsresult nsIEditor_GetRootElement(nsIEditor* This,nsIDOMElement **_retval) {
    return This->lpVtbl->GetRootElement(This,_retval);
}
static FORCEINLINE nsresult nsIEditor_GetSelectionController(nsIEditor* This,nsISelectionController **_retval) {
    return This->lpVtbl->GetSelectionController(This,_retval);
}
static FORCEINLINE nsresult nsIEditor_DeleteSelection(nsIEditor* This,short action,short aStripWrappers) {
    return This->lpVtbl->DeleteSelection(This,action,aStripWrappers);
}
static FORCEINLINE nsresult nsIEditor_GetDocumentIsEmpty(nsIEditor* This,cpp_bool *_retval) {
    return This->lpVtbl->GetDocumentIsEmpty(This,_retval);
}
static FORCEINLINE nsresult nsIEditor_GetDocumentModified(nsIEditor* This,cpp_bool *_retval) {
    return This->lpVtbl->GetDocumentModified(This,_retval);
}
static FORCEINLINE nsresult nsIEditor_GetDocumentCharacterSet(nsIEditor* This,nsACString *_retval) {
    return This->lpVtbl->GetDocumentCharacterSet(This,_retval);
}
static FORCEINLINE nsresult nsIEditor_SetDocumentCharacterSet(nsIEditor* This,const nsACString *val) {
    return This->lpVtbl->SetDocumentCharacterSet(This,val);
}
static FORCEINLINE nsresult nsIEditor_ResetModificationCount(nsIEditor* This) {
    return This->lpVtbl->ResetModificationCount(This);
}
static FORCEINLINE nsresult nsIEditor_GetModificationCount(nsIEditor* This,LONG *_retval) {
    return This->lpVtbl->GetModificationCount(This,_retval);
}
static FORCEINLINE nsresult nsIEditor_IncrementModificationCount(nsIEditor* This,LONG aModCount) {
    return This->lpVtbl->IncrementModificationCount(This,aModCount);
}
static FORCEINLINE nsresult nsIEditor_GetTransactionManager(nsIEditor* This,nsITransactionManager **_retval) {
    return This->lpVtbl->GetTransactionManager(This,_retval);
}
static FORCEINLINE nsresult nsIEditor_SetTransactionManager(nsIEditor* This,nsITransactionManager *aTransactionManager) {
    return This->lpVtbl->SetTransactionManager(This,aTransactionManager);
}
static FORCEINLINE nsresult nsIEditor_DoTransaction(nsIEditor* This,nsITransaction *txn) {
    return This->lpVtbl->DoTransaction(This,txn);
}
static FORCEINLINE nsresult nsIEditor_EnableUndo(nsIEditor* This,cpp_bool enable) {
    return This->lpVtbl->EnableUndo(This,enable);
}
static FORCEINLINE nsresult nsIEditor_GetNumberOfUndoItems(nsIEditor* This,LONG *aNumberOfUndoItems) {
    return This->lpVtbl->GetNumberOfUndoItems(This,aNumberOfUndoItems);
}
static FORCEINLINE nsresult nsIEditor_GetNumberOfRedoItems(nsIEditor* This,LONG *aNumberOfRedoItems) {
    return This->lpVtbl->GetNumberOfRedoItems(This,aNumberOfRedoItems);
}
static FORCEINLINE nsresult nsIEditor_Undo(nsIEditor* This,UINT32 count) {
    return This->lpVtbl->Undo(This,count);
}
static FORCEINLINE nsresult nsIEditor_CanUndo(nsIEditor* This,cpp_bool *isEnabled,cpp_bool *canUndo) {
    return This->lpVtbl->CanUndo(This,isEnabled,canUndo);
}
static FORCEINLINE nsresult nsIEditor_Redo(nsIEditor* This,UINT32 count) {
    return This->lpVtbl->Redo(This,count);
}
static FORCEINLINE nsresult nsIEditor_CanRedo(nsIEditor* This,cpp_bool *isEnabled,cpp_bool *canRedo) {
    return This->lpVtbl->CanRedo(This,isEnabled,canRedo);
}
static FORCEINLINE nsresult nsIEditor_BeginTransaction(nsIEditor* This) {
    return This->lpVtbl->BeginTransaction(This);
}
static FORCEINLINE nsresult nsIEditor_EndTransaction(nsIEditor* This) {
    return This->lpVtbl->EndTransaction(This);
}
static FORCEINLINE nsresult nsIEditor_BeginPlaceHolderTransaction(nsIEditor* This,nsIAtom *name) {
    return This->lpVtbl->BeginPlaceHolderTransaction(This,name);
}
static FORCEINLINE nsresult nsIEditor_EndPlaceHolderTransaction(nsIEditor* This) {
    return This->lpVtbl->EndPlaceHolderTransaction(This);
}
static FORCEINLINE nsresult nsIEditor_ShouldTxnSetSelection(nsIEditor* This,cpp_bool *_retval) {
    return This->lpVtbl->ShouldTxnSetSelection(This,_retval);
}
static FORCEINLINE nsresult nsIEditor_SetShouldTxnSetSelection(nsIEditor* This,cpp_bool should) {
    return This->lpVtbl->SetShouldTxnSetSelection(This,should);
}
static FORCEINLINE nsresult nsIEditor_GetInlineSpellChecker(nsIEditor* This,nsIInlineSpellChecker **_retval) {
    return This->lpVtbl->GetInlineSpellChecker(This,_retval);
}
static FORCEINLINE nsresult nsIEditor_SyncRealTimeSpell(nsIEditor* This) {
    return This->lpVtbl->SyncRealTimeSpell(This);
}
static FORCEINLINE nsresult nsIEditor_SetSpellcheckUserOverride(nsIEditor* This,cpp_bool enable) {
    return This->lpVtbl->SetSpellcheckUserOverride(This,enable);
}
static FORCEINLINE nsresult nsIEditor_Cut(nsIEditor* This) {
    return This->lpVtbl->Cut(This);
}
static FORCEINLINE nsresult nsIEditor_CanCut(nsIEditor* This,cpp_bool *_retval) {
    return This->lpVtbl->CanCut(This,_retval);
}
static FORCEINLINE nsresult nsIEditor_Copy(nsIEditor* This) {
    return This->lpVtbl->Copy(This);
}
static FORCEINLINE nsresult nsIEditor_CanCopy(nsIEditor* This,cpp_bool *_retval) {
    return This->lpVtbl->CanCopy(This,_retval);
}
static FORCEINLINE nsresult nsIEditor_CanDelete(nsIEditor* This,cpp_bool *_retval) {
    return This->lpVtbl->CanDelete(This,_retval);
}
static FORCEINLINE nsresult nsIEditor_Paste(nsIEditor* This,LONG aSelectionType) {
    return This->lpVtbl->Paste(This,aSelectionType);
}
static FORCEINLINE nsresult nsIEditor_PasteTransferable(nsIEditor* This,nsITransferable *aTransferable) {
    return This->lpVtbl->PasteTransferable(This,aTransferable);
}
static FORCEINLINE nsresult nsIEditor_CanPaste(nsIEditor* This,LONG aSelectionType,cpp_bool *_retval) {
    return This->lpVtbl->CanPaste(This,aSelectionType,_retval);
}
static FORCEINLINE nsresult nsIEditor_CanPasteTransferable(nsIEditor* This,nsITransferable *aTransferable,cpp_bool *_retval) {
    return This->lpVtbl->CanPasteTransferable(This,aTransferable,_retval);
}
static FORCEINLINE nsresult nsIEditor_SelectAll(nsIEditor* This) {
    return This->lpVtbl->SelectAll(This);
}
static FORCEINLINE nsresult nsIEditor_BeginningOfDocument(nsIEditor* This) {
    return This->lpVtbl->BeginningOfDocument(This);
}
static FORCEINLINE nsresult nsIEditor_EndOfDocument(nsIEditor* This) {
    return This->lpVtbl->EndOfDocument(This);
}
static FORCEINLINE nsresult nsIEditor_SetAttribute(nsIEditor* This,nsIDOMElement *aElement,const nsAString *attributestr,const nsAString *attvalue) {
    return This->lpVtbl->SetAttribute(This,aElement,attributestr,attvalue);
}
static FORCEINLINE nsresult nsIEditor_GetAttributeValue(nsIEditor* This,nsIDOMElement *aElement,const nsAString *attributestr,nsAString *resultValue,cpp_bool *_retval) {
    return This->lpVtbl->GetAttributeValue(This,aElement,attributestr,resultValue,_retval);
}
static FORCEINLINE nsresult nsIEditor_RemoveAttribute(nsIEditor* This,nsIDOMElement *aElement,const nsAString *aAttribute) {
    return This->lpVtbl->RemoveAttribute(This,aElement,aAttribute);
}
static FORCEINLINE nsresult nsIEditor_CloneAttribute(nsIEditor* This,const nsAString *aAttribute,nsIDOMNode *aDestNode,nsIDOMNode *aSourceNode) {
    return This->lpVtbl->CloneAttribute(This,aAttribute,aDestNode,aSourceNode);
}
static FORCEINLINE nsresult nsIEditor_CloneAttributes(nsIEditor* This,nsIDOMNode *destNode,nsIDOMNode *sourceNode) {
    return This->lpVtbl->CloneAttributes(This,destNode,sourceNode);
}
static FORCEINLINE nsresult nsIEditor_CreateNode(nsIEditor* This,const nsAString *tag,nsIDOMNode *parent,LONG position,nsIDOMNode **_retval) {
    return This->lpVtbl->CreateNode(This,tag,parent,position,_retval);
}
static FORCEINLINE nsresult nsIEditor_InsertNode(nsIEditor* This,nsIDOMNode *node,nsIDOMNode *parent,LONG aPosition) {
    return This->lpVtbl->InsertNode(This,node,parent,aPosition);
}
static FORCEINLINE nsresult nsIEditor_SplitNode(nsIEditor* This,nsIDOMNode *existingRightNode,LONG offset,nsIDOMNode **newLeftNode) {
    return This->lpVtbl->SplitNode(This,existingRightNode,offset,newLeftNode);
}
static FORCEINLINE nsresult nsIEditor_JoinNodes(nsIEditor* This,nsIDOMNode *leftNode,nsIDOMNode *rightNode,nsIDOMNode *parent) {
    return This->lpVtbl->JoinNodes(This,leftNode,rightNode,parent);
}
static FORCEINLINE nsresult nsIEditor_DeleteNode(nsIEditor* This,nsIDOMNode *child) {
    return This->lpVtbl->DeleteNode(This,child);
}
static FORCEINLINE cpp_bool nsIEditor_OutputsMozDirty(nsIEditor* This) {
    return This->lpVtbl->OutputsMozDirty(This);
}
static FORCEINLINE nsresult nsIEditor_MarkNodeDirty(nsIEditor* This,nsIDOMNode *node) {
    return This->lpVtbl->MarkNodeDirty(This,node);
}
static FORCEINLINE nsresult nsIEditor_SwitchTextDirection(nsIEditor* This) {
    return This->lpVtbl->SwitchTextDirection(This);
}
static FORCEINLINE nsresult nsIEditor_OutputToString(nsIEditor* This,nsAString formatType,UINT32 flags,nsAString *_retval) {
    return This->lpVtbl->OutputToString(This,formatType,flags,_retval);
}
static FORCEINLINE nsresult nsIEditor_OutputToStream(nsIEditor* This,nsIOutputStream *aStream,nsAString *formatType,nsACString *charsetOverride,UINT32 flags) {
    return This->lpVtbl->OutputToStream(This,aStream,formatType,charsetOverride,flags);
}
static FORCEINLINE nsresult nsIEditor_AddEditorObserver(nsIEditor* This,nsIEditorObserver *observer) {
    return This->lpVtbl->AddEditorObserver(This,observer);
}
static FORCEINLINE nsresult nsIEditor_RemoveEditorObserver(nsIEditor* This,nsIEditorObserver *observer) {
    return This->lpVtbl->RemoveEditorObserver(This,observer);
}
static FORCEINLINE nsresult nsIEditor_AddEditActionListener(nsIEditor* This,nsIEditActionListener *listener) {
    return This->lpVtbl->AddEditActionListener(This,listener);
}
static FORCEINLINE nsresult nsIEditor_RemoveEditActionListener(nsIEditor* This,nsIEditActionListener *listener) {
    return This->lpVtbl->RemoveEditActionListener(This,listener);
}
static FORCEINLINE nsresult nsIEditor_AddDocumentStateListener(nsIEditor* This,nsIDocumentStateListener *listener) {
    return This->lpVtbl->AddDocumentStateListener(This,listener);
}
static FORCEINLINE nsresult nsIEditor_RemoveDocumentStateListener(nsIEditor* This,nsIDocumentStateListener *listener) {
    return This->lpVtbl->RemoveDocumentStateListener(This,listener);
}
static FORCEINLINE nsresult nsIEditor_DumpContentTree(nsIEditor* This) {
    return This->lpVtbl->DumpContentTree(This);
}
static FORCEINLINE nsresult nsIEditor_DebugDumpContent(nsIEditor* This) {
    return This->lpVtbl->DebugDumpContent(This);
}
static FORCEINLINE nsresult nsIEditor_DebugUnitTests(nsIEditor* This,LONG *outNumTests,LONG *outNumTestsFailed) {
    return This->lpVtbl->DebugUnitTests(This,outNumTests,outNumTestsFailed);
}
static FORCEINLINE cpp_bool nsIEditor_IsModifiableNode(nsIEditor* This,nsIDOMNode *aNode) {
    return This->lpVtbl->IsModifiableNode(This,aNode);
}
static FORCEINLINE nsresult nsIEditor_GetSuppressDispatchingInputEvent(nsIEditor* This,cpp_bool *aSuppressDispatchingInputEvent) {
    return This->lpVtbl->GetSuppressDispatchingInputEvent(This,aSuppressDispatchingInputEvent);
}
static FORCEINLINE nsresult nsIEditor_SetSuppressDispatchingInputEvent(nsIEditor* This,cpp_bool aSuppressDispatchingInputEvent) {
    return This->lpVtbl->SetSuppressDispatchingInputEvent(This,aSuppressDispatchingInputEvent);
}
static FORCEINLINE nsresult nsIEditor_GetIsInEditAction(nsIEditor* This,cpp_bool *aIsInEditAction) {
    return This->lpVtbl->GetIsInEditAction(This,aIsInEditAction);
}
#endif
#endif

#endif


#endif  /* __nsIEditor_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIHTMLEditor interface
 */
#ifndef __nsIHTMLEditor_INTERFACE_DEFINED__
#define __nsIHTMLEditor_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIHTMLEditor, 0x87ee993e, 0x985f, 0x4a43, 0xa9,0x74, 0x0d,0x95,0x12,0xda,0x2f,0xb0);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("87ee993e-985f-4a43-a974-0d9512da2fb0")
nsIHTMLEditor : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE AddDefaultProperty(
        nsIAtom *aProperty,
        nsAString *aAttribute,
        nsAString *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveDefaultProperty(
        nsIAtom *aProperty,
        nsAString *aAttribute,
        nsAString *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveAllDefaultProperties(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE SetInlineProperty(
        nsIAtom *aProperty,
        nsAString *aAttribute,
        nsAString *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE GetInlineProperty(
        nsIAtom *aProperty,
        nsAString *aAttribute,
        nsAString *aValue,
        cpp_bool *aFirst,
        cpp_bool *aAny,
        cpp_bool *aAll) = 0;

    virtual nsresult STDMETHODCALLTYPE GetInlinePropertyWithAttrValue(
        nsIAtom *aProperty,
        nsAString *aAttribute,
        nsAString *aValue,
        cpp_bool *aFirst,
        cpp_bool *aAny,
        cpp_bool *aAll,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveAllInlineProperties(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveInlineProperty(
        nsIAtom *aProperty,
        nsAString *aAttribute) = 0;

    virtual nsresult STDMETHODCALLTYPE IncreaseFontSize(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE DecreaseFontSize(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE NodeIsBlock(
        nsIDOMNode *node,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE InsertHTML(
        nsAString *aInputString) = 0;

    virtual nsresult STDMETHODCALLTYPE PasteNoFormatting(
        LONG aSelectionType) = 0;

    virtual nsresult STDMETHODCALLTYPE RebuildDocumentFromSource(
        nsAString *aSourceString) = 0;

    virtual nsresult STDMETHODCALLTYPE InsertHTMLWithContext(
        nsAString *aInputString,
        nsAString *aContextStr,
        nsAString *aInfoStr,
        nsAString *aFlavor,
        nsIDOMDocument *aSourceDoc,
        nsIDOMNode *aDestinationNode,
        LONG aDestinationOffset,
        cpp_bool aDeleteSelection) = 0;

    virtual nsresult STDMETHODCALLTYPE InsertElementAtSelection(
        nsIDOMElement *aElement,
        cpp_bool aDeleteSelection) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDocumentTitle(
        nsAString *aTitle) = 0;

    virtual nsresult STDMETHODCALLTYPE UpdateBaseURL(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE SelectElement(
        nsIDOMElement *aElement) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCaretAfterElement(
        nsIDOMElement *aElement) = 0;

    virtual nsresult STDMETHODCALLTYPE SetParagraphFormat(
        nsAString *aParagraphFormat) = 0;

    virtual nsresult STDMETHODCALLTYPE GetParagraphState(
        cpp_bool *aMixed,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFontFaceState(
        cpp_bool *aMixed,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFontColorState(
        cpp_bool *aMixed,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBackgroundColorState(
        cpp_bool *aMixed,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHighlightColorState(
        cpp_bool *aMixed,
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetListState(
        cpp_bool *aMixed,
        cpp_bool *aOL,
        cpp_bool *aUL,
        cpp_bool *aDL) = 0;

    virtual nsresult STDMETHODCALLTYPE GetListItemState(
        cpp_bool *aMixed,
        cpp_bool *aLI,
        cpp_bool *aDT,
        cpp_bool *aDD) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAlignment(
        cpp_bool *aMixed,
        short *aAlign) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIndentState(
        cpp_bool *aCanIndent,
        cpp_bool *aCanOutdent) = 0;

    virtual nsresult STDMETHODCALLTYPE MakeOrChangeList(
        nsAString *aListType,
        cpp_bool entireList,
        nsAString *aBulletType) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveList(
        nsAString *aListType) = 0;

    virtual nsresult STDMETHODCALLTYPE Indent(
        nsAString *aIndent) = 0;

    virtual nsresult STDMETHODCALLTYPE Align(
        nsAString *aAlign) = 0;

    virtual nsresult STDMETHODCALLTYPE GetElementOrParentByTagName(
        nsAString *aTagName,
        nsIDOMNode *aNode,
        nsIDOMElement **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSelectedElement(
        nsAString *aTagName,
        nsIDOMElement **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHeadContentsAsHTML(
        nsAString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE ReplaceHeadContentsWithHTML(
        nsAString *aSourceToInsert) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateElementWithDefaults(
        nsAString *aTagName,
        nsIDOMElement **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE InsertLinkAroundSelection(
        nsIDOMElement *aAnchorElement) = 0;

    virtual nsresult STDMETHODCALLTYPE SetBackgroundColor(
        nsAString *aColor) = 0;

    virtual nsresult STDMETHODCALLTYPE SetBodyAttribute(
        nsAString *aAttr,
        nsAString *aValue) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLinkedObjects(
        nsISupportsArray **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsCSSEnabled(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetIsCSSEnabled(
        cpp_bool prb) = 0;

    virtual nsresult STDMETHODCALLTYPE AddInsertionListener(
        nsIContentFilter *inFilter) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveInsertionListener(
        nsIContentFilter *inFilter) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateAnonymousElement(
        nsAString *aTag,
        nsIDOMNode *aParentNode,
        nsAString *aAnonClass,
        cpp_bool aIsCreatedHidden,
        nsIDOMElement **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSelectionContainer(
        nsIDOMElement **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CheckSelectionStateForAnonymousButtons(
        nsISelection *aSelection) = 0;

    virtual nsresult STDMETHODCALLTYPE IsAnonymousElement(
        nsIDOMElement *aElement,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetReturnInParagraphCreatesNewParagraph(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetReturnInParagraphCreatesNewParagraph(
        cpp_bool prb) = 0;

    virtual void * STDMETHODCALLTYPE GetActiveEditingHost(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIHTMLEditor, 0x87ee993e, 0x985f, 0x4a43, 0xa9,0x74, 0x0d,0x95,0x12,0xda,0x2f,0xb0)
#endif
#else
typedef struct nsIHTMLEditorVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIHTMLEditor *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIHTMLEditor *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIHTMLEditor *This);

    /*** nsIHTMLEditor methods ***/
    nsresult (STDMETHODCALLTYPE *AddDefaultProperty)(
        nsIHTMLEditor *This,
        nsIAtom *aProperty,
        nsAString *aAttribute,
        nsAString *aValue);

    nsresult (STDMETHODCALLTYPE *RemoveDefaultProperty)(
        nsIHTMLEditor *This,
        nsIAtom *aProperty,
        nsAString *aAttribute,
        nsAString *aValue);

    nsresult (STDMETHODCALLTYPE *RemoveAllDefaultProperties)(
        nsIHTMLEditor *This);

    nsresult (STDMETHODCALLTYPE *SetInlineProperty)(
        nsIHTMLEditor *This,
        nsIAtom *aProperty,
        nsAString *aAttribute,
        nsAString *aValue);

    nsresult (STDMETHODCALLTYPE *GetInlineProperty)(
        nsIHTMLEditor *This,
        nsIAtom *aProperty,
        nsAString *aAttribute,
        nsAString *aValue,
        cpp_bool *aFirst,
        cpp_bool *aAny,
        cpp_bool *aAll);

    nsresult (STDMETHODCALLTYPE *GetInlinePropertyWithAttrValue)(
        nsIHTMLEditor *This,
        nsIAtom *aProperty,
        nsAString *aAttribute,
        nsAString *aValue,
        cpp_bool *aFirst,
        cpp_bool *aAny,
        cpp_bool *aAll,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *RemoveAllInlineProperties)(
        nsIHTMLEditor *This);

    nsresult (STDMETHODCALLTYPE *RemoveInlineProperty)(
        nsIHTMLEditor *This,
        nsIAtom *aProperty,
        nsAString *aAttribute);

    nsresult (STDMETHODCALLTYPE *IncreaseFontSize)(
        nsIHTMLEditor *This);

    nsresult (STDMETHODCALLTYPE *DecreaseFontSize)(
        nsIHTMLEditor *This);

    nsresult (STDMETHODCALLTYPE *NodeIsBlock)(
        nsIHTMLEditor *This,
        nsIDOMNode *node,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *InsertHTML)(
        nsIHTMLEditor *This,
        nsAString *aInputString);

    nsresult (STDMETHODCALLTYPE *PasteNoFormatting)(
        nsIHTMLEditor *This,
        LONG aSelectionType);

    nsresult (STDMETHODCALLTYPE *RebuildDocumentFromSource)(
        nsIHTMLEditor *This,
        nsAString *aSourceString);

    nsresult (STDMETHODCALLTYPE *InsertHTMLWithContext)(
        nsIHTMLEditor *This,
        nsAString *aInputString,
        nsAString *aContextStr,
        nsAString *aInfoStr,
        nsAString *aFlavor,
        nsIDOMDocument *aSourceDoc,
        nsIDOMNode *aDestinationNode,
        LONG aDestinationOffset,
        cpp_bool aDeleteSelection);

    nsresult (STDMETHODCALLTYPE *InsertElementAtSelection)(
        nsIHTMLEditor *This,
        nsIDOMElement *aElement,
        cpp_bool aDeleteSelection);

    nsresult (STDMETHODCALLTYPE *SetDocumentTitle)(
        nsIHTMLEditor *This,
        nsAString *aTitle);

    nsresult (STDMETHODCALLTYPE *UpdateBaseURL)(
        nsIHTMLEditor *This);

    nsresult (STDMETHODCALLTYPE *SelectElement)(
        nsIHTMLEditor *This,
        nsIDOMElement *aElement);

    nsresult (STDMETHODCALLTYPE *SetCaretAfterElement)(
        nsIHTMLEditor *This,
        nsIDOMElement *aElement);

    nsresult (STDMETHODCALLTYPE *SetParagraphFormat)(
        nsIHTMLEditor *This,
        nsAString *aParagraphFormat);

    nsresult (STDMETHODCALLTYPE *GetParagraphState)(
        nsIHTMLEditor *This,
        cpp_bool *aMixed,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *GetFontFaceState)(
        nsIHTMLEditor *This,
        cpp_bool *aMixed,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *GetFontColorState)(
        nsIHTMLEditor *This,
        cpp_bool *aMixed,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *GetBackgroundColorState)(
        nsIHTMLEditor *This,
        cpp_bool *aMixed,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *GetHighlightColorState)(
        nsIHTMLEditor *This,
        cpp_bool *aMixed,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *GetListState)(
        nsIHTMLEditor *This,
        cpp_bool *aMixed,
        cpp_bool *aOL,
        cpp_bool *aUL,
        cpp_bool *aDL);

    nsresult (STDMETHODCALLTYPE *GetListItemState)(
        nsIHTMLEditor *This,
        cpp_bool *aMixed,
        cpp_bool *aLI,
        cpp_bool *aDT,
        cpp_bool *aDD);

    nsresult (STDMETHODCALLTYPE *GetAlignment)(
        nsIHTMLEditor *This,
        cpp_bool *aMixed,
        short *aAlign);

    nsresult (STDMETHODCALLTYPE *GetIndentState)(
        nsIHTMLEditor *This,
        cpp_bool *aCanIndent,
        cpp_bool *aCanOutdent);

    nsresult (STDMETHODCALLTYPE *MakeOrChangeList)(
        nsIHTMLEditor *This,
        nsAString *aListType,
        cpp_bool entireList,
        nsAString *aBulletType);

    nsresult (STDMETHODCALLTYPE *RemoveList)(
        nsIHTMLEditor *This,
        nsAString *aListType);

    nsresult (STDMETHODCALLTYPE *Indent)(
        nsIHTMLEditor *This,
        nsAString *aIndent);

    nsresult (STDMETHODCALLTYPE *Align)(
        nsIHTMLEditor *This,
        nsAString *aAlign);

    nsresult (STDMETHODCALLTYPE *GetElementOrParentByTagName)(
        nsIHTMLEditor *This,
        nsAString *aTagName,
        nsIDOMNode *aNode,
        nsIDOMElement **_retval);

    nsresult (STDMETHODCALLTYPE *GetSelectedElement)(
        nsIHTMLEditor *This,
        nsAString *aTagName,
        nsIDOMElement **_retval);

    nsresult (STDMETHODCALLTYPE *GetHeadContentsAsHTML)(
        nsIHTMLEditor *This,
        nsAString *_retval);

    nsresult (STDMETHODCALLTYPE *ReplaceHeadContentsWithHTML)(
        nsIHTMLEditor *This,
        nsAString *aSourceToInsert);

    nsresult (STDMETHODCALLTYPE *CreateElementWithDefaults)(
        nsIHTMLEditor *This,
        nsAString *aTagName,
        nsIDOMElement **_retval);

    nsresult (STDMETHODCALLTYPE *InsertLinkAroundSelection)(
        nsIHTMLEditor *This,
        nsIDOMElement *aAnchorElement);

    nsresult (STDMETHODCALLTYPE *SetBackgroundColor)(
        nsIHTMLEditor *This,
        nsAString *aColor);

    nsresult (STDMETHODCALLTYPE *SetBodyAttribute)(
        nsIHTMLEditor *This,
        nsAString *aAttr,
        nsAString *aValue);

    nsresult (STDMETHODCALLTYPE *GetLinkedObjects)(
        nsIHTMLEditor *This,
        nsISupportsArray **_retval);

    nsresult (STDMETHODCALLTYPE *GetIsCSSEnabled)(
        nsIHTMLEditor *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetIsCSSEnabled)(
        nsIHTMLEditor *This,
        cpp_bool prb);

    nsresult (STDMETHODCALLTYPE *AddInsertionListener)(
        nsIHTMLEditor *This,
        nsIContentFilter *inFilter);

    nsresult (STDMETHODCALLTYPE *RemoveInsertionListener)(
        nsIHTMLEditor *This,
        nsIContentFilter *inFilter);

    nsresult (STDMETHODCALLTYPE *CreateAnonymousElement)(
        nsIHTMLEditor *This,
        nsAString *aTag,
        nsIDOMNode *aParentNode,
        nsAString *aAnonClass,
        cpp_bool aIsCreatedHidden,
        nsIDOMElement **_retval);

    nsresult (STDMETHODCALLTYPE *GetSelectionContainer)(
        nsIHTMLEditor *This,
        nsIDOMElement **_retval);

    nsresult (STDMETHODCALLTYPE *CheckSelectionStateForAnonymousButtons)(
        nsIHTMLEditor *This,
        nsISelection *aSelection);

    nsresult (STDMETHODCALLTYPE *IsAnonymousElement)(
        nsIHTMLEditor *This,
        nsIDOMElement *aElement,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetReturnInParagraphCreatesNewParagraph)(
        nsIHTMLEditor *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *SetReturnInParagraphCreatesNewParagraph)(
        nsIHTMLEditor *This,
        cpp_bool prb);

    void * (STDMETHODCALLTYPE *GetActiveEditingHost)(
        nsIHTMLEditor *This);

    END_INTERFACE
} nsIHTMLEditorVtbl;

interface nsIHTMLEditor {
    CONST_VTBL nsIHTMLEditorVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIHTMLEditor_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIHTMLEditor_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIHTMLEditor_Release(This) (This)->lpVtbl->Release(This)
/*** nsIHTMLEditor methods ***/
#define nsIHTMLEditor_AddDefaultProperty(This,aProperty,aAttribute,aValue) (This)->lpVtbl->AddDefaultProperty(This,aProperty,aAttribute,aValue)
#define nsIHTMLEditor_RemoveDefaultProperty(This,aProperty,aAttribute,aValue) (This)->lpVtbl->RemoveDefaultProperty(This,aProperty,aAttribute,aValue)
#define nsIHTMLEditor_RemoveAllDefaultProperties(This) (This)->lpVtbl->RemoveAllDefaultProperties(This)
#define nsIHTMLEditor_SetInlineProperty(This,aProperty,aAttribute,aValue) (This)->lpVtbl->SetInlineProperty(This,aProperty,aAttribute,aValue)
#define nsIHTMLEditor_GetInlineProperty(This,aProperty,aAttribute,aValue,aFirst,aAny,aAll) (This)->lpVtbl->GetInlineProperty(This,aProperty,aAttribute,aValue,aFirst,aAny,aAll)
#define nsIHTMLEditor_GetInlinePropertyWithAttrValue(This,aProperty,aAttribute,aValue,aFirst,aAny,aAll,_retval) (This)->lpVtbl->GetInlinePropertyWithAttrValue(This,aProperty,aAttribute,aValue,aFirst,aAny,aAll,_retval)
#define nsIHTMLEditor_RemoveAllInlineProperties(This) (This)->lpVtbl->RemoveAllInlineProperties(This)
#define nsIHTMLEditor_RemoveInlineProperty(This,aProperty,aAttribute) (This)->lpVtbl->RemoveInlineProperty(This,aProperty,aAttribute)
#define nsIHTMLEditor_IncreaseFontSize(This) (This)->lpVtbl->IncreaseFontSize(This)
#define nsIHTMLEditor_DecreaseFontSize(This) (This)->lpVtbl->DecreaseFontSize(This)
#define nsIHTMLEditor_NodeIsBlock(This,node,_retval) (This)->lpVtbl->NodeIsBlock(This,node,_retval)
#define nsIHTMLEditor_InsertHTML(This,aInputString) (This)->lpVtbl->InsertHTML(This,aInputString)
#define nsIHTMLEditor_PasteNoFormatting(This,aSelectionType) (This)->lpVtbl->PasteNoFormatting(This,aSelectionType)
#define nsIHTMLEditor_RebuildDocumentFromSource(This,aSourceString) (This)->lpVtbl->RebuildDocumentFromSource(This,aSourceString)
#define nsIHTMLEditor_InsertHTMLWithContext(This,aInputString,aContextStr,aInfoStr,aFlavor,aSourceDoc,aDestinationNode,aDestinationOffset,aDeleteSelection) (This)->lpVtbl->InsertHTMLWithContext(This,aInputString,aContextStr,aInfoStr,aFlavor,aSourceDoc,aDestinationNode,aDestinationOffset,aDeleteSelection)
#define nsIHTMLEditor_InsertElementAtSelection(This,aElement,aDeleteSelection) (This)->lpVtbl->InsertElementAtSelection(This,aElement,aDeleteSelection)
#define nsIHTMLEditor_SetDocumentTitle(This,aTitle) (This)->lpVtbl->SetDocumentTitle(This,aTitle)
#define nsIHTMLEditor_UpdateBaseURL(This) (This)->lpVtbl->UpdateBaseURL(This)
#define nsIHTMLEditor_SelectElement(This,aElement) (This)->lpVtbl->SelectElement(This,aElement)
#define nsIHTMLEditor_SetCaretAfterElement(This,aElement) (This)->lpVtbl->SetCaretAfterElement(This,aElement)
#define nsIHTMLEditor_SetParagraphFormat(This,aParagraphFormat) (This)->lpVtbl->SetParagraphFormat(This,aParagraphFormat)
#define nsIHTMLEditor_GetParagraphState(This,aMixed,_retval) (This)->lpVtbl->GetParagraphState(This,aMixed,_retval)
#define nsIHTMLEditor_GetFontFaceState(This,aMixed,_retval) (This)->lpVtbl->GetFontFaceState(This,aMixed,_retval)
#define nsIHTMLEditor_GetFontColorState(This,aMixed,_retval) (This)->lpVtbl->GetFontColorState(This,aMixed,_retval)
#define nsIHTMLEditor_GetBackgroundColorState(This,aMixed,_retval) (This)->lpVtbl->GetBackgroundColorState(This,aMixed,_retval)
#define nsIHTMLEditor_GetHighlightColorState(This,aMixed,_retval) (This)->lpVtbl->GetHighlightColorState(This,aMixed,_retval)
#define nsIHTMLEditor_GetListState(This,aMixed,aOL,aUL,aDL) (This)->lpVtbl->GetListState(This,aMixed,aOL,aUL,aDL)
#define nsIHTMLEditor_GetListItemState(This,aMixed,aLI,aDT,aDD) (This)->lpVtbl->GetListItemState(This,aMixed,aLI,aDT,aDD)
#define nsIHTMLEditor_GetAlignment(This,aMixed,aAlign) (This)->lpVtbl->GetAlignment(This,aMixed,aAlign)
#define nsIHTMLEditor_GetIndentState(This,aCanIndent,aCanOutdent) (This)->lpVtbl->GetIndentState(This,aCanIndent,aCanOutdent)
#define nsIHTMLEditor_MakeOrChangeList(This,aListType,entireList,aBulletType) (This)->lpVtbl->MakeOrChangeList(This,aListType,entireList,aBulletType)
#define nsIHTMLEditor_RemoveList(This,aListType) (This)->lpVtbl->RemoveList(This,aListType)
#define nsIHTMLEditor_Indent(This,aIndent) (This)->lpVtbl->Indent(This,aIndent)
#define nsIHTMLEditor_Align(This,aAlign) (This)->lpVtbl->Align(This,aAlign)
#define nsIHTMLEditor_GetElementOrParentByTagName(This,aTagName,aNode,_retval) (This)->lpVtbl->GetElementOrParentByTagName(This,aTagName,aNode,_retval)
#define nsIHTMLEditor_GetSelectedElement(This,aTagName,_retval) (This)->lpVtbl->GetSelectedElement(This,aTagName,_retval)
#define nsIHTMLEditor_GetHeadContentsAsHTML(This,_retval) (This)->lpVtbl->GetHeadContentsAsHTML(This,_retval)
#define nsIHTMLEditor_ReplaceHeadContentsWithHTML(This,aSourceToInsert) (This)->lpVtbl->ReplaceHeadContentsWithHTML(This,aSourceToInsert)
#define nsIHTMLEditor_CreateElementWithDefaults(This,aTagName,_retval) (This)->lpVtbl->CreateElementWithDefaults(This,aTagName,_retval)
#define nsIHTMLEditor_InsertLinkAroundSelection(This,aAnchorElement) (This)->lpVtbl->InsertLinkAroundSelection(This,aAnchorElement)
#define nsIHTMLEditor_SetBackgroundColor(This,aColor) (This)->lpVtbl->SetBackgroundColor(This,aColor)
#define nsIHTMLEditor_SetBodyAttribute(This,aAttr,aValue) (This)->lpVtbl->SetBodyAttribute(This,aAttr,aValue)
#define nsIHTMLEditor_GetLinkedObjects(This,_retval) (This)->lpVtbl->GetLinkedObjects(This,_retval)
#define nsIHTMLEditor_GetIsCSSEnabled(This,_retval) (This)->lpVtbl->GetIsCSSEnabled(This,_retval)
#define nsIHTMLEditor_SetIsCSSEnabled(This,prb) (This)->lpVtbl->SetIsCSSEnabled(This,prb)
#define nsIHTMLEditor_AddInsertionListener(This,inFilter) (This)->lpVtbl->AddInsertionListener(This,inFilter)
#define nsIHTMLEditor_RemoveInsertionListener(This,inFilter) (This)->lpVtbl->RemoveInsertionListener(This,inFilter)
#define nsIHTMLEditor_CreateAnonymousElement(This,aTag,aParentNode,aAnonClass,aIsCreatedHidden,_retval) (This)->lpVtbl->CreateAnonymousElement(This,aTag,aParentNode,aAnonClass,aIsCreatedHidden,_retval)
#define nsIHTMLEditor_GetSelectionContainer(This,_retval) (This)->lpVtbl->GetSelectionContainer(This,_retval)
#define nsIHTMLEditor_CheckSelectionStateForAnonymousButtons(This,aSelection) (This)->lpVtbl->CheckSelectionStateForAnonymousButtons(This,aSelection)
#define nsIHTMLEditor_IsAnonymousElement(This,aElement,_retval) (This)->lpVtbl->IsAnonymousElement(This,aElement,_retval)
#define nsIHTMLEditor_GetReturnInParagraphCreatesNewParagraph(This,_retval) (This)->lpVtbl->GetReturnInParagraphCreatesNewParagraph(This,_retval)
#define nsIHTMLEditor_SetReturnInParagraphCreatesNewParagraph(This,prb) (This)->lpVtbl->SetReturnInParagraphCreatesNewParagraph(This,prb)
#define nsIHTMLEditor_GetActiveEditingHost(This) (This)->lpVtbl->GetActiveEditingHost(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIHTMLEditor_QueryInterface(nsIHTMLEditor* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIHTMLEditor_AddRef(nsIHTMLEditor* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIHTMLEditor_Release(nsIHTMLEditor* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIHTMLEditor methods ***/
static FORCEINLINE nsresult nsIHTMLEditor_AddDefaultProperty(nsIHTMLEditor* This,nsIAtom *aProperty,nsAString *aAttribute,nsAString *aValue) {
    return This->lpVtbl->AddDefaultProperty(This,aProperty,aAttribute,aValue);
}
static FORCEINLINE nsresult nsIHTMLEditor_RemoveDefaultProperty(nsIHTMLEditor* This,nsIAtom *aProperty,nsAString *aAttribute,nsAString *aValue) {
    return This->lpVtbl->RemoveDefaultProperty(This,aProperty,aAttribute,aValue);
}
static FORCEINLINE nsresult nsIHTMLEditor_RemoveAllDefaultProperties(nsIHTMLEditor* This) {
    return This->lpVtbl->RemoveAllDefaultProperties(This);
}
static FORCEINLINE nsresult nsIHTMLEditor_SetInlineProperty(nsIHTMLEditor* This,nsIAtom *aProperty,nsAString *aAttribute,nsAString *aValue) {
    return This->lpVtbl->SetInlineProperty(This,aProperty,aAttribute,aValue);
}
static FORCEINLINE nsresult nsIHTMLEditor_GetInlineProperty(nsIHTMLEditor* This,nsIAtom *aProperty,nsAString *aAttribute,nsAString *aValue,cpp_bool *aFirst,cpp_bool *aAny,cpp_bool *aAll) {
    return This->lpVtbl->GetInlineProperty(This,aProperty,aAttribute,aValue,aFirst,aAny,aAll);
}
static FORCEINLINE nsresult nsIHTMLEditor_GetInlinePropertyWithAttrValue(nsIHTMLEditor* This,nsIAtom *aProperty,nsAString *aAttribute,nsAString *aValue,cpp_bool *aFirst,cpp_bool *aAny,cpp_bool *aAll,nsAString *_retval) {
    return This->lpVtbl->GetInlinePropertyWithAttrValue(This,aProperty,aAttribute,aValue,aFirst,aAny,aAll,_retval);
}
static FORCEINLINE nsresult nsIHTMLEditor_RemoveAllInlineProperties(nsIHTMLEditor* This) {
    return This->lpVtbl->RemoveAllInlineProperties(This);
}
static FORCEINLINE nsresult nsIHTMLEditor_RemoveInlineProperty(nsIHTMLEditor* This,nsIAtom *aProperty,nsAString *aAttribute) {
    return This->lpVtbl->RemoveInlineProperty(This,aProperty,aAttribute);
}
static FORCEINLINE nsresult nsIHTMLEditor_IncreaseFontSize(nsIHTMLEditor* This) {
    return This->lpVtbl->IncreaseFontSize(This);
}
static FORCEINLINE nsresult nsIHTMLEditor_DecreaseFontSize(nsIHTMLEditor* This) {
    return This->lpVtbl->DecreaseFontSize(This);
}
static FORCEINLINE nsresult nsIHTMLEditor_NodeIsBlock(nsIHTMLEditor* This,nsIDOMNode *node,cpp_bool *_retval) {
    return This->lpVtbl->NodeIsBlock(This,node,_retval);
}
static FORCEINLINE nsresult nsIHTMLEditor_InsertHTML(nsIHTMLEditor* This,nsAString *aInputString) {
    return This->lpVtbl->InsertHTML(This,aInputString);
}
static FORCEINLINE nsresult nsIHTMLEditor_PasteNoFormatting(nsIHTMLEditor* This,LONG aSelectionType) {
    return This->lpVtbl->PasteNoFormatting(This,aSelectionType);
}
static FORCEINLINE nsresult nsIHTMLEditor_RebuildDocumentFromSource(nsIHTMLEditor* This,nsAString *aSourceString) {
    return This->lpVtbl->RebuildDocumentFromSource(This,aSourceString);
}
static FORCEINLINE nsresult nsIHTMLEditor_InsertHTMLWithContext(nsIHTMLEditor* This,nsAString *aInputString,nsAString *aContextStr,nsAString *aInfoStr,nsAString *aFlavor,nsIDOMDocument *aSourceDoc,nsIDOMNode *aDestinationNode,LONG aDestinationOffset,cpp_bool aDeleteSelection) {
    return This->lpVtbl->InsertHTMLWithContext(This,aInputString,aContextStr,aInfoStr,aFlavor,aSourceDoc,aDestinationNode,aDestinationOffset,aDeleteSelection);
}
static FORCEINLINE nsresult nsIHTMLEditor_InsertElementAtSelection(nsIHTMLEditor* This,nsIDOMElement *aElement,cpp_bool aDeleteSelection) {
    return This->lpVtbl->InsertElementAtSelection(This,aElement,aDeleteSelection);
}
static FORCEINLINE nsresult nsIHTMLEditor_SetDocumentTitle(nsIHTMLEditor* This,nsAString *aTitle) {
    return This->lpVtbl->SetDocumentTitle(This,aTitle);
}
static FORCEINLINE nsresult nsIHTMLEditor_UpdateBaseURL(nsIHTMLEditor* This) {
    return This->lpVtbl->UpdateBaseURL(This);
}
static FORCEINLINE nsresult nsIHTMLEditor_SelectElement(nsIHTMLEditor* This,nsIDOMElement *aElement) {
    return This->lpVtbl->SelectElement(This,aElement);
}
static FORCEINLINE nsresult nsIHTMLEditor_SetCaretAfterElement(nsIHTMLEditor* This,nsIDOMElement *aElement) {
    return This->lpVtbl->SetCaretAfterElement(This,aElement);
}
static FORCEINLINE nsresult nsIHTMLEditor_SetParagraphFormat(nsIHTMLEditor* This,nsAString *aParagraphFormat) {
    return This->lpVtbl->SetParagraphFormat(This,aParagraphFormat);
}
static FORCEINLINE nsresult nsIHTMLEditor_GetParagraphState(nsIHTMLEditor* This,cpp_bool *aMixed,nsAString *_retval) {
    return This->lpVtbl->GetParagraphState(This,aMixed,_retval);
}
static FORCEINLINE nsresult nsIHTMLEditor_GetFontFaceState(nsIHTMLEditor* This,cpp_bool *aMixed,nsAString *_retval) {
    return This->lpVtbl->GetFontFaceState(This,aMixed,_retval);
}
static FORCEINLINE nsresult nsIHTMLEditor_GetFontColorState(nsIHTMLEditor* This,cpp_bool *aMixed,nsAString *_retval) {
    return This->lpVtbl->GetFontColorState(This,aMixed,_retval);
}
static FORCEINLINE nsresult nsIHTMLEditor_GetBackgroundColorState(nsIHTMLEditor* This,cpp_bool *aMixed,nsAString *_retval) {
    return This->lpVtbl->GetBackgroundColorState(This,aMixed,_retval);
}
static FORCEINLINE nsresult nsIHTMLEditor_GetHighlightColorState(nsIHTMLEditor* This,cpp_bool *aMixed,nsAString *_retval) {
    return This->lpVtbl->GetHighlightColorState(This,aMixed,_retval);
}
static FORCEINLINE nsresult nsIHTMLEditor_GetListState(nsIHTMLEditor* This,cpp_bool *aMixed,cpp_bool *aOL,cpp_bool *aUL,cpp_bool *aDL) {
    return This->lpVtbl->GetListState(This,aMixed,aOL,aUL,aDL);
}
static FORCEINLINE nsresult nsIHTMLEditor_GetListItemState(nsIHTMLEditor* This,cpp_bool *aMixed,cpp_bool *aLI,cpp_bool *aDT,cpp_bool *aDD) {
    return This->lpVtbl->GetListItemState(This,aMixed,aLI,aDT,aDD);
}
static FORCEINLINE nsresult nsIHTMLEditor_GetAlignment(nsIHTMLEditor* This,cpp_bool *aMixed,short *aAlign) {
    return This->lpVtbl->GetAlignment(This,aMixed,aAlign);
}
static FORCEINLINE nsresult nsIHTMLEditor_GetIndentState(nsIHTMLEditor* This,cpp_bool *aCanIndent,cpp_bool *aCanOutdent) {
    return This->lpVtbl->GetIndentState(This,aCanIndent,aCanOutdent);
}
static FORCEINLINE nsresult nsIHTMLEditor_MakeOrChangeList(nsIHTMLEditor* This,nsAString *aListType,cpp_bool entireList,nsAString *aBulletType) {
    return This->lpVtbl->MakeOrChangeList(This,aListType,entireList,aBulletType);
}
static FORCEINLINE nsresult nsIHTMLEditor_RemoveList(nsIHTMLEditor* This,nsAString *aListType) {
    return This->lpVtbl->RemoveList(This,aListType);
}
static FORCEINLINE nsresult nsIHTMLEditor_Indent(nsIHTMLEditor* This,nsAString *aIndent) {
    return This->lpVtbl->Indent(This,aIndent);
}
static FORCEINLINE nsresult nsIHTMLEditor_Align(nsIHTMLEditor* This,nsAString *aAlign) {
    return This->lpVtbl->Align(This,aAlign);
}
static FORCEINLINE nsresult nsIHTMLEditor_GetElementOrParentByTagName(nsIHTMLEditor* This,nsAString *aTagName,nsIDOMNode *aNode,nsIDOMElement **_retval) {
    return This->lpVtbl->GetElementOrParentByTagName(This,aTagName,aNode,_retval);
}
static FORCEINLINE nsresult nsIHTMLEditor_GetSelectedElement(nsIHTMLEditor* This,nsAString *aTagName,nsIDOMElement **_retval) {
    return This->lpVtbl->GetSelectedElement(This,aTagName,_retval);
}
static FORCEINLINE nsresult nsIHTMLEditor_GetHeadContentsAsHTML(nsIHTMLEditor* This,nsAString *_retval) {
    return This->lpVtbl->GetHeadContentsAsHTML(This,_retval);
}
static FORCEINLINE nsresult nsIHTMLEditor_ReplaceHeadContentsWithHTML(nsIHTMLEditor* This,nsAString *aSourceToInsert) {
    return This->lpVtbl->ReplaceHeadContentsWithHTML(This,aSourceToInsert);
}
static FORCEINLINE nsresult nsIHTMLEditor_CreateElementWithDefaults(nsIHTMLEditor* This,nsAString *aTagName,nsIDOMElement **_retval) {
    return This->lpVtbl->CreateElementWithDefaults(This,aTagName,_retval);
}
static FORCEINLINE nsresult nsIHTMLEditor_InsertLinkAroundSelection(nsIHTMLEditor* This,nsIDOMElement *aAnchorElement) {
    return This->lpVtbl->InsertLinkAroundSelection(This,aAnchorElement);
}
static FORCEINLINE nsresult nsIHTMLEditor_SetBackgroundColor(nsIHTMLEditor* This,nsAString *aColor) {
    return This->lpVtbl->SetBackgroundColor(This,aColor);
}
static FORCEINLINE nsresult nsIHTMLEditor_SetBodyAttribute(nsIHTMLEditor* This,nsAString *aAttr,nsAString *aValue) {
    return This->lpVtbl->SetBodyAttribute(This,aAttr,aValue);
}
static FORCEINLINE nsresult nsIHTMLEditor_GetLinkedObjects(nsIHTMLEditor* This,nsISupportsArray **_retval) {
    return This->lpVtbl->GetLinkedObjects(This,_retval);
}
static FORCEINLINE nsresult nsIHTMLEditor_GetIsCSSEnabled(nsIHTMLEditor* This,cpp_bool *_retval) {
    return This->lpVtbl->GetIsCSSEnabled(This,_retval);
}
static FORCEINLINE nsresult nsIHTMLEditor_SetIsCSSEnabled(nsIHTMLEditor* This,cpp_bool prb) {
    return This->lpVtbl->SetIsCSSEnabled(This,prb);
}
static FORCEINLINE nsresult nsIHTMLEditor_AddInsertionListener(nsIHTMLEditor* This,nsIContentFilter *inFilter) {
    return This->lpVtbl->AddInsertionListener(This,inFilter);
}
static FORCEINLINE nsresult nsIHTMLEditor_RemoveInsertionListener(nsIHTMLEditor* This,nsIContentFilter *inFilter) {
    return This->lpVtbl->RemoveInsertionListener(This,inFilter);
}
static FORCEINLINE nsresult nsIHTMLEditor_CreateAnonymousElement(nsIHTMLEditor* This,nsAString *aTag,nsIDOMNode *aParentNode,nsAString *aAnonClass,cpp_bool aIsCreatedHidden,nsIDOMElement **_retval) {
    return This->lpVtbl->CreateAnonymousElement(This,aTag,aParentNode,aAnonClass,aIsCreatedHidden,_retval);
}
static FORCEINLINE nsresult nsIHTMLEditor_GetSelectionContainer(nsIHTMLEditor* This,nsIDOMElement **_retval) {
    return This->lpVtbl->GetSelectionContainer(This,_retval);
}
static FORCEINLINE nsresult nsIHTMLEditor_CheckSelectionStateForAnonymousButtons(nsIHTMLEditor* This,nsISelection *aSelection) {
    return This->lpVtbl->CheckSelectionStateForAnonymousButtons(This,aSelection);
}
static FORCEINLINE nsresult nsIHTMLEditor_IsAnonymousElement(nsIHTMLEditor* This,nsIDOMElement *aElement,cpp_bool *_retval) {
    return This->lpVtbl->IsAnonymousElement(This,aElement,_retval);
}
static FORCEINLINE nsresult nsIHTMLEditor_GetReturnInParagraphCreatesNewParagraph(nsIHTMLEditor* This,cpp_bool *_retval) {
    return This->lpVtbl->GetReturnInParagraphCreatesNewParagraph(This,_retval);
}
static FORCEINLINE nsresult nsIHTMLEditor_SetReturnInParagraphCreatesNewParagraph(nsIHTMLEditor* This,cpp_bool prb) {
    return This->lpVtbl->SetReturnInParagraphCreatesNewParagraph(This,prb);
}
static FORCEINLINE void * nsIHTMLEditor_GetActiveEditingHost(nsIHTMLEditor* This) {
    return This->lpVtbl->GetActiveEditingHost(This);
}
#endif
#endif

#endif


#endif  /* __nsIHTMLEditor_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIClipboardCommands interface
 */
#ifndef __nsIClipboardCommands_INTERFACE_DEFINED__
#define __nsIClipboardCommands_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIClipboardCommands, 0xb8100c90, 0x73be, 0x11d2, 0x92,0xa5, 0x00,0x10,0x5a,0x1b,0x0d,0x64);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("b8100c90-73be-11d2-92a5-00105a1b0d64")
nsIClipboardCommands : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE CanCutSelection(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CanCopySelection(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CanCopyLinkLocation(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CanCopyImageLocation(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CanCopyImageContents(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CanPaste(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE CutSelection(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE CopySelection(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE CopyLinkLocation(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE CopyImageLocation(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE CopyImageContents(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE Paste(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE SelectAll(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE SelectNone(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIClipboardCommands, 0xb8100c90, 0x73be, 0x11d2, 0x92,0xa5, 0x00,0x10,0x5a,0x1b,0x0d,0x64)
#endif
#else
typedef struct nsIClipboardCommandsVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIClipboardCommands *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIClipboardCommands *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIClipboardCommands *This);

    /*** nsIClipboardCommands methods ***/
    nsresult (STDMETHODCALLTYPE *CanCutSelection)(
        nsIClipboardCommands *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CanCopySelection)(
        nsIClipboardCommands *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CanCopyLinkLocation)(
        nsIClipboardCommands *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CanCopyImageLocation)(
        nsIClipboardCommands *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CanCopyImageContents)(
        nsIClipboardCommands *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CanPaste)(
        nsIClipboardCommands *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *CutSelection)(
        nsIClipboardCommands *This);

    nsresult (STDMETHODCALLTYPE *CopySelection)(
        nsIClipboardCommands *This);

    nsresult (STDMETHODCALLTYPE *CopyLinkLocation)(
        nsIClipboardCommands *This);

    nsresult (STDMETHODCALLTYPE *CopyImageLocation)(
        nsIClipboardCommands *This);

    nsresult (STDMETHODCALLTYPE *CopyImageContents)(
        nsIClipboardCommands *This);

    nsresult (STDMETHODCALLTYPE *Paste)(
        nsIClipboardCommands *This);

    nsresult (STDMETHODCALLTYPE *SelectAll)(
        nsIClipboardCommands *This);

    nsresult (STDMETHODCALLTYPE *SelectNone)(
        nsIClipboardCommands *This);

    END_INTERFACE
} nsIClipboardCommandsVtbl;

interface nsIClipboardCommands {
    CONST_VTBL nsIClipboardCommandsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIClipboardCommands_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIClipboardCommands_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIClipboardCommands_Release(This) (This)->lpVtbl->Release(This)
/*** nsIClipboardCommands methods ***/
#define nsIClipboardCommands_CanCutSelection(This,_retval) (This)->lpVtbl->CanCutSelection(This,_retval)
#define nsIClipboardCommands_CanCopySelection(This,_retval) (This)->lpVtbl->CanCopySelection(This,_retval)
#define nsIClipboardCommands_CanCopyLinkLocation(This,_retval) (This)->lpVtbl->CanCopyLinkLocation(This,_retval)
#define nsIClipboardCommands_CanCopyImageLocation(This,_retval) (This)->lpVtbl->CanCopyImageLocation(This,_retval)
#define nsIClipboardCommands_CanCopyImageContents(This,_retval) (This)->lpVtbl->CanCopyImageContents(This,_retval)
#define nsIClipboardCommands_CanPaste(This,_retval) (This)->lpVtbl->CanPaste(This,_retval)
#define nsIClipboardCommands_CutSelection(This) (This)->lpVtbl->CutSelection(This)
#define nsIClipboardCommands_CopySelection(This) (This)->lpVtbl->CopySelection(This)
#define nsIClipboardCommands_CopyLinkLocation(This) (This)->lpVtbl->CopyLinkLocation(This)
#define nsIClipboardCommands_CopyImageLocation(This) (This)->lpVtbl->CopyImageLocation(This)
#define nsIClipboardCommands_CopyImageContents(This) (This)->lpVtbl->CopyImageContents(This)
#define nsIClipboardCommands_Paste(This) (This)->lpVtbl->Paste(This)
#define nsIClipboardCommands_SelectAll(This) (This)->lpVtbl->SelectAll(This)
#define nsIClipboardCommands_SelectNone(This) (This)->lpVtbl->SelectNone(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIClipboardCommands_QueryInterface(nsIClipboardCommands* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIClipboardCommands_AddRef(nsIClipboardCommands* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIClipboardCommands_Release(nsIClipboardCommands* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIClipboardCommands methods ***/
static FORCEINLINE nsresult nsIClipboardCommands_CanCutSelection(nsIClipboardCommands* This,cpp_bool *_retval) {
    return This->lpVtbl->CanCutSelection(This,_retval);
}
static FORCEINLINE nsresult nsIClipboardCommands_CanCopySelection(nsIClipboardCommands* This,cpp_bool *_retval) {
    return This->lpVtbl->CanCopySelection(This,_retval);
}
static FORCEINLINE nsresult nsIClipboardCommands_CanCopyLinkLocation(nsIClipboardCommands* This,cpp_bool *_retval) {
    return This->lpVtbl->CanCopyLinkLocation(This,_retval);
}
static FORCEINLINE nsresult nsIClipboardCommands_CanCopyImageLocation(nsIClipboardCommands* This,cpp_bool *_retval) {
    return This->lpVtbl->CanCopyImageLocation(This,_retval);
}
static FORCEINLINE nsresult nsIClipboardCommands_CanCopyImageContents(nsIClipboardCommands* This,cpp_bool *_retval) {
    return This->lpVtbl->CanCopyImageContents(This,_retval);
}
static FORCEINLINE nsresult nsIClipboardCommands_CanPaste(nsIClipboardCommands* This,cpp_bool *_retval) {
    return This->lpVtbl->CanPaste(This,_retval);
}
static FORCEINLINE nsresult nsIClipboardCommands_CutSelection(nsIClipboardCommands* This) {
    return This->lpVtbl->CutSelection(This);
}
static FORCEINLINE nsresult nsIClipboardCommands_CopySelection(nsIClipboardCommands* This) {
    return This->lpVtbl->CopySelection(This);
}
static FORCEINLINE nsresult nsIClipboardCommands_CopyLinkLocation(nsIClipboardCommands* This) {
    return This->lpVtbl->CopyLinkLocation(This);
}
static FORCEINLINE nsresult nsIClipboardCommands_CopyImageLocation(nsIClipboardCommands* This) {
    return This->lpVtbl->CopyImageLocation(This);
}
static FORCEINLINE nsresult nsIClipboardCommands_CopyImageContents(nsIClipboardCommands* This) {
    return This->lpVtbl->CopyImageContents(This);
}
static FORCEINLINE nsresult nsIClipboardCommands_Paste(nsIClipboardCommands* This) {
    return This->lpVtbl->Paste(This);
}
static FORCEINLINE nsresult nsIClipboardCommands_SelectAll(nsIClipboardCommands* This) {
    return This->lpVtbl->SelectAll(This);
}
static FORCEINLINE nsresult nsIClipboardCommands_SelectNone(nsIClipboardCommands* This) {
    return This->lpVtbl->SelectNone(This);
}
#endif
#endif

#endif


#endif  /* __nsIClipboardCommands_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDocShellTreeItem interface
 */
#ifndef __nsIDocShellTreeItem_INTERFACE_DEFINED__
#define __nsIDocShellTreeItem_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDocShellTreeItem, 0x9b7c586f, 0x9214, 0x480c, 0xa2,0xc4, 0x49,0xb5,0x26,0xff,0xf1,0xa6);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("9b7c586f-9214-480c-a2c4-49b526fff1a6")
nsIDocShellTreeItem : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetName(
        nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE SetName(
        const nsAString *aName) = 0;

    virtual nsresult STDMETHODCALLTYPE NameEquals(
        const PRUnichar *name,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetItemType(
        LONG *aItemType) = 0;

    virtual nsresult STDMETHODCALLTYPE SetItemType(
        LONG aItemType) = 0;

    virtual LONG STDMETHODCALLTYPE ItemType(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetParent(
        nsIDocShellTreeItem **aParent) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSameTypeParent(
        nsIDocShellTreeItem **aSameTypeParent) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRootTreeItem(
        nsIDocShellTreeItem **aRootTreeItem) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSameTypeRootTreeItem(
        nsIDocShellTreeItem **aSameTypeRootTreeItem) = 0;

    virtual nsresult STDMETHODCALLTYPE FindItemWithName(
        const PRUnichar *name,
        nsISupports *aRequestor,
        nsIDocShellTreeItem *aOriginalRequestor,
        nsIDocShellTreeItem **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTreeOwner(
        nsIDocShellTreeOwner **aTreeOwner) = 0;

    virtual nsresult STDMETHODCALLTYPE SetTreeOwner(
        nsIDocShellTreeOwner *treeOwner) = 0;

    virtual nsresult STDMETHODCALLTYPE GetChildCount(
        LONG *aChildCount) = 0;

    virtual nsresult STDMETHODCALLTYPE AddChild(
        nsIDocShellTreeItem *child) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveChild(
        nsIDocShellTreeItem *child) = 0;

    virtual nsresult STDMETHODCALLTYPE GetChildAt(
        LONG index,
        nsIDocShellTreeItem **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE FindChildWithName(
        const PRUnichar *aName,
        cpp_bool aRecurse,
        cpp_bool aSameType,
        nsIDocShellTreeItem *aRequestor,
        nsIDocShellTreeItem *aOriginalRequestor,
        nsIDocShellTreeItem **_retval) = 0;

    virtual nsIDocument * STDMETHODCALLTYPE GetDocument(
        ) = 0;

    virtual void * STDMETHODCALLTYPE GetWindow(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDocShellTreeItem, 0x9b7c586f, 0x9214, 0x480c, 0xa2,0xc4, 0x49,0xb5,0x26,0xff,0xf1,0xa6)
#endif
#else
typedef struct nsIDocShellTreeItemVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDocShellTreeItem *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDocShellTreeItem *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDocShellTreeItem *This);

    /*** nsIDocShellTreeItem methods ***/
    nsresult (STDMETHODCALLTYPE *GetName)(
        nsIDocShellTreeItem *This,
        nsAString *aName);

    nsresult (STDMETHODCALLTYPE *SetName)(
        nsIDocShellTreeItem *This,
        const nsAString *aName);

    nsresult (STDMETHODCALLTYPE *NameEquals)(
        nsIDocShellTreeItem *This,
        const PRUnichar *name,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetItemType)(
        nsIDocShellTreeItem *This,
        LONG *aItemType);

    nsresult (STDMETHODCALLTYPE *SetItemType)(
        nsIDocShellTreeItem *This,
        LONG aItemType);

    LONG (STDMETHODCALLTYPE *ItemType)(
        nsIDocShellTreeItem *This);

    nsresult (STDMETHODCALLTYPE *GetParent)(
        nsIDocShellTreeItem *This,
        nsIDocShellTreeItem **aParent);

    nsresult (STDMETHODCALLTYPE *GetSameTypeParent)(
        nsIDocShellTreeItem *This,
        nsIDocShellTreeItem **aSameTypeParent);

    nsresult (STDMETHODCALLTYPE *GetRootTreeItem)(
        nsIDocShellTreeItem *This,
        nsIDocShellTreeItem **aRootTreeItem);

    nsresult (STDMETHODCALLTYPE *GetSameTypeRootTreeItem)(
        nsIDocShellTreeItem *This,
        nsIDocShellTreeItem **aSameTypeRootTreeItem);

    nsresult (STDMETHODCALLTYPE *FindItemWithName)(
        nsIDocShellTreeItem *This,
        const PRUnichar *name,
        nsISupports *aRequestor,
        nsIDocShellTreeItem *aOriginalRequestor,
        nsIDocShellTreeItem **_retval);

    nsresult (STDMETHODCALLTYPE *GetTreeOwner)(
        nsIDocShellTreeItem *This,
        nsIDocShellTreeOwner **aTreeOwner);

    nsresult (STDMETHODCALLTYPE *SetTreeOwner)(
        nsIDocShellTreeItem *This,
        nsIDocShellTreeOwner *treeOwner);

    nsresult (STDMETHODCALLTYPE *GetChildCount)(
        nsIDocShellTreeItem *This,
        LONG *aChildCount);

    nsresult (STDMETHODCALLTYPE *AddChild)(
        nsIDocShellTreeItem *This,
        nsIDocShellTreeItem *child);

    nsresult (STDMETHODCALLTYPE *RemoveChild)(
        nsIDocShellTreeItem *This,
        nsIDocShellTreeItem *child);

    nsresult (STDMETHODCALLTYPE *GetChildAt)(
        nsIDocShellTreeItem *This,
        LONG index,
        nsIDocShellTreeItem **_retval);

    nsresult (STDMETHODCALLTYPE *FindChildWithName)(
        nsIDocShellTreeItem *This,
        const PRUnichar *aName,
        cpp_bool aRecurse,
        cpp_bool aSameType,
        nsIDocShellTreeItem *aRequestor,
        nsIDocShellTreeItem *aOriginalRequestor,
        nsIDocShellTreeItem **_retval);

    nsIDocument * (STDMETHODCALLTYPE *GetDocument)(
        nsIDocShellTreeItem *This);

    void * (STDMETHODCALLTYPE *GetWindow)(
        nsIDocShellTreeItem *This);

    END_INTERFACE
} nsIDocShellTreeItemVtbl;

interface nsIDocShellTreeItem {
    CONST_VTBL nsIDocShellTreeItemVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDocShellTreeItem_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDocShellTreeItem_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDocShellTreeItem_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDocShellTreeItem methods ***/
#define nsIDocShellTreeItem_GetName(This,aName) (This)->lpVtbl->GetName(This,aName)
#define nsIDocShellTreeItem_SetName(This,aName) (This)->lpVtbl->SetName(This,aName)
#define nsIDocShellTreeItem_NameEquals(This,name,_retval) (This)->lpVtbl->NameEquals(This,name,_retval)
#define nsIDocShellTreeItem_GetItemType(This,aItemType) (This)->lpVtbl->GetItemType(This,aItemType)
#define nsIDocShellTreeItem_SetItemType(This,aItemType) (This)->lpVtbl->SetItemType(This,aItemType)
#define nsIDocShellTreeItem_ItemType(This) (This)->lpVtbl->ItemType(This)
#define nsIDocShellTreeItem_GetParent(This,aParent) (This)->lpVtbl->GetParent(This,aParent)
#define nsIDocShellTreeItem_GetSameTypeParent(This,aSameTypeParent) (This)->lpVtbl->GetSameTypeParent(This,aSameTypeParent)
#define nsIDocShellTreeItem_GetRootTreeItem(This,aRootTreeItem) (This)->lpVtbl->GetRootTreeItem(This,aRootTreeItem)
#define nsIDocShellTreeItem_GetSameTypeRootTreeItem(This,aSameTypeRootTreeItem) (This)->lpVtbl->GetSameTypeRootTreeItem(This,aSameTypeRootTreeItem)
#define nsIDocShellTreeItem_FindItemWithName(This,name,aRequestor,aOriginalRequestor,_retval) (This)->lpVtbl->FindItemWithName(This,name,aRequestor,aOriginalRequestor,_retval)
#define nsIDocShellTreeItem_GetTreeOwner(This,aTreeOwner) (This)->lpVtbl->GetTreeOwner(This,aTreeOwner)
#define nsIDocShellTreeItem_SetTreeOwner(This,treeOwner) (This)->lpVtbl->SetTreeOwner(This,treeOwner)
#define nsIDocShellTreeItem_GetChildCount(This,aChildCount) (This)->lpVtbl->GetChildCount(This,aChildCount)
#define nsIDocShellTreeItem_AddChild(This,child) (This)->lpVtbl->AddChild(This,child)
#define nsIDocShellTreeItem_RemoveChild(This,child) (This)->lpVtbl->RemoveChild(This,child)
#define nsIDocShellTreeItem_GetChildAt(This,index,_retval) (This)->lpVtbl->GetChildAt(This,index,_retval)
#define nsIDocShellTreeItem_FindChildWithName(This,aName,aRecurse,aSameType,aRequestor,aOriginalRequestor,_retval) (This)->lpVtbl->FindChildWithName(This,aName,aRecurse,aSameType,aRequestor,aOriginalRequestor,_retval)
#define nsIDocShellTreeItem_GetDocument(This) (This)->lpVtbl->GetDocument(This)
#define nsIDocShellTreeItem_GetWindow(This) (This)->lpVtbl->GetWindow(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDocShellTreeItem_QueryInterface(nsIDocShellTreeItem* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDocShellTreeItem_AddRef(nsIDocShellTreeItem* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDocShellTreeItem_Release(nsIDocShellTreeItem* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDocShellTreeItem methods ***/
static FORCEINLINE nsresult nsIDocShellTreeItem_GetName(nsIDocShellTreeItem* This,nsAString *aName) {
    return This->lpVtbl->GetName(This,aName);
}
static FORCEINLINE nsresult nsIDocShellTreeItem_SetName(nsIDocShellTreeItem* This,const nsAString *aName) {
    return This->lpVtbl->SetName(This,aName);
}
static FORCEINLINE nsresult nsIDocShellTreeItem_NameEquals(nsIDocShellTreeItem* This,const PRUnichar *name,cpp_bool *_retval) {
    return This->lpVtbl->NameEquals(This,name,_retval);
}
static FORCEINLINE nsresult nsIDocShellTreeItem_GetItemType(nsIDocShellTreeItem* This,LONG *aItemType) {
    return This->lpVtbl->GetItemType(This,aItemType);
}
static FORCEINLINE nsresult nsIDocShellTreeItem_SetItemType(nsIDocShellTreeItem* This,LONG aItemType) {
    return This->lpVtbl->SetItemType(This,aItemType);
}
static FORCEINLINE LONG nsIDocShellTreeItem_ItemType(nsIDocShellTreeItem* This) {
    return This->lpVtbl->ItemType(This);
}
static FORCEINLINE nsresult nsIDocShellTreeItem_GetParent(nsIDocShellTreeItem* This,nsIDocShellTreeItem **aParent) {
    return This->lpVtbl->GetParent(This,aParent);
}
static FORCEINLINE nsresult nsIDocShellTreeItem_GetSameTypeParent(nsIDocShellTreeItem* This,nsIDocShellTreeItem **aSameTypeParent) {
    return This->lpVtbl->GetSameTypeParent(This,aSameTypeParent);
}
static FORCEINLINE nsresult nsIDocShellTreeItem_GetRootTreeItem(nsIDocShellTreeItem* This,nsIDocShellTreeItem **aRootTreeItem) {
    return This->lpVtbl->GetRootTreeItem(This,aRootTreeItem);
}
static FORCEINLINE nsresult nsIDocShellTreeItem_GetSameTypeRootTreeItem(nsIDocShellTreeItem* This,nsIDocShellTreeItem **aSameTypeRootTreeItem) {
    return This->lpVtbl->GetSameTypeRootTreeItem(This,aSameTypeRootTreeItem);
}
static FORCEINLINE nsresult nsIDocShellTreeItem_FindItemWithName(nsIDocShellTreeItem* This,const PRUnichar *name,nsISupports *aRequestor,nsIDocShellTreeItem *aOriginalRequestor,nsIDocShellTreeItem **_retval) {
    return This->lpVtbl->FindItemWithName(This,name,aRequestor,aOriginalRequestor,_retval);
}
static FORCEINLINE nsresult nsIDocShellTreeItem_GetTreeOwner(nsIDocShellTreeItem* This,nsIDocShellTreeOwner **aTreeOwner) {
    return This->lpVtbl->GetTreeOwner(This,aTreeOwner);
}
static FORCEINLINE nsresult nsIDocShellTreeItem_SetTreeOwner(nsIDocShellTreeItem* This,nsIDocShellTreeOwner *treeOwner) {
    return This->lpVtbl->SetTreeOwner(This,treeOwner);
}
static FORCEINLINE nsresult nsIDocShellTreeItem_GetChildCount(nsIDocShellTreeItem* This,LONG *aChildCount) {
    return This->lpVtbl->GetChildCount(This,aChildCount);
}
static FORCEINLINE nsresult nsIDocShellTreeItem_AddChild(nsIDocShellTreeItem* This,nsIDocShellTreeItem *child) {
    return This->lpVtbl->AddChild(This,child);
}
static FORCEINLINE nsresult nsIDocShellTreeItem_RemoveChild(nsIDocShellTreeItem* This,nsIDocShellTreeItem *child) {
    return This->lpVtbl->RemoveChild(This,child);
}
static FORCEINLINE nsresult nsIDocShellTreeItem_GetChildAt(nsIDocShellTreeItem* This,LONG index,nsIDocShellTreeItem **_retval) {
    return This->lpVtbl->GetChildAt(This,index,_retval);
}
static FORCEINLINE nsresult nsIDocShellTreeItem_FindChildWithName(nsIDocShellTreeItem* This,const PRUnichar *aName,cpp_bool aRecurse,cpp_bool aSameType,nsIDocShellTreeItem *aRequestor,nsIDocShellTreeItem *aOriginalRequestor,nsIDocShellTreeItem **_retval) {
    return This->lpVtbl->FindChildWithName(This,aName,aRecurse,aSameType,aRequestor,aOriginalRequestor,_retval);
}
static FORCEINLINE nsIDocument * nsIDocShellTreeItem_GetDocument(nsIDocShellTreeItem* This) {
    return This->lpVtbl->GetDocument(This);
}
static FORCEINLINE void * nsIDocShellTreeItem_GetWindow(nsIDocShellTreeItem* This) {
    return This->lpVtbl->GetWindow(This);
}
#endif
#endif

#endif


#endif  /* __nsIDocShellTreeItem_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIContentViewer interface
 */
#ifndef __nsIContentViewer_INTERFACE_DEFINED__
#define __nsIContentViewer_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIContentViewer, 0x2da17016, 0x7851, 0x4a45, 0xa7,0xa8, 0x00,0xb3,0x60,0xe0,0x15,0x95);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("2da17016-7851-4a45-a7a8-00b360e01595")
nsIContentViewer : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE Init(
        nsIWidget *aParentWidget,
        const void *aBounds) = 0;

    virtual nsresult STDMETHODCALLTYPE GetContainer(
        nsIDocShell **aContainer) = 0;

    virtual nsresult STDMETHODCALLTYPE SetContainer(
        nsIDocShell *aContainer) = 0;

    virtual void STDMETHODCALLTYPE LoadStart(
        nsIDocument *aDoc) = 0;

    virtual nsresult STDMETHODCALLTYPE LoadComplete(
        nsresult aStatus) = 0;

    virtual nsresult STDMETHODCALLTYPE PermitUnload(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetInPermitUnload(
        cpp_bool *aInPermitUnload) = 0;

    virtual nsresult STDMETHODCALLTYPE PermitUnloadInternal(
        cpp_bool *aShouldPrompt,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBeforeUnloadFiring(
        cpp_bool *aBeforeUnloadFiring) = 0;

    virtual nsresult STDMETHODCALLTYPE PageHide(
        cpp_bool isUnload) = 0;

    virtual nsresult STDMETHODCALLTYPE Close(
        nsISHEntry *historyEntry) = 0;

    virtual nsresult STDMETHODCALLTYPE Destroy(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE Stop(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDOMDocument(
        nsIDOMDocument **aDOMDocument) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDOMDocument(
        nsIDOMDocument *aDOMDocument) = 0;

    virtual void STDMETHODCALLTYPE GetDocument(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBounds(
        void *aBounds) = 0;

    virtual nsresult STDMETHODCALLTYPE SetBounds(
        const void *aBounds) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPreviousViewer(
        nsIContentViewer **aPreviousViewer) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPreviousViewer(
        nsIContentViewer *aPreviousViewer) = 0;

    virtual nsresult STDMETHODCALLTYPE Move(
        LONG aX,
        LONG aY) = 0;

    virtual nsresult STDMETHODCALLTYPE Show(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE Hide(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSticky(
        cpp_bool *aSticky) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSticky(
        cpp_bool aSticky) = 0;

    virtual nsresult STDMETHODCALLTYPE RequestWindowClose(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Open(
        nsISupports *aState,
        nsISHEntry *aSHEntry) = 0;

    virtual nsresult STDMETHODCALLTYPE ClearHistoryEntry(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPageMode(
        cpp_bool aPageMode,
        nsIPrintSettings *aPrintSettings) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHistoryEntry(
        nsISHEntry **aHistoryEntry) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsTabModalPromptAllowed(
        cpp_bool *aIsTabModalPromptAllowed) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsHidden(
        cpp_bool *aIsHidden) = 0;

    virtual nsresult STDMETHODCALLTYPE SetIsHidden(
        cpp_bool aIsHidden) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPresShell(
        nsIPresShell **aPresShell) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPresContext(
        void **aPresContext) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDocumentInternal(
        nsIDocument *aDocument,
        cpp_bool aForceReuseInnerWindow) = 0;

    virtual void * STDMETHODCALLTYPE FindContainerView(
        ) = 0;

    virtual void STDMETHODCALLTYPE SetNavigationTiming(
        void *aTiming) = 0;

    virtual nsresult STDMETHODCALLTYPE ScrollToNode(
        nsIDOMNode *node) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTextZoom(
        float *aTextZoom) = 0;

    virtual nsresult STDMETHODCALLTYPE SetTextZoom(
        float aTextZoom) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFullZoom(
        float *aFullZoom) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFullZoom(
        float aFullZoom) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAuthorStyleDisabled(
        cpp_bool *aAuthorStyleDisabled) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAuthorStyleDisabled(
        cpp_bool aAuthorStyleDisabled) = 0;

    virtual nsresult STDMETHODCALLTYPE GetForceCharacterSet(
        nsACString *aForceCharacterSet) = 0;

    virtual nsresult STDMETHODCALLTYPE SetForceCharacterSet(
        const nsACString *aForceCharacterSet) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHintCharacterSet(
        nsACString *aHintCharacterSet) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHintCharacterSet(
        const nsACString *aHintCharacterSet) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHintCharacterSetSource(
        LONG *aHintCharacterSetSource) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHintCharacterSetSource(
        LONG aHintCharacterSetSource) = 0;

    virtual nsresult STDMETHODCALLTYPE GetContentSize(
        LONG *width,
        LONG *height) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMinFontSize(
        LONG *aMinFontSize) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMinFontSize(
        LONG aMinFontSize) = 0;

    virtual nsresult STDMETHODCALLTYPE AppendSubtree(
        void *array) = 0;

    virtual nsresult STDMETHODCALLTYPE PausePainting(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE ResumePainting(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE EmulateMedium(
        const nsAString *aMediaType) = 0;

    virtual nsresult STDMETHODCALLTYPE StopEmulatingMedium(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIContentViewer, 0x2da17016, 0x7851, 0x4a45, 0xa7,0xa8, 0x00,0xb3,0x60,0xe0,0x15,0x95)
#endif
#else
typedef struct nsIContentViewerVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIContentViewer *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIContentViewer *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIContentViewer *This);

    /*** nsIContentViewer methods ***/
    nsresult (STDMETHODCALLTYPE *Init)(
        nsIContentViewer *This,
        nsIWidget *aParentWidget,
        const void *aBounds);

    nsresult (STDMETHODCALLTYPE *GetContainer)(
        nsIContentViewer *This,
        nsIDocShell **aContainer);

    nsresult (STDMETHODCALLTYPE *SetContainer)(
        nsIContentViewer *This,
        nsIDocShell *aContainer);

    void (STDMETHODCALLTYPE *LoadStart)(
        nsIContentViewer *This,
        nsIDocument *aDoc);

    nsresult (STDMETHODCALLTYPE *LoadComplete)(
        nsIContentViewer *This,
        nsresult aStatus);

    nsresult (STDMETHODCALLTYPE *PermitUnload)(
        nsIContentViewer *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetInPermitUnload)(
        nsIContentViewer *This,
        cpp_bool *aInPermitUnload);

    nsresult (STDMETHODCALLTYPE *PermitUnloadInternal)(
        nsIContentViewer *This,
        cpp_bool *aShouldPrompt,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetBeforeUnloadFiring)(
        nsIContentViewer *This,
        cpp_bool *aBeforeUnloadFiring);

    nsresult (STDMETHODCALLTYPE *PageHide)(
        nsIContentViewer *This,
        cpp_bool isUnload);

    nsresult (STDMETHODCALLTYPE *Close)(
        nsIContentViewer *This,
        nsISHEntry *historyEntry);

    nsresult (STDMETHODCALLTYPE *Destroy)(
        nsIContentViewer *This);

    nsresult (STDMETHODCALLTYPE *Stop)(
        nsIContentViewer *This);

    nsresult (STDMETHODCALLTYPE *GetDOMDocument)(
        nsIContentViewer *This,
        nsIDOMDocument **aDOMDocument);

    nsresult (STDMETHODCALLTYPE *SetDOMDocument)(
        nsIContentViewer *This,
        nsIDOMDocument *aDOMDocument);

    void (STDMETHODCALLTYPE *GetDocument)(
        nsIContentViewer *This);

    nsresult (STDMETHODCALLTYPE *GetBounds)(
        nsIContentViewer *This,
        void *aBounds);

    nsresult (STDMETHODCALLTYPE *SetBounds)(
        nsIContentViewer *This,
        const void *aBounds);

    nsresult (STDMETHODCALLTYPE *GetPreviousViewer)(
        nsIContentViewer *This,
        nsIContentViewer **aPreviousViewer);

    nsresult (STDMETHODCALLTYPE *SetPreviousViewer)(
        nsIContentViewer *This,
        nsIContentViewer *aPreviousViewer);

    nsresult (STDMETHODCALLTYPE *Move)(
        nsIContentViewer *This,
        LONG aX,
        LONG aY);

    nsresult (STDMETHODCALLTYPE *Show)(
        nsIContentViewer *This);

    nsresult (STDMETHODCALLTYPE *Hide)(
        nsIContentViewer *This);

    nsresult (STDMETHODCALLTYPE *GetSticky)(
        nsIContentViewer *This,
        cpp_bool *aSticky);

    nsresult (STDMETHODCALLTYPE *SetSticky)(
        nsIContentViewer *This,
        cpp_bool aSticky);

    nsresult (STDMETHODCALLTYPE *RequestWindowClose)(
        nsIContentViewer *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *Open)(
        nsIContentViewer *This,
        nsISupports *aState,
        nsISHEntry *aSHEntry);

    nsresult (STDMETHODCALLTYPE *ClearHistoryEntry)(
        nsIContentViewer *This);

    nsresult (STDMETHODCALLTYPE *SetPageMode)(
        nsIContentViewer *This,
        cpp_bool aPageMode,
        nsIPrintSettings *aPrintSettings);

    nsresult (STDMETHODCALLTYPE *GetHistoryEntry)(
        nsIContentViewer *This,
        nsISHEntry **aHistoryEntry);

    nsresult (STDMETHODCALLTYPE *GetIsTabModalPromptAllowed)(
        nsIContentViewer *This,
        cpp_bool *aIsTabModalPromptAllowed);

    nsresult (STDMETHODCALLTYPE *GetIsHidden)(
        nsIContentViewer *This,
        cpp_bool *aIsHidden);

    nsresult (STDMETHODCALLTYPE *SetIsHidden)(
        nsIContentViewer *This,
        cpp_bool aIsHidden);

    nsresult (STDMETHODCALLTYPE *GetPresShell)(
        nsIContentViewer *This,
        nsIPresShell **aPresShell);

    nsresult (STDMETHODCALLTYPE *GetPresContext)(
        nsIContentViewer *This,
        void **aPresContext);

    nsresult (STDMETHODCALLTYPE *SetDocumentInternal)(
        nsIContentViewer *This,
        nsIDocument *aDocument,
        cpp_bool aForceReuseInnerWindow);

    void * (STDMETHODCALLTYPE *FindContainerView)(
        nsIContentViewer *This);

    void (STDMETHODCALLTYPE *SetNavigationTiming)(
        nsIContentViewer *This,
        void *aTiming);

    nsresult (STDMETHODCALLTYPE *ScrollToNode)(
        nsIContentViewer *This,
        nsIDOMNode *node);

    nsresult (STDMETHODCALLTYPE *GetTextZoom)(
        nsIContentViewer *This,
        float *aTextZoom);

    nsresult (STDMETHODCALLTYPE *SetTextZoom)(
        nsIContentViewer *This,
        float aTextZoom);

    nsresult (STDMETHODCALLTYPE *GetFullZoom)(
        nsIContentViewer *This,
        float *aFullZoom);

    nsresult (STDMETHODCALLTYPE *SetFullZoom)(
        nsIContentViewer *This,
        float aFullZoom);

    nsresult (STDMETHODCALLTYPE *GetAuthorStyleDisabled)(
        nsIContentViewer *This,
        cpp_bool *aAuthorStyleDisabled);

    nsresult (STDMETHODCALLTYPE *SetAuthorStyleDisabled)(
        nsIContentViewer *This,
        cpp_bool aAuthorStyleDisabled);

    nsresult (STDMETHODCALLTYPE *GetForceCharacterSet)(
        nsIContentViewer *This,
        nsACString *aForceCharacterSet);

    nsresult (STDMETHODCALLTYPE *SetForceCharacterSet)(
        nsIContentViewer *This,
        const nsACString *aForceCharacterSet);

    nsresult (STDMETHODCALLTYPE *GetHintCharacterSet)(
        nsIContentViewer *This,
        nsACString *aHintCharacterSet);

    nsresult (STDMETHODCALLTYPE *SetHintCharacterSet)(
        nsIContentViewer *This,
        const nsACString *aHintCharacterSet);

    nsresult (STDMETHODCALLTYPE *GetHintCharacterSetSource)(
        nsIContentViewer *This,
        LONG *aHintCharacterSetSource);

    nsresult (STDMETHODCALLTYPE *SetHintCharacterSetSource)(
        nsIContentViewer *This,
        LONG aHintCharacterSetSource);

    nsresult (STDMETHODCALLTYPE *GetContentSize)(
        nsIContentViewer *This,
        LONG *width,
        LONG *height);

    nsresult (STDMETHODCALLTYPE *GetMinFontSize)(
        nsIContentViewer *This,
        LONG *aMinFontSize);

    nsresult (STDMETHODCALLTYPE *SetMinFontSize)(
        nsIContentViewer *This,
        LONG aMinFontSize);

    nsresult (STDMETHODCALLTYPE *AppendSubtree)(
        nsIContentViewer *This,
        void *array);

    nsresult (STDMETHODCALLTYPE *PausePainting)(
        nsIContentViewer *This);

    nsresult (STDMETHODCALLTYPE *ResumePainting)(
        nsIContentViewer *This);

    nsresult (STDMETHODCALLTYPE *EmulateMedium)(
        nsIContentViewer *This,
        const nsAString *aMediaType);

    nsresult (STDMETHODCALLTYPE *StopEmulatingMedium)(
        nsIContentViewer *This);

    END_INTERFACE
} nsIContentViewerVtbl;

interface nsIContentViewer {
    CONST_VTBL nsIContentViewerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIContentViewer_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIContentViewer_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIContentViewer_Release(This) (This)->lpVtbl->Release(This)
/*** nsIContentViewer methods ***/
#define nsIContentViewer_Init(This,aParentWidget,aBounds) (This)->lpVtbl->Init(This,aParentWidget,aBounds)
#define nsIContentViewer_GetContainer(This,aContainer) (This)->lpVtbl->GetContainer(This,aContainer)
#define nsIContentViewer_SetContainer(This,aContainer) (This)->lpVtbl->SetContainer(This,aContainer)
#define nsIContentViewer_LoadStart(This,aDoc) (This)->lpVtbl->LoadStart(This,aDoc)
#define nsIContentViewer_LoadComplete(This,aStatus) (This)->lpVtbl->LoadComplete(This,aStatus)
#define nsIContentViewer_PermitUnload(This,_retval) (This)->lpVtbl->PermitUnload(This,_retval)
#define nsIContentViewer_GetInPermitUnload(This,aInPermitUnload) (This)->lpVtbl->GetInPermitUnload(This,aInPermitUnload)
#define nsIContentViewer_PermitUnloadInternal(This,aShouldPrompt,_retval) (This)->lpVtbl->PermitUnloadInternal(This,aShouldPrompt,_retval)
#define nsIContentViewer_GetBeforeUnloadFiring(This,aBeforeUnloadFiring) (This)->lpVtbl->GetBeforeUnloadFiring(This,aBeforeUnloadFiring)
#define nsIContentViewer_PageHide(This,isUnload) (This)->lpVtbl->PageHide(This,isUnload)
#define nsIContentViewer_Close(This,historyEntry) (This)->lpVtbl->Close(This,historyEntry)
#define nsIContentViewer_Destroy(This) (This)->lpVtbl->Destroy(This)
#define nsIContentViewer_Stop(This) (This)->lpVtbl->Stop(This)
#define nsIContentViewer_GetDOMDocument(This,aDOMDocument) (This)->lpVtbl->GetDOMDocument(This,aDOMDocument)
#define nsIContentViewer_SetDOMDocument(This,aDOMDocument) (This)->lpVtbl->SetDOMDocument(This,aDOMDocument)
#define nsIContentViewer_GetDocument(This) (This)->lpVtbl->GetDocument(This)
#define nsIContentViewer_GetBounds(This,aBounds) (This)->lpVtbl->GetBounds(This,aBounds)
#define nsIContentViewer_SetBounds(This,aBounds) (This)->lpVtbl->SetBounds(This,aBounds)
#define nsIContentViewer_GetPreviousViewer(This,aPreviousViewer) (This)->lpVtbl->GetPreviousViewer(This,aPreviousViewer)
#define nsIContentViewer_SetPreviousViewer(This,aPreviousViewer) (This)->lpVtbl->SetPreviousViewer(This,aPreviousViewer)
#define nsIContentViewer_Move(This,aX,aY) (This)->lpVtbl->Move(This,aX,aY)
#define nsIContentViewer_Show(This) (This)->lpVtbl->Show(This)
#define nsIContentViewer_Hide(This) (This)->lpVtbl->Hide(This)
#define nsIContentViewer_GetSticky(This,aSticky) (This)->lpVtbl->GetSticky(This,aSticky)
#define nsIContentViewer_SetSticky(This,aSticky) (This)->lpVtbl->SetSticky(This,aSticky)
#define nsIContentViewer_RequestWindowClose(This,_retval) (This)->lpVtbl->RequestWindowClose(This,_retval)
#define nsIContentViewer_Open(This,aState,aSHEntry) (This)->lpVtbl->Open(This,aState,aSHEntry)
#define nsIContentViewer_ClearHistoryEntry(This) (This)->lpVtbl->ClearHistoryEntry(This)
#define nsIContentViewer_SetPageMode(This,aPageMode,aPrintSettings) (This)->lpVtbl->SetPageMode(This,aPageMode,aPrintSettings)
#define nsIContentViewer_GetHistoryEntry(This,aHistoryEntry) (This)->lpVtbl->GetHistoryEntry(This,aHistoryEntry)
#define nsIContentViewer_GetIsTabModalPromptAllowed(This,aIsTabModalPromptAllowed) (This)->lpVtbl->GetIsTabModalPromptAllowed(This,aIsTabModalPromptAllowed)
#define nsIContentViewer_GetIsHidden(This,aIsHidden) (This)->lpVtbl->GetIsHidden(This,aIsHidden)
#define nsIContentViewer_SetIsHidden(This,aIsHidden) (This)->lpVtbl->SetIsHidden(This,aIsHidden)
#define nsIContentViewer_GetPresShell(This,aPresShell) (This)->lpVtbl->GetPresShell(This,aPresShell)
#define nsIContentViewer_GetPresContext(This,aPresContext) (This)->lpVtbl->GetPresContext(This,aPresContext)
#define nsIContentViewer_SetDocumentInternal(This,aDocument,aForceReuseInnerWindow) (This)->lpVtbl->SetDocumentInternal(This,aDocument,aForceReuseInnerWindow)
#define nsIContentViewer_FindContainerView(This) (This)->lpVtbl->FindContainerView(This)
#define nsIContentViewer_SetNavigationTiming(This,aTiming) (This)->lpVtbl->SetNavigationTiming(This,aTiming)
#define nsIContentViewer_ScrollToNode(This,node) (This)->lpVtbl->ScrollToNode(This,node)
#define nsIContentViewer_GetTextZoom(This,aTextZoom) (This)->lpVtbl->GetTextZoom(This,aTextZoom)
#define nsIContentViewer_SetTextZoom(This,aTextZoom) (This)->lpVtbl->SetTextZoom(This,aTextZoom)
#define nsIContentViewer_GetFullZoom(This,aFullZoom) (This)->lpVtbl->GetFullZoom(This,aFullZoom)
#define nsIContentViewer_SetFullZoom(This,aFullZoom) (This)->lpVtbl->SetFullZoom(This,aFullZoom)
#define nsIContentViewer_GetAuthorStyleDisabled(This,aAuthorStyleDisabled) (This)->lpVtbl->GetAuthorStyleDisabled(This,aAuthorStyleDisabled)
#define nsIContentViewer_SetAuthorStyleDisabled(This,aAuthorStyleDisabled) (This)->lpVtbl->SetAuthorStyleDisabled(This,aAuthorStyleDisabled)
#define nsIContentViewer_GetForceCharacterSet(This,aForceCharacterSet) (This)->lpVtbl->GetForceCharacterSet(This,aForceCharacterSet)
#define nsIContentViewer_SetForceCharacterSet(This,aForceCharacterSet) (This)->lpVtbl->SetForceCharacterSet(This,aForceCharacterSet)
#define nsIContentViewer_GetHintCharacterSet(This,aHintCharacterSet) (This)->lpVtbl->GetHintCharacterSet(This,aHintCharacterSet)
#define nsIContentViewer_SetHintCharacterSet(This,aHintCharacterSet) (This)->lpVtbl->SetHintCharacterSet(This,aHintCharacterSet)
#define nsIContentViewer_GetHintCharacterSetSource(This,aHintCharacterSetSource) (This)->lpVtbl->GetHintCharacterSetSource(This,aHintCharacterSetSource)
#define nsIContentViewer_SetHintCharacterSetSource(This,aHintCharacterSetSource) (This)->lpVtbl->SetHintCharacterSetSource(This,aHintCharacterSetSource)
#define nsIContentViewer_GetContentSize(This,width,height) (This)->lpVtbl->GetContentSize(This,width,height)
#define nsIContentViewer_GetMinFontSize(This,aMinFontSize) (This)->lpVtbl->GetMinFontSize(This,aMinFontSize)
#define nsIContentViewer_SetMinFontSize(This,aMinFontSize) (This)->lpVtbl->SetMinFontSize(This,aMinFontSize)
#define nsIContentViewer_AppendSubtree(This,array) (This)->lpVtbl->AppendSubtree(This,array)
#define nsIContentViewer_PausePainting(This) (This)->lpVtbl->PausePainting(This)
#define nsIContentViewer_ResumePainting(This) (This)->lpVtbl->ResumePainting(This)
#define nsIContentViewer_EmulateMedium(This,aMediaType) (This)->lpVtbl->EmulateMedium(This,aMediaType)
#define nsIContentViewer_StopEmulatingMedium(This) (This)->lpVtbl->StopEmulatingMedium(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIContentViewer_QueryInterface(nsIContentViewer* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIContentViewer_AddRef(nsIContentViewer* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIContentViewer_Release(nsIContentViewer* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIContentViewer methods ***/
static FORCEINLINE nsresult nsIContentViewer_Init(nsIContentViewer* This,nsIWidget *aParentWidget,const void *aBounds) {
    return This->lpVtbl->Init(This,aParentWidget,aBounds);
}
static FORCEINLINE nsresult nsIContentViewer_GetContainer(nsIContentViewer* This,nsIDocShell **aContainer) {
    return This->lpVtbl->GetContainer(This,aContainer);
}
static FORCEINLINE nsresult nsIContentViewer_SetContainer(nsIContentViewer* This,nsIDocShell *aContainer) {
    return This->lpVtbl->SetContainer(This,aContainer);
}
static FORCEINLINE void nsIContentViewer_LoadStart(nsIContentViewer* This,nsIDocument *aDoc) {
    This->lpVtbl->LoadStart(This,aDoc);
}
static FORCEINLINE nsresult nsIContentViewer_LoadComplete(nsIContentViewer* This,nsresult aStatus) {
    return This->lpVtbl->LoadComplete(This,aStatus);
}
static FORCEINLINE nsresult nsIContentViewer_PermitUnload(nsIContentViewer* This,cpp_bool *_retval) {
    return This->lpVtbl->PermitUnload(This,_retval);
}
static FORCEINLINE nsresult nsIContentViewer_GetInPermitUnload(nsIContentViewer* This,cpp_bool *aInPermitUnload) {
    return This->lpVtbl->GetInPermitUnload(This,aInPermitUnload);
}
static FORCEINLINE nsresult nsIContentViewer_PermitUnloadInternal(nsIContentViewer* This,cpp_bool *aShouldPrompt,cpp_bool *_retval) {
    return This->lpVtbl->PermitUnloadInternal(This,aShouldPrompt,_retval);
}
static FORCEINLINE nsresult nsIContentViewer_GetBeforeUnloadFiring(nsIContentViewer* This,cpp_bool *aBeforeUnloadFiring) {
    return This->lpVtbl->GetBeforeUnloadFiring(This,aBeforeUnloadFiring);
}
static FORCEINLINE nsresult nsIContentViewer_PageHide(nsIContentViewer* This,cpp_bool isUnload) {
    return This->lpVtbl->PageHide(This,isUnload);
}
static FORCEINLINE nsresult nsIContentViewer_Close(nsIContentViewer* This,nsISHEntry *historyEntry) {
    return This->lpVtbl->Close(This,historyEntry);
}
static FORCEINLINE nsresult nsIContentViewer_Destroy(nsIContentViewer* This) {
    return This->lpVtbl->Destroy(This);
}
static FORCEINLINE nsresult nsIContentViewer_Stop(nsIContentViewer* This) {
    return This->lpVtbl->Stop(This);
}
static FORCEINLINE nsresult nsIContentViewer_GetDOMDocument(nsIContentViewer* This,nsIDOMDocument **aDOMDocument) {
    return This->lpVtbl->GetDOMDocument(This,aDOMDocument);
}
static FORCEINLINE nsresult nsIContentViewer_SetDOMDocument(nsIContentViewer* This,nsIDOMDocument *aDOMDocument) {
    return This->lpVtbl->SetDOMDocument(This,aDOMDocument);
}
static FORCEINLINE void nsIContentViewer_GetDocument(nsIContentViewer* This) {
    This->lpVtbl->GetDocument(This);
}
static FORCEINLINE nsresult nsIContentViewer_GetBounds(nsIContentViewer* This,void *aBounds) {
    return This->lpVtbl->GetBounds(This,aBounds);
}
static FORCEINLINE nsresult nsIContentViewer_SetBounds(nsIContentViewer* This,const void *aBounds) {
    return This->lpVtbl->SetBounds(This,aBounds);
}
static FORCEINLINE nsresult nsIContentViewer_GetPreviousViewer(nsIContentViewer* This,nsIContentViewer **aPreviousViewer) {
    return This->lpVtbl->GetPreviousViewer(This,aPreviousViewer);
}
static FORCEINLINE nsresult nsIContentViewer_SetPreviousViewer(nsIContentViewer* This,nsIContentViewer *aPreviousViewer) {
    return This->lpVtbl->SetPreviousViewer(This,aPreviousViewer);
}
static FORCEINLINE nsresult nsIContentViewer_Move(nsIContentViewer* This,LONG aX,LONG aY) {
    return This->lpVtbl->Move(This,aX,aY);
}
static FORCEINLINE nsresult nsIContentViewer_Show(nsIContentViewer* This) {
    return This->lpVtbl->Show(This);
}
static FORCEINLINE nsresult nsIContentViewer_Hide(nsIContentViewer* This) {
    return This->lpVtbl->Hide(This);
}
static FORCEINLINE nsresult nsIContentViewer_GetSticky(nsIContentViewer* This,cpp_bool *aSticky) {
    return This->lpVtbl->GetSticky(This,aSticky);
}
static FORCEINLINE nsresult nsIContentViewer_SetSticky(nsIContentViewer* This,cpp_bool aSticky) {
    return This->lpVtbl->SetSticky(This,aSticky);
}
static FORCEINLINE nsresult nsIContentViewer_RequestWindowClose(nsIContentViewer* This,cpp_bool *_retval) {
    return This->lpVtbl->RequestWindowClose(This,_retval);
}
static FORCEINLINE nsresult nsIContentViewer_Open(nsIContentViewer* This,nsISupports *aState,nsISHEntry *aSHEntry) {
    return This->lpVtbl->Open(This,aState,aSHEntry);
}
static FORCEINLINE nsresult nsIContentViewer_ClearHistoryEntry(nsIContentViewer* This) {
    return This->lpVtbl->ClearHistoryEntry(This);
}
static FORCEINLINE nsresult nsIContentViewer_SetPageMode(nsIContentViewer* This,cpp_bool aPageMode,nsIPrintSettings *aPrintSettings) {
    return This->lpVtbl->SetPageMode(This,aPageMode,aPrintSettings);
}
static FORCEINLINE nsresult nsIContentViewer_GetHistoryEntry(nsIContentViewer* This,nsISHEntry **aHistoryEntry) {
    return This->lpVtbl->GetHistoryEntry(This,aHistoryEntry);
}
static FORCEINLINE nsresult nsIContentViewer_GetIsTabModalPromptAllowed(nsIContentViewer* This,cpp_bool *aIsTabModalPromptAllowed) {
    return This->lpVtbl->GetIsTabModalPromptAllowed(This,aIsTabModalPromptAllowed);
}
static FORCEINLINE nsresult nsIContentViewer_GetIsHidden(nsIContentViewer* This,cpp_bool *aIsHidden) {
    return This->lpVtbl->GetIsHidden(This,aIsHidden);
}
static FORCEINLINE nsresult nsIContentViewer_SetIsHidden(nsIContentViewer* This,cpp_bool aIsHidden) {
    return This->lpVtbl->SetIsHidden(This,aIsHidden);
}
static FORCEINLINE nsresult nsIContentViewer_GetPresShell(nsIContentViewer* This,nsIPresShell **aPresShell) {
    return This->lpVtbl->GetPresShell(This,aPresShell);
}
static FORCEINLINE nsresult nsIContentViewer_GetPresContext(nsIContentViewer* This,void **aPresContext) {
    return This->lpVtbl->GetPresContext(This,aPresContext);
}
static FORCEINLINE nsresult nsIContentViewer_SetDocumentInternal(nsIContentViewer* This,nsIDocument *aDocument,cpp_bool aForceReuseInnerWindow) {
    return This->lpVtbl->SetDocumentInternal(This,aDocument,aForceReuseInnerWindow);
}
static FORCEINLINE void * nsIContentViewer_FindContainerView(nsIContentViewer* This) {
    return This->lpVtbl->FindContainerView(This);
}
static FORCEINLINE void nsIContentViewer_SetNavigationTiming(nsIContentViewer* This,void *aTiming) {
    This->lpVtbl->SetNavigationTiming(This,aTiming);
}
static FORCEINLINE nsresult nsIContentViewer_ScrollToNode(nsIContentViewer* This,nsIDOMNode *node) {
    return This->lpVtbl->ScrollToNode(This,node);
}
static FORCEINLINE nsresult nsIContentViewer_GetTextZoom(nsIContentViewer* This,float *aTextZoom) {
    return This->lpVtbl->GetTextZoom(This,aTextZoom);
}
static FORCEINLINE nsresult nsIContentViewer_SetTextZoom(nsIContentViewer* This,float aTextZoom) {
    return This->lpVtbl->SetTextZoom(This,aTextZoom);
}
static FORCEINLINE nsresult nsIContentViewer_GetFullZoom(nsIContentViewer* This,float *aFullZoom) {
    return This->lpVtbl->GetFullZoom(This,aFullZoom);
}
static FORCEINLINE nsresult nsIContentViewer_SetFullZoom(nsIContentViewer* This,float aFullZoom) {
    return This->lpVtbl->SetFullZoom(This,aFullZoom);
}
static FORCEINLINE nsresult nsIContentViewer_GetAuthorStyleDisabled(nsIContentViewer* This,cpp_bool *aAuthorStyleDisabled) {
    return This->lpVtbl->GetAuthorStyleDisabled(This,aAuthorStyleDisabled);
}
static FORCEINLINE nsresult nsIContentViewer_SetAuthorStyleDisabled(nsIContentViewer* This,cpp_bool aAuthorStyleDisabled) {
    return This->lpVtbl->SetAuthorStyleDisabled(This,aAuthorStyleDisabled);
}
static FORCEINLINE nsresult nsIContentViewer_GetForceCharacterSet(nsIContentViewer* This,nsACString *aForceCharacterSet) {
    return This->lpVtbl->GetForceCharacterSet(This,aForceCharacterSet);
}
static FORCEINLINE nsresult nsIContentViewer_SetForceCharacterSet(nsIContentViewer* This,const nsACString *aForceCharacterSet) {
    return This->lpVtbl->SetForceCharacterSet(This,aForceCharacterSet);
}
static FORCEINLINE nsresult nsIContentViewer_GetHintCharacterSet(nsIContentViewer* This,nsACString *aHintCharacterSet) {
    return This->lpVtbl->GetHintCharacterSet(This,aHintCharacterSet);
}
static FORCEINLINE nsresult nsIContentViewer_SetHintCharacterSet(nsIContentViewer* This,const nsACString *aHintCharacterSet) {
    return This->lpVtbl->SetHintCharacterSet(This,aHintCharacterSet);
}
static FORCEINLINE nsresult nsIContentViewer_GetHintCharacterSetSource(nsIContentViewer* This,LONG *aHintCharacterSetSource) {
    return This->lpVtbl->GetHintCharacterSetSource(This,aHintCharacterSetSource);
}
static FORCEINLINE nsresult nsIContentViewer_SetHintCharacterSetSource(nsIContentViewer* This,LONG aHintCharacterSetSource) {
    return This->lpVtbl->SetHintCharacterSetSource(This,aHintCharacterSetSource);
}
static FORCEINLINE nsresult nsIContentViewer_GetContentSize(nsIContentViewer* This,LONG *width,LONG *height) {
    return This->lpVtbl->GetContentSize(This,width,height);
}
static FORCEINLINE nsresult nsIContentViewer_GetMinFontSize(nsIContentViewer* This,LONG *aMinFontSize) {
    return This->lpVtbl->GetMinFontSize(This,aMinFontSize);
}
static FORCEINLINE nsresult nsIContentViewer_SetMinFontSize(nsIContentViewer* This,LONG aMinFontSize) {
    return This->lpVtbl->SetMinFontSize(This,aMinFontSize);
}
static FORCEINLINE nsresult nsIContentViewer_AppendSubtree(nsIContentViewer* This,void *array) {
    return This->lpVtbl->AppendSubtree(This,array);
}
static FORCEINLINE nsresult nsIContentViewer_PausePainting(nsIContentViewer* This) {
    return This->lpVtbl->PausePainting(This);
}
static FORCEINLINE nsresult nsIContentViewer_ResumePainting(nsIContentViewer* This) {
    return This->lpVtbl->ResumePainting(This);
}
static FORCEINLINE nsresult nsIContentViewer_EmulateMedium(nsIContentViewer* This,const nsAString *aMediaType) {
    return This->lpVtbl->EmulateMedium(This,aMediaType);
}
static FORCEINLINE nsresult nsIContentViewer_StopEmulatingMedium(nsIContentViewer* This) {
    return This->lpVtbl->StopEmulatingMedium(This);
}
#endif
#endif

#endif


#endif  /* __nsIContentViewer_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDocShellLoadInfo interface
 */
#ifndef __nsIDocShellLoadInfo_INTERFACE_DEFINED__
#define __nsIDocShellLoadInfo_INTERFACE_DEFINED__

typedef UINT32 nsDocShellInfoReferrerPolicy;
typedef enum __WIDL_nsiface_generated_name_00000006 {
    loadNormal = 0,
    loadNormalReplace = 1,
    loadHistory = 2,
    loadReloadNormal = 3,
    loadReloadBypassCache = 4,
    loadReloadBypassProxy = 5,
    loadReloadBypassProxyAndCache = 6,
    loadLink = 7,
    loadRefresh = 8,
    loadReloadCharsetChange = 9,
    loadBypassHistory = 10,
    loadStopContent = 11,
    loadStopContentAndReplace = 12,
    loadNormalExternal = 13,
    loadNormalBypassCache = 14,
    loadNormalBypassProxy = 15,
    loadNormalBypassProxyAndCache = 16,
    loadPushState = 17,
    loadReplaceBypassCache = 18,
    loadReloadMixedContent = 19,
    loadNormalAllowMixedContent = 20
} nsDocShellInfoLoadType;
DEFINE_GUID(IID_nsIDocShellLoadInfo, 0xe7570e5a, 0xf1d6, 0x452d, 0xb4,0xf8, 0xb3,0x5f,0xdc,0x63,0xaa,0x03);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("e7570e5a-f1d6-452d-b4f8-b35fdc63aa03")
nsIDocShellLoadInfo : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetReferrer(
        nsIURI **aReferrer) = 0;

    virtual nsresult STDMETHODCALLTYPE SetReferrer(
        nsIURI *aReferrer) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOriginalURI(
        nsIURI **aOriginalURI) = 0;

    virtual nsresult STDMETHODCALLTYPE SetOriginalURI(
        nsIURI *aOriginalURI) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLoadReplace(
        cpp_bool *aLoadReplace) = 0;

    virtual nsresult STDMETHODCALLTYPE SetLoadReplace(
        cpp_bool aLoadReplace) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOwner(
        nsISupports **aOwner) = 0;

    virtual nsresult STDMETHODCALLTYPE SetOwner(
        nsISupports *aOwner) = 0;

    virtual nsresult STDMETHODCALLTYPE GetInheritOwner(
        cpp_bool *aInheritOwner) = 0;

    virtual nsresult STDMETHODCALLTYPE SetInheritOwner(
        cpp_bool aInheritOwner) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOwnerIsExplicit(
        cpp_bool *aOwnerIsExplicit) = 0;

    virtual nsresult STDMETHODCALLTYPE SetOwnerIsExplicit(
        cpp_bool aOwnerIsExplicit) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLoadType(
        nsDocShellInfoLoadType *aLoadType) = 0;

    virtual nsresult STDMETHODCALLTYPE SetLoadType(
        nsDocShellInfoLoadType aLoadType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSHEntry(
        nsISHEntry **aSHEntry) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSHEntry(
        nsISHEntry *aSHEntry) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTarget(
        PRUnichar **aTarget) = 0;

    virtual nsresult STDMETHODCALLTYPE SetTarget(
        const PRUnichar *aTarget) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPostDataStream(
        nsIInputStream **aPostDataStream) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPostDataStream(
        nsIInputStream *aPostDataStream) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHeadersStream(
        nsIInputStream **aHeadersStream) = 0;

    virtual nsresult STDMETHODCALLTYPE SetHeadersStream(
        nsIInputStream *aHeadersStream) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSendReferrer(
        cpp_bool *aSendReferrer) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSendReferrer(
        cpp_bool aSendReferrer) = 0;

    virtual nsresult STDMETHODCALLTYPE GetReferrerPolicy(
        nsDocShellInfoReferrerPolicy *aReferrerPolicy) = 0;

    virtual nsresult STDMETHODCALLTYPE SetReferrerPolicy(
        nsDocShellInfoReferrerPolicy aReferrerPolicy) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsSrcdocLoad(
        cpp_bool *aIsSrcdocLoad) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSrcdocData(
        nsAString *aSrcdocData) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSrcdocData(
        const nsAString *aSrcdocData) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSourceDocShell(
        nsIDocShell **aSourceDocShell) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSourceDocShell(
        nsIDocShell *aSourceDocShell) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBaseURI(
        nsIURI **aBaseURI) = 0;

    virtual nsresult STDMETHODCALLTYPE SetBaseURI(
        nsIURI *aBaseURI) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDocShellLoadInfo, 0xe7570e5a, 0xf1d6, 0x452d, 0xb4,0xf8, 0xb3,0x5f,0xdc,0x63,0xaa,0x03)
#endif
#else
typedef struct nsIDocShellLoadInfoVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDocShellLoadInfo *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDocShellLoadInfo *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDocShellLoadInfo *This);

    /*** nsIDocShellLoadInfo methods ***/
    nsresult (STDMETHODCALLTYPE *GetReferrer)(
        nsIDocShellLoadInfo *This,
        nsIURI **aReferrer);

    nsresult (STDMETHODCALLTYPE *SetReferrer)(
        nsIDocShellLoadInfo *This,
        nsIURI *aReferrer);

    nsresult (STDMETHODCALLTYPE *GetOriginalURI)(
        nsIDocShellLoadInfo *This,
        nsIURI **aOriginalURI);

    nsresult (STDMETHODCALLTYPE *SetOriginalURI)(
        nsIDocShellLoadInfo *This,
        nsIURI *aOriginalURI);

    nsresult (STDMETHODCALLTYPE *GetLoadReplace)(
        nsIDocShellLoadInfo *This,
        cpp_bool *aLoadReplace);

    nsresult (STDMETHODCALLTYPE *SetLoadReplace)(
        nsIDocShellLoadInfo *This,
        cpp_bool aLoadReplace);

    nsresult (STDMETHODCALLTYPE *GetOwner)(
        nsIDocShellLoadInfo *This,
        nsISupports **aOwner);

    nsresult (STDMETHODCALLTYPE *SetOwner)(
        nsIDocShellLoadInfo *This,
        nsISupports *aOwner);

    nsresult (STDMETHODCALLTYPE *GetInheritOwner)(
        nsIDocShellLoadInfo *This,
        cpp_bool *aInheritOwner);

    nsresult (STDMETHODCALLTYPE *SetInheritOwner)(
        nsIDocShellLoadInfo *This,
        cpp_bool aInheritOwner);

    nsresult (STDMETHODCALLTYPE *GetOwnerIsExplicit)(
        nsIDocShellLoadInfo *This,
        cpp_bool *aOwnerIsExplicit);

    nsresult (STDMETHODCALLTYPE *SetOwnerIsExplicit)(
        nsIDocShellLoadInfo *This,
        cpp_bool aOwnerIsExplicit);

    nsresult (STDMETHODCALLTYPE *GetLoadType)(
        nsIDocShellLoadInfo *This,
        nsDocShellInfoLoadType *aLoadType);

    nsresult (STDMETHODCALLTYPE *SetLoadType)(
        nsIDocShellLoadInfo *This,
        nsDocShellInfoLoadType aLoadType);

    nsresult (STDMETHODCALLTYPE *GetSHEntry)(
        nsIDocShellLoadInfo *This,
        nsISHEntry **aSHEntry);

    nsresult (STDMETHODCALLTYPE *SetSHEntry)(
        nsIDocShellLoadInfo *This,
        nsISHEntry *aSHEntry);

    nsresult (STDMETHODCALLTYPE *GetTarget)(
        nsIDocShellLoadInfo *This,
        PRUnichar **aTarget);

    nsresult (STDMETHODCALLTYPE *SetTarget)(
        nsIDocShellLoadInfo *This,
        const PRUnichar *aTarget);

    nsresult (STDMETHODCALLTYPE *GetPostDataStream)(
        nsIDocShellLoadInfo *This,
        nsIInputStream **aPostDataStream);

    nsresult (STDMETHODCALLTYPE *SetPostDataStream)(
        nsIDocShellLoadInfo *This,
        nsIInputStream *aPostDataStream);

    nsresult (STDMETHODCALLTYPE *GetHeadersStream)(
        nsIDocShellLoadInfo *This,
        nsIInputStream **aHeadersStream);

    nsresult (STDMETHODCALLTYPE *SetHeadersStream)(
        nsIDocShellLoadInfo *This,
        nsIInputStream *aHeadersStream);

    nsresult (STDMETHODCALLTYPE *GetSendReferrer)(
        nsIDocShellLoadInfo *This,
        cpp_bool *aSendReferrer);

    nsresult (STDMETHODCALLTYPE *SetSendReferrer)(
        nsIDocShellLoadInfo *This,
        cpp_bool aSendReferrer);

    nsresult (STDMETHODCALLTYPE *GetReferrerPolicy)(
        nsIDocShellLoadInfo *This,
        nsDocShellInfoReferrerPolicy *aReferrerPolicy);

    nsresult (STDMETHODCALLTYPE *SetReferrerPolicy)(
        nsIDocShellLoadInfo *This,
        nsDocShellInfoReferrerPolicy aReferrerPolicy);

    nsresult (STDMETHODCALLTYPE *GetIsSrcdocLoad)(
        nsIDocShellLoadInfo *This,
        cpp_bool *aIsSrcdocLoad);

    nsresult (STDMETHODCALLTYPE *GetSrcdocData)(
        nsIDocShellLoadInfo *This,
        nsAString *aSrcdocData);

    nsresult (STDMETHODCALLTYPE *SetSrcdocData)(
        nsIDocShellLoadInfo *This,
        const nsAString *aSrcdocData);

    nsresult (STDMETHODCALLTYPE *GetSourceDocShell)(
        nsIDocShellLoadInfo *This,
        nsIDocShell **aSourceDocShell);

    nsresult (STDMETHODCALLTYPE *SetSourceDocShell)(
        nsIDocShellLoadInfo *This,
        nsIDocShell *aSourceDocShell);

    nsresult (STDMETHODCALLTYPE *GetBaseURI)(
        nsIDocShellLoadInfo *This,
        nsIURI **aBaseURI);

    nsresult (STDMETHODCALLTYPE *SetBaseURI)(
        nsIDocShellLoadInfo *This,
        nsIURI *aBaseURI);

    END_INTERFACE
} nsIDocShellLoadInfoVtbl;

interface nsIDocShellLoadInfo {
    CONST_VTBL nsIDocShellLoadInfoVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDocShellLoadInfo_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDocShellLoadInfo_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDocShellLoadInfo_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDocShellLoadInfo methods ***/
#define nsIDocShellLoadInfo_GetReferrer(This,aReferrer) (This)->lpVtbl->GetReferrer(This,aReferrer)
#define nsIDocShellLoadInfo_SetReferrer(This,aReferrer) (This)->lpVtbl->SetReferrer(This,aReferrer)
#define nsIDocShellLoadInfo_GetOriginalURI(This,aOriginalURI) (This)->lpVtbl->GetOriginalURI(This,aOriginalURI)
#define nsIDocShellLoadInfo_SetOriginalURI(This,aOriginalURI) (This)->lpVtbl->SetOriginalURI(This,aOriginalURI)
#define nsIDocShellLoadInfo_GetLoadReplace(This,aLoadReplace) (This)->lpVtbl->GetLoadReplace(This,aLoadReplace)
#define nsIDocShellLoadInfo_SetLoadReplace(This,aLoadReplace) (This)->lpVtbl->SetLoadReplace(This,aLoadReplace)
#define nsIDocShellLoadInfo_GetOwner(This,aOwner) (This)->lpVtbl->GetOwner(This,aOwner)
#define nsIDocShellLoadInfo_SetOwner(This,aOwner) (This)->lpVtbl->SetOwner(This,aOwner)
#define nsIDocShellLoadInfo_GetInheritOwner(This,aInheritOwner) (This)->lpVtbl->GetInheritOwner(This,aInheritOwner)
#define nsIDocShellLoadInfo_SetInheritOwner(This,aInheritOwner) (This)->lpVtbl->SetInheritOwner(This,aInheritOwner)
#define nsIDocShellLoadInfo_GetOwnerIsExplicit(This,aOwnerIsExplicit) (This)->lpVtbl->GetOwnerIsExplicit(This,aOwnerIsExplicit)
#define nsIDocShellLoadInfo_SetOwnerIsExplicit(This,aOwnerIsExplicit) (This)->lpVtbl->SetOwnerIsExplicit(This,aOwnerIsExplicit)
#define nsIDocShellLoadInfo_GetLoadType(This,aLoadType) (This)->lpVtbl->GetLoadType(This,aLoadType)
#define nsIDocShellLoadInfo_SetLoadType(This,aLoadType) (This)->lpVtbl->SetLoadType(This,aLoadType)
#define nsIDocShellLoadInfo_GetSHEntry(This,aSHEntry) (This)->lpVtbl->GetSHEntry(This,aSHEntry)
#define nsIDocShellLoadInfo_SetSHEntry(This,aSHEntry) (This)->lpVtbl->SetSHEntry(This,aSHEntry)
#define nsIDocShellLoadInfo_GetTarget(This,aTarget) (This)->lpVtbl->GetTarget(This,aTarget)
#define nsIDocShellLoadInfo_SetTarget(This,aTarget) (This)->lpVtbl->SetTarget(This,aTarget)
#define nsIDocShellLoadInfo_GetPostDataStream(This,aPostDataStream) (This)->lpVtbl->GetPostDataStream(This,aPostDataStream)
#define nsIDocShellLoadInfo_SetPostDataStream(This,aPostDataStream) (This)->lpVtbl->SetPostDataStream(This,aPostDataStream)
#define nsIDocShellLoadInfo_GetHeadersStream(This,aHeadersStream) (This)->lpVtbl->GetHeadersStream(This,aHeadersStream)
#define nsIDocShellLoadInfo_SetHeadersStream(This,aHeadersStream) (This)->lpVtbl->SetHeadersStream(This,aHeadersStream)
#define nsIDocShellLoadInfo_GetSendReferrer(This,aSendReferrer) (This)->lpVtbl->GetSendReferrer(This,aSendReferrer)
#define nsIDocShellLoadInfo_SetSendReferrer(This,aSendReferrer) (This)->lpVtbl->SetSendReferrer(This,aSendReferrer)
#define nsIDocShellLoadInfo_GetReferrerPolicy(This,aReferrerPolicy) (This)->lpVtbl->GetReferrerPolicy(This,aReferrerPolicy)
#define nsIDocShellLoadInfo_SetReferrerPolicy(This,aReferrerPolicy) (This)->lpVtbl->SetReferrerPolicy(This,aReferrerPolicy)
#define nsIDocShellLoadInfo_GetIsSrcdocLoad(This,aIsSrcdocLoad) (This)->lpVtbl->GetIsSrcdocLoad(This,aIsSrcdocLoad)
#define nsIDocShellLoadInfo_GetSrcdocData(This,aSrcdocData) (This)->lpVtbl->GetSrcdocData(This,aSrcdocData)
#define nsIDocShellLoadInfo_SetSrcdocData(This,aSrcdocData) (This)->lpVtbl->SetSrcdocData(This,aSrcdocData)
#define nsIDocShellLoadInfo_GetSourceDocShell(This,aSourceDocShell) (This)->lpVtbl->GetSourceDocShell(This,aSourceDocShell)
#define nsIDocShellLoadInfo_SetSourceDocShell(This,aSourceDocShell) (This)->lpVtbl->SetSourceDocShell(This,aSourceDocShell)
#define nsIDocShellLoadInfo_GetBaseURI(This,aBaseURI) (This)->lpVtbl->GetBaseURI(This,aBaseURI)
#define nsIDocShellLoadInfo_SetBaseURI(This,aBaseURI) (This)->lpVtbl->SetBaseURI(This,aBaseURI)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDocShellLoadInfo_QueryInterface(nsIDocShellLoadInfo* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDocShellLoadInfo_AddRef(nsIDocShellLoadInfo* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDocShellLoadInfo_Release(nsIDocShellLoadInfo* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDocShellLoadInfo methods ***/
static FORCEINLINE nsresult nsIDocShellLoadInfo_GetReferrer(nsIDocShellLoadInfo* This,nsIURI **aReferrer) {
    return This->lpVtbl->GetReferrer(This,aReferrer);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_SetReferrer(nsIDocShellLoadInfo* This,nsIURI *aReferrer) {
    return This->lpVtbl->SetReferrer(This,aReferrer);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_GetOriginalURI(nsIDocShellLoadInfo* This,nsIURI **aOriginalURI) {
    return This->lpVtbl->GetOriginalURI(This,aOriginalURI);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_SetOriginalURI(nsIDocShellLoadInfo* This,nsIURI *aOriginalURI) {
    return This->lpVtbl->SetOriginalURI(This,aOriginalURI);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_GetLoadReplace(nsIDocShellLoadInfo* This,cpp_bool *aLoadReplace) {
    return This->lpVtbl->GetLoadReplace(This,aLoadReplace);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_SetLoadReplace(nsIDocShellLoadInfo* This,cpp_bool aLoadReplace) {
    return This->lpVtbl->SetLoadReplace(This,aLoadReplace);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_GetOwner(nsIDocShellLoadInfo* This,nsISupports **aOwner) {
    return This->lpVtbl->GetOwner(This,aOwner);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_SetOwner(nsIDocShellLoadInfo* This,nsISupports *aOwner) {
    return This->lpVtbl->SetOwner(This,aOwner);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_GetInheritOwner(nsIDocShellLoadInfo* This,cpp_bool *aInheritOwner) {
    return This->lpVtbl->GetInheritOwner(This,aInheritOwner);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_SetInheritOwner(nsIDocShellLoadInfo* This,cpp_bool aInheritOwner) {
    return This->lpVtbl->SetInheritOwner(This,aInheritOwner);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_GetOwnerIsExplicit(nsIDocShellLoadInfo* This,cpp_bool *aOwnerIsExplicit) {
    return This->lpVtbl->GetOwnerIsExplicit(This,aOwnerIsExplicit);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_SetOwnerIsExplicit(nsIDocShellLoadInfo* This,cpp_bool aOwnerIsExplicit) {
    return This->lpVtbl->SetOwnerIsExplicit(This,aOwnerIsExplicit);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_GetLoadType(nsIDocShellLoadInfo* This,nsDocShellInfoLoadType *aLoadType) {
    return This->lpVtbl->GetLoadType(This,aLoadType);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_SetLoadType(nsIDocShellLoadInfo* This,nsDocShellInfoLoadType aLoadType) {
    return This->lpVtbl->SetLoadType(This,aLoadType);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_GetSHEntry(nsIDocShellLoadInfo* This,nsISHEntry **aSHEntry) {
    return This->lpVtbl->GetSHEntry(This,aSHEntry);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_SetSHEntry(nsIDocShellLoadInfo* This,nsISHEntry *aSHEntry) {
    return This->lpVtbl->SetSHEntry(This,aSHEntry);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_GetTarget(nsIDocShellLoadInfo* This,PRUnichar **aTarget) {
    return This->lpVtbl->GetTarget(This,aTarget);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_SetTarget(nsIDocShellLoadInfo* This,const PRUnichar *aTarget) {
    return This->lpVtbl->SetTarget(This,aTarget);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_GetPostDataStream(nsIDocShellLoadInfo* This,nsIInputStream **aPostDataStream) {
    return This->lpVtbl->GetPostDataStream(This,aPostDataStream);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_SetPostDataStream(nsIDocShellLoadInfo* This,nsIInputStream *aPostDataStream) {
    return This->lpVtbl->SetPostDataStream(This,aPostDataStream);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_GetHeadersStream(nsIDocShellLoadInfo* This,nsIInputStream **aHeadersStream) {
    return This->lpVtbl->GetHeadersStream(This,aHeadersStream);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_SetHeadersStream(nsIDocShellLoadInfo* This,nsIInputStream *aHeadersStream) {
    return This->lpVtbl->SetHeadersStream(This,aHeadersStream);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_GetSendReferrer(nsIDocShellLoadInfo* This,cpp_bool *aSendReferrer) {
    return This->lpVtbl->GetSendReferrer(This,aSendReferrer);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_SetSendReferrer(nsIDocShellLoadInfo* This,cpp_bool aSendReferrer) {
    return This->lpVtbl->SetSendReferrer(This,aSendReferrer);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_GetReferrerPolicy(nsIDocShellLoadInfo* This,nsDocShellInfoReferrerPolicy *aReferrerPolicy) {
    return This->lpVtbl->GetReferrerPolicy(This,aReferrerPolicy);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_SetReferrerPolicy(nsIDocShellLoadInfo* This,nsDocShellInfoReferrerPolicy aReferrerPolicy) {
    return This->lpVtbl->SetReferrerPolicy(This,aReferrerPolicy);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_GetIsSrcdocLoad(nsIDocShellLoadInfo* This,cpp_bool *aIsSrcdocLoad) {
    return This->lpVtbl->GetIsSrcdocLoad(This,aIsSrcdocLoad);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_GetSrcdocData(nsIDocShellLoadInfo* This,nsAString *aSrcdocData) {
    return This->lpVtbl->GetSrcdocData(This,aSrcdocData);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_SetSrcdocData(nsIDocShellLoadInfo* This,const nsAString *aSrcdocData) {
    return This->lpVtbl->SetSrcdocData(This,aSrcdocData);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_GetSourceDocShell(nsIDocShellLoadInfo* This,nsIDocShell **aSourceDocShell) {
    return This->lpVtbl->GetSourceDocShell(This,aSourceDocShell);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_SetSourceDocShell(nsIDocShellLoadInfo* This,nsIDocShell *aSourceDocShell) {
    return This->lpVtbl->SetSourceDocShell(This,aSourceDocShell);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_GetBaseURI(nsIDocShellLoadInfo* This,nsIURI **aBaseURI) {
    return This->lpVtbl->GetBaseURI(This,aBaseURI);
}
static FORCEINLINE nsresult nsIDocShellLoadInfo_SetBaseURI(nsIDocShellLoadInfo* This,nsIURI *aBaseURI) {
    return This->lpVtbl->SetBaseURI(This,aBaseURI);
}
#endif
#endif

#endif


#endif  /* __nsIDocShellLoadInfo_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDocShell interface
 */
#ifndef __nsIDocShell_INTERFACE_DEFINED__
#define __nsIDocShell_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIDocShell, 0x049234fe, 0xda10, 0x478b, 0xbc,0x5d, 0xbc,0x6f,0x9a,0x1b,0xa6,0x3d);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("049234fe-da10-478b-bc5d-bc6f9a1ba63d")
nsIDocShell : public nsIDocShellTreeItem
{
    virtual nsresult STDMETHODCALLTYPE LoadURI(
        nsIURI *uri,
        nsIDocShellLoadInfo *loadInfo,
        UINT32 aLoadFlags,
        cpp_bool firstParty) = 0;

    virtual nsresult STDMETHODCALLTYPE LoadStream(
        nsIInputStream *aStream,
        nsIURI *aURI,
        const nsACString *aContentType,
        const nsACString *aContentCharset,
        nsIDocShellLoadInfo *aLoadInfo) = 0;

    virtual nsresult STDMETHODCALLTYPE InternalLoad(
        nsIURI *aURI,
        nsIURI *aOriginalURI,
        cpp_bool aLoadReplace,
        nsIURI *aReferrer,
        UINT32 aReferrerPolicy,
        nsISupports *aOwner,
        UINT32 aFlags,
        const PRUnichar *aWindowTarget,
        const char *aTypeHint,
        nsACString *aFileName,
        nsIInputStream *aPostDataStream,
        nsIInputStream *aHeadersStream,
        UINT32 aLoadFlags,
        nsISHEntry *aSHEntry,
        cpp_bool firstParty,
        const nsAString *aSrcdoc,
        nsIDocShell *aSourceDocShell,
        nsIURI *aBaseURI,
        nsIDocShell **aDocShell,
        nsIRequest **aRequest) = 0;

    virtual nsresult STDMETHODCALLTYPE AddState(
        jsval *aData,
        const nsAString *aTitle,
        const nsAString *aURL,
        cpp_bool aReplace,
        JSContext *cx) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateLoadInfo(
        nsIDocShellLoadInfo **loadInfo) = 0;

    virtual nsresult STDMETHODCALLTYPE PrepareForNewContentModel(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCurrentURI(
        nsIURI *aURI) = 0;

    virtual nsresult STDMETHODCALLTYPE FirePageHideNotification(
        cpp_bool isUnload) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPresContext(
        void **aPresContext) = 0;

    virtual nsIPresShell * STDMETHODCALLTYPE GetPresShell(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetEldestPresShell(
        nsIPresShell **aEldestPresShell) = 0;

    virtual nsresult STDMETHODCALLTYPE GetContentViewer(
        nsIContentViewer **aContentViewer) = 0;

    virtual nsresult STDMETHODCALLTYPE GetChromeEventHandler(
        nsIDOMEventTarget **aChromeEventHandler) = 0;

    virtual nsresult STDMETHODCALLTYPE SetChromeEventHandler(
        nsIDOMEventTarget *aChromeEventHandler) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCustomUserAgent(
        nsAString *aCustomUserAgent) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCustomUserAgent(
        const nsAString *aCustomUserAgent) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAllowPlugins(
        cpp_bool *aAllowPlugins) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAllowPlugins(
        cpp_bool aAllowPlugins) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAllowJavascript(
        cpp_bool *aAllowJavascript) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAllowJavascript(
        cpp_bool aAllowJavascript) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDisableNoScript(
        cpp_bool *aDisableNoScript) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDisableNoScript(
        cpp_bool aDisableNoScript) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAllowMetaRedirects(
        cpp_bool *aAllowMetaRedirects) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAllowMetaRedirects(
        cpp_bool aAllowMetaRedirects) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAllowSubframes(
        cpp_bool *aAllowSubframes) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAllowSubframes(
        cpp_bool aAllowSubframes) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAllowImages(
        cpp_bool *aAllowImages) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAllowImages(
        cpp_bool aAllowImages) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAllowMedia(
        cpp_bool *aAllowMedia) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAllowMedia(
        cpp_bool aAllowMedia) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAllowDNSPrefetch(
        cpp_bool *aAllowDNSPrefetch) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAllowDNSPrefetch(
        cpp_bool aAllowDNSPrefetch) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAllowWindowControl(
        cpp_bool *aAllowWindowControl) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAllowWindowControl(
        cpp_bool aAllowWindowControl) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAllowContentRetargeting(
        cpp_bool *aAllowContentRetargeting) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAllowContentRetargeting(
        cpp_bool aAllowContentRetargeting) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAllowContentRetargetingOnChildren(
        cpp_bool *aAllowContentRetargetingOnChildren) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAllowContentRetargetingOnChildren(
        cpp_bool aAllowContentRetargetingOnChildren) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDocShellEnumerator(
        LONG aItemType,
        LONG aDirection,
        nsISimpleEnumerator **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAppType(
        UINT32 *aAppType) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAppType(
        UINT32 aAppType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAllowAuth(
        cpp_bool *aAllowAuth) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAllowAuth(
        cpp_bool aAllowAuth) = 0;

    virtual nsresult STDMETHODCALLTYPE GetZoom(
        float *aZoom) = 0;

    virtual nsresult STDMETHODCALLTYPE SetZoom(
        float aZoom) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMarginWidth(
        LONG *aMarginWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMarginWidth(
        LONG aMarginWidth) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMarginHeight(
        LONG *aMarginHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMarginHeight(
        LONG aMarginHeight) = 0;

    virtual nsresult STDMETHODCALLTYPE TabToTreeOwner(
        cpp_bool forward,
        cpp_bool forDocumentNavigation,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetBusyFlags(
        UINT32 *aBusyFlags) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLoadType(
        UINT32 *aLoadType) = 0;

    virtual nsresult STDMETHODCALLTYPE SetLoadType(
        UINT32 aLoadType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDefaultLoadFlags(
        nsLoadFlags *aDefaultLoadFlags) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDefaultLoadFlags(
        nsLoadFlags aDefaultLoadFlags) = 0;

    virtual nsresult STDMETHODCALLTYPE IsBeingDestroyed(
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsExecutingOnLoadHandler(
        cpp_bool *aIsExecutingOnLoadHandler) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLayoutHistoryState(
        nsILayoutHistoryState **aLayoutHistoryState) = 0;

    virtual nsresult STDMETHODCALLTYPE SetLayoutHistoryState(
        nsILayoutHistoryState *aLayoutHistoryState) = 0;

    virtual nsresult STDMETHODCALLTYPE GetShouldSaveLayoutState(
        cpp_bool *aShouldSaveLayoutState) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSecurityUI(
        nsISecureBrowserUI **aSecurityUI) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSecurityUI(
        nsISecureBrowserUI *aSecurityUI) = 0;

    virtual nsresult STDMETHODCALLTYPE SuspendRefreshURIs(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE ResumeRefreshURIs(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE BeginRestore(
        nsIContentViewer *viewer,
        cpp_bool top) = 0;

    virtual nsresult STDMETHODCALLTYPE FinishRestore(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRestoringDocument(
        cpp_bool *aRestoringDocument) = 0;

    virtual nsresult STDMETHODCALLTYPE GetUseErrorPages(
        cpp_bool *aUseErrorPages) = 0;

    virtual nsresult STDMETHODCALLTYPE SetUseErrorPages(
        cpp_bool aUseErrorPages) = 0;

    virtual nsresult STDMETHODCALLTYPE DisplayLoadError(
        nsresult aError,
        nsIURI *aURI,
        const PRUnichar *aURL,
        nsIChannel *aFailedChannel,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFailedChannel(
        nsIChannel **aFailedChannel) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPreviousTransIndex(
        LONG *aPreviousTransIndex) = 0;

    virtual nsresult STDMETHODCALLTYPE GetLoadedTransIndex(
        LONG *aLoadedTransIndex) = 0;

    virtual nsresult STDMETHODCALLTYPE HistoryPurged(
        LONG numEntries) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSessionStorageForPrincipal(
        nsIPrincipal *principal,
        const nsAString *documentURI,
        cpp_bool create,
        nsIDOMStorage **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE AddSessionStorage(
        nsIPrincipal *principal,
        nsIDOMStorage *storage) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCurrentDocumentChannel(
        nsIChannel **aCurrentDocumentChannel) = 0;

    virtual nsresult STDMETHODCALLTYPE SetChildOffset(
        UINT32 offset) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsInUnload(
        cpp_bool *aIsInUnload) = 0;

    virtual nsresult STDMETHODCALLTYPE GetChannelIsUnsafe(
        cpp_bool *aChannelIsUnsafe) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHasMixedActiveContentLoaded(
        cpp_bool *aHasMixedActiveContentLoaded) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHasMixedActiveContentBlocked(
        cpp_bool *aHasMixedActiveContentBlocked) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHasMixedDisplayContentLoaded(
        cpp_bool *aHasMixedDisplayContentLoaded) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHasMixedDisplayContentBlocked(
        cpp_bool *aHasMixedDisplayContentBlocked) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHasTrackingContentBlocked(
        cpp_bool *aHasTrackingContentBlocked) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHasTrackingContentLoaded(
        cpp_bool *aHasTrackingContentLoaded) = 0;

    virtual void STDMETHODCALLTYPE DetachEditorFromWindow(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsOffScreenBrowser(
        cpp_bool *aIsOffScreenBrowser) = 0;

    virtual nsresult STDMETHODCALLTYPE SetIsOffScreenBrowser(
        cpp_bool aIsOffScreenBrowser) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPrintPreview(
        nsIWebBrowserPrint **aPrintPreview) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCanExecuteScripts(
        cpp_bool *aCanExecuteScripts) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsActive(
        cpp_bool *aIsActive) = 0;

    virtual nsresult STDMETHODCALLTYPE SetIsActive(
        cpp_bool aIsActive) = 0;

    virtual nsresult STDMETHODCALLTYPE SetIsActiveAndForeground(
        cpp_bool aIsActive) = 0;

    virtual nsresult STDMETHODCALLTYPE SetIsPrerendered(
        cpp_bool prerendered) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsPrerendered(
        cpp_bool *aIsPrerendered) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHistoryID(
        UINT64 *aHistoryID) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsAppTab(
        cpp_bool *aIsAppTab) = 0;

    virtual nsresult STDMETHODCALLTYPE SetIsAppTab(
        cpp_bool aIsAppTab) = 0;

    virtual nsresult STDMETHODCALLTYPE CreateAboutBlankContentViewer(
        nsIPrincipal *aPrincipal) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCharset(
        nsACString *aCharset) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCharset(
        nsACString *aCharset) = 0;

    virtual nsresult STDMETHODCALLTYPE GatherCharsetMenuTelemetry(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetForcedCharset(
        nsIAtom **aForcedCharset) = 0;

    virtual nsresult STDMETHODCALLTYPE SetForcedCharset(
        nsIAtom *aForcedCharset) = 0;

    virtual void STDMETHODCALLTYPE SetParentCharset(
        const nsACString *parentCharset,
        LONG parentCharsetSource,
        nsIPrincipal *parentCharsetPrincipal) = 0;

    virtual void STDMETHODCALLTYPE GetParentCharset(
        nsACString *parentCharset,
        LONG *parentCharsetSource,
        nsIPrincipal **parentCharsetPrincipal) = 0;

    virtual nsresult STDMETHODCALLTYPE GetRecordProfileTimelineMarkers(
        cpp_bool *aRecordProfileTimelineMarkers) = 0;

    virtual nsresult STDMETHODCALLTYPE SetRecordProfileTimelineMarkers(
        cpp_bool aRecordProfileTimelineMarkers) = 0;

    virtual nsresult STDMETHODCALLTYPE Now(
        int *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE PopProfileTimelineMarkers(
        JSContext *cx,
        void *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE AddWeakPrivacyTransitionObserver(
        nsIPrivacyTransitionObserver *obs) = 0;

    virtual nsresult STDMETHODCALLTYPE AddWeakReflowObserver(
        nsISupports *obs) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveWeakReflowObserver(
        nsISupports *obs) = 0;

    virtual nsresult STDMETHODCALLTYPE NotifyReflowObservers(
        cpp_bool interruptible,
        int start,
        int end) = 0;

    virtual nsresult STDMETHODCALLTYPE AddWeakScrollObserver(
        void *obs) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveWeakScrollObserver(
        void *obs) = 0;

    virtual nsresult STDMETHODCALLTYPE NotifyScrollObservers(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsApp(
        cpp_bool *aIsApp) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFrameType(
        UINT32 *aFrameType) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFrameType(
        UINT32 aFrameType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsMozBrowserOrApp(
        cpp_bool *aIsMozBrowserOrApp) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsIsolatedMozBrowserElement(
        cpp_bool *aIsIsolatedMozBrowserElement) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsInIsolatedMozBrowserElement(
        cpp_bool *aIsInIsolatedMozBrowserElement) = 0;

    virtual nsresult STDMETHODCALLTYPE SetIsInIsolatedMozBrowserElement(
        cpp_bool aIsInIsolatedMozBrowserElement) = 0;

    virtual nsresult STDMETHODCALLTYPE GetIsInMozBrowserOrApp(
        cpp_bool *aIsInMozBrowserOrApp) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAppId(
        UINT32 *aAppId) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAppManifestURL(
        nsAString *aAppManifestURL) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSameTypeParentIgnoreBrowserAndAppBoundaries(
        nsIDocShell **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSameTypeRootTreeItemIgnoreBrowserAndAppBoundaries(
        nsIDocShell **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAsyncPanZoomEnabled(
        cpp_bool *aAsyncPanZoomEnabled) = 0;

    virtual nsresult STDMETHODCALLTYPE GetSandboxFlags(
        UINT32 *aSandboxFlags) = 0;

    virtual nsresult STDMETHODCALLTYPE SetSandboxFlags(
        UINT32 aSandboxFlags) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOnePermittedSandboxedNavigator(
        nsIDocShell **aOnePermittedSandboxedNavigator) = 0;

    virtual nsresult STDMETHODCALLTYPE SetOnePermittedSandboxedNavigator(
        nsIDocShell *aOnePermittedSandboxedNavigator) = 0;

    virtual cpp_bool STDMETHODCALLTYPE IsSandboxedFrom(
        nsIDocShell *aTargetDocShell) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMixedContentChannel(
        nsIChannel **aMixedContentChannel) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMixedContentChannel(
        nsIChannel *aMixedContentChannel) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAllowMixedContentAndConnectionData(
        cpp_bool *rootHasSecureConnection,
        cpp_bool *allowMixedContent,
        cpp_bool *isRootDocShell) = 0;

    virtual cpp_bool STDMETHODCALLTYPE PluginsAllowedInCurrentDoc(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetFullscreenAllowed(
        cpp_bool *aFullscreenAllowed) = 0;

    virtual nsresult STDMETHODCALLTYPE SetFullscreenAllowed(
        cpp_bool allowed) = 0;

    virtual UINT32 STDMETHODCALLTYPE OrientationLock(
        ) = 0;

    virtual void STDMETHODCALLTYPE SetOrientationLock(
        UINT32 orientationLock) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAffectPrivateSessionLifetime(
        cpp_bool *aAffectPrivateSessionLifetime) = 0;

    virtual nsresult STDMETHODCALLTYPE SetAffectPrivateSessionLifetime(
        cpp_bool aAffectPrivateSessionLifetime) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMayEnableCharacterEncodingMenu(
        cpp_bool *aMayEnableCharacterEncodingMenu) = 0;

    virtual nsresult STDMETHODCALLTYPE GetEditor(
        nsIEditor **aEditor) = 0;

    virtual nsresult STDMETHODCALLTYPE SetEditor(
        nsIEditor *aEditor) = 0;

    virtual nsresult STDMETHODCALLTYPE GetEditable(
        cpp_bool *aEditable) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHasEditingSession(
        cpp_bool *aHasEditingSession) = 0;

    virtual nsresult STDMETHODCALLTYPE MakeEditable(
        cpp_bool inWaitForUriLoad) = 0;

    virtual nsresult STDMETHODCALLTYPE GetChildSHEntry(
        LONG aChildOffset,
        nsISHEntry **_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE AddChildSHEntry(
        nsISHEntry *aCloneReference,
        nsISHEntry *aHistoryEntry,
        LONG aChildOffset,
        UINT32 aLoadType,
        cpp_bool aCloneChildren) = 0;

    virtual nsresult STDMETHODCALLTYPE GetUseGlobalHistory(
        cpp_bool *aUseGlobalHistory) = 0;

    virtual nsresult STDMETHODCALLTYPE SetUseGlobalHistory(
        cpp_bool aUseGlobalHistory) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveFromSessionHistory(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCreatedDynamically(
        cpp_bool *aCreatedDynamically) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCreatedDynamically(
        cpp_bool aCreatedDynamically) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCurrentSHEntry(
        nsISHEntry **aEntry,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE IsCommandEnabled(
        const char *command,
        cpp_bool *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE DoCommand(
        const char *command) = 0;

    virtual cpp_bool STDMETHODCALLTYPE IsInvisible(
        ) = 0;

    virtual void STDMETHODCALLTYPE SetInvisible(
        cpp_bool aIsInvisibleDochsell) = 0;

    virtual void * STDMETHODCALLTYPE GetScriptGlobalObject(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDeviceSizeIsPageSize(
        cpp_bool *aDeviceSizeIsPageSize) = 0;

    virtual nsresult STDMETHODCALLTYPE SetDeviceSizeIsPageSize(
        cpp_bool aDeviceSizeIsPageSize) = 0;

    virtual void STDMETHODCALLTYPE SetOpener(
        void *aOpener) = 0;

    virtual void * STDMETHODCALLTYPE GetOpener(
        ) = 0;

    virtual void STDMETHODCALLTYPE NotifyJSRunToCompletionStart(
        const char *aReason,
        const PRUnichar *functionName,
        const PRUnichar *fileName,
        UINT32 lineNumber) = 0;

    virtual void STDMETHODCALLTYPE NotifyJSRunToCompletionStop(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetHasLoadedNonBlankURI(
        cpp_bool *aHasLoadedNonBlankURI) = 0;

    virtual nsresult STDMETHODCALLTYPE GetPaymentRequestId(
        nsAString *aPaymentRequestId) = 0;

    virtual nsresult STDMETHODCALLTYPE SetPaymentRequestId(
        const nsAString *aPaymentRequestId) = 0;

    virtual nsresult STDMETHODCALLTYPE GetWindowDraggingAllowed(
        cpp_bool *aWindowDraggingAllowed) = 0;

    virtual nsresult STDMETHODCALLTYPE SetWindowDraggingAllowed(
        cpp_bool aWindowDraggingAllowed) = 0;

    virtual nsresult STDMETHODCALLTYPE GetCurrentScrollRestorationIsManual(
        cpp_bool *aCurrentScrollRestorationIsManual) = 0;

    virtual nsresult STDMETHODCALLTYPE SetCurrentScrollRestorationIsManual(
        cpp_bool aCurrentScrollRestorationIsManual) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOriginAttributes(
        JSContext *cx,
        void *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE SetOriginAttributes(
        int aAttrs,
        JSContext *cx) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDocShell, 0x049234fe, 0xda10, 0x478b, 0xbc,0x5d, 0xbc,0x6f,0x9a,0x1b,0xa6,0x3d)
#endif
#else
typedef struct nsIDocShellVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDocShell *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDocShell *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDocShell *This);

    /*** nsIDocShellTreeItem methods ***/
    nsresult (STDMETHODCALLTYPE *GetName)(
        nsIDocShell *This,
        nsAString *aName);

    nsresult (STDMETHODCALLTYPE *SetName)(
        nsIDocShell *This,
        const nsAString *aName);

    nsresult (STDMETHODCALLTYPE *NameEquals)(
        nsIDocShell *This,
        const PRUnichar *name,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetItemType)(
        nsIDocShell *This,
        LONG *aItemType);

    nsresult (STDMETHODCALLTYPE *SetItemType)(
        nsIDocShell *This,
        LONG aItemType);

    LONG (STDMETHODCALLTYPE *ItemType)(
        nsIDocShell *This);

    nsresult (STDMETHODCALLTYPE *GetParent)(
        nsIDocShell *This,
        nsIDocShellTreeItem **aParent);

    nsresult (STDMETHODCALLTYPE *GetSameTypeParent)(
        nsIDocShell *This,
        nsIDocShellTreeItem **aSameTypeParent);

    nsresult (STDMETHODCALLTYPE *GetRootTreeItem)(
        nsIDocShell *This,
        nsIDocShellTreeItem **aRootTreeItem);

    nsresult (STDMETHODCALLTYPE *GetSameTypeRootTreeItem)(
        nsIDocShell *This,
        nsIDocShellTreeItem **aSameTypeRootTreeItem);

    nsresult (STDMETHODCALLTYPE *FindItemWithName)(
        nsIDocShell *This,
        const PRUnichar *name,
        nsISupports *aRequestor,
        nsIDocShellTreeItem *aOriginalRequestor,
        nsIDocShellTreeItem **_retval);

    nsresult (STDMETHODCALLTYPE *GetTreeOwner)(
        nsIDocShell *This,
        nsIDocShellTreeOwner **aTreeOwner);

    nsresult (STDMETHODCALLTYPE *SetTreeOwner)(
        nsIDocShell *This,
        nsIDocShellTreeOwner *treeOwner);

    nsresult (STDMETHODCALLTYPE *GetChildCount)(
        nsIDocShell *This,
        LONG *aChildCount);

    nsresult (STDMETHODCALLTYPE *AddChild)(
        nsIDocShell *This,
        nsIDocShellTreeItem *child);

    nsresult (STDMETHODCALLTYPE *RemoveChild)(
        nsIDocShell *This,
        nsIDocShellTreeItem *child);

    nsresult (STDMETHODCALLTYPE *GetChildAt)(
        nsIDocShell *This,
        LONG index,
        nsIDocShellTreeItem **_retval);

    nsresult (STDMETHODCALLTYPE *FindChildWithName)(
        nsIDocShell *This,
        const PRUnichar *aName,
        cpp_bool aRecurse,
        cpp_bool aSameType,
        nsIDocShellTreeItem *aRequestor,
        nsIDocShellTreeItem *aOriginalRequestor,
        nsIDocShellTreeItem **_retval);

    nsIDocument * (STDMETHODCALLTYPE *GetDocument)(
        nsIDocShell *This);

    void * (STDMETHODCALLTYPE *GetWindow)(
        nsIDocShell *This);

    /*** nsIDocShell methods ***/
    nsresult (STDMETHODCALLTYPE *LoadURI)(
        nsIDocShell *This,
        nsIURI *uri,
        nsIDocShellLoadInfo *loadInfo,
        UINT32 aLoadFlags,
        cpp_bool firstParty);

    nsresult (STDMETHODCALLTYPE *LoadStream)(
        nsIDocShell *This,
        nsIInputStream *aStream,
        nsIURI *aURI,
        const nsACString *aContentType,
        const nsACString *aContentCharset,
        nsIDocShellLoadInfo *aLoadInfo);

    nsresult (STDMETHODCALLTYPE *InternalLoad)(
        nsIDocShell *This,
        nsIURI *aURI,
        nsIURI *aOriginalURI,
        cpp_bool aLoadReplace,
        nsIURI *aReferrer,
        UINT32 aReferrerPolicy,
        nsISupports *aOwner,
        UINT32 aFlags,
        const PRUnichar *aWindowTarget,
        const char *aTypeHint,
        nsACString *aFileName,
        nsIInputStream *aPostDataStream,
        nsIInputStream *aHeadersStream,
        UINT32 aLoadFlags,
        nsISHEntry *aSHEntry,
        cpp_bool firstParty,
        const nsAString *aSrcdoc,
        nsIDocShell *aSourceDocShell,
        nsIURI *aBaseURI,
        nsIDocShell **aDocShell,
        nsIRequest **aRequest);

    nsresult (STDMETHODCALLTYPE *AddState)(
        nsIDocShell *This,
        jsval *aData,
        const nsAString *aTitle,
        const nsAString *aURL,
        cpp_bool aReplace,
        JSContext *cx);

    nsresult (STDMETHODCALLTYPE *CreateLoadInfo)(
        nsIDocShell *This,
        nsIDocShellLoadInfo **loadInfo);

    nsresult (STDMETHODCALLTYPE *PrepareForNewContentModel)(
        nsIDocShell *This);

    nsresult (STDMETHODCALLTYPE *SetCurrentURI)(
        nsIDocShell *This,
        nsIURI *aURI);

    nsresult (STDMETHODCALLTYPE *FirePageHideNotification)(
        nsIDocShell *This,
        cpp_bool isUnload);

    nsresult (STDMETHODCALLTYPE *GetPresContext)(
        nsIDocShell *This,
        void **aPresContext);

    nsIPresShell * (STDMETHODCALLTYPE *GetPresShell)(
        nsIDocShell *This);

    nsresult (STDMETHODCALLTYPE *GetEldestPresShell)(
        nsIDocShell *This,
        nsIPresShell **aEldestPresShell);

    nsresult (STDMETHODCALLTYPE *GetContentViewer)(
        nsIDocShell *This,
        nsIContentViewer **aContentViewer);

    nsresult (STDMETHODCALLTYPE *GetChromeEventHandler)(
        nsIDocShell *This,
        nsIDOMEventTarget **aChromeEventHandler);

    nsresult (STDMETHODCALLTYPE *SetChromeEventHandler)(
        nsIDocShell *This,
        nsIDOMEventTarget *aChromeEventHandler);

    nsresult (STDMETHODCALLTYPE *GetCustomUserAgent)(
        nsIDocShell *This,
        nsAString *aCustomUserAgent);

    nsresult (STDMETHODCALLTYPE *SetCustomUserAgent)(
        nsIDocShell *This,
        const nsAString *aCustomUserAgent);

    nsresult (STDMETHODCALLTYPE *GetAllowPlugins)(
        nsIDocShell *This,
        cpp_bool *aAllowPlugins);

    nsresult (STDMETHODCALLTYPE *SetAllowPlugins)(
        nsIDocShell *This,
        cpp_bool aAllowPlugins);

    nsresult (STDMETHODCALLTYPE *GetAllowJavascript)(
        nsIDocShell *This,
        cpp_bool *aAllowJavascript);

    nsresult (STDMETHODCALLTYPE *SetAllowJavascript)(
        nsIDocShell *This,
        cpp_bool aAllowJavascript);

    nsresult (STDMETHODCALLTYPE *GetDisableNoScript)(
        nsIDocShell *This,
        cpp_bool *aDisableNoScript);

    nsresult (STDMETHODCALLTYPE *SetDisableNoScript)(
        nsIDocShell *This,
        cpp_bool aDisableNoScript);

    nsresult (STDMETHODCALLTYPE *GetAllowMetaRedirects)(
        nsIDocShell *This,
        cpp_bool *aAllowMetaRedirects);

    nsresult (STDMETHODCALLTYPE *SetAllowMetaRedirects)(
        nsIDocShell *This,
        cpp_bool aAllowMetaRedirects);

    nsresult (STDMETHODCALLTYPE *GetAllowSubframes)(
        nsIDocShell *This,
        cpp_bool *aAllowSubframes);

    nsresult (STDMETHODCALLTYPE *SetAllowSubframes)(
        nsIDocShell *This,
        cpp_bool aAllowSubframes);

    nsresult (STDMETHODCALLTYPE *GetAllowImages)(
        nsIDocShell *This,
        cpp_bool *aAllowImages);

    nsresult (STDMETHODCALLTYPE *SetAllowImages)(
        nsIDocShell *This,
        cpp_bool aAllowImages);

    nsresult (STDMETHODCALLTYPE *GetAllowMedia)(
        nsIDocShell *This,
        cpp_bool *aAllowMedia);

    nsresult (STDMETHODCALLTYPE *SetAllowMedia)(
        nsIDocShell *This,
        cpp_bool aAllowMedia);

    nsresult (STDMETHODCALLTYPE *GetAllowDNSPrefetch)(
        nsIDocShell *This,
        cpp_bool *aAllowDNSPrefetch);

    nsresult (STDMETHODCALLTYPE *SetAllowDNSPrefetch)(
        nsIDocShell *This,
        cpp_bool aAllowDNSPrefetch);

    nsresult (STDMETHODCALLTYPE *GetAllowWindowControl)(
        nsIDocShell *This,
        cpp_bool *aAllowWindowControl);

    nsresult (STDMETHODCALLTYPE *SetAllowWindowControl)(
        nsIDocShell *This,
        cpp_bool aAllowWindowControl);

    nsresult (STDMETHODCALLTYPE *GetAllowContentRetargeting)(
        nsIDocShell *This,
        cpp_bool *aAllowContentRetargeting);

    nsresult (STDMETHODCALLTYPE *SetAllowContentRetargeting)(
        nsIDocShell *This,
        cpp_bool aAllowContentRetargeting);

    nsresult (STDMETHODCALLTYPE *GetAllowContentRetargetingOnChildren)(
        nsIDocShell *This,
        cpp_bool *aAllowContentRetargetingOnChildren);

    nsresult (STDMETHODCALLTYPE *SetAllowContentRetargetingOnChildren)(
        nsIDocShell *This,
        cpp_bool aAllowContentRetargetingOnChildren);

    nsresult (STDMETHODCALLTYPE *GetDocShellEnumerator)(
        nsIDocShell *This,
        LONG aItemType,
        LONG aDirection,
        nsISimpleEnumerator **_retval);

    nsresult (STDMETHODCALLTYPE *GetAppType)(
        nsIDocShell *This,
        UINT32 *aAppType);

    nsresult (STDMETHODCALLTYPE *SetAppType)(
        nsIDocShell *This,
        UINT32 aAppType);

    nsresult (STDMETHODCALLTYPE *GetAllowAuth)(
        nsIDocShell *This,
        cpp_bool *aAllowAuth);

    nsresult (STDMETHODCALLTYPE *SetAllowAuth)(
        nsIDocShell *This,
        cpp_bool aAllowAuth);

    nsresult (STDMETHODCALLTYPE *GetZoom)(
        nsIDocShell *This,
        float *aZoom);

    nsresult (STDMETHODCALLTYPE *SetZoom)(
        nsIDocShell *This,
        float aZoom);

    nsresult (STDMETHODCALLTYPE *GetMarginWidth)(
        nsIDocShell *This,
        LONG *aMarginWidth);

    nsresult (STDMETHODCALLTYPE *SetMarginWidth)(
        nsIDocShell *This,
        LONG aMarginWidth);

    nsresult (STDMETHODCALLTYPE *GetMarginHeight)(
        nsIDocShell *This,
        LONG *aMarginHeight);

    nsresult (STDMETHODCALLTYPE *SetMarginHeight)(
        nsIDocShell *This,
        LONG aMarginHeight);

    nsresult (STDMETHODCALLTYPE *TabToTreeOwner)(
        nsIDocShell *This,
        cpp_bool forward,
        cpp_bool forDocumentNavigation,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetBusyFlags)(
        nsIDocShell *This,
        UINT32 *aBusyFlags);

    nsresult (STDMETHODCALLTYPE *GetLoadType)(
        nsIDocShell *This,
        UINT32 *aLoadType);

    nsresult (STDMETHODCALLTYPE *SetLoadType)(
        nsIDocShell *This,
        UINT32 aLoadType);

    nsresult (STDMETHODCALLTYPE *GetDefaultLoadFlags)(
        nsIDocShell *This,
        nsLoadFlags *aDefaultLoadFlags);

    nsresult (STDMETHODCALLTYPE *SetDefaultLoadFlags)(
        nsIDocShell *This,
        nsLoadFlags aDefaultLoadFlags);

    nsresult (STDMETHODCALLTYPE *IsBeingDestroyed)(
        nsIDocShell *This,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetIsExecutingOnLoadHandler)(
        nsIDocShell *This,
        cpp_bool *aIsExecutingOnLoadHandler);

    nsresult (STDMETHODCALLTYPE *GetLayoutHistoryState)(
        nsIDocShell *This,
        nsILayoutHistoryState **aLayoutHistoryState);

    nsresult (STDMETHODCALLTYPE *SetLayoutHistoryState)(
        nsIDocShell *This,
        nsILayoutHistoryState *aLayoutHistoryState);

    nsresult (STDMETHODCALLTYPE *GetShouldSaveLayoutState)(
        nsIDocShell *This,
        cpp_bool *aShouldSaveLayoutState);

    nsresult (STDMETHODCALLTYPE *GetSecurityUI)(
        nsIDocShell *This,
        nsISecureBrowserUI **aSecurityUI);

    nsresult (STDMETHODCALLTYPE *SetSecurityUI)(
        nsIDocShell *This,
        nsISecureBrowserUI *aSecurityUI);

    nsresult (STDMETHODCALLTYPE *SuspendRefreshURIs)(
        nsIDocShell *This);

    nsresult (STDMETHODCALLTYPE *ResumeRefreshURIs)(
        nsIDocShell *This);

    nsresult (STDMETHODCALLTYPE *BeginRestore)(
        nsIDocShell *This,
        nsIContentViewer *viewer,
        cpp_bool top);

    nsresult (STDMETHODCALLTYPE *FinishRestore)(
        nsIDocShell *This);

    nsresult (STDMETHODCALLTYPE *GetRestoringDocument)(
        nsIDocShell *This,
        cpp_bool *aRestoringDocument);

    nsresult (STDMETHODCALLTYPE *GetUseErrorPages)(
        nsIDocShell *This,
        cpp_bool *aUseErrorPages);

    nsresult (STDMETHODCALLTYPE *SetUseErrorPages)(
        nsIDocShell *This,
        cpp_bool aUseErrorPages);

    nsresult (STDMETHODCALLTYPE *DisplayLoadError)(
        nsIDocShell *This,
        nsresult aError,
        nsIURI *aURI,
        const PRUnichar *aURL,
        nsIChannel *aFailedChannel,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *GetFailedChannel)(
        nsIDocShell *This,
        nsIChannel **aFailedChannel);

    nsresult (STDMETHODCALLTYPE *GetPreviousTransIndex)(
        nsIDocShell *This,
        LONG *aPreviousTransIndex);

    nsresult (STDMETHODCALLTYPE *GetLoadedTransIndex)(
        nsIDocShell *This,
        LONG *aLoadedTransIndex);

    nsresult (STDMETHODCALLTYPE *HistoryPurged)(
        nsIDocShell *This,
        LONG numEntries);

    nsresult (STDMETHODCALLTYPE *GetSessionStorageForPrincipal)(
        nsIDocShell *This,
        nsIPrincipal *principal,
        const nsAString *documentURI,
        cpp_bool create,
        nsIDOMStorage **_retval);

    nsresult (STDMETHODCALLTYPE *AddSessionStorage)(
        nsIDocShell *This,
        nsIPrincipal *principal,
        nsIDOMStorage *storage);

    nsresult (STDMETHODCALLTYPE *GetCurrentDocumentChannel)(
        nsIDocShell *This,
        nsIChannel **aCurrentDocumentChannel);

    nsresult (STDMETHODCALLTYPE *SetChildOffset)(
        nsIDocShell *This,
        UINT32 offset);

    nsresult (STDMETHODCALLTYPE *GetIsInUnload)(
        nsIDocShell *This,
        cpp_bool *aIsInUnload);

    nsresult (STDMETHODCALLTYPE *GetChannelIsUnsafe)(
        nsIDocShell *This,
        cpp_bool *aChannelIsUnsafe);

    nsresult (STDMETHODCALLTYPE *GetHasMixedActiveContentLoaded)(
        nsIDocShell *This,
        cpp_bool *aHasMixedActiveContentLoaded);

    nsresult (STDMETHODCALLTYPE *GetHasMixedActiveContentBlocked)(
        nsIDocShell *This,
        cpp_bool *aHasMixedActiveContentBlocked);

    nsresult (STDMETHODCALLTYPE *GetHasMixedDisplayContentLoaded)(
        nsIDocShell *This,
        cpp_bool *aHasMixedDisplayContentLoaded);

    nsresult (STDMETHODCALLTYPE *GetHasMixedDisplayContentBlocked)(
        nsIDocShell *This,
        cpp_bool *aHasMixedDisplayContentBlocked);

    nsresult (STDMETHODCALLTYPE *GetHasTrackingContentBlocked)(
        nsIDocShell *This,
        cpp_bool *aHasTrackingContentBlocked);

    nsresult (STDMETHODCALLTYPE *GetHasTrackingContentLoaded)(
        nsIDocShell *This,
        cpp_bool *aHasTrackingContentLoaded);

    void (STDMETHODCALLTYPE *DetachEditorFromWindow)(
        nsIDocShell *This);

    nsresult (STDMETHODCALLTYPE *GetIsOffScreenBrowser)(
        nsIDocShell *This,
        cpp_bool *aIsOffScreenBrowser);

    nsresult (STDMETHODCALLTYPE *SetIsOffScreenBrowser)(
        nsIDocShell *This,
        cpp_bool aIsOffScreenBrowser);

    nsresult (STDMETHODCALLTYPE *GetPrintPreview)(
        nsIDocShell *This,
        nsIWebBrowserPrint **aPrintPreview);

    nsresult (STDMETHODCALLTYPE *GetCanExecuteScripts)(
        nsIDocShell *This,
        cpp_bool *aCanExecuteScripts);

    nsresult (STDMETHODCALLTYPE *GetIsActive)(
        nsIDocShell *This,
        cpp_bool *aIsActive);

    nsresult (STDMETHODCALLTYPE *SetIsActive)(
        nsIDocShell *This,
        cpp_bool aIsActive);

    nsresult (STDMETHODCALLTYPE *SetIsActiveAndForeground)(
        nsIDocShell *This,
        cpp_bool aIsActive);

    nsresult (STDMETHODCALLTYPE *SetIsPrerendered)(
        nsIDocShell *This,
        cpp_bool prerendered);

    nsresult (STDMETHODCALLTYPE *GetIsPrerendered)(
        nsIDocShell *This,
        cpp_bool *aIsPrerendered);

    nsresult (STDMETHODCALLTYPE *GetHistoryID)(
        nsIDocShell *This,
        UINT64 *aHistoryID);

    nsresult (STDMETHODCALLTYPE *GetIsAppTab)(
        nsIDocShell *This,
        cpp_bool *aIsAppTab);

    nsresult (STDMETHODCALLTYPE *SetIsAppTab)(
        nsIDocShell *This,
        cpp_bool aIsAppTab);

    nsresult (STDMETHODCALLTYPE *CreateAboutBlankContentViewer)(
        nsIDocShell *This,
        nsIPrincipal *aPrincipal);

    nsresult (STDMETHODCALLTYPE *GetCharset)(
        nsIDocShell *This,
        nsACString *aCharset);

    nsresult (STDMETHODCALLTYPE *SetCharset)(
        nsIDocShell *This,
        nsACString *aCharset);

    nsresult (STDMETHODCALLTYPE *GatherCharsetMenuTelemetry)(
        nsIDocShell *This);

    nsresult (STDMETHODCALLTYPE *GetForcedCharset)(
        nsIDocShell *This,
        nsIAtom **aForcedCharset);

    nsresult (STDMETHODCALLTYPE *SetForcedCharset)(
        nsIDocShell *This,
        nsIAtom *aForcedCharset);

    void (STDMETHODCALLTYPE *SetParentCharset)(
        nsIDocShell *This,
        const nsACString *parentCharset,
        LONG parentCharsetSource,
        nsIPrincipal *parentCharsetPrincipal);

    void (STDMETHODCALLTYPE *GetParentCharset)(
        nsIDocShell *This,
        nsACString *parentCharset,
        LONG *parentCharsetSource,
        nsIPrincipal **parentCharsetPrincipal);

    nsresult (STDMETHODCALLTYPE *GetRecordProfileTimelineMarkers)(
        nsIDocShell *This,
        cpp_bool *aRecordProfileTimelineMarkers);

    nsresult (STDMETHODCALLTYPE *SetRecordProfileTimelineMarkers)(
        nsIDocShell *This,
        cpp_bool aRecordProfileTimelineMarkers);

    nsresult (STDMETHODCALLTYPE *Now)(
        nsIDocShell *This,
        int *_retval);

    nsresult (STDMETHODCALLTYPE *PopProfileTimelineMarkers)(
        nsIDocShell *This,
        JSContext *cx,
        void *_retval);

    nsresult (STDMETHODCALLTYPE *AddWeakPrivacyTransitionObserver)(
        nsIDocShell *This,
        nsIPrivacyTransitionObserver *obs);

    nsresult (STDMETHODCALLTYPE *AddWeakReflowObserver)(
        nsIDocShell *This,
        nsISupports *obs);

    nsresult (STDMETHODCALLTYPE *RemoveWeakReflowObserver)(
        nsIDocShell *This,
        nsISupports *obs);

    nsresult (STDMETHODCALLTYPE *NotifyReflowObservers)(
        nsIDocShell *This,
        cpp_bool interruptible,
        int start,
        int end);

    nsresult (STDMETHODCALLTYPE *AddWeakScrollObserver)(
        nsIDocShell *This,
        void *obs);

    nsresult (STDMETHODCALLTYPE *RemoveWeakScrollObserver)(
        nsIDocShell *This,
        void *obs);

    nsresult (STDMETHODCALLTYPE *NotifyScrollObservers)(
        nsIDocShell *This);

    nsresult (STDMETHODCALLTYPE *GetIsApp)(
        nsIDocShell *This,
        cpp_bool *aIsApp);

    nsresult (STDMETHODCALLTYPE *GetFrameType)(
        nsIDocShell *This,
        UINT32 *aFrameType);

    nsresult (STDMETHODCALLTYPE *SetFrameType)(
        nsIDocShell *This,
        UINT32 aFrameType);

    nsresult (STDMETHODCALLTYPE *GetIsMozBrowserOrApp)(
        nsIDocShell *This,
        cpp_bool *aIsMozBrowserOrApp);

    nsresult (STDMETHODCALLTYPE *GetIsIsolatedMozBrowserElement)(
        nsIDocShell *This,
        cpp_bool *aIsIsolatedMozBrowserElement);

    nsresult (STDMETHODCALLTYPE *GetIsInIsolatedMozBrowserElement)(
        nsIDocShell *This,
        cpp_bool *aIsInIsolatedMozBrowserElement);

    nsresult (STDMETHODCALLTYPE *SetIsInIsolatedMozBrowserElement)(
        nsIDocShell *This,
        cpp_bool aIsInIsolatedMozBrowserElement);

    nsresult (STDMETHODCALLTYPE *GetIsInMozBrowserOrApp)(
        nsIDocShell *This,
        cpp_bool *aIsInMozBrowserOrApp);

    nsresult (STDMETHODCALLTYPE *GetAppId)(
        nsIDocShell *This,
        UINT32 *aAppId);

    nsresult (STDMETHODCALLTYPE *GetAppManifestURL)(
        nsIDocShell *This,
        nsAString *aAppManifestURL);

    nsresult (STDMETHODCALLTYPE *GetSameTypeParentIgnoreBrowserAndAppBoundaries)(
        nsIDocShell *This,
        nsIDocShell **_retval);

    nsresult (STDMETHODCALLTYPE *GetSameTypeRootTreeItemIgnoreBrowserAndAppBoundaries)(
        nsIDocShell *This,
        nsIDocShell **_retval);

    nsresult (STDMETHODCALLTYPE *GetAsyncPanZoomEnabled)(
        nsIDocShell *This,
        cpp_bool *aAsyncPanZoomEnabled);

    nsresult (STDMETHODCALLTYPE *GetSandboxFlags)(
        nsIDocShell *This,
        UINT32 *aSandboxFlags);

    nsresult (STDMETHODCALLTYPE *SetSandboxFlags)(
        nsIDocShell *This,
        UINT32 aSandboxFlags);

    nsresult (STDMETHODCALLTYPE *GetOnePermittedSandboxedNavigator)(
        nsIDocShell *This,
        nsIDocShell **aOnePermittedSandboxedNavigator);

    nsresult (STDMETHODCALLTYPE *SetOnePermittedSandboxedNavigator)(
        nsIDocShell *This,
        nsIDocShell *aOnePermittedSandboxedNavigator);

    cpp_bool (STDMETHODCALLTYPE *IsSandboxedFrom)(
        nsIDocShell *This,
        nsIDocShell *aTargetDocShell);

    nsresult (STDMETHODCALLTYPE *GetMixedContentChannel)(
        nsIDocShell *This,
        nsIChannel **aMixedContentChannel);

    nsresult (STDMETHODCALLTYPE *SetMixedContentChannel)(
        nsIDocShell *This,
        nsIChannel *aMixedContentChannel);

    nsresult (STDMETHODCALLTYPE *GetAllowMixedContentAndConnectionData)(
        nsIDocShell *This,
        cpp_bool *rootHasSecureConnection,
        cpp_bool *allowMixedContent,
        cpp_bool *isRootDocShell);

    cpp_bool (STDMETHODCALLTYPE *PluginsAllowedInCurrentDoc)(
        nsIDocShell *This);

    nsresult (STDMETHODCALLTYPE *GetFullscreenAllowed)(
        nsIDocShell *This,
        cpp_bool *aFullscreenAllowed);

    nsresult (STDMETHODCALLTYPE *SetFullscreenAllowed)(
        nsIDocShell *This,
        cpp_bool allowed);

    UINT32 (STDMETHODCALLTYPE *OrientationLock)(
        nsIDocShell *This);

    void (STDMETHODCALLTYPE *SetOrientationLock)(
        nsIDocShell *This,
        UINT32 orientationLock);

    nsresult (STDMETHODCALLTYPE *GetAffectPrivateSessionLifetime)(
        nsIDocShell *This,
        cpp_bool *aAffectPrivateSessionLifetime);

    nsresult (STDMETHODCALLTYPE *SetAffectPrivateSessionLifetime)(
        nsIDocShell *This,
        cpp_bool aAffectPrivateSessionLifetime);

    nsresult (STDMETHODCALLTYPE *GetMayEnableCharacterEncodingMenu)(
        nsIDocShell *This,
        cpp_bool *aMayEnableCharacterEncodingMenu);

    nsresult (STDMETHODCALLTYPE *GetEditor)(
        nsIDocShell *This,
        nsIEditor **aEditor);

    nsresult (STDMETHODCALLTYPE *SetEditor)(
        nsIDocShell *This,
        nsIEditor *aEditor);

    nsresult (STDMETHODCALLTYPE *GetEditable)(
        nsIDocShell *This,
        cpp_bool *aEditable);

    nsresult (STDMETHODCALLTYPE *GetHasEditingSession)(
        nsIDocShell *This,
        cpp_bool *aHasEditingSession);

    nsresult (STDMETHODCALLTYPE *MakeEditable)(
        nsIDocShell *This,
        cpp_bool inWaitForUriLoad);

    nsresult (STDMETHODCALLTYPE *GetChildSHEntry)(
        nsIDocShell *This,
        LONG aChildOffset,
        nsISHEntry **_retval);

    nsresult (STDMETHODCALLTYPE *AddChildSHEntry)(
        nsIDocShell *This,
        nsISHEntry *aCloneReference,
        nsISHEntry *aHistoryEntry,
        LONG aChildOffset,
        UINT32 aLoadType,
        cpp_bool aCloneChildren);

    nsresult (STDMETHODCALLTYPE *GetUseGlobalHistory)(
        nsIDocShell *This,
        cpp_bool *aUseGlobalHistory);

    nsresult (STDMETHODCALLTYPE *SetUseGlobalHistory)(
        nsIDocShell *This,
        cpp_bool aUseGlobalHistory);

    nsresult (STDMETHODCALLTYPE *RemoveFromSessionHistory)(
        nsIDocShell *This);

    nsresult (STDMETHODCALLTYPE *GetCreatedDynamically)(
        nsIDocShell *This,
        cpp_bool *aCreatedDynamically);

    nsresult (STDMETHODCALLTYPE *SetCreatedDynamically)(
        nsIDocShell *This,
        cpp_bool aCreatedDynamically);

    nsresult (STDMETHODCALLTYPE *GetCurrentSHEntry)(
        nsIDocShell *This,
        nsISHEntry **aEntry,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *IsCommandEnabled)(
        nsIDocShell *This,
        const char *command,
        cpp_bool *_retval);

    nsresult (STDMETHODCALLTYPE *DoCommand)(
        nsIDocShell *This,
        const char *command);

    cpp_bool (STDMETHODCALLTYPE *IsInvisible)(
        nsIDocShell *This);

    void (STDMETHODCALLTYPE *SetInvisible)(
        nsIDocShell *This,
        cpp_bool aIsInvisibleDochsell);

    void * (STDMETHODCALLTYPE *GetScriptGlobalObject)(
        nsIDocShell *This);

    nsresult (STDMETHODCALLTYPE *GetDeviceSizeIsPageSize)(
        nsIDocShell *This,
        cpp_bool *aDeviceSizeIsPageSize);

    nsresult (STDMETHODCALLTYPE *SetDeviceSizeIsPageSize)(
        nsIDocShell *This,
        cpp_bool aDeviceSizeIsPageSize);

    void (STDMETHODCALLTYPE *SetOpener)(
        nsIDocShell *This,
        void *aOpener);

    void * (STDMETHODCALLTYPE *GetOpener)(
        nsIDocShell *This);

    void (STDMETHODCALLTYPE *NotifyJSRunToCompletionStart)(
        nsIDocShell *This,
        const char *aReason,
        const PRUnichar *functionName,
        const PRUnichar *fileName,
        UINT32 lineNumber);

    void (STDMETHODCALLTYPE *NotifyJSRunToCompletionStop)(
        nsIDocShell *This);

    nsresult (STDMETHODCALLTYPE *GetHasLoadedNonBlankURI)(
        nsIDocShell *This,
        cpp_bool *aHasLoadedNonBlankURI);

    nsresult (STDMETHODCALLTYPE *GetPaymentRequestId)(
        nsIDocShell *This,
        nsAString *aPaymentRequestId);

    nsresult (STDMETHODCALLTYPE *SetPaymentRequestId)(
        nsIDocShell *This,
        const nsAString *aPaymentRequestId);

    nsresult (STDMETHODCALLTYPE *GetWindowDraggingAllowed)(
        nsIDocShell *This,
        cpp_bool *aWindowDraggingAllowed);

    nsresult (STDMETHODCALLTYPE *SetWindowDraggingAllowed)(
        nsIDocShell *This,
        cpp_bool aWindowDraggingAllowed);

    nsresult (STDMETHODCALLTYPE *GetCurrentScrollRestorationIsManual)(
        nsIDocShell *This,
        cpp_bool *aCurrentScrollRestorationIsManual);

    nsresult (STDMETHODCALLTYPE *SetCurrentScrollRestorationIsManual)(
        nsIDocShell *This,
        cpp_bool aCurrentScrollRestorationIsManual);

    nsresult (STDMETHODCALLTYPE *GetOriginAttributes)(
        nsIDocShell *This,
        JSContext *cx,
        void *_retval);

    nsresult (STDMETHODCALLTYPE *SetOriginAttributes)(
        nsIDocShell *This,
        int aAttrs,
        JSContext *cx);

    END_INTERFACE
} nsIDocShellVtbl;

interface nsIDocShell {
    CONST_VTBL nsIDocShellVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDocShell_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDocShell_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDocShell_Release(This) (This)->lpVtbl->Release(This)
/*** nsIDocShellTreeItem methods ***/
#define nsIDocShell_GetName(This,aName) (This)->lpVtbl->GetName(This,aName)
#define nsIDocShell_SetName(This,aName) (This)->lpVtbl->SetName(This,aName)
#define nsIDocShell_NameEquals(This,name,_retval) (This)->lpVtbl->NameEquals(This,name,_retval)
#define nsIDocShell_GetItemType(This,aItemType) (This)->lpVtbl->GetItemType(This,aItemType)
#define nsIDocShell_SetItemType(This,aItemType) (This)->lpVtbl->SetItemType(This,aItemType)
#define nsIDocShell_ItemType(This) (This)->lpVtbl->ItemType(This)
#define nsIDocShell_GetParent(This,aParent) (This)->lpVtbl->GetParent(This,aParent)
#define nsIDocShell_GetSameTypeParent(This,aSameTypeParent) (This)->lpVtbl->GetSameTypeParent(This,aSameTypeParent)
#define nsIDocShell_GetRootTreeItem(This,aRootTreeItem) (This)->lpVtbl->GetRootTreeItem(This,aRootTreeItem)
#define nsIDocShell_GetSameTypeRootTreeItem(This,aSameTypeRootTreeItem) (This)->lpVtbl->GetSameTypeRootTreeItem(This,aSameTypeRootTreeItem)
#define nsIDocShell_FindItemWithName(This,name,aRequestor,aOriginalRequestor,_retval) (This)->lpVtbl->FindItemWithName(This,name,aRequestor,aOriginalRequestor,_retval)
#define nsIDocShell_GetTreeOwner(This,aTreeOwner) (This)->lpVtbl->GetTreeOwner(This,aTreeOwner)
#define nsIDocShell_SetTreeOwner(This,treeOwner) (This)->lpVtbl->SetTreeOwner(This,treeOwner)
#define nsIDocShell_GetChildCount(This,aChildCount) (This)->lpVtbl->GetChildCount(This,aChildCount)
#define nsIDocShell_AddChild(This,child) (This)->lpVtbl->AddChild(This,child)
#define nsIDocShell_RemoveChild(This,child) (This)->lpVtbl->RemoveChild(This,child)
#define nsIDocShell_GetChildAt(This,index,_retval) (This)->lpVtbl->GetChildAt(This,index,_retval)
#define nsIDocShell_FindChildWithName(This,aName,aRecurse,aSameType,aRequestor,aOriginalRequestor,_retval) (This)->lpVtbl->FindChildWithName(This,aName,aRecurse,aSameType,aRequestor,aOriginalRequestor,_retval)
#define nsIDocShell_GetDocument(This) (This)->lpVtbl->GetDocument(This)
#define nsIDocShell_GetWindow(This) (This)->lpVtbl->GetWindow(This)
/*** nsIDocShell methods ***/
#define nsIDocShell_LoadURI(This,uri,loadInfo,aLoadFlags,firstParty) (This)->lpVtbl->LoadURI(This,uri,loadInfo,aLoadFlags,firstParty)
#define nsIDocShell_LoadStream(This,aStream,aURI,aContentType,aContentCharset,aLoadInfo) (This)->lpVtbl->LoadStream(This,aStream,aURI,aContentType,aContentCharset,aLoadInfo)
#define nsIDocShell_InternalLoad(This,aURI,aOriginalURI,aLoadReplace,aReferrer,aReferrerPolicy,aOwner,aFlags,aWindowTarget,aTypeHint,aFileName,aPostDataStream,aHeadersStream,aLoadFlags,aSHEntry,firstParty,aSrcdoc,aSourceDocShell,aBaseURI,aDocShell,aRequest) (This)->lpVtbl->InternalLoad(This,aURI,aOriginalURI,aLoadReplace,aReferrer,aReferrerPolicy,aOwner,aFlags,aWindowTarget,aTypeHint,aFileName,aPostDataStream,aHeadersStream,aLoadFlags,aSHEntry,firstParty,aSrcdoc,aSourceDocShell,aBaseURI,aDocShell,aRequest)
#define nsIDocShell_AddState(This,aData,aTitle,aURL,aReplace,cx) (This)->lpVtbl->AddState(This,aData,aTitle,aURL,aReplace,cx)
#define nsIDocShell_CreateLoadInfo(This,loadInfo) (This)->lpVtbl->CreateLoadInfo(This,loadInfo)
#define nsIDocShell_PrepareForNewContentModel(This) (This)->lpVtbl->PrepareForNewContentModel(This)
#define nsIDocShell_SetCurrentURI(This,aURI) (This)->lpVtbl->SetCurrentURI(This,aURI)
#define nsIDocShell_FirePageHideNotification(This,isUnload) (This)->lpVtbl->FirePageHideNotification(This,isUnload)
#define nsIDocShell_GetPresContext(This,aPresContext) (This)->lpVtbl->GetPresContext(This,aPresContext)
#define nsIDocShell_GetPresShell(This) (This)->lpVtbl->GetPresShell(This)
#define nsIDocShell_GetEldestPresShell(This,aEldestPresShell) (This)->lpVtbl->GetEldestPresShell(This,aEldestPresShell)
#define nsIDocShell_GetContentViewer(This,aContentViewer) (This)->lpVtbl->GetContentViewer(This,aContentViewer)
#define nsIDocShell_GetChromeEventHandler(This,aChromeEventHandler) (This)->lpVtbl->GetChromeEventHandler(This,aChromeEventHandler)
#define nsIDocShell_SetChromeEventHandler(This,aChromeEventHandler) (This)->lpVtbl->SetChromeEventHandler(This,aChromeEventHandler)
#define nsIDocShell_GetCustomUserAgent(This,aCustomUserAgent) (This)->lpVtbl->GetCustomUserAgent(This,aCustomUserAgent)
#define nsIDocShell_SetCustomUserAgent(This,aCustomUserAgent) (This)->lpVtbl->SetCustomUserAgent(This,aCustomUserAgent)
#define nsIDocShell_GetAllowPlugins(This,aAllowPlugins) (This)->lpVtbl->GetAllowPlugins(This,aAllowPlugins)
#define nsIDocShell_SetAllowPlugins(This,aAllowPlugins) (This)->lpVtbl->SetAllowPlugins(This,aAllowPlugins)
#define nsIDocShell_GetAllowJavascript(This,aAllowJavascript) (This)->lpVtbl->GetAllowJavascript(This,aAllowJavascript)
#define nsIDocShell_SetAllowJavascript(This,aAllowJavascript) (This)->lpVtbl->SetAllowJavascript(This,aAllowJavascript)
#define nsIDocShell_GetDisableNoScript(This,aDisableNoScript) (This)->lpVtbl->GetDisableNoScript(This,aDisableNoScript)
#define nsIDocShell_SetDisableNoScript(This,aDisableNoScript) (This)->lpVtbl->SetDisableNoScript(This,aDisableNoScript)
#define nsIDocShell_GetAllowMetaRedirects(This,aAllowMetaRedirects) (This)->lpVtbl->GetAllowMetaRedirects(This,aAllowMetaRedirects)
#define nsIDocShell_SetAllowMetaRedirects(This,aAllowMetaRedirects) (This)->lpVtbl->SetAllowMetaRedirects(This,aAllowMetaRedirects)
#define nsIDocShell_GetAllowSubframes(This,aAllowSubframes) (This)->lpVtbl->GetAllowSubframes(This,aAllowSubframes)
#define nsIDocShell_SetAllowSubframes(This,aAllowSubframes) (This)->lpVtbl->SetAllowSubframes(This,aAllowSubframes)
#define nsIDocShell_GetAllowImages(This,aAllowImages) (This)->lpVtbl->GetAllowImages(This,aAllowImages)
#define nsIDocShell_SetAllowImages(This,aAllowImages) (This)->lpVtbl->SetAllowImages(This,aAllowImages)
#define nsIDocShell_GetAllowMedia(This,aAllowMedia) (This)->lpVtbl->GetAllowMedia(This,aAllowMedia)
#define nsIDocShell_SetAllowMedia(This,aAllowMedia) (This)->lpVtbl->SetAllowMedia(This,aAllowMedia)
#define nsIDocShell_GetAllowDNSPrefetch(This,aAllowDNSPrefetch) (This)->lpVtbl->GetAllowDNSPrefetch(This,aAllowDNSPrefetch)
#define nsIDocShell_SetAllowDNSPrefetch(This,aAllowDNSPrefetch) (This)->lpVtbl->SetAllowDNSPrefetch(This,aAllowDNSPrefetch)
#define nsIDocShell_GetAllowWindowControl(This,aAllowWindowControl) (This)->lpVtbl->GetAllowWindowControl(This,aAllowWindowControl)
#define nsIDocShell_SetAllowWindowControl(This,aAllowWindowControl) (This)->lpVtbl->SetAllowWindowControl(This,aAllowWindowControl)
#define nsIDocShell_GetAllowContentRetargeting(This,aAllowContentRetargeting) (This)->lpVtbl->GetAllowContentRetargeting(This,aAllowContentRetargeting)
#define nsIDocShell_SetAllowContentRetargeting(This,aAllowContentRetargeting) (This)->lpVtbl->SetAllowContentRetargeting(This,aAllowContentRetargeting)
#define nsIDocShell_GetAllowContentRetargetingOnChildren(This,aAllowContentRetargetingOnChildren) (This)->lpVtbl->GetAllowContentRetargetingOnChildren(This,aAllowContentRetargetingOnChildren)
#define nsIDocShell_SetAllowContentRetargetingOnChildren(This,aAllowContentRetargetingOnChildren) (This)->lpVtbl->SetAllowContentRetargetingOnChildren(This,aAllowContentRetargetingOnChildren)
#define nsIDocShell_GetDocShellEnumerator(This,aItemType,aDirection,_retval) (This)->lpVtbl->GetDocShellEnumerator(This,aItemType,aDirection,_retval)
#define nsIDocShell_GetAppType(This,aAppType) (This)->lpVtbl->GetAppType(This,aAppType)
#define nsIDocShell_SetAppType(This,aAppType) (This)->lpVtbl->SetAppType(This,aAppType)
#define nsIDocShell_GetAllowAuth(This,aAllowAuth) (This)->lpVtbl->GetAllowAuth(This,aAllowAuth)
#define nsIDocShell_SetAllowAuth(This,aAllowAuth) (This)->lpVtbl->SetAllowAuth(This,aAllowAuth)
#define nsIDocShell_GetZoom(This,aZoom) (This)->lpVtbl->GetZoom(This,aZoom)
#define nsIDocShell_SetZoom(This,aZoom) (This)->lpVtbl->SetZoom(This,aZoom)
#define nsIDocShell_GetMarginWidth(This,aMarginWidth) (This)->lpVtbl->GetMarginWidth(This,aMarginWidth)
#define nsIDocShell_SetMarginWidth(This,aMarginWidth) (This)->lpVtbl->SetMarginWidth(This,aMarginWidth)
#define nsIDocShell_GetMarginHeight(This,aMarginHeight) (This)->lpVtbl->GetMarginHeight(This,aMarginHeight)
#define nsIDocShell_SetMarginHeight(This,aMarginHeight) (This)->lpVtbl->SetMarginHeight(This,aMarginHeight)
#define nsIDocShell_TabToTreeOwner(This,forward,forDocumentNavigation,_retval) (This)->lpVtbl->TabToTreeOwner(This,forward,forDocumentNavigation,_retval)
#define nsIDocShell_GetBusyFlags(This,aBusyFlags) (This)->lpVtbl->GetBusyFlags(This,aBusyFlags)
#define nsIDocShell_GetLoadType(This,aLoadType) (This)->lpVtbl->GetLoadType(This,aLoadType)
#define nsIDocShell_SetLoadType(This,aLoadType) (This)->lpVtbl->SetLoadType(This,aLoadType)
#define nsIDocShell_GetDefaultLoadFlags(This,aDefaultLoadFlags) (This)->lpVtbl->GetDefaultLoadFlags(This,aDefaultLoadFlags)
#define nsIDocShell_SetDefaultLoadFlags(This,aDefaultLoadFlags) (This)->lpVtbl->SetDefaultLoadFlags(This,aDefaultLoadFlags)
#define nsIDocShell_IsBeingDestroyed(This,_retval) (This)->lpVtbl->IsBeingDestroyed(This,_retval)
#define nsIDocShell_GetIsExecutingOnLoadHandler(This,aIsExecutingOnLoadHandler) (This)->lpVtbl->GetIsExecutingOnLoadHandler(This,aIsExecutingOnLoadHandler)
#define nsIDocShell_GetLayoutHistoryState(This,aLayoutHistoryState) (This)->lpVtbl->GetLayoutHistoryState(This,aLayoutHistoryState)
#define nsIDocShell_SetLayoutHistoryState(This,aLayoutHistoryState) (This)->lpVtbl->SetLayoutHistoryState(This,aLayoutHistoryState)
#define nsIDocShell_GetShouldSaveLayoutState(This,aShouldSaveLayoutState) (This)->lpVtbl->GetShouldSaveLayoutState(This,aShouldSaveLayoutState)
#define nsIDocShell_GetSecurityUI(This,aSecurityUI) (This)->lpVtbl->GetSecurityUI(This,aSecurityUI)
#define nsIDocShell_SetSecurityUI(This,aSecurityUI) (This)->lpVtbl->SetSecurityUI(This,aSecurityUI)
#define nsIDocShell_SuspendRefreshURIs(This) (This)->lpVtbl->SuspendRefreshURIs(This)
#define nsIDocShell_ResumeRefreshURIs(This) (This)->lpVtbl->ResumeRefreshURIs(This)
#define nsIDocShell_BeginRestore(This,viewer,top) (This)->lpVtbl->BeginRestore(This,viewer,top)
#define nsIDocShell_FinishRestore(This) (This)->lpVtbl->FinishRestore(This)
#define nsIDocShell_GetRestoringDocument(This,aRestoringDocument) (This)->lpVtbl->GetRestoringDocument(This,aRestoringDocument)
#define nsIDocShell_GetUseErrorPages(This,aUseErrorPages) (This)->lpVtbl->GetUseErrorPages(This,aUseErrorPages)
#define nsIDocShell_SetUseErrorPages(This,aUseErrorPages) (This)->lpVtbl->SetUseErrorPages(This,aUseErrorPages)
#define nsIDocShell_DisplayLoadError(This,aError,aURI,aURL,aFailedChannel,_retval) (This)->lpVtbl->DisplayLoadError(This,aError,aURI,aURL,aFailedChannel,_retval)
#define nsIDocShell_GetFailedChannel(This,aFailedChannel) (This)->lpVtbl->GetFailedChannel(This,aFailedChannel)
#define nsIDocShell_GetPreviousTransIndex(This,aPreviousTransIndex) (This)->lpVtbl->GetPreviousTransIndex(This,aPreviousTransIndex)
#define nsIDocShell_GetLoadedTransIndex(This,aLoadedTransIndex) (This)->lpVtbl->GetLoadedTransIndex(This,aLoadedTransIndex)
#define nsIDocShell_HistoryPurged(This,numEntries) (This)->lpVtbl->HistoryPurged(This,numEntries)
#define nsIDocShell_GetSessionStorageForPrincipal(This,principal,documentURI,create,_retval) (This)->lpVtbl->GetSessionStorageForPrincipal(This,principal,documentURI,create,_retval)
#define nsIDocShell_AddSessionStorage(This,principal,storage) (This)->lpVtbl->AddSessionStorage(This,principal,storage)
#define nsIDocShell_GetCurrentDocumentChannel(This,aCurrentDocumentChannel) (This)->lpVtbl->GetCurrentDocumentChannel(This,aCurrentDocumentChannel)
#define nsIDocShell_SetChildOffset(This,offset) (This)->lpVtbl->SetChildOffset(This,offset)
#define nsIDocShell_GetIsInUnload(This,aIsInUnload) (This)->lpVtbl->GetIsInUnload(This,aIsInUnload)
#define nsIDocShell_GetChannelIsUnsafe(This,aChannelIsUnsafe) (This)->lpVtbl->GetChannelIsUnsafe(This,aChannelIsUnsafe)
#define nsIDocShell_GetHasMixedActiveContentLoaded(This,aHasMixedActiveContentLoaded) (This)->lpVtbl->GetHasMixedActiveContentLoaded(This,aHasMixedActiveContentLoaded)
#define nsIDocShell_GetHasMixedActiveContentBlocked(This,aHasMixedActiveContentBlocked) (This)->lpVtbl->GetHasMixedActiveContentBlocked(This,aHasMixedActiveContentBlocked)
#define nsIDocShell_GetHasMixedDisplayContentLoaded(This,aHasMixedDisplayContentLoaded) (This)->lpVtbl->GetHasMixedDisplayContentLoaded(This,aHasMixedDisplayContentLoaded)
#define nsIDocShell_GetHasMixedDisplayContentBlocked(This,aHasMixedDisplayContentBlocked) (This)->lpVtbl->GetHasMixedDisplayContentBlocked(This,aHasMixedDisplayContentBlocked)
#define nsIDocShell_GetHasTrackingContentBlocked(This,aHasTrackingContentBlocked) (This)->lpVtbl->GetHasTrackingContentBlocked(This,aHasTrackingContentBlocked)
#define nsIDocShell_GetHasTrackingContentLoaded(This,aHasTrackingContentLoaded) (This)->lpVtbl->GetHasTrackingContentLoaded(This,aHasTrackingContentLoaded)
#define nsIDocShell_DetachEditorFromWindow(This) (This)->lpVtbl->DetachEditorFromWindow(This)
#define nsIDocShell_GetIsOffScreenBrowser(This,aIsOffScreenBrowser) (This)->lpVtbl->GetIsOffScreenBrowser(This,aIsOffScreenBrowser)
#define nsIDocShell_SetIsOffScreenBrowser(This,aIsOffScreenBrowser) (This)->lpVtbl->SetIsOffScreenBrowser(This,aIsOffScreenBrowser)
#define nsIDocShell_GetPrintPreview(This,aPrintPreview) (This)->lpVtbl->GetPrintPreview(This,aPrintPreview)
#define nsIDocShell_GetCanExecuteScripts(This,aCanExecuteScripts) (This)->lpVtbl->GetCanExecuteScripts(This,aCanExecuteScripts)
#define nsIDocShell_GetIsActive(This,aIsActive) (This)->lpVtbl->GetIsActive(This,aIsActive)
#define nsIDocShell_SetIsActive(This,aIsActive) (This)->lpVtbl->SetIsActive(This,aIsActive)
#define nsIDocShell_SetIsActiveAndForeground(This,aIsActive) (This)->lpVtbl->SetIsActiveAndForeground(This,aIsActive)
#define nsIDocShell_SetIsPrerendered(This,prerendered) (This)->lpVtbl->SetIsPrerendered(This,prerendered)
#define nsIDocShell_GetIsPrerendered(This,aIsPrerendered) (This)->lpVtbl->GetIsPrerendered(This,aIsPrerendered)
#define nsIDocShell_GetHistoryID(This,aHistoryID) (This)->lpVtbl->GetHistoryID(This,aHistoryID)
#define nsIDocShell_GetIsAppTab(This,aIsAppTab) (This)->lpVtbl->GetIsAppTab(This,aIsAppTab)
#define nsIDocShell_SetIsAppTab(This,aIsAppTab) (This)->lpVtbl->SetIsAppTab(This,aIsAppTab)
#define nsIDocShell_CreateAboutBlankContentViewer(This,aPrincipal) (This)->lpVtbl->CreateAboutBlankContentViewer(This,aPrincipal)
#define nsIDocShell_GetCharset(This,aCharset) (This)->lpVtbl->GetCharset(This,aCharset)
#define nsIDocShell_SetCharset(This,aCharset) (This)->lpVtbl->SetCharset(This,aCharset)
#define nsIDocShell_GatherCharsetMenuTelemetry(This) (This)->lpVtbl->GatherCharsetMenuTelemetry(This)
#define nsIDocShell_GetForcedCharset(This,aForcedCharset) (This)->lpVtbl->GetForcedCharset(This,aForcedCharset)
#define nsIDocShell_SetForcedCharset(This,aForcedCharset) (This)->lpVtbl->SetForcedCharset(This,aForcedCharset)
#define nsIDocShell_SetParentCharset(This,parentCharset,parentCharsetSource,parentCharsetPrincipal) (This)->lpVtbl->SetParentCharset(This,parentCharset,parentCharsetSource,parentCharsetPrincipal)
#define nsIDocShell_GetParentCharset(This,parentCharset,parentCharsetSource,parentCharsetPrincipal) (This)->lpVtbl->GetParentCharset(This,parentCharset,parentCharsetSource,parentCharsetPrincipal)
#define nsIDocShell_GetRecordProfileTimelineMarkers(This,aRecordProfileTimelineMarkers) (This)->lpVtbl->GetRecordProfileTimelineMarkers(This,aRecordProfileTimelineMarkers)
#define nsIDocShell_SetRecordProfileTimelineMarkers(This,aRecordProfileTimelineMarkers) (This)->lpVtbl->SetRecordProfileTimelineMarkers(This,aRecordProfileTimelineMarkers)
#define nsIDocShell_Now(This,_retval) (This)->lpVtbl->Now(This,_retval)
#define nsIDocShell_PopProfileTimelineMarkers(This,cx,_retval) (This)->lpVtbl->PopProfileTimelineMarkers(This,cx,_retval)
#define nsIDocShell_AddWeakPrivacyTransitionObserver(This,obs) (This)->lpVtbl->AddWeakPrivacyTransitionObserver(This,obs)
#define nsIDocShell_AddWeakReflowObserver(This,obs) (This)->lpVtbl->AddWeakReflowObserver(This,obs)
#define nsIDocShell_RemoveWeakReflowObserver(This,obs) (This)->lpVtbl->RemoveWeakReflowObserver(This,obs)
#define nsIDocShell_NotifyReflowObservers(This,interruptible,start,end) (This)->lpVtbl->NotifyReflowObservers(This,interruptible,start,end)
#define nsIDocShell_AddWeakScrollObserver(This,obs) (This)->lpVtbl->AddWeakScrollObserver(This,obs)
#define nsIDocShell_RemoveWeakScrollObserver(This,obs) (This)->lpVtbl->RemoveWeakScrollObserver(This,obs)
#define nsIDocShell_NotifyScrollObservers(This) (This)->lpVtbl->NotifyScrollObservers(This)
#define nsIDocShell_GetIsApp(This,aIsApp) (This)->lpVtbl->GetIsApp(This,aIsApp)
#define nsIDocShell_GetFrameType(This,aFrameType) (This)->lpVtbl->GetFrameType(This,aFrameType)
#define nsIDocShell_SetFrameType(This,aFrameType) (This)->lpVtbl->SetFrameType(This,aFrameType)
#define nsIDocShell_GetIsMozBrowserOrApp(This,aIsMozBrowserOrApp) (This)->lpVtbl->GetIsMozBrowserOrApp(This,aIsMozBrowserOrApp)
#define nsIDocShell_GetIsIsolatedMozBrowserElement(This,aIsIsolatedMozBrowserElement) (This)->lpVtbl->GetIsIsolatedMozBrowserElement(This,aIsIsolatedMozBrowserElement)
#define nsIDocShell_GetIsInIsolatedMozBrowserElement(This,aIsInIsolatedMozBrowserElement) (This)->lpVtbl->GetIsInIsolatedMozBrowserElement(This,aIsInIsolatedMozBrowserElement)
#define nsIDocShell_SetIsInIsolatedMozBrowserElement(This,aIsInIsolatedMozBrowserElement) (This)->lpVtbl->SetIsInIsolatedMozBrowserElement(This,aIsInIsolatedMozBrowserElement)
#define nsIDocShell_GetIsInMozBrowserOrApp(This,aIsInMozBrowserOrApp) (This)->lpVtbl->GetIsInMozBrowserOrApp(This,aIsInMozBrowserOrApp)
#define nsIDocShell_GetAppId(This,aAppId) (This)->lpVtbl->GetAppId(This,aAppId)
#define nsIDocShell_GetAppManifestURL(This,aAppManifestURL) (This)->lpVtbl->GetAppManifestURL(This,aAppManifestURL)
#define nsIDocShell_GetSameTypeParentIgnoreBrowserAndAppBoundaries(This,_retval) (This)->lpVtbl->GetSameTypeParentIgnoreBrowserAndAppBoundaries(This,_retval)
#define nsIDocShell_GetSameTypeRootTreeItemIgnoreBrowserAndAppBoundaries(This,_retval) (This)->lpVtbl->GetSameTypeRootTreeItemIgnoreBrowserAndAppBoundaries(This,_retval)
#define nsIDocShell_GetAsyncPanZoomEnabled(This,aAsyncPanZoomEnabled) (This)->lpVtbl->GetAsyncPanZoomEnabled(This,aAsyncPanZoomEnabled)
#define nsIDocShell_GetSandboxFlags(This,aSandboxFlags) (This)->lpVtbl->GetSandboxFlags(This,aSandboxFlags)
#define nsIDocShell_SetSandboxFlags(This,aSandboxFlags) (This)->lpVtbl->SetSandboxFlags(This,aSandboxFlags)
#define nsIDocShell_GetOnePermittedSandboxedNavigator(This,aOnePermittedSandboxedNavigator) (This)->lpVtbl->GetOnePermittedSandboxedNavigator(This,aOnePermittedSandboxedNavigator)
#define nsIDocShell_SetOnePermittedSandboxedNavigator(This,aOnePermittedSandboxedNavigator) (This)->lpVtbl->SetOnePermittedSandboxedNavigator(This,aOnePermittedSandboxedNavigator)
#define nsIDocShell_IsSandboxedFrom(This,aTargetDocShell) (This)->lpVtbl->IsSandboxedFrom(This,aTargetDocShell)
#define nsIDocShell_GetMixedContentChannel(This,aMixedContentChannel) (This)->lpVtbl->GetMixedContentChannel(This,aMixedContentChannel)
#define nsIDocShell_SetMixedContentChannel(This,aMixedContentChannel) (This)->lpVtbl->SetMixedContentChannel(This,aMixedContentChannel)
#define nsIDocShell_GetAllowMixedContentAndConnectionData(This,rootHasSecureConnection,allowMixedContent,isRootDocShell) (This)->lpVtbl->GetAllowMixedContentAndConnectionData(This,rootHasSecureConnection,allowMixedContent,isRootDocShell)
#define nsIDocShell_PluginsAllowedInCurrentDoc(This) (This)->lpVtbl->PluginsAllowedInCurrentDoc(This)
#define nsIDocShell_GetFullscreenAllowed(This,aFullscreenAllowed) (This)->lpVtbl->GetFullscreenAllowed(This,aFullscreenAllowed)
#define nsIDocShell_SetFullscreenAllowed(This,allowed) (This)->lpVtbl->SetFullscreenAllowed(This,allowed)
#define nsIDocShell_OrientationLock(This) (This)->lpVtbl->OrientationLock(This)
#define nsIDocShell_SetOrientationLock(This,orientationLock) (This)->lpVtbl->SetOrientationLock(This,orientationLock)
#define nsIDocShell_GetAffectPrivateSessionLifetime(This,aAffectPrivateSessionLifetime) (This)->lpVtbl->GetAffectPrivateSessionLifetime(This,aAffectPrivateSessionLifetime)
#define nsIDocShell_SetAffectPrivateSessionLifetime(This,aAffectPrivateSessionLifetime) (This)->lpVtbl->SetAffectPrivateSessionLifetime(This,aAffectPrivateSessionLifetime)
#define nsIDocShell_GetMayEnableCharacterEncodingMenu(This,aMayEnableCharacterEncodingMenu) (This)->lpVtbl->GetMayEnableCharacterEncodingMenu(This,aMayEnableCharacterEncodingMenu)
#define nsIDocShell_GetEditor(This,aEditor) (This)->lpVtbl->GetEditor(This,aEditor)
#define nsIDocShell_SetEditor(This,aEditor) (This)->lpVtbl->SetEditor(This,aEditor)
#define nsIDocShell_GetEditable(This,aEditable) (This)->lpVtbl->GetEditable(This,aEditable)
#define nsIDocShell_GetHasEditingSession(This,aHasEditingSession) (This)->lpVtbl->GetHasEditingSession(This,aHasEditingSession)
#define nsIDocShell_MakeEditable(This,inWaitForUriLoad) (This)->lpVtbl->MakeEditable(This,inWaitForUriLoad)
#define nsIDocShell_GetChildSHEntry(This,aChildOffset,_retval) (This)->lpVtbl->GetChildSHEntry(This,aChildOffset,_retval)
#define nsIDocShell_AddChildSHEntry(This,aCloneReference,aHistoryEntry,aChildOffset,aLoadType,aCloneChildren) (This)->lpVtbl->AddChildSHEntry(This,aCloneReference,aHistoryEntry,aChildOffset,aLoadType,aCloneChildren)
#define nsIDocShell_GetUseGlobalHistory(This,aUseGlobalHistory) (This)->lpVtbl->GetUseGlobalHistory(This,aUseGlobalHistory)
#define nsIDocShell_SetUseGlobalHistory(This,aUseGlobalHistory) (This)->lpVtbl->SetUseGlobalHistory(This,aUseGlobalHistory)
#define nsIDocShell_RemoveFromSessionHistory(This) (This)->lpVtbl->RemoveFromSessionHistory(This)
#define nsIDocShell_GetCreatedDynamically(This,aCreatedDynamically) (This)->lpVtbl->GetCreatedDynamically(This,aCreatedDynamically)
#define nsIDocShell_SetCreatedDynamically(This,aCreatedDynamically) (This)->lpVtbl->SetCreatedDynamically(This,aCreatedDynamically)
#define nsIDocShell_GetCurrentSHEntry(This,aEntry,_retval) (This)->lpVtbl->GetCurrentSHEntry(This,aEntry,_retval)
#define nsIDocShell_IsCommandEnabled(This,command,_retval) (This)->lpVtbl->IsCommandEnabled(This,command,_retval)
#define nsIDocShell_DoCommand(This,command) (This)->lpVtbl->DoCommand(This,command)
#define nsIDocShell_IsInvisible(This) (This)->lpVtbl->IsInvisible(This)
#define nsIDocShell_SetInvisible(This,aIsInvisibleDochsell) (This)->lpVtbl->SetInvisible(This,aIsInvisibleDochsell)
#define nsIDocShell_GetScriptGlobalObject(This) (This)->lpVtbl->GetScriptGlobalObject(This)
#define nsIDocShell_GetDeviceSizeIsPageSize(This,aDeviceSizeIsPageSize) (This)->lpVtbl->GetDeviceSizeIsPageSize(This,aDeviceSizeIsPageSize)
#define nsIDocShell_SetDeviceSizeIsPageSize(This,aDeviceSizeIsPageSize) (This)->lpVtbl->SetDeviceSizeIsPageSize(This,aDeviceSizeIsPageSize)
#define nsIDocShell_SetOpener(This,aOpener) (This)->lpVtbl->SetOpener(This,aOpener)
#define nsIDocShell_GetOpener(This) (This)->lpVtbl->GetOpener(This)
#define nsIDocShell_NotifyJSRunToCompletionStart(This,aReason,functionName,fileName,lineNumber) (This)->lpVtbl->NotifyJSRunToCompletionStart(This,aReason,functionName,fileName,lineNumber)
#define nsIDocShell_NotifyJSRunToCompletionStop(This) (This)->lpVtbl->NotifyJSRunToCompletionStop(This)
#define nsIDocShell_GetHasLoadedNonBlankURI(This,aHasLoadedNonBlankURI) (This)->lpVtbl->GetHasLoadedNonBlankURI(This,aHasLoadedNonBlankURI)
#define nsIDocShell_GetPaymentRequestId(This,aPaymentRequestId) (This)->lpVtbl->GetPaymentRequestId(This,aPaymentRequestId)
#define nsIDocShell_SetPaymentRequestId(This,aPaymentRequestId) (This)->lpVtbl->SetPaymentRequestId(This,aPaymentRequestId)
#define nsIDocShell_GetWindowDraggingAllowed(This,aWindowDraggingAllowed) (This)->lpVtbl->GetWindowDraggingAllowed(This,aWindowDraggingAllowed)
#define nsIDocShell_SetWindowDraggingAllowed(This,aWindowDraggingAllowed) (This)->lpVtbl->SetWindowDraggingAllowed(This,aWindowDraggingAllowed)
#define nsIDocShell_GetCurrentScrollRestorationIsManual(This,aCurrentScrollRestorationIsManual) (This)->lpVtbl->GetCurrentScrollRestorationIsManual(This,aCurrentScrollRestorationIsManual)
#define nsIDocShell_SetCurrentScrollRestorationIsManual(This,aCurrentScrollRestorationIsManual) (This)->lpVtbl->SetCurrentScrollRestorationIsManual(This,aCurrentScrollRestorationIsManual)
#define nsIDocShell_GetOriginAttributes(This,cx,_retval) (This)->lpVtbl->GetOriginAttributes(This,cx,_retval)
#define nsIDocShell_SetOriginAttributes(This,aAttrs,cx) (This)->lpVtbl->SetOriginAttributes(This,aAttrs,cx)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDocShell_QueryInterface(nsIDocShell* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDocShell_AddRef(nsIDocShell* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDocShell_Release(nsIDocShell* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIDocShellTreeItem methods ***/
static FORCEINLINE nsresult nsIDocShell_GetName(nsIDocShell* This,nsAString *aName) {
    return This->lpVtbl->GetName(This,aName);
}
static FORCEINLINE nsresult nsIDocShell_SetName(nsIDocShell* This,const nsAString *aName) {
    return This->lpVtbl->SetName(This,aName);
}
static FORCEINLINE nsresult nsIDocShell_NameEquals(nsIDocShell* This,const PRUnichar *name,cpp_bool *_retval) {
    return This->lpVtbl->NameEquals(This,name,_retval);
}
static FORCEINLINE nsresult nsIDocShell_GetItemType(nsIDocShell* This,LONG *aItemType) {
    return This->lpVtbl->GetItemType(This,aItemType);
}
static FORCEINLINE nsresult nsIDocShell_SetItemType(nsIDocShell* This,LONG aItemType) {
    return This->lpVtbl->SetItemType(This,aItemType);
}
static FORCEINLINE LONG nsIDocShell_ItemType(nsIDocShell* This) {
    return This->lpVtbl->ItemType(This);
}
static FORCEINLINE nsresult nsIDocShell_GetParent(nsIDocShell* This,nsIDocShellTreeItem **aParent) {
    return This->lpVtbl->GetParent(This,aParent);
}
static FORCEINLINE nsresult nsIDocShell_GetSameTypeParent(nsIDocShell* This,nsIDocShellTreeItem **aSameTypeParent) {
    return This->lpVtbl->GetSameTypeParent(This,aSameTypeParent);
}
static FORCEINLINE nsresult nsIDocShell_GetRootTreeItem(nsIDocShell* This,nsIDocShellTreeItem **aRootTreeItem) {
    return This->lpVtbl->GetRootTreeItem(This,aRootTreeItem);
}
static FORCEINLINE nsresult nsIDocShell_GetSameTypeRootTreeItem(nsIDocShell* This,nsIDocShellTreeItem **aSameTypeRootTreeItem) {
    return This->lpVtbl->GetSameTypeRootTreeItem(This,aSameTypeRootTreeItem);
}
static FORCEINLINE nsresult nsIDocShell_FindItemWithName(nsIDocShell* This,const PRUnichar *name,nsISupports *aRequestor,nsIDocShellTreeItem *aOriginalRequestor,nsIDocShellTreeItem **_retval) {
    return This->lpVtbl->FindItemWithName(This,name,aRequestor,aOriginalRequestor,_retval);
}
static FORCEINLINE nsresult nsIDocShell_GetTreeOwner(nsIDocShell* This,nsIDocShellTreeOwner **aTreeOwner) {
    return This->lpVtbl->GetTreeOwner(This,aTreeOwner);
}
static FORCEINLINE nsresult nsIDocShell_SetTreeOwner(nsIDocShell* This,nsIDocShellTreeOwner *treeOwner) {
    return This->lpVtbl->SetTreeOwner(This,treeOwner);
}
static FORCEINLINE nsresult nsIDocShell_GetChildCount(nsIDocShell* This,LONG *aChildCount) {
    return This->lpVtbl->GetChildCount(This,aChildCount);
}
static FORCEINLINE nsresult nsIDocShell_AddChild(nsIDocShell* This,nsIDocShellTreeItem *child) {
    return This->lpVtbl->AddChild(This,child);
}
static FORCEINLINE nsresult nsIDocShell_RemoveChild(nsIDocShell* This,nsIDocShellTreeItem *child) {
    return This->lpVtbl->RemoveChild(This,child);
}
static FORCEINLINE nsresult nsIDocShell_GetChildAt(nsIDocShell* This,LONG index,nsIDocShellTreeItem **_retval) {
    return This->lpVtbl->GetChildAt(This,index,_retval);
}
static FORCEINLINE nsresult nsIDocShell_FindChildWithName(nsIDocShell* This,const PRUnichar *aName,cpp_bool aRecurse,cpp_bool aSameType,nsIDocShellTreeItem *aRequestor,nsIDocShellTreeItem *aOriginalRequestor,nsIDocShellTreeItem **_retval) {
    return This->lpVtbl->FindChildWithName(This,aName,aRecurse,aSameType,aRequestor,aOriginalRequestor,_retval);
}
static FORCEINLINE nsIDocument * nsIDocShell_GetDocument(nsIDocShell* This) {
    return This->lpVtbl->GetDocument(This);
}
static FORCEINLINE void * nsIDocShell_GetWindow(nsIDocShell* This) {
    return This->lpVtbl->GetWindow(This);
}
/*** nsIDocShell methods ***/
static FORCEINLINE nsresult nsIDocShell_LoadURI(nsIDocShell* This,nsIURI *uri,nsIDocShellLoadInfo *loadInfo,UINT32 aLoadFlags,cpp_bool firstParty) {
    return This->lpVtbl->LoadURI(This,uri,loadInfo,aLoadFlags,firstParty);
}
static FORCEINLINE nsresult nsIDocShell_LoadStream(nsIDocShell* This,nsIInputStream *aStream,nsIURI *aURI,const nsACString *aContentType,const nsACString *aContentCharset,nsIDocShellLoadInfo *aLoadInfo) {
    return This->lpVtbl->LoadStream(This,aStream,aURI,aContentType,aContentCharset,aLoadInfo);
}
static FORCEINLINE nsresult nsIDocShell_InternalLoad(nsIDocShell* This,nsIURI *aURI,nsIURI *aOriginalURI,cpp_bool aLoadReplace,nsIURI *aReferrer,UINT32 aReferrerPolicy,nsISupports *aOwner,UINT32 aFlags,const PRUnichar *aWindowTarget,const char *aTypeHint,nsACString *aFileName,nsIInputStream *aPostDataStream,nsIInputStream *aHeadersStream,UINT32 aLoadFlags,nsISHEntry *aSHEntry,cpp_bool firstParty,const nsAString *aSrcdoc,nsIDocShell *aSourceDocShell,nsIURI *aBaseURI,nsIDocShell **aDocShell,nsIRequest **aRequest) {
    return This->lpVtbl->InternalLoad(This,aURI,aOriginalURI,aLoadReplace,aReferrer,aReferrerPolicy,aOwner,aFlags,aWindowTarget,aTypeHint,aFileName,aPostDataStream,aHeadersStream,aLoadFlags,aSHEntry,firstParty,aSrcdoc,aSourceDocShell,aBaseURI,aDocShell,aRequest);
}
static FORCEINLINE nsresult nsIDocShell_AddState(nsIDocShell* This,jsval *aData,const nsAString *aTitle,const nsAString *aURL,cpp_bool aReplace,JSContext *cx) {
    return This->lpVtbl->AddState(This,aData,aTitle,aURL,aReplace,cx);
}
static FORCEINLINE nsresult nsIDocShell_CreateLoadInfo(nsIDocShell* This,nsIDocShellLoadInfo **loadInfo) {
    return This->lpVtbl->CreateLoadInfo(This,loadInfo);
}
static FORCEINLINE nsresult nsIDocShell_PrepareForNewContentModel(nsIDocShell* This) {
    return This->lpVtbl->PrepareForNewContentModel(This);
}
static FORCEINLINE nsresult nsIDocShell_SetCurrentURI(nsIDocShell* This,nsIURI *aURI) {
    return This->lpVtbl->SetCurrentURI(This,aURI);
}
static FORCEINLINE nsresult nsIDocShell_FirePageHideNotification(nsIDocShell* This,cpp_bool isUnload) {
    return This->lpVtbl->FirePageHideNotification(This,isUnload);
}
static FORCEINLINE nsresult nsIDocShell_GetPresContext(nsIDocShell* This,void **aPresContext) {
    return This->lpVtbl->GetPresContext(This,aPresContext);
}
static FORCEINLINE nsIPresShell * nsIDocShell_GetPresShell(nsIDocShell* This) {
    return This->lpVtbl->GetPresShell(This);
}
static FORCEINLINE nsresult nsIDocShell_GetEldestPresShell(nsIDocShell* This,nsIPresShell **aEldestPresShell) {
    return This->lpVtbl->GetEldestPresShell(This,aEldestPresShell);
}
static FORCEINLINE nsresult nsIDocShell_GetContentViewer(nsIDocShell* This,nsIContentViewer **aContentViewer) {
    return This->lpVtbl->GetContentViewer(This,aContentViewer);
}
static FORCEINLINE nsresult nsIDocShell_GetChromeEventHandler(nsIDocShell* This,nsIDOMEventTarget **aChromeEventHandler) {
    return This->lpVtbl->GetChromeEventHandler(This,aChromeEventHandler);
}
static FORCEINLINE nsresult nsIDocShell_SetChromeEventHandler(nsIDocShell* This,nsIDOMEventTarget *aChromeEventHandler) {
    return This->lpVtbl->SetChromeEventHandler(This,aChromeEventHandler);
}
static FORCEINLINE nsresult nsIDocShell_GetCustomUserAgent(nsIDocShell* This,nsAString *aCustomUserAgent) {
    return This->lpVtbl->GetCustomUserAgent(This,aCustomUserAgent);
}
static FORCEINLINE nsresult nsIDocShell_SetCustomUserAgent(nsIDocShell* This,const nsAString *aCustomUserAgent) {
    return This->lpVtbl->SetCustomUserAgent(This,aCustomUserAgent);
}
static FORCEINLINE nsresult nsIDocShell_GetAllowPlugins(nsIDocShell* This,cpp_bool *aAllowPlugins) {
    return This->lpVtbl->GetAllowPlugins(This,aAllowPlugins);
}
static FORCEINLINE nsresult nsIDocShell_SetAllowPlugins(nsIDocShell* This,cpp_bool aAllowPlugins) {
    return This->lpVtbl->SetAllowPlugins(This,aAllowPlugins);
}
static FORCEINLINE nsresult nsIDocShell_GetAllowJavascript(nsIDocShell* This,cpp_bool *aAllowJavascript) {
    return This->lpVtbl->GetAllowJavascript(This,aAllowJavascript);
}
static FORCEINLINE nsresult nsIDocShell_SetAllowJavascript(nsIDocShell* This,cpp_bool aAllowJavascript) {
    return This->lpVtbl->SetAllowJavascript(This,aAllowJavascript);
}
static FORCEINLINE nsresult nsIDocShell_GetDisableNoScript(nsIDocShell* This,cpp_bool *aDisableNoScript) {
    return This->lpVtbl->GetDisableNoScript(This,aDisableNoScript);
}
static FORCEINLINE nsresult nsIDocShell_SetDisableNoScript(nsIDocShell* This,cpp_bool aDisableNoScript) {
    return This->lpVtbl->SetDisableNoScript(This,aDisableNoScript);
}
static FORCEINLINE nsresult nsIDocShell_GetAllowMetaRedirects(nsIDocShell* This,cpp_bool *aAllowMetaRedirects) {
    return This->lpVtbl->GetAllowMetaRedirects(This,aAllowMetaRedirects);
}
static FORCEINLINE nsresult nsIDocShell_SetAllowMetaRedirects(nsIDocShell* This,cpp_bool aAllowMetaRedirects) {
    return This->lpVtbl->SetAllowMetaRedirects(This,aAllowMetaRedirects);
}
static FORCEINLINE nsresult nsIDocShell_GetAllowSubframes(nsIDocShell* This,cpp_bool *aAllowSubframes) {
    return This->lpVtbl->GetAllowSubframes(This,aAllowSubframes);
}
static FORCEINLINE nsresult nsIDocShell_SetAllowSubframes(nsIDocShell* This,cpp_bool aAllowSubframes) {
    return This->lpVtbl->SetAllowSubframes(This,aAllowSubframes);
}
static FORCEINLINE nsresult nsIDocShell_GetAllowImages(nsIDocShell* This,cpp_bool *aAllowImages) {
    return This->lpVtbl->GetAllowImages(This,aAllowImages);
}
static FORCEINLINE nsresult nsIDocShell_SetAllowImages(nsIDocShell* This,cpp_bool aAllowImages) {
    return This->lpVtbl->SetAllowImages(This,aAllowImages);
}
static FORCEINLINE nsresult nsIDocShell_GetAllowMedia(nsIDocShell* This,cpp_bool *aAllowMedia) {
    return This->lpVtbl->GetAllowMedia(This,aAllowMedia);
}
static FORCEINLINE nsresult nsIDocShell_SetAllowMedia(nsIDocShell* This,cpp_bool aAllowMedia) {
    return This->lpVtbl->SetAllowMedia(This,aAllowMedia);
}
static FORCEINLINE nsresult nsIDocShell_GetAllowDNSPrefetch(nsIDocShell* This,cpp_bool *aAllowDNSPrefetch) {
    return This->lpVtbl->GetAllowDNSPrefetch(This,aAllowDNSPrefetch);
}
static FORCEINLINE nsresult nsIDocShell_SetAllowDNSPrefetch(nsIDocShell* This,cpp_bool aAllowDNSPrefetch) {
    return This->lpVtbl->SetAllowDNSPrefetch(This,aAllowDNSPrefetch);
}
static FORCEINLINE nsresult nsIDocShell_GetAllowWindowControl(nsIDocShell* This,cpp_bool *aAllowWindowControl) {
    return This->lpVtbl->GetAllowWindowControl(This,aAllowWindowControl);
}
static FORCEINLINE nsresult nsIDocShell_SetAllowWindowControl(nsIDocShell* This,cpp_bool aAllowWindowControl) {
    return This->lpVtbl->SetAllowWindowControl(This,aAllowWindowControl);
}
static FORCEINLINE nsresult nsIDocShell_GetAllowContentRetargeting(nsIDocShell* This,cpp_bool *aAllowContentRetargeting) {
    return This->lpVtbl->GetAllowContentRetargeting(This,aAllowContentRetargeting);
}
static FORCEINLINE nsresult nsIDocShell_SetAllowContentRetargeting(nsIDocShell* This,cpp_bool aAllowContentRetargeting) {
    return This->lpVtbl->SetAllowContentRetargeting(This,aAllowContentRetargeting);
}
static FORCEINLINE nsresult nsIDocShell_GetAllowContentRetargetingOnChildren(nsIDocShell* This,cpp_bool *aAllowContentRetargetingOnChildren) {
    return This->lpVtbl->GetAllowContentRetargetingOnChildren(This,aAllowContentRetargetingOnChildren);
}
static FORCEINLINE nsresult nsIDocShell_SetAllowContentRetargetingOnChildren(nsIDocShell* This,cpp_bool aAllowContentRetargetingOnChildren) {
    return This->lpVtbl->SetAllowContentRetargetingOnChildren(This,aAllowContentRetargetingOnChildren);
}
static FORCEINLINE nsresult nsIDocShell_GetDocShellEnumerator(nsIDocShell* This,LONG aItemType,LONG aDirection,nsISimpleEnumerator **_retval) {
    return This->lpVtbl->GetDocShellEnumerator(This,aItemType,aDirection,_retval);
}
static FORCEINLINE nsresult nsIDocShell_GetAppType(nsIDocShell* This,UINT32 *aAppType) {
    return This->lpVtbl->GetAppType(This,aAppType);
}
static FORCEINLINE nsresult nsIDocShell_SetAppType(nsIDocShell* This,UINT32 aAppType) {
    return This->lpVtbl->SetAppType(This,aAppType);
}
static FORCEINLINE nsresult nsIDocShell_GetAllowAuth(nsIDocShell* This,cpp_bool *aAllowAuth) {
    return This->lpVtbl->GetAllowAuth(This,aAllowAuth);
}
static FORCEINLINE nsresult nsIDocShell_SetAllowAuth(nsIDocShell* This,cpp_bool aAllowAuth) {
    return This->lpVtbl->SetAllowAuth(This,aAllowAuth);
}
static FORCEINLINE nsresult nsIDocShell_GetZoom(nsIDocShell* This,float *aZoom) {
    return This->lpVtbl->GetZoom(This,aZoom);
}
static FORCEINLINE nsresult nsIDocShell_SetZoom(nsIDocShell* This,float aZoom) {
    return This->lpVtbl->SetZoom(This,aZoom);
}
static FORCEINLINE nsresult nsIDocShell_GetMarginWidth(nsIDocShell* This,LONG *aMarginWidth) {
    return This->lpVtbl->GetMarginWidth(This,aMarginWidth);
}
static FORCEINLINE nsresult nsIDocShell_SetMarginWidth(nsIDocShell* This,LONG aMarginWidth) {
    return This->lpVtbl->SetMarginWidth(This,aMarginWidth);
}
static FORCEINLINE nsresult nsIDocShell_GetMarginHeight(nsIDocShell* This,LONG *aMarginHeight) {
    return This->lpVtbl->GetMarginHeight(This,aMarginHeight);
}
static FORCEINLINE nsresult nsIDocShell_SetMarginHeight(nsIDocShell* This,LONG aMarginHeight) {
    return This->lpVtbl->SetMarginHeight(This,aMarginHeight);
}
static FORCEINLINE nsresult nsIDocShell_TabToTreeOwner(nsIDocShell* This,cpp_bool forward,cpp_bool forDocumentNavigation,cpp_bool *_retval) {
    return This->lpVtbl->TabToTreeOwner(This,forward,forDocumentNavigation,_retval);
}
static FORCEINLINE nsresult nsIDocShell_GetBusyFlags(nsIDocShell* This,UINT32 *aBusyFlags) {
    return This->lpVtbl->GetBusyFlags(This,aBusyFlags);
}
static FORCEINLINE nsresult nsIDocShell_GetLoadType(nsIDocShell* This,UINT32 *aLoadType) {
    return This->lpVtbl->GetLoadType(This,aLoadType);
}
static FORCEINLINE nsresult nsIDocShell_SetLoadType(nsIDocShell* This,UINT32 aLoadType) {
    return This->lpVtbl->SetLoadType(This,aLoadType);
}
static FORCEINLINE nsresult nsIDocShell_GetDefaultLoadFlags(nsIDocShell* This,nsLoadFlags *aDefaultLoadFlags) {
    return This->lpVtbl->GetDefaultLoadFlags(This,aDefaultLoadFlags);
}
static FORCEINLINE nsresult nsIDocShell_SetDefaultLoadFlags(nsIDocShell* This,nsLoadFlags aDefaultLoadFlags) {
    return This->lpVtbl->SetDefaultLoadFlags(This,aDefaultLoadFlags);
}
static FORCEINLINE nsresult nsIDocShell_IsBeingDestroyed(nsIDocShell* This,cpp_bool *_retval) {
    return This->lpVtbl->IsBeingDestroyed(This,_retval);
}
static FORCEINLINE nsresult nsIDocShell_GetIsExecutingOnLoadHandler(nsIDocShell* This,cpp_bool *aIsExecutingOnLoadHandler) {
    return This->lpVtbl->GetIsExecutingOnLoadHandler(This,aIsExecutingOnLoadHandler);
}
static FORCEINLINE nsresult nsIDocShell_GetLayoutHistoryState(nsIDocShell* This,nsILayoutHistoryState **aLayoutHistoryState) {
    return This->lpVtbl->GetLayoutHistoryState(This,aLayoutHistoryState);
}
static FORCEINLINE nsresult nsIDocShell_SetLayoutHistoryState(nsIDocShell* This,nsILayoutHistoryState *aLayoutHistoryState) {
    return This->lpVtbl->SetLayoutHistoryState(This,aLayoutHistoryState);
}
static FORCEINLINE nsresult nsIDocShell_GetShouldSaveLayoutState(nsIDocShell* This,cpp_bool *aShouldSaveLayoutState) {
    return This->lpVtbl->GetShouldSaveLayoutState(This,aShouldSaveLayoutState);
}
static FORCEINLINE nsresult nsIDocShell_GetSecurityUI(nsIDocShell* This,nsISecureBrowserUI **aSecurityUI) {
    return This->lpVtbl->GetSecurityUI(This,aSecurityUI);
}
static FORCEINLINE nsresult nsIDocShell_SetSecurityUI(nsIDocShell* This,nsISecureBrowserUI *aSecurityUI) {
    return This->lpVtbl->SetSecurityUI(This,aSecurityUI);
}
static FORCEINLINE nsresult nsIDocShell_SuspendRefreshURIs(nsIDocShell* This) {
    return This->lpVtbl->SuspendRefreshURIs(This);
}
static FORCEINLINE nsresult nsIDocShell_ResumeRefreshURIs(nsIDocShell* This) {
    return This->lpVtbl->ResumeRefreshURIs(This);
}
static FORCEINLINE nsresult nsIDocShell_BeginRestore(nsIDocShell* This,nsIContentViewer *viewer,cpp_bool top) {
    return This->lpVtbl->BeginRestore(This,viewer,top);
}
static FORCEINLINE nsresult nsIDocShell_FinishRestore(nsIDocShell* This) {
    return This->lpVtbl->FinishRestore(This);
}
static FORCEINLINE nsresult nsIDocShell_GetRestoringDocument(nsIDocShell* This,cpp_bool *aRestoringDocument) {
    return This->lpVtbl->GetRestoringDocument(This,aRestoringDocument);
}
static FORCEINLINE nsresult nsIDocShell_GetUseErrorPages(nsIDocShell* This,cpp_bool *aUseErrorPages) {
    return This->lpVtbl->GetUseErrorPages(This,aUseErrorPages);
}
static FORCEINLINE nsresult nsIDocShell_SetUseErrorPages(nsIDocShell* This,cpp_bool aUseErrorPages) {
    return This->lpVtbl->SetUseErrorPages(This,aUseErrorPages);
}
static FORCEINLINE nsresult nsIDocShell_DisplayLoadError(nsIDocShell* This,nsresult aError,nsIURI *aURI,const PRUnichar *aURL,nsIChannel *aFailedChannel,cpp_bool *_retval) {
    return This->lpVtbl->DisplayLoadError(This,aError,aURI,aURL,aFailedChannel,_retval);
}
static FORCEINLINE nsresult nsIDocShell_GetFailedChannel(nsIDocShell* This,nsIChannel **aFailedChannel) {
    return This->lpVtbl->GetFailedChannel(This,aFailedChannel);
}
static FORCEINLINE nsresult nsIDocShell_GetPreviousTransIndex(nsIDocShell* This,LONG *aPreviousTransIndex) {
    return This->lpVtbl->GetPreviousTransIndex(This,aPreviousTransIndex);
}
static FORCEINLINE nsresult nsIDocShell_GetLoadedTransIndex(nsIDocShell* This,LONG *aLoadedTransIndex) {
    return This->lpVtbl->GetLoadedTransIndex(This,aLoadedTransIndex);
}
static FORCEINLINE nsresult nsIDocShell_HistoryPurged(nsIDocShell* This,LONG numEntries) {
    return This->lpVtbl->HistoryPurged(This,numEntries);
}
static FORCEINLINE nsresult nsIDocShell_GetSessionStorageForPrincipal(nsIDocShell* This,nsIPrincipal *principal,const nsAString *documentURI,cpp_bool create,nsIDOMStorage **_retval) {
    return This->lpVtbl->GetSessionStorageForPrincipal(This,principal,documentURI,create,_retval);
}
static FORCEINLINE nsresult nsIDocShell_AddSessionStorage(nsIDocShell* This,nsIPrincipal *principal,nsIDOMStorage *storage) {
    return This->lpVtbl->AddSessionStorage(This,principal,storage);
}
static FORCEINLINE nsresult nsIDocShell_GetCurrentDocumentChannel(nsIDocShell* This,nsIChannel **aCurrentDocumentChannel) {
    return This->lpVtbl->GetCurrentDocumentChannel(This,aCurrentDocumentChannel);
}
static FORCEINLINE nsresult nsIDocShell_SetChildOffset(nsIDocShell* This,UINT32 offset) {
    return This->lpVtbl->SetChildOffset(This,offset);
}
static FORCEINLINE nsresult nsIDocShell_GetIsInUnload(nsIDocShell* This,cpp_bool *aIsInUnload) {
    return This->lpVtbl->GetIsInUnload(This,aIsInUnload);
}
static FORCEINLINE nsresult nsIDocShell_GetChannelIsUnsafe(nsIDocShell* This,cpp_bool *aChannelIsUnsafe) {
    return This->lpVtbl->GetChannelIsUnsafe(This,aChannelIsUnsafe);
}
static FORCEINLINE nsresult nsIDocShell_GetHasMixedActiveContentLoaded(nsIDocShell* This,cpp_bool *aHasMixedActiveContentLoaded) {
    return This->lpVtbl->GetHasMixedActiveContentLoaded(This,aHasMixedActiveContentLoaded);
}
static FORCEINLINE nsresult nsIDocShell_GetHasMixedActiveContentBlocked(nsIDocShell* This,cpp_bool *aHasMixedActiveContentBlocked) {
    return This->lpVtbl->GetHasMixedActiveContentBlocked(This,aHasMixedActiveContentBlocked);
}
static FORCEINLINE nsresult nsIDocShell_GetHasMixedDisplayContentLoaded(nsIDocShell* This,cpp_bool *aHasMixedDisplayContentLoaded) {
    return This->lpVtbl->GetHasMixedDisplayContentLoaded(This,aHasMixedDisplayContentLoaded);
}
static FORCEINLINE nsresult nsIDocShell_GetHasMixedDisplayContentBlocked(nsIDocShell* This,cpp_bool *aHasMixedDisplayContentBlocked) {
    return This->lpVtbl->GetHasMixedDisplayContentBlocked(This,aHasMixedDisplayContentBlocked);
}
static FORCEINLINE nsresult nsIDocShell_GetHasTrackingContentBlocked(nsIDocShell* This,cpp_bool *aHasTrackingContentBlocked) {
    return This->lpVtbl->GetHasTrackingContentBlocked(This,aHasTrackingContentBlocked);
}
static FORCEINLINE nsresult nsIDocShell_GetHasTrackingContentLoaded(nsIDocShell* This,cpp_bool *aHasTrackingContentLoaded) {
    return This->lpVtbl->GetHasTrackingContentLoaded(This,aHasTrackingContentLoaded);
}
static FORCEINLINE void nsIDocShell_DetachEditorFromWindow(nsIDocShell* This) {
    This->lpVtbl->DetachEditorFromWindow(This);
}
static FORCEINLINE nsresult nsIDocShell_GetIsOffScreenBrowser(nsIDocShell* This,cpp_bool *aIsOffScreenBrowser) {
    return This->lpVtbl->GetIsOffScreenBrowser(This,aIsOffScreenBrowser);
}
static FORCEINLINE nsresult nsIDocShell_SetIsOffScreenBrowser(nsIDocShell* This,cpp_bool aIsOffScreenBrowser) {
    return This->lpVtbl->SetIsOffScreenBrowser(This,aIsOffScreenBrowser);
}
static FORCEINLINE nsresult nsIDocShell_GetPrintPreview(nsIDocShell* This,nsIWebBrowserPrint **aPrintPreview) {
    return This->lpVtbl->GetPrintPreview(This,aPrintPreview);
}
static FORCEINLINE nsresult nsIDocShell_GetCanExecuteScripts(nsIDocShell* This,cpp_bool *aCanExecuteScripts) {
    return This->lpVtbl->GetCanExecuteScripts(This,aCanExecuteScripts);
}
static FORCEINLINE nsresult nsIDocShell_GetIsActive(nsIDocShell* This,cpp_bool *aIsActive) {
    return This->lpVtbl->GetIsActive(This,aIsActive);
}
static FORCEINLINE nsresult nsIDocShell_SetIsActive(nsIDocShell* This,cpp_bool aIsActive) {
    return This->lpVtbl->SetIsActive(This,aIsActive);
}
static FORCEINLINE nsresult nsIDocShell_SetIsActiveAndForeground(nsIDocShell* This,cpp_bool aIsActive) {
    return This->lpVtbl->SetIsActiveAndForeground(This,aIsActive);
}
static FORCEINLINE nsresult nsIDocShell_SetIsPrerendered(nsIDocShell* This,cpp_bool prerendered) {
    return This->lpVtbl->SetIsPrerendered(This,prerendered);
}
static FORCEINLINE nsresult nsIDocShell_GetIsPrerendered(nsIDocShell* This,cpp_bool *aIsPrerendered) {
    return This->lpVtbl->GetIsPrerendered(This,aIsPrerendered);
}
static FORCEINLINE nsresult nsIDocShell_GetHistoryID(nsIDocShell* This,UINT64 *aHistoryID) {
    return This->lpVtbl->GetHistoryID(This,aHistoryID);
}
static FORCEINLINE nsresult nsIDocShell_GetIsAppTab(nsIDocShell* This,cpp_bool *aIsAppTab) {
    return This->lpVtbl->GetIsAppTab(This,aIsAppTab);
}
static FORCEINLINE nsresult nsIDocShell_SetIsAppTab(nsIDocShell* This,cpp_bool aIsAppTab) {
    return This->lpVtbl->SetIsAppTab(This,aIsAppTab);
}
static FORCEINLINE nsresult nsIDocShell_CreateAboutBlankContentViewer(nsIDocShell* This,nsIPrincipal *aPrincipal) {
    return This->lpVtbl->CreateAboutBlankContentViewer(This,aPrincipal);
}
static FORCEINLINE nsresult nsIDocShell_GetCharset(nsIDocShell* This,nsACString *aCharset) {
    return This->lpVtbl->GetCharset(This,aCharset);
}
static FORCEINLINE nsresult nsIDocShell_SetCharset(nsIDocShell* This,nsACString *aCharset) {
    return This->lpVtbl->SetCharset(This,aCharset);
}
static FORCEINLINE nsresult nsIDocShell_GatherCharsetMenuTelemetry(nsIDocShell* This) {
    return This->lpVtbl->GatherCharsetMenuTelemetry(This);
}
static FORCEINLINE nsresult nsIDocShell_GetForcedCharset(nsIDocShell* This,nsIAtom **aForcedCharset) {
    return This->lpVtbl->GetForcedCharset(This,aForcedCharset);
}
static FORCEINLINE nsresult nsIDocShell_SetForcedCharset(nsIDocShell* This,nsIAtom *aForcedCharset) {
    return This->lpVtbl->SetForcedCharset(This,aForcedCharset);
}
static FORCEINLINE void nsIDocShell_SetParentCharset(nsIDocShell* This,const nsACString *parentCharset,LONG parentCharsetSource,nsIPrincipal *parentCharsetPrincipal) {
    This->lpVtbl->SetParentCharset(This,parentCharset,parentCharsetSource,parentCharsetPrincipal);
}
static FORCEINLINE void nsIDocShell_GetParentCharset(nsIDocShell* This,nsACString *parentCharset,LONG *parentCharsetSource,nsIPrincipal **parentCharsetPrincipal) {
    This->lpVtbl->GetParentCharset(This,parentCharset,parentCharsetSource,parentCharsetPrincipal);
}
static FORCEINLINE nsresult nsIDocShell_GetRecordProfileTimelineMarkers(nsIDocShell* This,cpp_bool *aRecordProfileTimelineMarkers) {
    return This->lpVtbl->GetRecordProfileTimelineMarkers(This,aRecordProfileTimelineMarkers);
}
static FORCEINLINE nsresult nsIDocShell_SetRecordProfileTimelineMarkers(nsIDocShell* This,cpp_bool aRecordProfileTimelineMarkers) {
    return This->lpVtbl->SetRecordProfileTimelineMarkers(This,aRecordProfileTimelineMarkers);
}
static FORCEINLINE nsresult nsIDocShell_Now(nsIDocShell* This,int *_retval) {
    return This->lpVtbl->Now(This,_retval);
}
static FORCEINLINE nsresult nsIDocShell_PopProfileTimelineMarkers(nsIDocShell* This,JSContext *cx,void *_retval) {
    return This->lpVtbl->PopProfileTimelineMarkers(This,cx,_retval);
}
static FORCEINLINE nsresult nsIDocShell_AddWeakPrivacyTransitionObserver(nsIDocShell* This,nsIPrivacyTransitionObserver *obs) {
    return This->lpVtbl->AddWeakPrivacyTransitionObserver(This,obs);
}
static FORCEINLINE nsresult nsIDocShell_AddWeakReflowObserver(nsIDocShell* This,nsISupports *obs) {
    return This->lpVtbl->AddWeakReflowObserver(This,obs);
}
static FORCEINLINE nsresult nsIDocShell_RemoveWeakReflowObserver(nsIDocShell* This,nsISupports *obs) {
    return This->lpVtbl->RemoveWeakReflowObserver(This,obs);
}
static FORCEINLINE nsresult nsIDocShell_NotifyReflowObservers(nsIDocShell* This,cpp_bool interruptible,int start,int end) {
    return This->lpVtbl->NotifyReflowObservers(This,interruptible,start,end);
}
static FORCEINLINE nsresult nsIDocShell_AddWeakScrollObserver(nsIDocShell* This,void *obs) {
    return This->lpVtbl->AddWeakScrollObserver(This,obs);
}
static FORCEINLINE nsresult nsIDocShell_RemoveWeakScrollObserver(nsIDocShell* This,void *obs) {
    return This->lpVtbl->RemoveWeakScrollObserver(This,obs);
}
static FORCEINLINE nsresult nsIDocShell_NotifyScrollObservers(nsIDocShell* This) {
    return This->lpVtbl->NotifyScrollObservers(This);
}
static FORCEINLINE nsresult nsIDocShell_GetIsApp(nsIDocShell* This,cpp_bool *aIsApp) {
    return This->lpVtbl->GetIsApp(This,aIsApp);
}
static FORCEINLINE nsresult nsIDocShell_GetFrameType(nsIDocShell* This,UINT32 *aFrameType) {
    return This->lpVtbl->GetFrameType(This,aFrameType);
}
static FORCEINLINE nsresult nsIDocShell_SetFrameType(nsIDocShell* This,UINT32 aFrameType) {
    return This->lpVtbl->SetFrameType(This,aFrameType);
}
static FORCEINLINE nsresult nsIDocShell_GetIsMozBrowserOrApp(nsIDocShell* This,cpp_bool *aIsMozBrowserOrApp) {
    return This->lpVtbl->GetIsMozBrowserOrApp(This,aIsMozBrowserOrApp);
}
static FORCEINLINE nsresult nsIDocShell_GetIsIsolatedMozBrowserElement(nsIDocShell* This,cpp_bool *aIsIsolatedMozBrowserElement) {
    return This->lpVtbl->GetIsIsolatedMozBrowserElement(This,aIsIsolatedMozBrowserElement);
}
static FORCEINLINE nsresult nsIDocShell_GetIsInIsolatedMozBrowserElement(nsIDocShell* This,cpp_bool *aIsInIsolatedMozBrowserElement) {
    return This->lpVtbl->GetIsInIsolatedMozBrowserElement(This,aIsInIsolatedMozBrowserElement);
}
static FORCEINLINE nsresult nsIDocShell_SetIsInIsolatedMozBrowserElement(nsIDocShell* This,cpp_bool aIsInIsolatedMozBrowserElement) {
    return This->lpVtbl->SetIsInIsolatedMozBrowserElement(This,aIsInIsolatedMozBrowserElement);
}
static FORCEINLINE nsresult nsIDocShell_GetIsInMozBrowserOrApp(nsIDocShell* This,cpp_bool *aIsInMozBrowserOrApp) {
    return This->lpVtbl->GetIsInMozBrowserOrApp(This,aIsInMozBrowserOrApp);
}
static FORCEINLINE nsresult nsIDocShell_GetAppId(nsIDocShell* This,UINT32 *aAppId) {
    return This->lpVtbl->GetAppId(This,aAppId);
}
static FORCEINLINE nsresult nsIDocShell_GetAppManifestURL(nsIDocShell* This,nsAString *aAppManifestURL) {
    return This->lpVtbl->GetAppManifestURL(This,aAppManifestURL);
}
static FORCEINLINE nsresult nsIDocShell_GetSameTypeParentIgnoreBrowserAndAppBoundaries(nsIDocShell* This,nsIDocShell **_retval) {
    return This->lpVtbl->GetSameTypeParentIgnoreBrowserAndAppBoundaries(This,_retval);
}
static FORCEINLINE nsresult nsIDocShell_GetSameTypeRootTreeItemIgnoreBrowserAndAppBoundaries(nsIDocShell* This,nsIDocShell **_retval) {
    return This->lpVtbl->GetSameTypeRootTreeItemIgnoreBrowserAndAppBoundaries(This,_retval);
}
static FORCEINLINE nsresult nsIDocShell_GetAsyncPanZoomEnabled(nsIDocShell* This,cpp_bool *aAsyncPanZoomEnabled) {
    return This->lpVtbl->GetAsyncPanZoomEnabled(This,aAsyncPanZoomEnabled);
}
static FORCEINLINE nsresult nsIDocShell_GetSandboxFlags(nsIDocShell* This,UINT32 *aSandboxFlags) {
    return This->lpVtbl->GetSandboxFlags(This,aSandboxFlags);
}
static FORCEINLINE nsresult nsIDocShell_SetSandboxFlags(nsIDocShell* This,UINT32 aSandboxFlags) {
    return This->lpVtbl->SetSandboxFlags(This,aSandboxFlags);
}
static FORCEINLINE nsresult nsIDocShell_GetOnePermittedSandboxedNavigator(nsIDocShell* This,nsIDocShell **aOnePermittedSandboxedNavigator) {
    return This->lpVtbl->GetOnePermittedSandboxedNavigator(This,aOnePermittedSandboxedNavigator);
}
static FORCEINLINE nsresult nsIDocShell_SetOnePermittedSandboxedNavigator(nsIDocShell* This,nsIDocShell *aOnePermittedSandboxedNavigator) {
    return This->lpVtbl->SetOnePermittedSandboxedNavigator(This,aOnePermittedSandboxedNavigator);
}
static FORCEINLINE cpp_bool nsIDocShell_IsSandboxedFrom(nsIDocShell* This,nsIDocShell *aTargetDocShell) {
    return This->lpVtbl->IsSandboxedFrom(This,aTargetDocShell);
}
static FORCEINLINE nsresult nsIDocShell_GetMixedContentChannel(nsIDocShell* This,nsIChannel **aMixedContentChannel) {
    return This->lpVtbl->GetMixedContentChannel(This,aMixedContentChannel);
}
static FORCEINLINE nsresult nsIDocShell_SetMixedContentChannel(nsIDocShell* This,nsIChannel *aMixedContentChannel) {
    return This->lpVtbl->SetMixedContentChannel(This,aMixedContentChannel);
}
static FORCEINLINE nsresult nsIDocShell_GetAllowMixedContentAndConnectionData(nsIDocShell* This,cpp_bool *rootHasSecureConnection,cpp_bool *allowMixedContent,cpp_bool *isRootDocShell) {
    return This->lpVtbl->GetAllowMixedContentAndConnectionData(This,rootHasSecureConnection,allowMixedContent,isRootDocShell);
}
static FORCEINLINE cpp_bool nsIDocShell_PluginsAllowedInCurrentDoc(nsIDocShell* This) {
    return This->lpVtbl->PluginsAllowedInCurrentDoc(This);
}
static FORCEINLINE nsresult nsIDocShell_GetFullscreenAllowed(nsIDocShell* This,cpp_bool *aFullscreenAllowed) {
    return This->lpVtbl->GetFullscreenAllowed(This,aFullscreenAllowed);
}
static FORCEINLINE nsresult nsIDocShell_SetFullscreenAllowed(nsIDocShell* This,cpp_bool allowed) {
    return This->lpVtbl->SetFullscreenAllowed(This,allowed);
}
static FORCEINLINE UINT32 nsIDocShell_OrientationLock(nsIDocShell* This) {
    return This->lpVtbl->OrientationLock(This);
}
static FORCEINLINE void nsIDocShell_SetOrientationLock(nsIDocShell* This,UINT32 orientationLock) {
    This->lpVtbl->SetOrientationLock(This,orientationLock);
}
static FORCEINLINE nsresult nsIDocShell_GetAffectPrivateSessionLifetime(nsIDocShell* This,cpp_bool *aAffectPrivateSessionLifetime) {
    return This->lpVtbl->GetAffectPrivateSessionLifetime(This,aAffectPrivateSessionLifetime);
}
static FORCEINLINE nsresult nsIDocShell_SetAffectPrivateSessionLifetime(nsIDocShell* This,cpp_bool aAffectPrivateSessionLifetime) {
    return This->lpVtbl->SetAffectPrivateSessionLifetime(This,aAffectPrivateSessionLifetime);
}
static FORCEINLINE nsresult nsIDocShell_GetMayEnableCharacterEncodingMenu(nsIDocShell* This,cpp_bool *aMayEnableCharacterEncodingMenu) {
    return This->lpVtbl->GetMayEnableCharacterEncodingMenu(This,aMayEnableCharacterEncodingMenu);
}
static FORCEINLINE nsresult nsIDocShell_GetEditor(nsIDocShell* This,nsIEditor **aEditor) {
    return This->lpVtbl->GetEditor(This,aEditor);
}
static FORCEINLINE nsresult nsIDocShell_SetEditor(nsIDocShell* This,nsIEditor *aEditor) {
    return This->lpVtbl->SetEditor(This,aEditor);
}
static FORCEINLINE nsresult nsIDocShell_GetEditable(nsIDocShell* This,cpp_bool *aEditable) {
    return This->lpVtbl->GetEditable(This,aEditable);
}
static FORCEINLINE nsresult nsIDocShell_GetHasEditingSession(nsIDocShell* This,cpp_bool *aHasEditingSession) {
    return This->lpVtbl->GetHasEditingSession(This,aHasEditingSession);
}
static FORCEINLINE nsresult nsIDocShell_MakeEditable(nsIDocShell* This,cpp_bool inWaitForUriLoad) {
    return This->lpVtbl->MakeEditable(This,inWaitForUriLoad);
}
static FORCEINLINE nsresult nsIDocShell_GetChildSHEntry(nsIDocShell* This,LONG aChildOffset,nsISHEntry **_retval) {
    return This->lpVtbl->GetChildSHEntry(This,aChildOffset,_retval);
}
static FORCEINLINE nsresult nsIDocShell_AddChildSHEntry(nsIDocShell* This,nsISHEntry *aCloneReference,nsISHEntry *aHistoryEntry,LONG aChildOffset,UINT32 aLoadType,cpp_bool aCloneChildren) {
    return This->lpVtbl->AddChildSHEntry(This,aCloneReference,aHistoryEntry,aChildOffset,aLoadType,aCloneChildren);
}
static FORCEINLINE nsresult nsIDocShell_GetUseGlobalHistory(nsIDocShell* This,cpp_bool *aUseGlobalHistory) {
    return This->lpVtbl->GetUseGlobalHistory(This,aUseGlobalHistory);
}
static FORCEINLINE nsresult nsIDocShell_SetUseGlobalHistory(nsIDocShell* This,cpp_bool aUseGlobalHistory) {
    return This->lpVtbl->SetUseGlobalHistory(This,aUseGlobalHistory);
}
static FORCEINLINE nsresult nsIDocShell_RemoveFromSessionHistory(nsIDocShell* This) {
    return This->lpVtbl->RemoveFromSessionHistory(This);
}
static FORCEINLINE nsresult nsIDocShell_GetCreatedDynamically(nsIDocShell* This,cpp_bool *aCreatedDynamically) {
    return This->lpVtbl->GetCreatedDynamically(This,aCreatedDynamically);
}
static FORCEINLINE nsresult nsIDocShell_SetCreatedDynamically(nsIDocShell* This,cpp_bool aCreatedDynamically) {
    return This->lpVtbl->SetCreatedDynamically(This,aCreatedDynamically);
}
static FORCEINLINE nsresult nsIDocShell_GetCurrentSHEntry(nsIDocShell* This,nsISHEntry **aEntry,cpp_bool *_retval) {
    return This->lpVtbl->GetCurrentSHEntry(This,aEntry,_retval);
}
static FORCEINLINE nsresult nsIDocShell_IsCommandEnabled(nsIDocShell* This,const char *command,cpp_bool *_retval) {
    return This->lpVtbl->IsCommandEnabled(This,command,_retval);
}
static FORCEINLINE nsresult nsIDocShell_DoCommand(nsIDocShell* This,const char *command) {
    return This->lpVtbl->DoCommand(This,command);
}
static FORCEINLINE cpp_bool nsIDocShell_IsInvisible(nsIDocShell* This) {
    return This->lpVtbl->IsInvisible(This);
}
static FORCEINLINE void nsIDocShell_SetInvisible(nsIDocShell* This,cpp_bool aIsInvisibleDochsell) {
    This->lpVtbl->SetInvisible(This,aIsInvisibleDochsell);
}
static FORCEINLINE void * nsIDocShell_GetScriptGlobalObject(nsIDocShell* This) {
    return This->lpVtbl->GetScriptGlobalObject(This);
}
static FORCEINLINE nsresult nsIDocShell_GetDeviceSizeIsPageSize(nsIDocShell* This,cpp_bool *aDeviceSizeIsPageSize) {
    return This->lpVtbl->GetDeviceSizeIsPageSize(This,aDeviceSizeIsPageSize);
}
static FORCEINLINE nsresult nsIDocShell_SetDeviceSizeIsPageSize(nsIDocShell* This,cpp_bool aDeviceSizeIsPageSize) {
    return This->lpVtbl->SetDeviceSizeIsPageSize(This,aDeviceSizeIsPageSize);
}
static FORCEINLINE void nsIDocShell_SetOpener(nsIDocShell* This,void *aOpener) {
    This->lpVtbl->SetOpener(This,aOpener);
}
static FORCEINLINE void * nsIDocShell_GetOpener(nsIDocShell* This) {
    return This->lpVtbl->GetOpener(This);
}
static FORCEINLINE void nsIDocShell_NotifyJSRunToCompletionStart(nsIDocShell* This,const char *aReason,const PRUnichar *functionName,const PRUnichar *fileName,UINT32 lineNumber) {
    This->lpVtbl->NotifyJSRunToCompletionStart(This,aReason,functionName,fileName,lineNumber);
}
static FORCEINLINE void nsIDocShell_NotifyJSRunToCompletionStop(nsIDocShell* This) {
    This->lpVtbl->NotifyJSRunToCompletionStop(This);
}
static FORCEINLINE nsresult nsIDocShell_GetHasLoadedNonBlankURI(nsIDocShell* This,cpp_bool *aHasLoadedNonBlankURI) {
    return This->lpVtbl->GetHasLoadedNonBlankURI(This,aHasLoadedNonBlankURI);
}
static FORCEINLINE nsresult nsIDocShell_GetPaymentRequestId(nsIDocShell* This,nsAString *aPaymentRequestId) {
    return This->lpVtbl->GetPaymentRequestId(This,aPaymentRequestId);
}
static FORCEINLINE nsresult nsIDocShell_SetPaymentRequestId(nsIDocShell* This,const nsAString *aPaymentRequestId) {
    return This->lpVtbl->SetPaymentRequestId(This,aPaymentRequestId);
}
static FORCEINLINE nsresult nsIDocShell_GetWindowDraggingAllowed(nsIDocShell* This,cpp_bool *aWindowDraggingAllowed) {
    return This->lpVtbl->GetWindowDraggingAllowed(This,aWindowDraggingAllowed);
}
static FORCEINLINE nsresult nsIDocShell_SetWindowDraggingAllowed(nsIDocShell* This,cpp_bool aWindowDraggingAllowed) {
    return This->lpVtbl->SetWindowDraggingAllowed(This,aWindowDraggingAllowed);
}
static FORCEINLINE nsresult nsIDocShell_GetCurrentScrollRestorationIsManual(nsIDocShell* This,cpp_bool *aCurrentScrollRestorationIsManual) {
    return This->lpVtbl->GetCurrentScrollRestorationIsManual(This,aCurrentScrollRestorationIsManual);
}
static FORCEINLINE nsresult nsIDocShell_SetCurrentScrollRestorationIsManual(nsIDocShell* This,cpp_bool aCurrentScrollRestorationIsManual) {
    return This->lpVtbl->SetCurrentScrollRestorationIsManual(This,aCurrentScrollRestorationIsManual);
}
static FORCEINLINE nsresult nsIDocShell_GetOriginAttributes(nsIDocShell* This,JSContext *cx,void *_retval) {
    return This->lpVtbl->GetOriginAttributes(This,cx,_retval);
}
static FORCEINLINE nsresult nsIDocShell_SetOriginAttributes(nsIDocShell* This,int aAttrs,JSContext *cx) {
    return This->lpVtbl->SetOriginAttributes(This,aAttrs,cx);
}
#endif
#endif

#endif


#endif  /* __nsIDocShell_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIMutationObserver interface
 */
#ifndef __nsIMutationObserver_INTERFACE_DEFINED__
#define __nsIMutationObserver_INTERFACE_DEFINED__

typedef struct __WIDL_nsiface_generated_name_00000007 {
} nsAttrValue;
DEFINE_GUID(IID_nsIMutationObserver, 0x6d674c17, 0x0fbc, 0x4633, 0x8f,0x46, 0x73,0x4e,0x87,0xeb,0xf0,0xc7);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("6d674c17-0fbc-4633-8f46-734e87ebf0c7")
nsIMutationObserver : public nsISupports
{
    virtual void STDMETHODCALLTYPE CharacterDataWillChange(
        nsIDocument *aDocument,
        nsIContent *aContent,
        void *aInfo) = 0;

    virtual void STDMETHODCALLTYPE CharacterDataChanged(
        nsIDocument *aDocument,
        nsIContent *aContent,
        void *aInfo) = 0;

    virtual void STDMETHODCALLTYPE AttributeWillChange(
        nsIDocument *aDocument,
        void *aElement,
        LONG aNameSpaceID,
        nsIAtom *aAttribute,
        LONG aModType,
        const nsAttrValue *aNewValue) = 0;

    virtual void STDMETHODCALLTYPE AttributeChanged(
        nsIDocument *aDocument,
        void *aElement,
        LONG aNameSpaceID,
        nsIAtom *aAttribute,
        LONG aModType,
        const nsAttrValue *aOldValue) = 0;

    virtual void STDMETHODCALLTYPE NativeAnonymousChildListChange(
        nsIDocument *aDocument,
        nsIContent *aContent,
        cpp_bool aIsRemove) = 0;

    virtual void STDMETHODCALLTYPE AttributeSetToCurrentValue(
        nsIDocument *aDocument,
        void *aElement,
        LONG aNameSpaceID,
        nsIAtom *aAttribute) = 0;

    virtual void STDMETHODCALLTYPE ContentAppended(
        nsIDocument *aDocument,
        nsIContent *aContainer,
        nsIContent *aFirstNewContent,
        LONG aNewIndexInContainer) = 0;

    virtual void STDMETHODCALLTYPE ContentInserted(
        nsIDocument *aDocument,
        nsIContent *aContainer,
        nsIContent *aChild,
        LONG aIndexInContainer) = 0;

    virtual void STDMETHODCALLTYPE ContentRemoved(
        nsIDocument *aDocument,
        nsIContent *aContainer,
        nsIContent *aChild,
        LONG aIndexInContainer,
        nsIContent *aPreviousSibling) = 0;

    virtual void STDMETHODCALLTYPE NodeWillBeDestroyed(
        const nsINode *aNode) = 0;

    virtual void STDMETHODCALLTYPE ParentChainChanged(
        nsIContent *aContent) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIMutationObserver, 0x6d674c17, 0x0fbc, 0x4633, 0x8f,0x46, 0x73,0x4e,0x87,0xeb,0xf0,0xc7)
#endif
#else
typedef struct nsIMutationObserverVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIMutationObserver *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIMutationObserver *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIMutationObserver *This);

    /*** nsIMutationObserver methods ***/
    void (STDMETHODCALLTYPE *CharacterDataWillChange)(
        nsIMutationObserver *This,
        nsIDocument *aDocument,
        nsIContent *aContent,
        void *aInfo);

    void (STDMETHODCALLTYPE *CharacterDataChanged)(
        nsIMutationObserver *This,
        nsIDocument *aDocument,
        nsIContent *aContent,
        void *aInfo);

    void (STDMETHODCALLTYPE *AttributeWillChange)(
        nsIMutationObserver *This,
        nsIDocument *aDocument,
        void *aElement,
        LONG aNameSpaceID,
        nsIAtom *aAttribute,
        LONG aModType,
        const nsAttrValue *aNewValue);

    void (STDMETHODCALLTYPE *AttributeChanged)(
        nsIMutationObserver *This,
        nsIDocument *aDocument,
        void *aElement,
        LONG aNameSpaceID,
        nsIAtom *aAttribute,
        LONG aModType,
        const nsAttrValue *aOldValue);

    void (STDMETHODCALLTYPE *NativeAnonymousChildListChange)(
        nsIMutationObserver *This,
        nsIDocument *aDocument,
        nsIContent *aContent,
        cpp_bool aIsRemove);

    void (STDMETHODCALLTYPE *AttributeSetToCurrentValue)(
        nsIMutationObserver *This,
        nsIDocument *aDocument,
        void *aElement,
        LONG aNameSpaceID,
        nsIAtom *aAttribute);

    void (STDMETHODCALLTYPE *ContentAppended)(
        nsIMutationObserver *This,
        nsIDocument *aDocument,
        nsIContent *aContainer,
        nsIContent *aFirstNewContent,
        LONG aNewIndexInContainer);

    void (STDMETHODCALLTYPE *ContentInserted)(
        nsIMutationObserver *This,
        nsIDocument *aDocument,
        nsIContent *aContainer,
        nsIContent *aChild,
        LONG aIndexInContainer);

    void (STDMETHODCALLTYPE *ContentRemoved)(
        nsIMutationObserver *This,
        nsIDocument *aDocument,
        nsIContent *aContainer,
        nsIContent *aChild,
        LONG aIndexInContainer,
        nsIContent *aPreviousSibling);

    void (STDMETHODCALLTYPE *NodeWillBeDestroyed)(
        nsIMutationObserver *This,
        const nsINode *aNode);

    void (STDMETHODCALLTYPE *ParentChainChanged)(
        nsIMutationObserver *This,
        nsIContent *aContent);

    END_INTERFACE
} nsIMutationObserverVtbl;

interface nsIMutationObserver {
    CONST_VTBL nsIMutationObserverVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIMutationObserver_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIMutationObserver_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIMutationObserver_Release(This) (This)->lpVtbl->Release(This)
/*** nsIMutationObserver methods ***/
#define nsIMutationObserver_CharacterDataWillChange(This,aDocument,aContent,aInfo) (This)->lpVtbl->CharacterDataWillChange(This,aDocument,aContent,aInfo)
#define nsIMutationObserver_CharacterDataChanged(This,aDocument,aContent,aInfo) (This)->lpVtbl->CharacterDataChanged(This,aDocument,aContent,aInfo)
#define nsIMutationObserver_AttributeWillChange(This,aDocument,aElement,aNameSpaceID,aAttribute,aModType,aNewValue) (This)->lpVtbl->AttributeWillChange(This,aDocument,aElement,aNameSpaceID,aAttribute,aModType,aNewValue)
#define nsIMutationObserver_AttributeChanged(This,aDocument,aElement,aNameSpaceID,aAttribute,aModType,aOldValue) (This)->lpVtbl->AttributeChanged(This,aDocument,aElement,aNameSpaceID,aAttribute,aModType,aOldValue)
#define nsIMutationObserver_NativeAnonymousChildListChange(This,aDocument,aContent,aIsRemove) (This)->lpVtbl->NativeAnonymousChildListChange(This,aDocument,aContent,aIsRemove)
#define nsIMutationObserver_AttributeSetToCurrentValue(This,aDocument,aElement,aNameSpaceID,aAttribute) (This)->lpVtbl->AttributeSetToCurrentValue(This,aDocument,aElement,aNameSpaceID,aAttribute)
#define nsIMutationObserver_ContentAppended(This,aDocument,aContainer,aFirstNewContent,aNewIndexInContainer) (This)->lpVtbl->ContentAppended(This,aDocument,aContainer,aFirstNewContent,aNewIndexInContainer)
#define nsIMutationObserver_ContentInserted(This,aDocument,aContainer,aChild,aIndexInContainer) (This)->lpVtbl->ContentInserted(This,aDocument,aContainer,aChild,aIndexInContainer)
#define nsIMutationObserver_ContentRemoved(This,aDocument,aContainer,aChild,aIndexInContainer,aPreviousSibling) (This)->lpVtbl->ContentRemoved(This,aDocument,aContainer,aChild,aIndexInContainer,aPreviousSibling)
#define nsIMutationObserver_NodeWillBeDestroyed(This,aNode) (This)->lpVtbl->NodeWillBeDestroyed(This,aNode)
#define nsIMutationObserver_ParentChainChanged(This,aContent) (This)->lpVtbl->ParentChainChanged(This,aContent)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIMutationObserver_QueryInterface(nsIMutationObserver* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIMutationObserver_AddRef(nsIMutationObserver* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIMutationObserver_Release(nsIMutationObserver* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIMutationObserver methods ***/
static FORCEINLINE void nsIMutationObserver_CharacterDataWillChange(nsIMutationObserver* This,nsIDocument *aDocument,nsIContent *aContent,void *aInfo) {
    This->lpVtbl->CharacterDataWillChange(This,aDocument,aContent,aInfo);
}
static FORCEINLINE void nsIMutationObserver_CharacterDataChanged(nsIMutationObserver* This,nsIDocument *aDocument,nsIContent *aContent,void *aInfo) {
    This->lpVtbl->CharacterDataChanged(This,aDocument,aContent,aInfo);
}
static FORCEINLINE void nsIMutationObserver_AttributeWillChange(nsIMutationObserver* This,nsIDocument *aDocument,void *aElement,LONG aNameSpaceID,nsIAtom *aAttribute,LONG aModType,const nsAttrValue *aNewValue) {
    This->lpVtbl->AttributeWillChange(This,aDocument,aElement,aNameSpaceID,aAttribute,aModType,aNewValue);
}
static FORCEINLINE void nsIMutationObserver_AttributeChanged(nsIMutationObserver* This,nsIDocument *aDocument,void *aElement,LONG aNameSpaceID,nsIAtom *aAttribute,LONG aModType,const nsAttrValue *aOldValue) {
    This->lpVtbl->AttributeChanged(This,aDocument,aElement,aNameSpaceID,aAttribute,aModType,aOldValue);
}
static FORCEINLINE void nsIMutationObserver_NativeAnonymousChildListChange(nsIMutationObserver* This,nsIDocument *aDocument,nsIContent *aContent,cpp_bool aIsRemove) {
    This->lpVtbl->NativeAnonymousChildListChange(This,aDocument,aContent,aIsRemove);
}
static FORCEINLINE void nsIMutationObserver_AttributeSetToCurrentValue(nsIMutationObserver* This,nsIDocument *aDocument,void *aElement,LONG aNameSpaceID,nsIAtom *aAttribute) {
    This->lpVtbl->AttributeSetToCurrentValue(This,aDocument,aElement,aNameSpaceID,aAttribute);
}
static FORCEINLINE void nsIMutationObserver_ContentAppended(nsIMutationObserver* This,nsIDocument *aDocument,nsIContent *aContainer,nsIContent *aFirstNewContent,LONG aNewIndexInContainer) {
    This->lpVtbl->ContentAppended(This,aDocument,aContainer,aFirstNewContent,aNewIndexInContainer);
}
static FORCEINLINE void nsIMutationObserver_ContentInserted(nsIMutationObserver* This,nsIDocument *aDocument,nsIContent *aContainer,nsIContent *aChild,LONG aIndexInContainer) {
    This->lpVtbl->ContentInserted(This,aDocument,aContainer,aChild,aIndexInContainer);
}
static FORCEINLINE void nsIMutationObserver_ContentRemoved(nsIMutationObserver* This,nsIDocument *aDocument,nsIContent *aContainer,nsIContent *aChild,LONG aIndexInContainer,nsIContent *aPreviousSibling) {
    This->lpVtbl->ContentRemoved(This,aDocument,aContainer,aChild,aIndexInContainer,aPreviousSibling);
}
static FORCEINLINE void nsIMutationObserver_NodeWillBeDestroyed(nsIMutationObserver* This,const nsINode *aNode) {
    This->lpVtbl->NodeWillBeDestroyed(This,aNode);
}
static FORCEINLINE void nsIMutationObserver_ParentChainChanged(nsIMutationObserver* This,nsIContent *aContent) {
    This->lpVtbl->ParentChainChanged(This,aContent);
}
#endif
#endif

#endif


#endif  /* __nsIMutationObserver_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIParser interface
 */
#ifndef __nsIParser_INTERFACE_DEFINED__
#define __nsIParser_INTERFACE_DEFINED__

typedef int nsDTDMode;
typedef int eParserCommands;
DEFINE_GUID(IID_nsIParser, 0x2c4ad90a, 0x740e, 0x4212, 0xba,0x3f, 0xfe,0xac,0xda,0x4b,0x92,0x9e);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("2c4ad90a-740e-4212-ba3f-feacda4b929e")
nsIParser : public nsISupports
{
    virtual cpp_bool STDMETHODCALLTYPE IsParserEnabled(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetChannel(
        nsIChannel **aChannel) = 0;

    virtual void STDMETHODCALLTYPE SetContentSink(
        nsIContentSink *aSink) = 0;

    virtual nsIContentSink * STDMETHODCALLTYPE GetContentSink(
        ) = 0;

    virtual void STDMETHODCALLTYPE GetCommand(
        nsACString *aCommand) = 0;

    virtual void STDMETHODCALLTYPE SetCommand2(
        const char *aCommand) = 0;

    virtual void STDMETHODCALLTYPE SetCommand(
        eParserCommands aParserCommand) = 0;

    virtual void STDMETHODCALLTYPE SetDocumentCharset(
        const nsACString *aCharset,
        LONG aSource) = 0;

    virtual void STDMETHODCALLTYPE GetDocumentCharset(
        nsACString *oCharset,
        LONG *oSource) = 0;

    virtual nsresult STDMETHODCALLTYPE GetDTD(
        nsIDTD **aDTD) = 0;

    virtual nsIStreamListener * STDMETHODCALLTYPE GetStreamListener(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE ContinueInterruptedParsing(
        ) = 0;

    virtual void STDMETHODCALLTYPE BlockParser(
        ) = 0;

    virtual void STDMETHODCALLTYPE UnblockParser(
        ) = 0;

    virtual void STDMETHODCALLTYPE ContinueInterruptedParsingAsync(
        ) = 0;

    virtual cpp_bool STDMETHODCALLTYPE IsComplete(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE Parse(
        nsIURI *aURL,
        nsIRequestObserver *aListener,
        void *aKey,
        nsDTDMode aMode) = 0;

    virtual nsresult STDMETHODCALLTYPE Terminate(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE ParseFragment(
        const nsAString *aSourceBuffer,
        void *aTagStack) = 0;

    virtual nsresult STDMETHODCALLTYPE BuildModel(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE CancelParsingEvents(
        ) = 0;

    virtual void STDMETHODCALLTYPE Reset(
        ) = 0;

    virtual cpp_bool STDMETHODCALLTYPE IsInsertionPointDefined(
        ) = 0;

    virtual void STDMETHODCALLTYPE BeginEvaluatingParserInsertedScript(
        ) = 0;

    virtual void STDMETHODCALLTYPE EndEvaluatingParserInsertedScript(
        ) = 0;

    virtual void STDMETHODCALLTYPE MarkAsNotScriptCreated(
        const char *aCommand) = 0;

    virtual cpp_bool STDMETHODCALLTYPE IsScriptCreated(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIParser, 0x2c4ad90a, 0x740e, 0x4212, 0xba,0x3f, 0xfe,0xac,0xda,0x4b,0x92,0x9e)
#endif
#else
typedef struct nsIParserVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIParser *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIParser *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIParser *This);

    /*** nsIParser methods ***/
    cpp_bool (STDMETHODCALLTYPE *IsParserEnabled)(
        nsIParser *This);

    nsresult (STDMETHODCALLTYPE *GetChannel)(
        nsIParser *This,
        nsIChannel **aChannel);

    void (STDMETHODCALLTYPE *SetContentSink)(
        nsIParser *This,
        nsIContentSink *aSink);

    nsIContentSink * (STDMETHODCALLTYPE *GetContentSink)(
        nsIParser *This);

    void (STDMETHODCALLTYPE *GetCommand)(
        nsIParser *This,
        nsACString *aCommand);

    void (STDMETHODCALLTYPE *SetCommand2)(
        nsIParser *This,
        const char *aCommand);

    void (STDMETHODCALLTYPE *SetCommand)(
        nsIParser *This,
        eParserCommands aParserCommand);

    void (STDMETHODCALLTYPE *SetDocumentCharset)(
        nsIParser *This,
        const nsACString *aCharset,
        LONG aSource);

    void (STDMETHODCALLTYPE *GetDocumentCharset)(
        nsIParser *This,
        nsACString *oCharset,
        LONG *oSource);

    nsresult (STDMETHODCALLTYPE *GetDTD)(
        nsIParser *This,
        nsIDTD **aDTD);

    nsIStreamListener * (STDMETHODCALLTYPE *GetStreamListener)(
        nsIParser *This);

    nsresult (STDMETHODCALLTYPE *ContinueInterruptedParsing)(
        nsIParser *This);

    void (STDMETHODCALLTYPE *BlockParser)(
        nsIParser *This);

    void (STDMETHODCALLTYPE *UnblockParser)(
        nsIParser *This);

    void (STDMETHODCALLTYPE *ContinueInterruptedParsingAsync)(
        nsIParser *This);

    cpp_bool (STDMETHODCALLTYPE *IsComplete)(
        nsIParser *This);

    nsresult (STDMETHODCALLTYPE *Parse)(
        nsIParser *This,
        nsIURI *aURL,
        nsIRequestObserver *aListener,
        void *aKey,
        nsDTDMode aMode);

    nsresult (STDMETHODCALLTYPE *Terminate)(
        nsIParser *This);

    nsresult (STDMETHODCALLTYPE *ParseFragment)(
        nsIParser *This,
        const nsAString *aSourceBuffer,
        void *aTagStack);

    nsresult (STDMETHODCALLTYPE *BuildModel)(
        nsIParser *This);

    nsresult (STDMETHODCALLTYPE *CancelParsingEvents)(
        nsIParser *This);

    void (STDMETHODCALLTYPE *Reset)(
        nsIParser *This);

    cpp_bool (STDMETHODCALLTYPE *IsInsertionPointDefined)(
        nsIParser *This);

    void (STDMETHODCALLTYPE *BeginEvaluatingParserInsertedScript)(
        nsIParser *This);

    void (STDMETHODCALLTYPE *EndEvaluatingParserInsertedScript)(
        nsIParser *This);

    void (STDMETHODCALLTYPE *MarkAsNotScriptCreated)(
        nsIParser *This,
        const char *aCommand);

    cpp_bool (STDMETHODCALLTYPE *IsScriptCreated)(
        nsIParser *This);

    END_INTERFACE
} nsIParserVtbl;

interface nsIParser {
    CONST_VTBL nsIParserVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIParser_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIParser_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIParser_Release(This) (This)->lpVtbl->Release(This)
/*** nsIParser methods ***/
#define nsIParser_IsParserEnabled(This) (This)->lpVtbl->IsParserEnabled(This)
#define nsIParser_GetChannel(This,aChannel) (This)->lpVtbl->GetChannel(This,aChannel)
#define nsIParser_SetContentSink(This,aSink) (This)->lpVtbl->SetContentSink(This,aSink)
#define nsIParser_GetContentSink(This) (This)->lpVtbl->GetContentSink(This)
#define nsIParser_GetCommand(This,aCommand) (This)->lpVtbl->GetCommand(This,aCommand)
#define nsIParser_SetCommand2(This,aCommand) (This)->lpVtbl->SetCommand2(This,aCommand)
#define nsIParser_SetCommand(This,aParserCommand) (This)->lpVtbl->SetCommand(This,aParserCommand)
#define nsIParser_SetDocumentCharset(This,aCharset,aSource) (This)->lpVtbl->SetDocumentCharset(This,aCharset,aSource)
#define nsIParser_GetDocumentCharset(This,oCharset,oSource) (This)->lpVtbl->GetDocumentCharset(This,oCharset,oSource)
#define nsIParser_GetDTD(This,aDTD) (This)->lpVtbl->GetDTD(This,aDTD)
#define nsIParser_GetStreamListener(This) (This)->lpVtbl->GetStreamListener(This)
#define nsIParser_ContinueInterruptedParsing(This) (This)->lpVtbl->ContinueInterruptedParsing(This)
#define nsIParser_BlockParser(This) (This)->lpVtbl->BlockParser(This)
#define nsIParser_UnblockParser(This) (This)->lpVtbl->UnblockParser(This)
#define nsIParser_ContinueInterruptedParsingAsync(This) (This)->lpVtbl->ContinueInterruptedParsingAsync(This)
#define nsIParser_IsComplete(This) (This)->lpVtbl->IsComplete(This)
#define nsIParser_Parse(This,aURL,aListener,aKey,aMode) (This)->lpVtbl->Parse(This,aURL,aListener,aKey,aMode)
#define nsIParser_Terminate(This) (This)->lpVtbl->Terminate(This)
#define nsIParser_ParseFragment(This,aSourceBuffer,aTagStack) (This)->lpVtbl->ParseFragment(This,aSourceBuffer,aTagStack)
#define nsIParser_BuildModel(This) (This)->lpVtbl->BuildModel(This)
#define nsIParser_CancelParsingEvents(This) (This)->lpVtbl->CancelParsingEvents(This)
#define nsIParser_Reset(This) (This)->lpVtbl->Reset(This)
#define nsIParser_IsInsertionPointDefined(This) (This)->lpVtbl->IsInsertionPointDefined(This)
#define nsIParser_BeginEvaluatingParserInsertedScript(This) (This)->lpVtbl->BeginEvaluatingParserInsertedScript(This)
#define nsIParser_EndEvaluatingParserInsertedScript(This) (This)->lpVtbl->EndEvaluatingParserInsertedScript(This)
#define nsIParser_MarkAsNotScriptCreated(This,aCommand) (This)->lpVtbl->MarkAsNotScriptCreated(This,aCommand)
#define nsIParser_IsScriptCreated(This) (This)->lpVtbl->IsScriptCreated(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIParser_QueryInterface(nsIParser* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIParser_AddRef(nsIParser* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIParser_Release(nsIParser* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIParser methods ***/
static FORCEINLINE cpp_bool nsIParser_IsParserEnabled(nsIParser* This) {
    return This->lpVtbl->IsParserEnabled(This);
}
static FORCEINLINE nsresult nsIParser_GetChannel(nsIParser* This,nsIChannel **aChannel) {
    return This->lpVtbl->GetChannel(This,aChannel);
}
static FORCEINLINE void nsIParser_SetContentSink(nsIParser* This,nsIContentSink *aSink) {
    This->lpVtbl->SetContentSink(This,aSink);
}
static FORCEINLINE nsIContentSink * nsIParser_GetContentSink(nsIParser* This) {
    return This->lpVtbl->GetContentSink(This);
}
static FORCEINLINE void nsIParser_GetCommand(nsIParser* This,nsACString *aCommand) {
    This->lpVtbl->GetCommand(This,aCommand);
}
static FORCEINLINE void nsIParser_SetCommand2(nsIParser* This,const char *aCommand) {
    This->lpVtbl->SetCommand2(This,aCommand);
}
static FORCEINLINE void nsIParser_SetCommand(nsIParser* This,eParserCommands aParserCommand) {
    This->lpVtbl->SetCommand(This,aParserCommand);
}
static FORCEINLINE void nsIParser_SetDocumentCharset(nsIParser* This,const nsACString *aCharset,LONG aSource) {
    This->lpVtbl->SetDocumentCharset(This,aCharset,aSource);
}
static FORCEINLINE void nsIParser_GetDocumentCharset(nsIParser* This,nsACString *oCharset,LONG *oSource) {
    This->lpVtbl->GetDocumentCharset(This,oCharset,oSource);
}
static FORCEINLINE nsresult nsIParser_GetDTD(nsIParser* This,nsIDTD **aDTD) {
    return This->lpVtbl->GetDTD(This,aDTD);
}
static FORCEINLINE nsIStreamListener * nsIParser_GetStreamListener(nsIParser* This) {
    return This->lpVtbl->GetStreamListener(This);
}
static FORCEINLINE nsresult nsIParser_ContinueInterruptedParsing(nsIParser* This) {
    return This->lpVtbl->ContinueInterruptedParsing(This);
}
static FORCEINLINE void nsIParser_BlockParser(nsIParser* This) {
    This->lpVtbl->BlockParser(This);
}
static FORCEINLINE void nsIParser_UnblockParser(nsIParser* This) {
    This->lpVtbl->UnblockParser(This);
}
static FORCEINLINE void nsIParser_ContinueInterruptedParsingAsync(nsIParser* This) {
    This->lpVtbl->ContinueInterruptedParsingAsync(This);
}
static FORCEINLINE cpp_bool nsIParser_IsComplete(nsIParser* This) {
    return This->lpVtbl->IsComplete(This);
}
static FORCEINLINE nsresult nsIParser_Parse(nsIParser* This,nsIURI *aURL,nsIRequestObserver *aListener,void *aKey,nsDTDMode aMode) {
    return This->lpVtbl->Parse(This,aURL,aListener,aKey,aMode);
}
static FORCEINLINE nsresult nsIParser_Terminate(nsIParser* This) {
    return This->lpVtbl->Terminate(This);
}
static FORCEINLINE nsresult nsIParser_ParseFragment(nsIParser* This,const nsAString *aSourceBuffer,void *aTagStack) {
    return This->lpVtbl->ParseFragment(This,aSourceBuffer,aTagStack);
}
static FORCEINLINE nsresult nsIParser_BuildModel(nsIParser* This) {
    return This->lpVtbl->BuildModel(This);
}
static FORCEINLINE nsresult nsIParser_CancelParsingEvents(nsIParser* This) {
    return This->lpVtbl->CancelParsingEvents(This);
}
static FORCEINLINE void nsIParser_Reset(nsIParser* This) {
    This->lpVtbl->Reset(This);
}
static FORCEINLINE cpp_bool nsIParser_IsInsertionPointDefined(nsIParser* This) {
    return This->lpVtbl->IsInsertionPointDefined(This);
}
static FORCEINLINE void nsIParser_BeginEvaluatingParserInsertedScript(nsIParser* This) {
    This->lpVtbl->BeginEvaluatingParserInsertedScript(This);
}
static FORCEINLINE void nsIParser_EndEvaluatingParserInsertedScript(nsIParser* This) {
    This->lpVtbl->EndEvaluatingParserInsertedScript(This);
}
static FORCEINLINE void nsIParser_MarkAsNotScriptCreated(nsIParser* This,const char *aCommand) {
    This->lpVtbl->MarkAsNotScriptCreated(This,aCommand);
}
static FORCEINLINE cpp_bool nsIParser_IsScriptCreated(nsIParser* This) {
    return This->lpVtbl->IsScriptCreated(This);
}
#endif
#endif

#endif


#endif  /* __nsIParser_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIDocumentObserver interface
 */
#ifndef __nsIDocumentObserver_INTERFACE_DEFINED__
#define __nsIDocumentObserver_INTERFACE_DEFINED__

typedef UINT32 nsUpdateType;
typedef struct __WIDL_nsiface_generated_name_00000008 {
    void *dummy;
} mozilla_StyleSheetHandle;
typedef struct __WIDL_nsiface_generated_name_00000009 {
    UINT64 mStates;
} EventStates;
DEFINE_GUID(IID_nsIDocumentObserver, 0x71041fa3, 0x6dd7, 0x4cde, 0xbb,0x76, 0xae,0xcc,0x69,0xe1,0x75,0x78);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("71041fa3-6dd7-4cde-bb76-aecc69e17578")
nsIDocumentObserver : public nsIMutationObserver
{
    virtual void STDMETHODCALLTYPE BeginUpdate(
        nsIDocument *aDocument,
        nsUpdateType aUpdateType) = 0;

    virtual void STDMETHODCALLTYPE EndUpdate(
        nsIDocument *aDocument,
        nsUpdateType aUpdateType) = 0;

    virtual void STDMETHODCALLTYPE BeginLoad(
        nsIDocument *aDocument) = 0;

    virtual void STDMETHODCALLTYPE EndLoad(
        nsIDocument *aDocument) = 0;

    virtual void STDMETHODCALLTYPE ContentStatesChanged(
        nsIDocument *aDocument,
        nsIContent *aContent,
        EventStates aStateMask) = 0;

    virtual void STDMETHODCALLTYPE DocumentStatesChanged(
        nsIDocument *aDocument,
        EventStates aStateMask) = 0;

    virtual void STDMETHODCALLTYPE StyleSheetAdded(
        mozilla_StyleSheetHandle aStyleSheet,
        cpp_bool aDocumentSheet) = 0;

    virtual void STDMETHODCALLTYPE StyleSheetRemoved(
        mozilla_StyleSheetHandle aStyleSheet,
        cpp_bool aDocumentSheet) = 0;

    virtual void STDMETHODCALLTYPE StyleSheetApplicableStateChanged(
        mozilla_StyleSheetHandle aStyleSheet) = 0;

    virtual void STDMETHODCALLTYPE StyleRuleChanged(
        mozilla_StyleSheetHandle aStyleSheet) = 0;

    virtual void STDMETHODCALLTYPE StyleRuleAdded(
        mozilla_StyleSheetHandle aStyleSheet) = 0;

    virtual void STDMETHODCALLTYPE StyleRuleRemoved(
        mozilla_StyleSheetHandle aStyleSheet) = 0;

    virtual void STDMETHODCALLTYPE BindToDocument(
        nsIDocument *aDocument,
        nsIContent *aContent) = 0;

    virtual void STDMETHODCALLTYPE AttemptToExecuteScript(
        nsIContent *aContent,
        nsIParser *aParser,
        cpp_bool *aBlock) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIDocumentObserver, 0x71041fa3, 0x6dd7, 0x4cde, 0xbb,0x76, 0xae,0xcc,0x69,0xe1,0x75,0x78)
#endif
#else
typedef struct nsIDocumentObserverVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIDocumentObserver *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIDocumentObserver *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIDocumentObserver *This);

    /*** nsIMutationObserver methods ***/
    void (STDMETHODCALLTYPE *CharacterDataWillChange)(
        nsIDocumentObserver *This,
        nsIDocument *aDocument,
        nsIContent *aContent,
        void *aInfo);

    void (STDMETHODCALLTYPE *CharacterDataChanged)(
        nsIDocumentObserver *This,
        nsIDocument *aDocument,
        nsIContent *aContent,
        void *aInfo);

    void (STDMETHODCALLTYPE *AttributeWillChange)(
        nsIDocumentObserver *This,
        nsIDocument *aDocument,
        void *aElement,
        LONG aNameSpaceID,
        nsIAtom *aAttribute,
        LONG aModType,
        const nsAttrValue *aNewValue);

    void (STDMETHODCALLTYPE *AttributeChanged)(
        nsIDocumentObserver *This,
        nsIDocument *aDocument,
        void *aElement,
        LONG aNameSpaceID,
        nsIAtom *aAttribute,
        LONG aModType,
        const nsAttrValue *aOldValue);

    void (STDMETHODCALLTYPE *NativeAnonymousChildListChange)(
        nsIDocumentObserver *This,
        nsIDocument *aDocument,
        nsIContent *aContent,
        cpp_bool aIsRemove);

    void (STDMETHODCALLTYPE *AttributeSetToCurrentValue)(
        nsIDocumentObserver *This,
        nsIDocument *aDocument,
        void *aElement,
        LONG aNameSpaceID,
        nsIAtom *aAttribute);

    void (STDMETHODCALLTYPE *ContentAppended)(
        nsIDocumentObserver *This,
        nsIDocument *aDocument,
        nsIContent *aContainer,
        nsIContent *aFirstNewContent,
        LONG aNewIndexInContainer);

    void (STDMETHODCALLTYPE *ContentInserted)(
        nsIDocumentObserver *This,
        nsIDocument *aDocument,
        nsIContent *aContainer,
        nsIContent *aChild,
        LONG aIndexInContainer);

    void (STDMETHODCALLTYPE *ContentRemoved)(
        nsIDocumentObserver *This,
        nsIDocument *aDocument,
        nsIContent *aContainer,
        nsIContent *aChild,
        LONG aIndexInContainer,
        nsIContent *aPreviousSibling);

    void (STDMETHODCALLTYPE *NodeWillBeDestroyed)(
        nsIDocumentObserver *This,
        const nsINode *aNode);

    void (STDMETHODCALLTYPE *ParentChainChanged)(
        nsIDocumentObserver *This,
        nsIContent *aContent);

    /*** nsIDocumentObserver methods ***/
    void (STDMETHODCALLTYPE *BeginUpdate)(
        nsIDocumentObserver *This,
        nsIDocument *aDocument,
        nsUpdateType aUpdateType);

    void (STDMETHODCALLTYPE *EndUpdate)(
        nsIDocumentObserver *This,
        nsIDocument *aDocument,
        nsUpdateType aUpdateType);

    void (STDMETHODCALLTYPE *BeginLoad)(
        nsIDocumentObserver *This,
        nsIDocument *aDocument);

    void (STDMETHODCALLTYPE *EndLoad)(
        nsIDocumentObserver *This,
        nsIDocument *aDocument);

    void (STDMETHODCALLTYPE *ContentStatesChanged)(
        nsIDocumentObserver *This,
        nsIDocument *aDocument,
        nsIContent *aContent,
        EventStates aStateMask);

    void (STDMETHODCALLTYPE *DocumentStatesChanged)(
        nsIDocumentObserver *This,
        nsIDocument *aDocument,
        EventStates aStateMask);

    void (STDMETHODCALLTYPE *StyleSheetAdded)(
        nsIDocumentObserver *This,
        mozilla_StyleSheetHandle aStyleSheet,
        cpp_bool aDocumentSheet);

    void (STDMETHODCALLTYPE *StyleSheetRemoved)(
        nsIDocumentObserver *This,
        mozilla_StyleSheetHandle aStyleSheet,
        cpp_bool aDocumentSheet);

    void (STDMETHODCALLTYPE *StyleSheetApplicableStateChanged)(
        nsIDocumentObserver *This,
        mozilla_StyleSheetHandle aStyleSheet);

    void (STDMETHODCALLTYPE *StyleRuleChanged)(
        nsIDocumentObserver *This,
        mozilla_StyleSheetHandle aStyleSheet);

    void (STDMETHODCALLTYPE *StyleRuleAdded)(
        nsIDocumentObserver *This,
        mozilla_StyleSheetHandle aStyleSheet);

    void (STDMETHODCALLTYPE *StyleRuleRemoved)(
        nsIDocumentObserver *This,
        mozilla_StyleSheetHandle aStyleSheet);

    void (STDMETHODCALLTYPE *BindToDocument)(
        nsIDocumentObserver *This,
        nsIDocument *aDocument,
        nsIContent *aContent);

    void (STDMETHODCALLTYPE *AttemptToExecuteScript)(
        nsIDocumentObserver *This,
        nsIContent *aContent,
        nsIParser *aParser,
        cpp_bool *aBlock);

    END_INTERFACE
} nsIDocumentObserverVtbl;

interface nsIDocumentObserver {
    CONST_VTBL nsIDocumentObserverVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIDocumentObserver_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIDocumentObserver_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIDocumentObserver_Release(This) (This)->lpVtbl->Release(This)
/*** nsIMutationObserver methods ***/
#define nsIDocumentObserver_CharacterDataWillChange(This,aDocument,aContent,aInfo) (This)->lpVtbl->CharacterDataWillChange(This,aDocument,aContent,aInfo)
#define nsIDocumentObserver_CharacterDataChanged(This,aDocument,aContent,aInfo) (This)->lpVtbl->CharacterDataChanged(This,aDocument,aContent,aInfo)
#define nsIDocumentObserver_AttributeWillChange(This,aDocument,aElement,aNameSpaceID,aAttribute,aModType,aNewValue) (This)->lpVtbl->AttributeWillChange(This,aDocument,aElement,aNameSpaceID,aAttribute,aModType,aNewValue)
#define nsIDocumentObserver_AttributeChanged(This,aDocument,aElement,aNameSpaceID,aAttribute,aModType,aOldValue) (This)->lpVtbl->AttributeChanged(This,aDocument,aElement,aNameSpaceID,aAttribute,aModType,aOldValue)
#define nsIDocumentObserver_NativeAnonymousChildListChange(This,aDocument,aContent,aIsRemove) (This)->lpVtbl->NativeAnonymousChildListChange(This,aDocument,aContent,aIsRemove)
#define nsIDocumentObserver_AttributeSetToCurrentValue(This,aDocument,aElement,aNameSpaceID,aAttribute) (This)->lpVtbl->AttributeSetToCurrentValue(This,aDocument,aElement,aNameSpaceID,aAttribute)
#define nsIDocumentObserver_ContentAppended(This,aDocument,aContainer,aFirstNewContent,aNewIndexInContainer) (This)->lpVtbl->ContentAppended(This,aDocument,aContainer,aFirstNewContent,aNewIndexInContainer)
#define nsIDocumentObserver_ContentInserted(This,aDocument,aContainer,aChild,aIndexInContainer) (This)->lpVtbl->ContentInserted(This,aDocument,aContainer,aChild,aIndexInContainer)
#define nsIDocumentObserver_ContentRemoved(This,aDocument,aContainer,aChild,aIndexInContainer,aPreviousSibling) (This)->lpVtbl->ContentRemoved(This,aDocument,aContainer,aChild,aIndexInContainer,aPreviousSibling)
#define nsIDocumentObserver_NodeWillBeDestroyed(This,aNode) (This)->lpVtbl->NodeWillBeDestroyed(This,aNode)
#define nsIDocumentObserver_ParentChainChanged(This,aContent) (This)->lpVtbl->ParentChainChanged(This,aContent)
/*** nsIDocumentObserver methods ***/
#define nsIDocumentObserver_BeginUpdate(This,aDocument,aUpdateType) (This)->lpVtbl->BeginUpdate(This,aDocument,aUpdateType)
#define nsIDocumentObserver_EndUpdate(This,aDocument,aUpdateType) (This)->lpVtbl->EndUpdate(This,aDocument,aUpdateType)
#define nsIDocumentObserver_BeginLoad(This,aDocument) (This)->lpVtbl->BeginLoad(This,aDocument)
#define nsIDocumentObserver_EndLoad(This,aDocument) (This)->lpVtbl->EndLoad(This,aDocument)
#define nsIDocumentObserver_ContentStatesChanged(This,aDocument,aContent,aStateMask) (This)->lpVtbl->ContentStatesChanged(This,aDocument,aContent,aStateMask)
#define nsIDocumentObserver_DocumentStatesChanged(This,aDocument,aStateMask) (This)->lpVtbl->DocumentStatesChanged(This,aDocument,aStateMask)
#define nsIDocumentObserver_StyleSheetAdded(This,aStyleSheet,aDocumentSheet) (This)->lpVtbl->StyleSheetAdded(This,aStyleSheet,aDocumentSheet)
#define nsIDocumentObserver_StyleSheetRemoved(This,aStyleSheet,aDocumentSheet) (This)->lpVtbl->StyleSheetRemoved(This,aStyleSheet,aDocumentSheet)
#define nsIDocumentObserver_StyleSheetApplicableStateChanged(This,aStyleSheet) (This)->lpVtbl->StyleSheetApplicableStateChanged(This,aStyleSheet)
#define nsIDocumentObserver_StyleRuleChanged(This,aStyleSheet) (This)->lpVtbl->StyleRuleChanged(This,aStyleSheet)
#define nsIDocumentObserver_StyleRuleAdded(This,aStyleSheet) (This)->lpVtbl->StyleRuleAdded(This,aStyleSheet)
#define nsIDocumentObserver_StyleRuleRemoved(This,aStyleSheet) (This)->lpVtbl->StyleRuleRemoved(This,aStyleSheet)
#define nsIDocumentObserver_BindToDocument(This,aDocument,aContent) (This)->lpVtbl->BindToDocument(This,aDocument,aContent)
#define nsIDocumentObserver_AttemptToExecuteScript(This,aContent,aParser,aBlock) (This)->lpVtbl->AttemptToExecuteScript(This,aContent,aParser,aBlock)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIDocumentObserver_QueryInterface(nsIDocumentObserver* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIDocumentObserver_AddRef(nsIDocumentObserver* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIDocumentObserver_Release(nsIDocumentObserver* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIMutationObserver methods ***/
static FORCEINLINE void nsIDocumentObserver_CharacterDataWillChange(nsIDocumentObserver* This,nsIDocument *aDocument,nsIContent *aContent,void *aInfo) {
    This->lpVtbl->CharacterDataWillChange(This,aDocument,aContent,aInfo);
}
static FORCEINLINE void nsIDocumentObserver_CharacterDataChanged(nsIDocumentObserver* This,nsIDocument *aDocument,nsIContent *aContent,void *aInfo) {
    This->lpVtbl->CharacterDataChanged(This,aDocument,aContent,aInfo);
}
static FORCEINLINE void nsIDocumentObserver_AttributeWillChange(nsIDocumentObserver* This,nsIDocument *aDocument,void *aElement,LONG aNameSpaceID,nsIAtom *aAttribute,LONG aModType,const nsAttrValue *aNewValue) {
    This->lpVtbl->AttributeWillChange(This,aDocument,aElement,aNameSpaceID,aAttribute,aModType,aNewValue);
}
static FORCEINLINE void nsIDocumentObserver_AttributeChanged(nsIDocumentObserver* This,nsIDocument *aDocument,void *aElement,LONG aNameSpaceID,nsIAtom *aAttribute,LONG aModType,const nsAttrValue *aOldValue) {
    This->lpVtbl->AttributeChanged(This,aDocument,aElement,aNameSpaceID,aAttribute,aModType,aOldValue);
}
static FORCEINLINE void nsIDocumentObserver_NativeAnonymousChildListChange(nsIDocumentObserver* This,nsIDocument *aDocument,nsIContent *aContent,cpp_bool aIsRemove) {
    This->lpVtbl->NativeAnonymousChildListChange(This,aDocument,aContent,aIsRemove);
}
static FORCEINLINE void nsIDocumentObserver_AttributeSetToCurrentValue(nsIDocumentObserver* This,nsIDocument *aDocument,void *aElement,LONG aNameSpaceID,nsIAtom *aAttribute) {
    This->lpVtbl->AttributeSetToCurrentValue(This,aDocument,aElement,aNameSpaceID,aAttribute);
}
static FORCEINLINE void nsIDocumentObserver_ContentAppended(nsIDocumentObserver* This,nsIDocument *aDocument,nsIContent *aContainer,nsIContent *aFirstNewContent,LONG aNewIndexInContainer) {
    This->lpVtbl->ContentAppended(This,aDocument,aContainer,aFirstNewContent,aNewIndexInContainer);
}
static FORCEINLINE void nsIDocumentObserver_ContentInserted(nsIDocumentObserver* This,nsIDocument *aDocument,nsIContent *aContainer,nsIContent *aChild,LONG aIndexInContainer) {
    This->lpVtbl->ContentInserted(This,aDocument,aContainer,aChild,aIndexInContainer);
}
static FORCEINLINE void nsIDocumentObserver_ContentRemoved(nsIDocumentObserver* This,nsIDocument *aDocument,nsIContent *aContainer,nsIContent *aChild,LONG aIndexInContainer,nsIContent *aPreviousSibling) {
    This->lpVtbl->ContentRemoved(This,aDocument,aContainer,aChild,aIndexInContainer,aPreviousSibling);
}
static FORCEINLINE void nsIDocumentObserver_NodeWillBeDestroyed(nsIDocumentObserver* This,const nsINode *aNode) {
    This->lpVtbl->NodeWillBeDestroyed(This,aNode);
}
static FORCEINLINE void nsIDocumentObserver_ParentChainChanged(nsIDocumentObserver* This,nsIContent *aContent) {
    This->lpVtbl->ParentChainChanged(This,aContent);
}
/*** nsIDocumentObserver methods ***/
static FORCEINLINE void nsIDocumentObserver_BeginUpdate(nsIDocumentObserver* This,nsIDocument *aDocument,nsUpdateType aUpdateType) {
    This->lpVtbl->BeginUpdate(This,aDocument,aUpdateType);
}
static FORCEINLINE void nsIDocumentObserver_EndUpdate(nsIDocumentObserver* This,nsIDocument *aDocument,nsUpdateType aUpdateType) {
    This->lpVtbl->EndUpdate(This,aDocument,aUpdateType);
}
static FORCEINLINE void nsIDocumentObserver_BeginLoad(nsIDocumentObserver* This,nsIDocument *aDocument) {
    This->lpVtbl->BeginLoad(This,aDocument);
}
static FORCEINLINE void nsIDocumentObserver_EndLoad(nsIDocumentObserver* This,nsIDocument *aDocument) {
    This->lpVtbl->EndLoad(This,aDocument);
}
static FORCEINLINE void nsIDocumentObserver_ContentStatesChanged(nsIDocumentObserver* This,nsIDocument *aDocument,nsIContent *aContent,EventStates aStateMask) {
    This->lpVtbl->ContentStatesChanged(This,aDocument,aContent,aStateMask);
}
static FORCEINLINE void nsIDocumentObserver_DocumentStatesChanged(nsIDocumentObserver* This,nsIDocument *aDocument,EventStates aStateMask) {
    This->lpVtbl->DocumentStatesChanged(This,aDocument,aStateMask);
}
static FORCEINLINE void nsIDocumentObserver_StyleSheetAdded(nsIDocumentObserver* This,mozilla_StyleSheetHandle aStyleSheet,cpp_bool aDocumentSheet) {
    This->lpVtbl->StyleSheetAdded(This,aStyleSheet,aDocumentSheet);
}
static FORCEINLINE void nsIDocumentObserver_StyleSheetRemoved(nsIDocumentObserver* This,mozilla_StyleSheetHandle aStyleSheet,cpp_bool aDocumentSheet) {
    This->lpVtbl->StyleSheetRemoved(This,aStyleSheet,aDocumentSheet);
}
static FORCEINLINE void nsIDocumentObserver_StyleSheetApplicableStateChanged(nsIDocumentObserver* This,mozilla_StyleSheetHandle aStyleSheet) {
    This->lpVtbl->StyleSheetApplicableStateChanged(This,aStyleSheet);
}
static FORCEINLINE void nsIDocumentObserver_StyleRuleChanged(nsIDocumentObserver* This,mozilla_StyleSheetHandle aStyleSheet) {
    This->lpVtbl->StyleRuleChanged(This,aStyleSheet);
}
static FORCEINLINE void nsIDocumentObserver_StyleRuleAdded(nsIDocumentObserver* This,mozilla_StyleSheetHandle aStyleSheet) {
    This->lpVtbl->StyleRuleAdded(This,aStyleSheet);
}
static FORCEINLINE void nsIDocumentObserver_StyleRuleRemoved(nsIDocumentObserver* This,mozilla_StyleSheetHandle aStyleSheet) {
    This->lpVtbl->StyleRuleRemoved(This,aStyleSheet);
}
static FORCEINLINE void nsIDocumentObserver_BindToDocument(nsIDocumentObserver* This,nsIDocument *aDocument,nsIContent *aContent) {
    This->lpVtbl->BindToDocument(This,aDocument,aContent);
}
static FORCEINLINE void nsIDocumentObserver_AttemptToExecuteScript(nsIDocumentObserver* This,nsIContent *aContent,nsIParser *aParser,cpp_bool *aBlock) {
    This->lpVtbl->AttemptToExecuteScript(This,aContent,aParser,aBlock);
}
#endif
#endif

#endif


#endif  /* __nsIDocumentObserver_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIContentUtils interface
 */
#ifndef __nsIContentUtils_INTERFACE_DEFINED__
#define __nsIContentUtils_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIContentUtils, 0x3682dd99, 0x8560, 0x44f4, 0x9b,0x8f, 0xcc,0xce,0x9d,0x7b,0x96,0xfb);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("3682dd99-8560-44f4-9b8f-ccce9d7b96fb")
nsIContentUtils : public nsISupports
{
    virtual cpp_bool STDMETHODCALLTYPE IsSafeToRunScript(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE AddDocumentObserver(
        nsIDocument *aDocument,
        nsIDocumentObserver *aObserver) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveDocumentObserver(
        nsIDocument *aDocument,
        nsIDocumentObserver *aObserver) = 0;

    virtual nsresult STDMETHODCALLTYPE AddMutationObserver(
        nsINode *aNode,
        nsIMutationObserver *aObserver) = 0;

    virtual nsresult STDMETHODCALLTYPE RemoveMutationObserver(
        nsINode *aNode,
        nsIMutationObserver *aObserver) = 0;

    virtual nsresult STDMETHODCALLTYPE AddScriptRunner(
        nsIRunnable *aRunnable) = 0;

    virtual JSContext * STDMETHODCALLTYPE GetContextFromDocument(
        nsIDocument *aDocument) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIContentUtils, 0x3682dd99, 0x8560, 0x44f4, 0x9b,0x8f, 0xcc,0xce,0x9d,0x7b,0x96,0xfb)
#endif
#else
typedef struct nsIContentUtilsVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIContentUtils *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIContentUtils *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIContentUtils *This);

    /*** nsIContentUtils methods ***/
    cpp_bool (STDMETHODCALLTYPE *IsSafeToRunScript)(
        nsIContentUtils *This);

    nsresult (STDMETHODCALLTYPE *AddDocumentObserver)(
        nsIContentUtils *This,
        nsIDocument *aDocument,
        nsIDocumentObserver *aObserver);

    nsresult (STDMETHODCALLTYPE *RemoveDocumentObserver)(
        nsIContentUtils *This,
        nsIDocument *aDocument,
        nsIDocumentObserver *aObserver);

    nsresult (STDMETHODCALLTYPE *AddMutationObserver)(
        nsIContentUtils *This,
        nsINode *aNode,
        nsIMutationObserver *aObserver);

    nsresult (STDMETHODCALLTYPE *RemoveMutationObserver)(
        nsIContentUtils *This,
        nsINode *aNode,
        nsIMutationObserver *aObserver);

    nsresult (STDMETHODCALLTYPE *AddScriptRunner)(
        nsIContentUtils *This,
        nsIRunnable *aRunnable);

    JSContext * (STDMETHODCALLTYPE *GetContextFromDocument)(
        nsIContentUtils *This,
        nsIDocument *aDocument);

    END_INTERFACE
} nsIContentUtilsVtbl;

interface nsIContentUtils {
    CONST_VTBL nsIContentUtilsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIContentUtils_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIContentUtils_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIContentUtils_Release(This) (This)->lpVtbl->Release(This)
/*** nsIContentUtils methods ***/
#define nsIContentUtils_IsSafeToRunScript(This) (This)->lpVtbl->IsSafeToRunScript(This)
#define nsIContentUtils_AddDocumentObserver(This,aDocument,aObserver) (This)->lpVtbl->AddDocumentObserver(This,aDocument,aObserver)
#define nsIContentUtils_RemoveDocumentObserver(This,aDocument,aObserver) (This)->lpVtbl->RemoveDocumentObserver(This,aDocument,aObserver)
#define nsIContentUtils_AddMutationObserver(This,aNode,aObserver) (This)->lpVtbl->AddMutationObserver(This,aNode,aObserver)
#define nsIContentUtils_RemoveMutationObserver(This,aNode,aObserver) (This)->lpVtbl->RemoveMutationObserver(This,aNode,aObserver)
#define nsIContentUtils_AddScriptRunner(This,aRunnable) (This)->lpVtbl->AddScriptRunner(This,aRunnable)
#define nsIContentUtils_GetContextFromDocument(This,aDocument) (This)->lpVtbl->GetContextFromDocument(This,aDocument)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIContentUtils_QueryInterface(nsIContentUtils* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIContentUtils_AddRef(nsIContentUtils* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIContentUtils_Release(nsIContentUtils* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIContentUtils methods ***/
static FORCEINLINE cpp_bool nsIContentUtils_IsSafeToRunScript(nsIContentUtils* This) {
    return This->lpVtbl->IsSafeToRunScript(This);
}
static FORCEINLINE nsresult nsIContentUtils_AddDocumentObserver(nsIContentUtils* This,nsIDocument *aDocument,nsIDocumentObserver *aObserver) {
    return This->lpVtbl->AddDocumentObserver(This,aDocument,aObserver);
}
static FORCEINLINE nsresult nsIContentUtils_RemoveDocumentObserver(nsIContentUtils* This,nsIDocument *aDocument,nsIDocumentObserver *aObserver) {
    return This->lpVtbl->RemoveDocumentObserver(This,aDocument,aObserver);
}
static FORCEINLINE nsresult nsIContentUtils_AddMutationObserver(nsIContentUtils* This,nsINode *aNode,nsIMutationObserver *aObserver) {
    return This->lpVtbl->AddMutationObserver(This,aNode,aObserver);
}
static FORCEINLINE nsresult nsIContentUtils_RemoveMutationObserver(nsIContentUtils* This,nsINode *aNode,nsIMutationObserver *aObserver) {
    return This->lpVtbl->RemoveMutationObserver(This,aNode,aObserver);
}
static FORCEINLINE nsresult nsIContentUtils_AddScriptRunner(nsIContentUtils* This,nsIRunnable *aRunnable) {
    return This->lpVtbl->AddScriptRunner(This,aRunnable);
}
static FORCEINLINE JSContext * nsIContentUtils_GetContextFromDocument(nsIContentUtils* This,nsIDocument *aDocument) {
    return This->lpVtbl->GetContextFromDocument(This,aDocument);
}
#endif
#endif

#endif


#endif  /* __nsIContentUtils_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIAudioChannelAgentCallback interface
 */
#ifndef __nsIAudioChannelAgentCallback_INTERFACE_DEFINED__
#define __nsIAudioChannelAgentCallback_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIAudioChannelAgentCallback, 0x15c05894, 0x408e, 0x4798, 0xb5,0x27, 0xa8,0xc3,0x2d,0x9c,0x5f,0x8c);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("15c05894-408e-4798-b527-a8c32d9c5f8c")
nsIAudioChannelAgentCallback : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE WindowVolumeChanged(
        float aVolume,
        cpp_bool aMuted) = 0;

    virtual nsresult STDMETHODCALLTYPE WindowAudioCaptureChanged(
        cpp_bool aCapture) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIAudioChannelAgentCallback, 0x15c05894, 0x408e, 0x4798, 0xb5,0x27, 0xa8,0xc3,0x2d,0x9c,0x5f,0x8c)
#endif
#else
typedef struct nsIAudioChannelAgentCallbackVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIAudioChannelAgentCallback *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIAudioChannelAgentCallback *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIAudioChannelAgentCallback *This);

    /*** nsIAudioChannelAgentCallback methods ***/
    nsresult (STDMETHODCALLTYPE *WindowVolumeChanged)(
        nsIAudioChannelAgentCallback *This,
        float aVolume,
        cpp_bool aMuted);

    nsresult (STDMETHODCALLTYPE *WindowAudioCaptureChanged)(
        nsIAudioChannelAgentCallback *This,
        cpp_bool aCapture);

    END_INTERFACE
} nsIAudioChannelAgentCallbackVtbl;

interface nsIAudioChannelAgentCallback {
    CONST_VTBL nsIAudioChannelAgentCallbackVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIAudioChannelAgentCallback_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIAudioChannelAgentCallback_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIAudioChannelAgentCallback_Release(This) (This)->lpVtbl->Release(This)
/*** nsIAudioChannelAgentCallback methods ***/
#define nsIAudioChannelAgentCallback_WindowVolumeChanged(This,aVolume,aMuted) (This)->lpVtbl->WindowVolumeChanged(This,aVolume,aMuted)
#define nsIAudioChannelAgentCallback_WindowAudioCaptureChanged(This,aCapture) (This)->lpVtbl->WindowAudioCaptureChanged(This,aCapture)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIAudioChannelAgentCallback_QueryInterface(nsIAudioChannelAgentCallback* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIAudioChannelAgentCallback_AddRef(nsIAudioChannelAgentCallback* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIAudioChannelAgentCallback_Release(nsIAudioChannelAgentCallback* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIAudioChannelAgentCallback methods ***/
static FORCEINLINE nsresult nsIAudioChannelAgentCallback_WindowVolumeChanged(nsIAudioChannelAgentCallback* This,float aVolume,cpp_bool aMuted) {
    return This->lpVtbl->WindowVolumeChanged(This,aVolume,aMuted);
}
static FORCEINLINE nsresult nsIAudioChannelAgentCallback_WindowAudioCaptureChanged(nsIAudioChannelAgentCallback* This,cpp_bool aCapture) {
    return This->lpVtbl->WindowAudioCaptureChanged(This,aCapture);
}
#endif
#endif

#endif


#endif  /* __nsIAudioChannelAgentCallback_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIPluginInstance interface
 */
#ifndef __nsIPluginInstance_INTERFACE_DEFINED__
#define __nsIPluginInstance_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIPluginInstance, 0x8f672000, 0xbab9, 0x4c60, 0xaa,0xaf, 0x26,0x73,0xc4,0xe2,0xa4,0xc6);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("8f672000-bab9-4c60-aaaf-2673c4e2a4c6")
nsIPluginInstance : public nsIAudioChannelAgentCallback
{
    virtual nsresult STDMETHODCALLTYPE GetDOMElement(
        nsIDOMElement **aDOMElement) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIPluginInstance, 0x8f672000, 0xbab9, 0x4c60, 0xaa,0xaf, 0x26,0x73,0xc4,0xe2,0xa4,0xc6)
#endif
#else
typedef struct nsIPluginInstanceVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIPluginInstance *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIPluginInstance *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIPluginInstance *This);

    /*** nsIAudioChannelAgentCallback methods ***/
    nsresult (STDMETHODCALLTYPE *WindowVolumeChanged)(
        nsIPluginInstance *This,
        float aVolume,
        cpp_bool aMuted);

    nsresult (STDMETHODCALLTYPE *WindowAudioCaptureChanged)(
        nsIPluginInstance *This,
        cpp_bool aCapture);

    /*** nsIPluginInstance methods ***/
    nsresult (STDMETHODCALLTYPE *GetDOMElement)(
        nsIPluginInstance *This,
        nsIDOMElement **aDOMElement);

    END_INTERFACE
} nsIPluginInstanceVtbl;

interface nsIPluginInstance {
    CONST_VTBL nsIPluginInstanceVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIPluginInstance_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIPluginInstance_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIPluginInstance_Release(This) (This)->lpVtbl->Release(This)
/*** nsIAudioChannelAgentCallback methods ***/
#define nsIPluginInstance_WindowVolumeChanged(This,aVolume,aMuted) (This)->lpVtbl->WindowVolumeChanged(This,aVolume,aMuted)
#define nsIPluginInstance_WindowAudioCaptureChanged(This,aCapture) (This)->lpVtbl->WindowAudioCaptureChanged(This,aCapture)
/*** nsIPluginInstance methods ***/
#define nsIPluginInstance_GetDOMElement(This,aDOMElement) (This)->lpVtbl->GetDOMElement(This,aDOMElement)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIPluginInstance_QueryInterface(nsIPluginInstance* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIPluginInstance_AddRef(nsIPluginInstance* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIPluginInstance_Release(nsIPluginInstance* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIAudioChannelAgentCallback methods ***/
static FORCEINLINE nsresult nsIPluginInstance_WindowVolumeChanged(nsIPluginInstance* This,float aVolume,cpp_bool aMuted) {
    return This->lpVtbl->WindowVolumeChanged(This,aVolume,aMuted);
}
static FORCEINLINE nsresult nsIPluginInstance_WindowAudioCaptureChanged(nsIPluginInstance* This,cpp_bool aCapture) {
    return This->lpVtbl->WindowAudioCaptureChanged(This,aCapture);
}
/*** nsIPluginInstance methods ***/
static FORCEINLINE nsresult nsIPluginInstance_GetDOMElement(nsIPluginInstance* This,nsIDOMElement **aDOMElement) {
    return This->lpVtbl->GetDOMElement(This,aDOMElement);
}
#endif
#endif

#endif


#endif  /* __nsIPluginInstance_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIGlobalObject interface
 */
#ifndef __nsIGlobalObject_INTERFACE_DEFINED__
#define __nsIGlobalObject_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIGlobalObject, 0x11afa8be, 0xd997, 0x4e07, 0xa6,0xa3, 0x6f,0x87,0x2e,0xc3,0xee,0x7f);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("11afa8be-d997-4e07-a6a3-6f872ec3ee7f")
nsIGlobalObject : public nsISupports
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIGlobalObject, 0x11afa8be, 0xd997, 0x4e07, 0xa6,0xa3, 0x6f,0x87,0x2e,0xc3,0xee,0x7f)
#endif
#else
typedef struct nsIGlobalObjectVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIGlobalObject *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIGlobalObject *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIGlobalObject *This);

    END_INTERFACE
} nsIGlobalObjectVtbl;

interface nsIGlobalObject {
    CONST_VTBL nsIGlobalObjectVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIGlobalObject_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIGlobalObject_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIGlobalObject_Release(This) (This)->lpVtbl->Release(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIGlobalObject_QueryInterface(nsIGlobalObject* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIGlobalObject_AddRef(nsIGlobalObject* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIGlobalObject_Release(nsIGlobalObject* This) {
    return This->lpVtbl->Release(This);
}
#endif
#endif

#endif


#endif  /* __nsIGlobalObject_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIScriptObjectPrincipal interface
 */
#ifndef __nsIScriptObjectPrincipal_INTERFACE_DEFINED__
#define __nsIScriptObjectPrincipal_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIScriptObjectPrincipal, 0x3eedba38, 0x8d22, 0x41e1, 0x81,0x7a, 0x0e,0x43,0xe1,0x65,0xb6,0x64);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("3eedba38-8d22-41e1-817a-0e43e165b664")
nsIScriptObjectPrincipal : public nsISupports
{
    virtual nsIPrincipal * STDMETHODCALLTYPE GetPrincipal(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIScriptObjectPrincipal, 0x3eedba38, 0x8d22, 0x41e1, 0x81,0x7a, 0x0e,0x43,0xe1,0x65,0xb6,0x64)
#endif
#else
typedef struct nsIScriptObjectPrincipalVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIScriptObjectPrincipal *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIScriptObjectPrincipal *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIScriptObjectPrincipal *This);

    /*** nsIScriptObjectPrincipal methods ***/
    nsIPrincipal * (STDMETHODCALLTYPE *GetPrincipal)(
        nsIScriptObjectPrincipal *This);

    END_INTERFACE
} nsIScriptObjectPrincipalVtbl;

interface nsIScriptObjectPrincipal {
    CONST_VTBL nsIScriptObjectPrincipalVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIScriptObjectPrincipal_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIScriptObjectPrincipal_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIScriptObjectPrincipal_Release(This) (This)->lpVtbl->Release(This)
/*** nsIScriptObjectPrincipal methods ***/
#define nsIScriptObjectPrincipal_GetPrincipal(This) (This)->lpVtbl->GetPrincipal(This)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIScriptObjectPrincipal_QueryInterface(nsIScriptObjectPrincipal* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIScriptObjectPrincipal_AddRef(nsIScriptObjectPrincipal* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIScriptObjectPrincipal_Release(nsIScriptObjectPrincipal* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIScriptObjectPrincipal methods ***/
static FORCEINLINE nsIPrincipal * nsIScriptObjectPrincipal_GetPrincipal(nsIScriptObjectPrincipal* This) {
    return This->lpVtbl->GetPrincipal(This);
}
#endif
#endif

#endif


#endif  /* __nsIScriptObjectPrincipal_INTERFACE_DEFINED__ */

/*****************************************************************************
 * nsIXMLHttpRequest interface
 */
#ifndef __nsIXMLHttpRequest_INTERFACE_DEFINED__
#define __nsIXMLHttpRequest_INTERFACE_DEFINED__

DEFINE_GUID(IID_nsIXMLHttpRequest, 0x6f54214c, 0x7175, 0x498d, 0x9d,0x2d, 0x04,0x29,0xe3,0x8c,0x28,0x69);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("6f54214c-7175-498d-9d2d-0429e38c2869")
nsIXMLHttpRequest : public nsISupports
{
    virtual nsresult STDMETHODCALLTYPE GetChannel(
        nsIChannel **aChannel) = 0;

    virtual nsresult STDMETHODCALLTYPE GetResponseXML(
        nsIDOMDocument **aResponseXML) = 0;

    virtual nsresult STDMETHODCALLTYPE GetResponseText(
        nsAString *aResponseText) = 0;

    virtual nsresult STDMETHODCALLTYPE GetResponseType(
        nsAString *aResponseType) = 0;

    virtual nsresult STDMETHODCALLTYPE SetResponseType(
        const nsAString *aResponseType) = 0;

    virtual nsresult STDMETHODCALLTYPE GetResponse(
        JSContext *cx,
        int aResponse) = 0;

    virtual nsresult STDMETHODCALLTYPE GetStatus(
        UINT32 *aStatus) = 0;

    virtual nsresult STDMETHODCALLTYPE GetStatusText(
        nsACString *aStatusText) = 0;

    virtual nsresult STDMETHODCALLTYPE SlowAbort(
        ) = 0;

    virtual nsresult STDMETHODCALLTYPE GetAllResponseHeaders(
        nsACString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE GetResponseHeader(
        const nsACString *header,
        nsACString *_retval) = 0;

    virtual nsresult STDMETHODCALLTYPE Open(
        const nsACString *method,
        const nsACString *url,
        cpp_bool async,
        const nsAString *user,
        const nsAString *password,
        UINT8 _argc) = 0;

    virtual nsresult STDMETHODCALLTYPE Send(
        nsIVariant *body) = 0;

    virtual nsresult STDMETHODCALLTYPE SetRequestHeader(
        const nsACString *header,
        const nsACString *value) = 0;

    virtual nsresult STDMETHODCALLTYPE GetTimeout(
        UINT32 *aTimeout) = 0;

    virtual nsresult STDMETHODCALLTYPE SetTimeout(
        UINT32 aTimeout) = 0;

    virtual nsresult STDMETHODCALLTYPE GetReadyState(
        UINT16 *aReadyState) = 0;

    virtual nsresult STDMETHODCALLTYPE SlowOverrideMimeType(
        const nsAString *mimetype) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMozBackgroundRequest(
        cpp_bool *aMozBackgroundRequest) = 0;

    virtual nsresult STDMETHODCALLTYPE SetMozBackgroundRequest(
        cpp_bool aMozBackgroundRequest) = 0;

    virtual nsresult STDMETHODCALLTYPE GetWithCredentials(
        cpp_bool *aWithCredentials) = 0;

    virtual nsresult STDMETHODCALLTYPE SetWithCredentials(
        cpp_bool aWithCredentials) = 0;

    virtual nsresult STDMETHODCALLTYPE Init(
        nsIPrincipal *principal,
        nsIScriptContext *scriptContext,
        nsIGlobalObject *globalObject,
        nsIURI *baseURI,
        nsILoadGroup *loadGroup) = 0;

    virtual nsresult STDMETHODCALLTYPE GetUpload(
        nsIXMLHttpRequestUpload **aUpload) = 0;

    virtual nsresult STDMETHODCALLTYPE GetOnreadystatechange(
        JSContext *cx,
        int aOnreadystatechange) = 0;

    virtual nsresult STDMETHODCALLTYPE SetOnreadystatechange(
        JSContext *cx,
        int aOnreadystatechange) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMozAnon(
        cpp_bool *aMozAnon) = 0;

    virtual nsresult STDMETHODCALLTYPE GetMozSystem(
        cpp_bool *aMozSystem) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(nsIXMLHttpRequest, 0x6f54214c, 0x7175, 0x498d, 0x9d,0x2d, 0x04,0x29,0xe3,0x8c,0x28,0x69)
#endif
#else
typedef struct nsIXMLHttpRequestVtbl {
    BEGIN_INTERFACE

    /*** nsISupports methods ***/
    nsresult (STDMETHODCALLTYPE *QueryInterface)(
        nsIXMLHttpRequest *This,
        nsIIDRef riid,
        void **result);

    nsrefcnt (STDMETHODCALLTYPE *AddRef)(
        nsIXMLHttpRequest *This);

    nsrefcnt (STDMETHODCALLTYPE *Release)(
        nsIXMLHttpRequest *This);

    /*** nsIXMLHttpRequest methods ***/
    nsresult (STDMETHODCALLTYPE *GetChannel)(
        nsIXMLHttpRequest *This,
        nsIChannel **aChannel);

    nsresult (STDMETHODCALLTYPE *GetResponseXML)(
        nsIXMLHttpRequest *This,
        nsIDOMDocument **aResponseXML);

    nsresult (STDMETHODCALLTYPE *GetResponseText)(
        nsIXMLHttpRequest *This,
        nsAString *aResponseText);

    nsresult (STDMETHODCALLTYPE *GetResponseType)(
        nsIXMLHttpRequest *This,
        nsAString *aResponseType);

    nsresult (STDMETHODCALLTYPE *SetResponseType)(
        nsIXMLHttpRequest *This,
        const nsAString *aResponseType);

    nsresult (STDMETHODCALLTYPE *GetResponse)(
        nsIXMLHttpRequest *This,
        JSContext *cx,
        int aResponse);

    nsresult (STDMETHODCALLTYPE *GetStatus)(
        nsIXMLHttpRequest *This,
        UINT32 *aStatus);

    nsresult (STDMETHODCALLTYPE *GetStatusText)(
        nsIXMLHttpRequest *This,
        nsACString *aStatusText);

    nsresult (STDMETHODCALLTYPE *SlowAbort)(
        nsIXMLHttpRequest *This);

    nsresult (STDMETHODCALLTYPE *GetAllResponseHeaders)(
        nsIXMLHttpRequest *This,
        nsACString *_retval);

    nsresult (STDMETHODCALLTYPE *GetResponseHeader)(
        nsIXMLHttpRequest *This,
        const nsACString *header,
        nsACString *_retval);

    nsresult (STDMETHODCALLTYPE *Open)(
        nsIXMLHttpRequest *This,
        const nsACString *method,
        const nsACString *url,
        cpp_bool async,
        const nsAString *user,
        const nsAString *password,
        UINT8 _argc);

    nsresult (STDMETHODCALLTYPE *Send)(
        nsIXMLHttpRequest *This,
        nsIVariant *body);

    nsresult (STDMETHODCALLTYPE *SetRequestHeader)(
        nsIXMLHttpRequest *This,
        const nsACString *header,
        const nsACString *value);

    nsresult (STDMETHODCALLTYPE *GetTimeout)(
        nsIXMLHttpRequest *This,
        UINT32 *aTimeout);

    nsresult (STDMETHODCALLTYPE *SetTimeout)(
        nsIXMLHttpRequest *This,
        UINT32 aTimeout);

    nsresult (STDMETHODCALLTYPE *GetReadyState)(
        nsIXMLHttpRequest *This,
        UINT16 *aReadyState);

    nsresult (STDMETHODCALLTYPE *SlowOverrideMimeType)(
        nsIXMLHttpRequest *This,
        const nsAString *mimetype);

    nsresult (STDMETHODCALLTYPE *GetMozBackgroundRequest)(
        nsIXMLHttpRequest *This,
        cpp_bool *aMozBackgroundRequest);

    nsresult (STDMETHODCALLTYPE *SetMozBackgroundRequest)(
        nsIXMLHttpRequest *This,
        cpp_bool aMozBackgroundRequest);

    nsresult (STDMETHODCALLTYPE *GetWithCredentials)(
        nsIXMLHttpRequest *This,
        cpp_bool *aWithCredentials);

    nsresult (STDMETHODCALLTYPE *SetWithCredentials)(
        nsIXMLHttpRequest *This,
        cpp_bool aWithCredentials);

    nsresult (STDMETHODCALLTYPE *Init)(
        nsIXMLHttpRequest *This,
        nsIPrincipal *principal,
        nsIScriptContext *scriptContext,
        nsIGlobalObject *globalObject,
        nsIURI *baseURI,
        nsILoadGroup *loadGroup);

    nsresult (STDMETHODCALLTYPE *GetUpload)(
        nsIXMLHttpRequest *This,
        nsIXMLHttpRequestUpload **aUpload);

    nsresult (STDMETHODCALLTYPE *GetOnreadystatechange)(
        nsIXMLHttpRequest *This,
        JSContext *cx,
        int aOnreadystatechange);

    nsresult (STDMETHODCALLTYPE *SetOnreadystatechange)(
        nsIXMLHttpRequest *This,
        JSContext *cx,
        int aOnreadystatechange);

    nsresult (STDMETHODCALLTYPE *GetMozAnon)(
        nsIXMLHttpRequest *This,
        cpp_bool *aMozAnon);

    nsresult (STDMETHODCALLTYPE *GetMozSystem)(
        nsIXMLHttpRequest *This,
        cpp_bool *aMozSystem);

    END_INTERFACE
} nsIXMLHttpRequestVtbl;

interface nsIXMLHttpRequest {
    CONST_VTBL nsIXMLHttpRequestVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** nsISupports methods ***/
#define nsIXMLHttpRequest_QueryInterface(This,riid,result) (This)->lpVtbl->QueryInterface(This,riid,result)
#define nsIXMLHttpRequest_AddRef(This) (This)->lpVtbl->AddRef(This)
#define nsIXMLHttpRequest_Release(This) (This)->lpVtbl->Release(This)
/*** nsIXMLHttpRequest methods ***/
#define nsIXMLHttpRequest_GetChannel(This,aChannel) (This)->lpVtbl->GetChannel(This,aChannel)
#define nsIXMLHttpRequest_GetResponseXML(This,aResponseXML) (This)->lpVtbl->GetResponseXML(This,aResponseXML)
#define nsIXMLHttpRequest_GetResponseText(This,aResponseText) (This)->lpVtbl->GetResponseText(This,aResponseText)
#define nsIXMLHttpRequest_GetResponseType(This,aResponseType) (This)->lpVtbl->GetResponseType(This,aResponseType)
#define nsIXMLHttpRequest_SetResponseType(This,aResponseType) (This)->lpVtbl->SetResponseType(This,aResponseType)
#define nsIXMLHttpRequest_GetResponse(This,cx,aResponse) (This)->lpVtbl->GetResponse(This,cx,aResponse)
#define nsIXMLHttpRequest_GetStatus(This,aStatus) (This)->lpVtbl->GetStatus(This,aStatus)
#define nsIXMLHttpRequest_GetStatusText(This,aStatusText) (This)->lpVtbl->GetStatusText(This,aStatusText)
#define nsIXMLHttpRequest_SlowAbort(This) (This)->lpVtbl->SlowAbort(This)
#define nsIXMLHttpRequest_GetAllResponseHeaders(This,_retval) (This)->lpVtbl->GetAllResponseHeaders(This,_retval)
#define nsIXMLHttpRequest_GetResponseHeader(This,header,_retval) (This)->lpVtbl->GetResponseHeader(This,header,_retval)
#define nsIXMLHttpRequest_Open(This,method,url,async,user,password,_argc) (This)->lpVtbl->Open(This,method,url,async,user,password,_argc)
#define nsIXMLHttpRequest_Send(This,body) (This)->lpVtbl->Send(This,body)
#define nsIXMLHttpRequest_SetRequestHeader(This,header,value) (This)->lpVtbl->SetRequestHeader(This,header,value)
#define nsIXMLHttpRequest_GetTimeout(This,aTimeout) (This)->lpVtbl->GetTimeout(This,aTimeout)
#define nsIXMLHttpRequest_SetTimeout(This,aTimeout) (This)->lpVtbl->SetTimeout(This,aTimeout)
#define nsIXMLHttpRequest_GetReadyState(This,aReadyState) (This)->lpVtbl->GetReadyState(This,aReadyState)
#define nsIXMLHttpRequest_SlowOverrideMimeType(This,mimetype) (This)->lpVtbl->SlowOverrideMimeType(This,mimetype)
#define nsIXMLHttpRequest_GetMozBackgroundRequest(This,aMozBackgroundRequest) (This)->lpVtbl->GetMozBackgroundRequest(This,aMozBackgroundRequest)
#define nsIXMLHttpRequest_SetMozBackgroundRequest(This,aMozBackgroundRequest) (This)->lpVtbl->SetMozBackgroundRequest(This,aMozBackgroundRequest)
#define nsIXMLHttpRequest_GetWithCredentials(This,aWithCredentials) (This)->lpVtbl->GetWithCredentials(This,aWithCredentials)
#define nsIXMLHttpRequest_SetWithCredentials(This,aWithCredentials) (This)->lpVtbl->SetWithCredentials(This,aWithCredentials)
#define nsIXMLHttpRequest_Init(This,principal,scriptContext,globalObject,baseURI,loadGroup) (This)->lpVtbl->Init(This,principal,scriptContext,globalObject,baseURI,loadGroup)
#define nsIXMLHttpRequest_GetUpload(This,aUpload) (This)->lpVtbl->GetUpload(This,aUpload)
#define nsIXMLHttpRequest_GetOnreadystatechange(This,cx,aOnreadystatechange) (This)->lpVtbl->GetOnreadystatechange(This,cx,aOnreadystatechange)
#define nsIXMLHttpRequest_SetOnreadystatechange(This,cx,aOnreadystatechange) (This)->lpVtbl->SetOnreadystatechange(This,cx,aOnreadystatechange)
#define nsIXMLHttpRequest_GetMozAnon(This,aMozAnon) (This)->lpVtbl->GetMozAnon(This,aMozAnon)
#define nsIXMLHttpRequest_GetMozSystem(This,aMozSystem) (This)->lpVtbl->GetMozSystem(This,aMozSystem)
#else
/*** nsISupports methods ***/
static FORCEINLINE nsresult nsIXMLHttpRequest_QueryInterface(nsIXMLHttpRequest* This,nsIIDRef riid,void **result) {
    return This->lpVtbl->QueryInterface(This,riid,result);
}
static FORCEINLINE nsrefcnt nsIXMLHttpRequest_AddRef(nsIXMLHttpRequest* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE nsrefcnt nsIXMLHttpRequest_Release(nsIXMLHttpRequest* This) {
    return This->lpVtbl->Release(This);
}
/*** nsIXMLHttpRequest methods ***/
static FORCEINLINE nsresult nsIXMLHttpRequest_GetChannel(nsIXMLHttpRequest* This,nsIChannel **aChannel) {
    return This->lpVtbl->GetChannel(This,aChannel);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_GetResponseXML(nsIXMLHttpRequest* This,nsIDOMDocument **aResponseXML) {
    return This->lpVtbl->GetResponseXML(This,aResponseXML);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_GetResponseText(nsIXMLHttpRequest* This,nsAString *aResponseText) {
    return This->lpVtbl->GetResponseText(This,aResponseText);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_GetResponseType(nsIXMLHttpRequest* This,nsAString *aResponseType) {
    return This->lpVtbl->GetResponseType(This,aResponseType);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_SetResponseType(nsIXMLHttpRequest* This,const nsAString *aResponseType) {
    return This->lpVtbl->SetResponseType(This,aResponseType);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_GetResponse(nsIXMLHttpRequest* This,JSContext *cx,int aResponse) {
    return This->lpVtbl->GetResponse(This,cx,aResponse);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_GetStatus(nsIXMLHttpRequest* This,UINT32 *aStatus) {
    return This->lpVtbl->GetStatus(This,aStatus);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_GetStatusText(nsIXMLHttpRequest* This,nsACString *aStatusText) {
    return This->lpVtbl->GetStatusText(This,aStatusText);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_SlowAbort(nsIXMLHttpRequest* This) {
    return This->lpVtbl->SlowAbort(This);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_GetAllResponseHeaders(nsIXMLHttpRequest* This,nsACString *_retval) {
    return This->lpVtbl->GetAllResponseHeaders(This,_retval);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_GetResponseHeader(nsIXMLHttpRequest* This,const nsACString *header,nsACString *_retval) {
    return This->lpVtbl->GetResponseHeader(This,header,_retval);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_Open(nsIXMLHttpRequest* This,const nsACString *method,const nsACString *url,cpp_bool async,const nsAString *user,const nsAString *password,UINT8 _argc) {
    return This->lpVtbl->Open(This,method,url,async,user,password,_argc);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_Send(nsIXMLHttpRequest* This,nsIVariant *body) {
    return This->lpVtbl->Send(This,body);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_SetRequestHeader(nsIXMLHttpRequest* This,const nsACString *header,const nsACString *value) {
    return This->lpVtbl->SetRequestHeader(This,header,value);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_GetTimeout(nsIXMLHttpRequest* This,UINT32 *aTimeout) {
    return This->lpVtbl->GetTimeout(This,aTimeout);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_SetTimeout(nsIXMLHttpRequest* This,UINT32 aTimeout) {
    return This->lpVtbl->SetTimeout(This,aTimeout);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_GetReadyState(nsIXMLHttpRequest* This,UINT16 *aReadyState) {
    return This->lpVtbl->GetReadyState(This,aReadyState);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_SlowOverrideMimeType(nsIXMLHttpRequest* This,const nsAString *mimetype) {
    return This->lpVtbl->SlowOverrideMimeType(This,mimetype);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_GetMozBackgroundRequest(nsIXMLHttpRequest* This,cpp_bool *aMozBackgroundRequest) {
    return This->lpVtbl->GetMozBackgroundRequest(This,aMozBackgroundRequest);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_SetMozBackgroundRequest(nsIXMLHttpRequest* This,cpp_bool aMozBackgroundRequest) {
    return This->lpVtbl->SetMozBackgroundRequest(This,aMozBackgroundRequest);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_GetWithCredentials(nsIXMLHttpRequest* This,cpp_bool *aWithCredentials) {
    return This->lpVtbl->GetWithCredentials(This,aWithCredentials);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_SetWithCredentials(nsIXMLHttpRequest* This,cpp_bool aWithCredentials) {
    return This->lpVtbl->SetWithCredentials(This,aWithCredentials);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_Init(nsIXMLHttpRequest* This,nsIPrincipal *principal,nsIScriptContext *scriptContext,nsIGlobalObject *globalObject,nsIURI *baseURI,nsILoadGroup *loadGroup) {
    return This->lpVtbl->Init(This,principal,scriptContext,globalObject,baseURI,loadGroup);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_GetUpload(nsIXMLHttpRequest* This,nsIXMLHttpRequestUpload **aUpload) {
    return This->lpVtbl->GetUpload(This,aUpload);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_GetOnreadystatechange(nsIXMLHttpRequest* This,JSContext *cx,int aOnreadystatechange) {
    return This->lpVtbl->GetOnreadystatechange(This,cx,aOnreadystatechange);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_SetOnreadystatechange(nsIXMLHttpRequest* This,JSContext *cx,int aOnreadystatechange) {
    return This->lpVtbl->SetOnreadystatechange(This,cx,aOnreadystatechange);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_GetMozAnon(nsIXMLHttpRequest* This,cpp_bool *aMozAnon) {
    return This->lpVtbl->GetMozAnon(This,aMozAnon);
}
static FORCEINLINE nsresult nsIXMLHttpRequest_GetMozSystem(nsIXMLHttpRequest* This,cpp_bool *aMozSystem) {
    return This->lpVtbl->GetMozSystem(This,aMozSystem);
}
#endif
#endif

#endif


#endif  /* __nsIXMLHttpRequest_INTERFACE_DEFINED__ */

DEFINE_GUID(IID_nsCycleCollectionISupports, 0xc61eac14,0x5f7a,0x4481,0x96,0x5e,0x7e,0xaa,0x6e,0xff,0xa8,0x5f);
/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __nsiface_h__ */
