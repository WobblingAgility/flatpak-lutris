/*** Autogenerated by WIDL 3.8 from msscript.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __msscript_h__
#define __msscript_h__

/* Forward declarations */

#ifndef __IScriptProcedure_FWD_DEFINED__
#define __IScriptProcedure_FWD_DEFINED__
typedef interface IScriptProcedure IScriptProcedure;
#ifdef __cplusplus
interface IScriptProcedure;
#endif /* __cplusplus */
#endif

#ifndef __IScriptProcedureCollection_FWD_DEFINED__
#define __IScriptProcedureCollection_FWD_DEFINED__
typedef interface IScriptProcedureCollection IScriptProcedureCollection;
#ifdef __cplusplus
interface IScriptProcedureCollection;
#endif /* __cplusplus */
#endif

#ifndef __IScriptModule_FWD_DEFINED__
#define __IScriptModule_FWD_DEFINED__
typedef interface IScriptModule IScriptModule;
#ifdef __cplusplus
interface IScriptModule;
#endif /* __cplusplus */
#endif

#ifndef __IScriptModuleCollection_FWD_DEFINED__
#define __IScriptModuleCollection_FWD_DEFINED__
typedef interface IScriptModuleCollection IScriptModuleCollection;
#ifdef __cplusplus
interface IScriptModuleCollection;
#endif /* __cplusplus */
#endif

#ifndef __IScriptError_FWD_DEFINED__
#define __IScriptError_FWD_DEFINED__
typedef interface IScriptError IScriptError;
#ifdef __cplusplus
interface IScriptError;
#endif /* __cplusplus */
#endif

#ifndef __IScriptControl_FWD_DEFINED__
#define __IScriptControl_FWD_DEFINED__
typedef interface IScriptControl IScriptControl;
#ifdef __cplusplus
interface IScriptControl;
#endif /* __cplusplus */
#endif

#ifndef __DScriptControlSource_FWD_DEFINED__
#define __DScriptControlSource_FWD_DEFINED__
typedef interface DScriptControlSource DScriptControlSource;
#ifdef __cplusplus
interface DScriptControlSource;
#endif /* __cplusplus */
#endif

#ifndef __Procedure_FWD_DEFINED__
#define __Procedure_FWD_DEFINED__
#ifdef __cplusplus
typedef class Procedure Procedure;
#else
typedef struct Procedure Procedure;
#endif /* defined __cplusplus */
#endif /* defined __Procedure_FWD_DEFINED__ */

#ifndef __Procedures_FWD_DEFINED__
#define __Procedures_FWD_DEFINED__
#ifdef __cplusplus
typedef class Procedures Procedures;
#else
typedef struct Procedures Procedures;
#endif /* defined __cplusplus */
#endif /* defined __Procedures_FWD_DEFINED__ */

#ifndef __Module_FWD_DEFINED__
#define __Module_FWD_DEFINED__
#ifdef __cplusplus
typedef class Module Module;
#else
typedef struct Module Module;
#endif /* defined __cplusplus */
#endif /* defined __Module_FWD_DEFINED__ */

#ifndef __Modules_FWD_DEFINED__
#define __Modules_FWD_DEFINED__
#ifdef __cplusplus
typedef class Modules Modules;
#else
typedef struct Modules Modules;
#endif /* defined __cplusplus */
#endif /* defined __Modules_FWD_DEFINED__ */

#ifndef __Error_FWD_DEFINED__
#define __Error_FWD_DEFINED__
#ifdef __cplusplus
typedef class Error Error;
#else
typedef struct Error Error;
#endif /* defined __cplusplus */
#endif /* defined __Error_FWD_DEFINED__ */

#ifndef __ScriptControl_FWD_DEFINED__
#define __ScriptControl_FWD_DEFINED__
#ifdef __cplusplus
typedef class ScriptControl ScriptControl;
#else
typedef struct ScriptControl ScriptControl;
#endif /* defined __cplusplus */
#endif /* defined __ScriptControl_FWD_DEFINED__ */

/* Headers for imported files */

#include <oaidl.h>

#ifdef __cplusplus
extern "C" {
#endif


DEFINE_GUID(LIBID_MSScriptControl, 0x0e59f1d2, 0x1fbe, 0x11d0, 0x8f,0xf2, 0x00,0xa0,0xd1,0x00,0x38,0xbc);

typedef enum __WIDL_msscript_generated_name_00000002 {
    Initialized = 0,
    Connected = 1
} ScriptControlStates;
/*****************************************************************************
 * IScriptProcedure interface
 */
#ifndef __IScriptProcedure_INTERFACE_DEFINED__
#define __IScriptProcedure_INTERFACE_DEFINED__

DEFINE_GUID(IID_IScriptProcedure, 0x70841c73, 0x067d, 0x11d0, 0x95,0xd8, 0x00,0xa0,0x24,0x63,0xab,0x28);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("70841c73-067d-11d0-95d8-00a02463ab28")
IScriptProcedure : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pbstrName) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_NumArgs(
        LONG *pcArgs) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HasReturnValue(
        VARIANT_BOOL *pfHasReturnValue) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IScriptProcedure, 0x70841c73, 0x067d, 0x11d0, 0x95,0xd8, 0x00,0xa0,0x24,0x63,0xab,0x28)
#endif
#else
typedef struct IScriptProcedureVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IScriptProcedure *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IScriptProcedure *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IScriptProcedure *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IScriptProcedure *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IScriptProcedure *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IScriptProcedure *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IScriptProcedure *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IScriptProcedure methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IScriptProcedure *This,
        BSTR *pbstrName);

    HRESULT (STDMETHODCALLTYPE *get_NumArgs)(
        IScriptProcedure *This,
        LONG *pcArgs);

    HRESULT (STDMETHODCALLTYPE *get_HasReturnValue)(
        IScriptProcedure *This,
        VARIANT_BOOL *pfHasReturnValue);

    END_INTERFACE
} IScriptProcedureVtbl;

interface IScriptProcedure {
    CONST_VTBL IScriptProcedureVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IScriptProcedure_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IScriptProcedure_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IScriptProcedure_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IScriptProcedure_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IScriptProcedure_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IScriptProcedure_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IScriptProcedure_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IScriptProcedure methods ***/
#define IScriptProcedure_get_Name(This,pbstrName) (This)->lpVtbl->get_Name(This,pbstrName)
#define IScriptProcedure_get_NumArgs(This,pcArgs) (This)->lpVtbl->get_NumArgs(This,pcArgs)
#define IScriptProcedure_get_HasReturnValue(This,pfHasReturnValue) (This)->lpVtbl->get_HasReturnValue(This,pfHasReturnValue)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IScriptProcedure_QueryInterface(IScriptProcedure* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IScriptProcedure_AddRef(IScriptProcedure* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IScriptProcedure_Release(IScriptProcedure* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IScriptProcedure_GetTypeInfoCount(IScriptProcedure* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IScriptProcedure_GetTypeInfo(IScriptProcedure* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IScriptProcedure_GetIDsOfNames(IScriptProcedure* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IScriptProcedure_Invoke(IScriptProcedure* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IScriptProcedure methods ***/
static FORCEINLINE HRESULT IScriptProcedure_get_Name(IScriptProcedure* This,BSTR *pbstrName) {
    return This->lpVtbl->get_Name(This,pbstrName);
}
static FORCEINLINE HRESULT IScriptProcedure_get_NumArgs(IScriptProcedure* This,LONG *pcArgs) {
    return This->lpVtbl->get_NumArgs(This,pcArgs);
}
static FORCEINLINE HRESULT IScriptProcedure_get_HasReturnValue(IScriptProcedure* This,VARIANT_BOOL *pfHasReturnValue) {
    return This->lpVtbl->get_HasReturnValue(This,pfHasReturnValue);
}
#endif
#endif

#endif


#endif  /* __IScriptProcedure_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IScriptProcedureCollection interface
 */
#ifndef __IScriptProcedureCollection_INTERFACE_DEFINED__
#define __IScriptProcedureCollection_INTERFACE_DEFINED__

DEFINE_GUID(IID_IScriptProcedureCollection, 0x70841c71, 0x067d, 0x11d0, 0x95,0xd8, 0x00,0xa0,0x24,0x63,0xab,0x28);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("70841c71-067d-11d0-95d8-00a02463ab28")
IScriptProcedureCollection : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get__NewEnum(
        IUnknown *ppenumProcedures) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Item(
        VARIANT Index,
        IScriptProcedure **ppdispProcedure) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Count(
        LONG *plCount) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IScriptProcedureCollection, 0x70841c71, 0x067d, 0x11d0, 0x95,0xd8, 0x00,0xa0,0x24,0x63,0xab,0x28)
#endif
#else
typedef struct IScriptProcedureCollectionVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IScriptProcedureCollection *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IScriptProcedureCollection *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IScriptProcedureCollection *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IScriptProcedureCollection *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IScriptProcedureCollection *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IScriptProcedureCollection *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IScriptProcedureCollection *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IScriptProcedureCollection methods ***/
    HRESULT (STDMETHODCALLTYPE *get__NewEnum)(
        IScriptProcedureCollection *This,
        IUnknown *ppenumProcedures);

    HRESULT (STDMETHODCALLTYPE *get_Item)(
        IScriptProcedureCollection *This,
        VARIANT Index,
        IScriptProcedure **ppdispProcedure);

    HRESULT (STDMETHODCALLTYPE *get_Count)(
        IScriptProcedureCollection *This,
        LONG *plCount);

    END_INTERFACE
} IScriptProcedureCollectionVtbl;

interface IScriptProcedureCollection {
    CONST_VTBL IScriptProcedureCollectionVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IScriptProcedureCollection_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IScriptProcedureCollection_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IScriptProcedureCollection_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IScriptProcedureCollection_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IScriptProcedureCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IScriptProcedureCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IScriptProcedureCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IScriptProcedureCollection methods ***/
#define IScriptProcedureCollection_get__NewEnum(This,ppenumProcedures) (This)->lpVtbl->get__NewEnum(This,ppenumProcedures)
#define IScriptProcedureCollection_get_Item(This,Index,ppdispProcedure) (This)->lpVtbl->get_Item(This,Index,ppdispProcedure)
#define IScriptProcedureCollection_get_Count(This,plCount) (This)->lpVtbl->get_Count(This,plCount)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IScriptProcedureCollection_QueryInterface(IScriptProcedureCollection* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IScriptProcedureCollection_AddRef(IScriptProcedureCollection* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IScriptProcedureCollection_Release(IScriptProcedureCollection* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IScriptProcedureCollection_GetTypeInfoCount(IScriptProcedureCollection* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IScriptProcedureCollection_GetTypeInfo(IScriptProcedureCollection* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IScriptProcedureCollection_GetIDsOfNames(IScriptProcedureCollection* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IScriptProcedureCollection_Invoke(IScriptProcedureCollection* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IScriptProcedureCollection methods ***/
static FORCEINLINE HRESULT IScriptProcedureCollection_get__NewEnum(IScriptProcedureCollection* This,IUnknown *ppenumProcedures) {
    return This->lpVtbl->get__NewEnum(This,ppenumProcedures);
}
static FORCEINLINE HRESULT IScriptProcedureCollection_get_Item(IScriptProcedureCollection* This,VARIANT Index,IScriptProcedure **ppdispProcedure) {
    return This->lpVtbl->get_Item(This,Index,ppdispProcedure);
}
static FORCEINLINE HRESULT IScriptProcedureCollection_get_Count(IScriptProcedureCollection* This,LONG *plCount) {
    return This->lpVtbl->get_Count(This,plCount);
}
#endif
#endif

#endif


#endif  /* __IScriptProcedureCollection_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IScriptModule interface
 */
#ifndef __IScriptModule_INTERFACE_DEFINED__
#define __IScriptModule_INTERFACE_DEFINED__

DEFINE_GUID(IID_IScriptModule, 0x70841c70, 0x067d, 0x11d0, 0x95,0xd8, 0x00,0xa0,0x24,0x63,0xab,0x28);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("70841c70-067d-11d0-95d8-00a02463ab28")
IScriptModule : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pbstrName) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CodeObject(
        IDispatch *ppdispObject) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Procedures(
        IScriptProcedureCollection **ppdispProcedures) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddCode(
        BSTR Code) = 0;

    virtual HRESULT STDMETHODCALLTYPE Eval(
        BSTR Expression,
        VARIANT *pvarResult) = 0;

    virtual HRESULT STDMETHODCALLTYPE ExecuteStatement(
        BSTR Statement) = 0;

    virtual HRESULT STDMETHODCALLTYPE Run(
        BSTR ProcedureName,
        SAFEARRAY **Parameters,
        VARIANT *pvarResult) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IScriptModule, 0x70841c70, 0x067d, 0x11d0, 0x95,0xd8, 0x00,0xa0,0x24,0x63,0xab,0x28)
#endif
#else
typedef struct IScriptModuleVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IScriptModule *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IScriptModule *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IScriptModule *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IScriptModule *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IScriptModule *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IScriptModule *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IScriptModule *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IScriptModule methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IScriptModule *This,
        BSTR *pbstrName);

    HRESULT (STDMETHODCALLTYPE *get_CodeObject)(
        IScriptModule *This,
        IDispatch *ppdispObject);

    HRESULT (STDMETHODCALLTYPE *get_Procedures)(
        IScriptModule *This,
        IScriptProcedureCollection **ppdispProcedures);

    HRESULT (STDMETHODCALLTYPE *AddCode)(
        IScriptModule *This,
        BSTR Code);

    HRESULT (STDMETHODCALLTYPE *Eval)(
        IScriptModule *This,
        BSTR Expression,
        VARIANT *pvarResult);

    HRESULT (STDMETHODCALLTYPE *ExecuteStatement)(
        IScriptModule *This,
        BSTR Statement);

    HRESULT (STDMETHODCALLTYPE *Run)(
        IScriptModule *This,
        BSTR ProcedureName,
        SAFEARRAY **Parameters,
        VARIANT *pvarResult);

    END_INTERFACE
} IScriptModuleVtbl;

interface IScriptModule {
    CONST_VTBL IScriptModuleVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IScriptModule_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IScriptModule_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IScriptModule_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IScriptModule_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IScriptModule_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IScriptModule_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IScriptModule_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IScriptModule methods ***/
#define IScriptModule_get_Name(This,pbstrName) (This)->lpVtbl->get_Name(This,pbstrName)
#define IScriptModule_get_CodeObject(This,ppdispObject) (This)->lpVtbl->get_CodeObject(This,ppdispObject)
#define IScriptModule_get_Procedures(This,ppdispProcedures) (This)->lpVtbl->get_Procedures(This,ppdispProcedures)
#define IScriptModule_AddCode(This,Code) (This)->lpVtbl->AddCode(This,Code)
#define IScriptModule_Eval(This,Expression,pvarResult) (This)->lpVtbl->Eval(This,Expression,pvarResult)
#define IScriptModule_ExecuteStatement(This,Statement) (This)->lpVtbl->ExecuteStatement(This,Statement)
#define IScriptModule_Run(This,ProcedureName,Parameters,pvarResult) (This)->lpVtbl->Run(This,ProcedureName,Parameters,pvarResult)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IScriptModule_QueryInterface(IScriptModule* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IScriptModule_AddRef(IScriptModule* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IScriptModule_Release(IScriptModule* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IScriptModule_GetTypeInfoCount(IScriptModule* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IScriptModule_GetTypeInfo(IScriptModule* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IScriptModule_GetIDsOfNames(IScriptModule* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IScriptModule_Invoke(IScriptModule* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IScriptModule methods ***/
static FORCEINLINE HRESULT IScriptModule_get_Name(IScriptModule* This,BSTR *pbstrName) {
    return This->lpVtbl->get_Name(This,pbstrName);
}
static FORCEINLINE HRESULT IScriptModule_get_CodeObject(IScriptModule* This,IDispatch *ppdispObject) {
    return This->lpVtbl->get_CodeObject(This,ppdispObject);
}
static FORCEINLINE HRESULT IScriptModule_get_Procedures(IScriptModule* This,IScriptProcedureCollection **ppdispProcedures) {
    return This->lpVtbl->get_Procedures(This,ppdispProcedures);
}
static FORCEINLINE HRESULT IScriptModule_AddCode(IScriptModule* This,BSTR Code) {
    return This->lpVtbl->AddCode(This,Code);
}
static FORCEINLINE HRESULT IScriptModule_Eval(IScriptModule* This,BSTR Expression,VARIANT *pvarResult) {
    return This->lpVtbl->Eval(This,Expression,pvarResult);
}
static FORCEINLINE HRESULT IScriptModule_ExecuteStatement(IScriptModule* This,BSTR Statement) {
    return This->lpVtbl->ExecuteStatement(This,Statement);
}
static FORCEINLINE HRESULT IScriptModule_Run(IScriptModule* This,BSTR ProcedureName,SAFEARRAY **Parameters,VARIANT *pvarResult) {
    return This->lpVtbl->Run(This,ProcedureName,Parameters,pvarResult);
}
#endif
#endif

#endif


#endif  /* __IScriptModule_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IScriptModuleCollection interface
 */
#ifndef __IScriptModuleCollection_INTERFACE_DEFINED__
#define __IScriptModuleCollection_INTERFACE_DEFINED__

DEFINE_GUID(IID_IScriptModuleCollection, 0x70841c6f, 0x067d, 0x11d0, 0x95,0xd8, 0x00,0xa0,0x24,0x63,0xab,0x28);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("70841c6f-067d-11d0-95d8-00a02463ab28")
IScriptModuleCollection : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get__NewEnum(
        IUnknown *ppenumContexts) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Item(
        VARIANT Index,
        IScriptModule **ppmod) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Count(
        LONG *plCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE Add(
        BSTR Name,
        VARIANT *Object,
        IScriptModule **ppmod) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IScriptModuleCollection, 0x70841c6f, 0x067d, 0x11d0, 0x95,0xd8, 0x00,0xa0,0x24,0x63,0xab,0x28)
#endif
#else
typedef struct IScriptModuleCollectionVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IScriptModuleCollection *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IScriptModuleCollection *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IScriptModuleCollection *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IScriptModuleCollection *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IScriptModuleCollection *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IScriptModuleCollection *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IScriptModuleCollection *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IScriptModuleCollection methods ***/
    HRESULT (STDMETHODCALLTYPE *get__NewEnum)(
        IScriptModuleCollection *This,
        IUnknown *ppenumContexts);

    HRESULT (STDMETHODCALLTYPE *get_Item)(
        IScriptModuleCollection *This,
        VARIANT Index,
        IScriptModule **ppmod);

    HRESULT (STDMETHODCALLTYPE *get_Count)(
        IScriptModuleCollection *This,
        LONG *plCount);

    HRESULT (STDMETHODCALLTYPE *Add)(
        IScriptModuleCollection *This,
        BSTR Name,
        VARIANT *Object,
        IScriptModule **ppmod);

    END_INTERFACE
} IScriptModuleCollectionVtbl;

interface IScriptModuleCollection {
    CONST_VTBL IScriptModuleCollectionVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IScriptModuleCollection_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IScriptModuleCollection_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IScriptModuleCollection_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IScriptModuleCollection_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IScriptModuleCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IScriptModuleCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IScriptModuleCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IScriptModuleCollection methods ***/
#define IScriptModuleCollection_get__NewEnum(This,ppenumContexts) (This)->lpVtbl->get__NewEnum(This,ppenumContexts)
#define IScriptModuleCollection_get_Item(This,Index,ppmod) (This)->lpVtbl->get_Item(This,Index,ppmod)
#define IScriptModuleCollection_get_Count(This,plCount) (This)->lpVtbl->get_Count(This,plCount)
#define IScriptModuleCollection_Add(This,Name,Object,ppmod) (This)->lpVtbl->Add(This,Name,Object,ppmod)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IScriptModuleCollection_QueryInterface(IScriptModuleCollection* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IScriptModuleCollection_AddRef(IScriptModuleCollection* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IScriptModuleCollection_Release(IScriptModuleCollection* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IScriptModuleCollection_GetTypeInfoCount(IScriptModuleCollection* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IScriptModuleCollection_GetTypeInfo(IScriptModuleCollection* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IScriptModuleCollection_GetIDsOfNames(IScriptModuleCollection* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IScriptModuleCollection_Invoke(IScriptModuleCollection* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IScriptModuleCollection methods ***/
static FORCEINLINE HRESULT IScriptModuleCollection_get__NewEnum(IScriptModuleCollection* This,IUnknown *ppenumContexts) {
    return This->lpVtbl->get__NewEnum(This,ppenumContexts);
}
static FORCEINLINE HRESULT IScriptModuleCollection_get_Item(IScriptModuleCollection* This,VARIANT Index,IScriptModule **ppmod) {
    return This->lpVtbl->get_Item(This,Index,ppmod);
}
static FORCEINLINE HRESULT IScriptModuleCollection_get_Count(IScriptModuleCollection* This,LONG *plCount) {
    return This->lpVtbl->get_Count(This,plCount);
}
static FORCEINLINE HRESULT IScriptModuleCollection_Add(IScriptModuleCollection* This,BSTR Name,VARIANT *Object,IScriptModule **ppmod) {
    return This->lpVtbl->Add(This,Name,Object,ppmod);
}
#endif
#endif

#endif


#endif  /* __IScriptModuleCollection_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IScriptError interface
 */
#ifndef __IScriptError_INTERFACE_DEFINED__
#define __IScriptError_INTERFACE_DEFINED__

DEFINE_GUID(IID_IScriptError, 0x70841c78, 0x067d, 0x11d0, 0x95,0xd8, 0x00,0xa0,0x24,0x63,0xab,0x28);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("70841c78-067d-11d0-95d8-00a02463ab28")
IScriptError : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Number(
        LONG *plNumber) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Source(
        BSTR *pbstrSource) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Description(
        BSTR *pbstrDescription) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HelpFile(
        BSTR *pbstrHelpFile) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HelpContext(
        LONG *plHelpContext) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Text(
        BSTR *pbstrText) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Line(
        LONG *plLine) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Column(
        LONG *plColumn) = 0;

    virtual HRESULT STDMETHODCALLTYPE Clear(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IScriptError, 0x70841c78, 0x067d, 0x11d0, 0x95,0xd8, 0x00,0xa0,0x24,0x63,0xab,0x28)
#endif
#else
typedef struct IScriptErrorVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IScriptError *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IScriptError *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IScriptError *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IScriptError *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IScriptError *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IScriptError *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IScriptError *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IScriptError methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Number)(
        IScriptError *This,
        LONG *plNumber);

    HRESULT (STDMETHODCALLTYPE *get_Source)(
        IScriptError *This,
        BSTR *pbstrSource);

    HRESULT (STDMETHODCALLTYPE *get_Description)(
        IScriptError *This,
        BSTR *pbstrDescription);

    HRESULT (STDMETHODCALLTYPE *get_HelpFile)(
        IScriptError *This,
        BSTR *pbstrHelpFile);

    HRESULT (STDMETHODCALLTYPE *get_HelpContext)(
        IScriptError *This,
        LONG *plHelpContext);

    HRESULT (STDMETHODCALLTYPE *get_Text)(
        IScriptError *This,
        BSTR *pbstrText);

    HRESULT (STDMETHODCALLTYPE *get_Line)(
        IScriptError *This,
        LONG *plLine);

    HRESULT (STDMETHODCALLTYPE *get_Column)(
        IScriptError *This,
        LONG *plColumn);

    HRESULT (STDMETHODCALLTYPE *Clear)(
        IScriptError *This);

    END_INTERFACE
} IScriptErrorVtbl;

interface IScriptError {
    CONST_VTBL IScriptErrorVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IScriptError_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IScriptError_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IScriptError_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IScriptError_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IScriptError_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IScriptError_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IScriptError_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IScriptError methods ***/
#define IScriptError_get_Number(This,plNumber) (This)->lpVtbl->get_Number(This,plNumber)
#define IScriptError_get_Source(This,pbstrSource) (This)->lpVtbl->get_Source(This,pbstrSource)
#define IScriptError_get_Description(This,pbstrDescription) (This)->lpVtbl->get_Description(This,pbstrDescription)
#define IScriptError_get_HelpFile(This,pbstrHelpFile) (This)->lpVtbl->get_HelpFile(This,pbstrHelpFile)
#define IScriptError_get_HelpContext(This,plHelpContext) (This)->lpVtbl->get_HelpContext(This,plHelpContext)
#define IScriptError_get_Text(This,pbstrText) (This)->lpVtbl->get_Text(This,pbstrText)
#define IScriptError_get_Line(This,plLine) (This)->lpVtbl->get_Line(This,plLine)
#define IScriptError_get_Column(This,plColumn) (This)->lpVtbl->get_Column(This,plColumn)
#define IScriptError_Clear(This) (This)->lpVtbl->Clear(This)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IScriptError_QueryInterface(IScriptError* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IScriptError_AddRef(IScriptError* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IScriptError_Release(IScriptError* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IScriptError_GetTypeInfoCount(IScriptError* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IScriptError_GetTypeInfo(IScriptError* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IScriptError_GetIDsOfNames(IScriptError* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IScriptError_Invoke(IScriptError* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IScriptError methods ***/
static FORCEINLINE HRESULT IScriptError_get_Number(IScriptError* This,LONG *plNumber) {
    return This->lpVtbl->get_Number(This,plNumber);
}
static FORCEINLINE HRESULT IScriptError_get_Source(IScriptError* This,BSTR *pbstrSource) {
    return This->lpVtbl->get_Source(This,pbstrSource);
}
static FORCEINLINE HRESULT IScriptError_get_Description(IScriptError* This,BSTR *pbstrDescription) {
    return This->lpVtbl->get_Description(This,pbstrDescription);
}
static FORCEINLINE HRESULT IScriptError_get_HelpFile(IScriptError* This,BSTR *pbstrHelpFile) {
    return This->lpVtbl->get_HelpFile(This,pbstrHelpFile);
}
static FORCEINLINE HRESULT IScriptError_get_HelpContext(IScriptError* This,LONG *plHelpContext) {
    return This->lpVtbl->get_HelpContext(This,plHelpContext);
}
static FORCEINLINE HRESULT IScriptError_get_Text(IScriptError* This,BSTR *pbstrText) {
    return This->lpVtbl->get_Text(This,pbstrText);
}
static FORCEINLINE HRESULT IScriptError_get_Line(IScriptError* This,LONG *plLine) {
    return This->lpVtbl->get_Line(This,plLine);
}
static FORCEINLINE HRESULT IScriptError_get_Column(IScriptError* This,LONG *plColumn) {
    return This->lpVtbl->get_Column(This,plColumn);
}
static FORCEINLINE HRESULT IScriptError_Clear(IScriptError* This) {
    return This->lpVtbl->Clear(This);
}
#endif
#endif

#endif


#endif  /* __IScriptError_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IScriptControl interface
 */
#ifndef __IScriptControl_INTERFACE_DEFINED__
#define __IScriptControl_INTERFACE_DEFINED__

DEFINE_GUID(IID_IScriptControl, 0x0e59f1d3, 0x1fbe, 0x11d0, 0x8f,0xf2, 0x00,0xa0,0xd1,0x00,0x38,0xbc);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("0e59f1d3-1fbe-11d0-8ff2-00a0d10038bc")
IScriptControl : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Language(
        BSTR *pbstrLanguage) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Language(
        BSTR pbstrLanguage) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_State(
        ScriptControlStates *pssState) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_State(
        ScriptControlStates pssState) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SitehWnd(
        LONG rhs) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SitehWnd(
        LONG *rhs) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Timeout(
        LONG *plMilleseconds) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Timeout(
        LONG plMilleseconds) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AllowUI(
        VARIANT_BOOL *pfAllowUI) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_AllowUI(
        VARIANT_BOOL pfAllowUI) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UseSafeSubset(
        VARIANT_BOOL *pfUseSafeSubset) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UseSafeSubset(
        VARIANT_BOOL pfUseSafeSubset) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Modules(
        IScriptModuleCollection **ppmods) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Error(
        IScriptError **ppse) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CodeObject(
        IDispatch **ppdispObject) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Procedures(
        IScriptProcedureCollection **ppdispProcedures) = 0;

    virtual HRESULT STDMETHODCALLTYPE _AboutBox(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddObject(
        BSTR Name,
        IDispatch *Object,
        VARIANT_BOOL AddMembers = 0) = 0;

    virtual HRESULT STDMETHODCALLTYPE Reset(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddCode(
        BSTR Code) = 0;

    virtual HRESULT STDMETHODCALLTYPE Eval(
        BSTR Expression,
        VARIANT *pvarResult) = 0;

    virtual HRESULT STDMETHODCALLTYPE ExecuteStatement(
        BSTR Statement) = 0;

    virtual HRESULT STDMETHODCALLTYPE Run(
        BSTR ProcedureName,
        SAFEARRAY **Parameters,
        VARIANT *pvarResult) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IScriptControl, 0x0e59f1d3, 0x1fbe, 0x11d0, 0x8f,0xf2, 0x00,0xa0,0xd1,0x00,0x38,0xbc)
#endif
#else
typedef struct IScriptControlVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IScriptControl *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IScriptControl *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IScriptControl *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IScriptControl *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IScriptControl *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IScriptControl *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IScriptControl *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IScriptControl methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Language)(
        IScriptControl *This,
        BSTR *pbstrLanguage);

    HRESULT (STDMETHODCALLTYPE *put_Language)(
        IScriptControl *This,
        BSTR pbstrLanguage);

    HRESULT (STDMETHODCALLTYPE *get_State)(
        IScriptControl *This,
        ScriptControlStates *pssState);

    HRESULT (STDMETHODCALLTYPE *put_State)(
        IScriptControl *This,
        ScriptControlStates pssState);

    HRESULT (STDMETHODCALLTYPE *put_SitehWnd)(
        IScriptControl *This,
        LONG rhs);

    HRESULT (STDMETHODCALLTYPE *get_SitehWnd)(
        IScriptControl *This,
        LONG *rhs);

    HRESULT (STDMETHODCALLTYPE *get_Timeout)(
        IScriptControl *This,
        LONG *plMilleseconds);

    HRESULT (STDMETHODCALLTYPE *put_Timeout)(
        IScriptControl *This,
        LONG plMilleseconds);

    HRESULT (STDMETHODCALLTYPE *get_AllowUI)(
        IScriptControl *This,
        VARIANT_BOOL *pfAllowUI);

    HRESULT (STDMETHODCALLTYPE *put_AllowUI)(
        IScriptControl *This,
        VARIANT_BOOL pfAllowUI);

    HRESULT (STDMETHODCALLTYPE *get_UseSafeSubset)(
        IScriptControl *This,
        VARIANT_BOOL *pfUseSafeSubset);

    HRESULT (STDMETHODCALLTYPE *put_UseSafeSubset)(
        IScriptControl *This,
        VARIANT_BOOL pfUseSafeSubset);

    HRESULT (STDMETHODCALLTYPE *get_Modules)(
        IScriptControl *This,
        IScriptModuleCollection **ppmods);

    HRESULT (STDMETHODCALLTYPE *get_Error)(
        IScriptControl *This,
        IScriptError **ppse);

    HRESULT (STDMETHODCALLTYPE *get_CodeObject)(
        IScriptControl *This,
        IDispatch **ppdispObject);

    HRESULT (STDMETHODCALLTYPE *get_Procedures)(
        IScriptControl *This,
        IScriptProcedureCollection **ppdispProcedures);

    HRESULT (STDMETHODCALLTYPE *_AboutBox)(
        IScriptControl *This);

    HRESULT (STDMETHODCALLTYPE *AddObject)(
        IScriptControl *This,
        BSTR Name,
        IDispatch *Object,
        VARIANT_BOOL AddMembers);

    HRESULT (STDMETHODCALLTYPE *Reset)(
        IScriptControl *This);

    HRESULT (STDMETHODCALLTYPE *AddCode)(
        IScriptControl *This,
        BSTR Code);

    HRESULT (STDMETHODCALLTYPE *Eval)(
        IScriptControl *This,
        BSTR Expression,
        VARIANT *pvarResult);

    HRESULT (STDMETHODCALLTYPE *ExecuteStatement)(
        IScriptControl *This,
        BSTR Statement);

    HRESULT (STDMETHODCALLTYPE *Run)(
        IScriptControl *This,
        BSTR ProcedureName,
        SAFEARRAY **Parameters,
        VARIANT *pvarResult);

    END_INTERFACE
} IScriptControlVtbl;

interface IScriptControl {
    CONST_VTBL IScriptControlVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IScriptControl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IScriptControl_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IScriptControl_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IScriptControl_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IScriptControl_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IScriptControl_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IScriptControl_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IScriptControl methods ***/
#define IScriptControl_get_Language(This,pbstrLanguage) (This)->lpVtbl->get_Language(This,pbstrLanguage)
#define IScriptControl_put_Language(This,pbstrLanguage) (This)->lpVtbl->put_Language(This,pbstrLanguage)
#define IScriptControl_get_State(This,pssState) (This)->lpVtbl->get_State(This,pssState)
#define IScriptControl_put_State(This,pssState) (This)->lpVtbl->put_State(This,pssState)
#define IScriptControl_put_SitehWnd(This,rhs) (This)->lpVtbl->put_SitehWnd(This,rhs)
#define IScriptControl_get_SitehWnd(This,rhs) (This)->lpVtbl->get_SitehWnd(This,rhs)
#define IScriptControl_get_Timeout(This,plMilleseconds) (This)->lpVtbl->get_Timeout(This,plMilleseconds)
#define IScriptControl_put_Timeout(This,plMilleseconds) (This)->lpVtbl->put_Timeout(This,plMilleseconds)
#define IScriptControl_get_AllowUI(This,pfAllowUI) (This)->lpVtbl->get_AllowUI(This,pfAllowUI)
#define IScriptControl_put_AllowUI(This,pfAllowUI) (This)->lpVtbl->put_AllowUI(This,pfAllowUI)
#define IScriptControl_get_UseSafeSubset(This,pfUseSafeSubset) (This)->lpVtbl->get_UseSafeSubset(This,pfUseSafeSubset)
#define IScriptControl_put_UseSafeSubset(This,pfUseSafeSubset) (This)->lpVtbl->put_UseSafeSubset(This,pfUseSafeSubset)
#define IScriptControl_get_Modules(This,ppmods) (This)->lpVtbl->get_Modules(This,ppmods)
#define IScriptControl_get_Error(This,ppse) (This)->lpVtbl->get_Error(This,ppse)
#define IScriptControl_get_CodeObject(This,ppdispObject) (This)->lpVtbl->get_CodeObject(This,ppdispObject)
#define IScriptControl_get_Procedures(This,ppdispProcedures) (This)->lpVtbl->get_Procedures(This,ppdispProcedures)
#define IScriptControl__AboutBox(This) (This)->lpVtbl->_AboutBox(This)
#define IScriptControl_AddObject(This,Name,Object,AddMembers) (This)->lpVtbl->AddObject(This,Name,Object,AddMembers)
#define IScriptControl_Reset(This) (This)->lpVtbl->Reset(This)
#define IScriptControl_AddCode(This,Code) (This)->lpVtbl->AddCode(This,Code)
#define IScriptControl_Eval(This,Expression,pvarResult) (This)->lpVtbl->Eval(This,Expression,pvarResult)
#define IScriptControl_ExecuteStatement(This,Statement) (This)->lpVtbl->ExecuteStatement(This,Statement)
#define IScriptControl_Run(This,ProcedureName,Parameters,pvarResult) (This)->lpVtbl->Run(This,ProcedureName,Parameters,pvarResult)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IScriptControl_QueryInterface(IScriptControl* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IScriptControl_AddRef(IScriptControl* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IScriptControl_Release(IScriptControl* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IScriptControl_GetTypeInfoCount(IScriptControl* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IScriptControl_GetTypeInfo(IScriptControl* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IScriptControl_GetIDsOfNames(IScriptControl* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IScriptControl_Invoke(IScriptControl* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IScriptControl methods ***/
static FORCEINLINE HRESULT IScriptControl_get_Language(IScriptControl* This,BSTR *pbstrLanguage) {
    return This->lpVtbl->get_Language(This,pbstrLanguage);
}
static FORCEINLINE HRESULT IScriptControl_put_Language(IScriptControl* This,BSTR pbstrLanguage) {
    return This->lpVtbl->put_Language(This,pbstrLanguage);
}
static FORCEINLINE HRESULT IScriptControl_get_State(IScriptControl* This,ScriptControlStates *pssState) {
    return This->lpVtbl->get_State(This,pssState);
}
static FORCEINLINE HRESULT IScriptControl_put_State(IScriptControl* This,ScriptControlStates pssState) {
    return This->lpVtbl->put_State(This,pssState);
}
static FORCEINLINE HRESULT IScriptControl_put_SitehWnd(IScriptControl* This,LONG rhs) {
    return This->lpVtbl->put_SitehWnd(This,rhs);
}
static FORCEINLINE HRESULT IScriptControl_get_SitehWnd(IScriptControl* This,LONG *rhs) {
    return This->lpVtbl->get_SitehWnd(This,rhs);
}
static FORCEINLINE HRESULT IScriptControl_get_Timeout(IScriptControl* This,LONG *plMilleseconds) {
    return This->lpVtbl->get_Timeout(This,plMilleseconds);
}
static FORCEINLINE HRESULT IScriptControl_put_Timeout(IScriptControl* This,LONG plMilleseconds) {
    return This->lpVtbl->put_Timeout(This,plMilleseconds);
}
static FORCEINLINE HRESULT IScriptControl_get_AllowUI(IScriptControl* This,VARIANT_BOOL *pfAllowUI) {
    return This->lpVtbl->get_AllowUI(This,pfAllowUI);
}
static FORCEINLINE HRESULT IScriptControl_put_AllowUI(IScriptControl* This,VARIANT_BOOL pfAllowUI) {
    return This->lpVtbl->put_AllowUI(This,pfAllowUI);
}
static FORCEINLINE HRESULT IScriptControl_get_UseSafeSubset(IScriptControl* This,VARIANT_BOOL *pfUseSafeSubset) {
    return This->lpVtbl->get_UseSafeSubset(This,pfUseSafeSubset);
}
static FORCEINLINE HRESULT IScriptControl_put_UseSafeSubset(IScriptControl* This,VARIANT_BOOL pfUseSafeSubset) {
    return This->lpVtbl->put_UseSafeSubset(This,pfUseSafeSubset);
}
static FORCEINLINE HRESULT IScriptControl_get_Modules(IScriptControl* This,IScriptModuleCollection **ppmods) {
    return This->lpVtbl->get_Modules(This,ppmods);
}
static FORCEINLINE HRESULT IScriptControl_get_Error(IScriptControl* This,IScriptError **ppse) {
    return This->lpVtbl->get_Error(This,ppse);
}
static FORCEINLINE HRESULT IScriptControl_get_CodeObject(IScriptControl* This,IDispatch **ppdispObject) {
    return This->lpVtbl->get_CodeObject(This,ppdispObject);
}
static FORCEINLINE HRESULT IScriptControl_get_Procedures(IScriptControl* This,IScriptProcedureCollection **ppdispProcedures) {
    return This->lpVtbl->get_Procedures(This,ppdispProcedures);
}
static FORCEINLINE HRESULT IScriptControl__AboutBox(IScriptControl* This) {
    return This->lpVtbl->_AboutBox(This);
}
static FORCEINLINE HRESULT IScriptControl_AddObject(IScriptControl* This,BSTR Name,IDispatch *Object,VARIANT_BOOL AddMembers) {
    return This->lpVtbl->AddObject(This,Name,Object,AddMembers);
}
static FORCEINLINE HRESULT IScriptControl_Reset(IScriptControl* This) {
    return This->lpVtbl->Reset(This);
}
static FORCEINLINE HRESULT IScriptControl_AddCode(IScriptControl* This,BSTR Code) {
    return This->lpVtbl->AddCode(This,Code);
}
static FORCEINLINE HRESULT IScriptControl_Eval(IScriptControl* This,BSTR Expression,VARIANT *pvarResult) {
    return This->lpVtbl->Eval(This,Expression,pvarResult);
}
static FORCEINLINE HRESULT IScriptControl_ExecuteStatement(IScriptControl* This,BSTR Statement) {
    return This->lpVtbl->ExecuteStatement(This,Statement);
}
static FORCEINLINE HRESULT IScriptControl_Run(IScriptControl* This,BSTR ProcedureName,SAFEARRAY **Parameters,VARIANT *pvarResult) {
    return This->lpVtbl->Run(This,ProcedureName,Parameters,pvarResult);
}
#endif
#endif

#endif


#endif  /* __IScriptControl_INTERFACE_DEFINED__ */

/*****************************************************************************
 * DScriptControlSource dispinterface
 */
#ifndef __DScriptControlSource_DISPINTERFACE_DEFINED__
#define __DScriptControlSource_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_DScriptControlSource, 0x8b167d60, 0x8605, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("8b167d60-8605-11d0-abcb-00a0c90fffc0")
DScriptControlSource : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(DScriptControlSource, 0x8b167d60, 0x8605, 0x11d0, 0xab,0xcb, 0x00,0xa0,0xc9,0x0f,0xff,0xc0)
#endif
#else
typedef struct DScriptControlSourceVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        DScriptControlSource *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        DScriptControlSource *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        DScriptControlSource *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        DScriptControlSource *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        DScriptControlSource *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        DScriptControlSource *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        DScriptControlSource *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} DScriptControlSourceVtbl;

interface DScriptControlSource {
    CONST_VTBL DScriptControlSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define DScriptControlSource_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define DScriptControlSource_AddRef(This) (This)->lpVtbl->AddRef(This)
#define DScriptControlSource_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define DScriptControlSource_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define DScriptControlSource_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define DScriptControlSource_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define DScriptControlSource_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT DScriptControlSource_QueryInterface(DScriptControlSource* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG DScriptControlSource_AddRef(DScriptControlSource* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG DScriptControlSource_Release(DScriptControlSource* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT DScriptControlSource_GetTypeInfoCount(DScriptControlSource* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT DScriptControlSource_GetTypeInfo(DScriptControlSource* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT DScriptControlSource_GetIDsOfNames(DScriptControlSource* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT DScriptControlSource_Invoke(DScriptControlSource* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __DScriptControlSource_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * Procedure coclass
 */

DEFINE_GUID(CLSID_Procedure, 0x0e59f1da, 0x1fbe, 0x11d0, 0x8f,0xf2, 0x00,0xa0,0xd1,0x00,0x38,0xbc);

#ifdef __cplusplus
class DECLSPEC_UUID("0e59f1da-1fbe-11d0-8ff2-00a0d10038bc") Procedure;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Procedure, 0x0e59f1da, 0x1fbe, 0x11d0, 0x8f,0xf2, 0x00,0xa0,0xd1,0x00,0x38,0xbc)
#endif
#endif

/*****************************************************************************
 * Procedures coclass
 */

DEFINE_GUID(CLSID_Procedures, 0x0e59f1db, 0x1fbe, 0x11d0, 0x8f,0xf2, 0x00,0xa0,0xd1,0x00,0x38,0xbc);

#ifdef __cplusplus
class DECLSPEC_UUID("0e59f1db-1fbe-11d0-8ff2-00a0d10038bc") Procedures;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Procedures, 0x0e59f1db, 0x1fbe, 0x11d0, 0x8f,0xf2, 0x00,0xa0,0xd1,0x00,0x38,0xbc)
#endif
#endif

/*****************************************************************************
 * Module coclass
 */

DEFINE_GUID(CLSID_Module, 0x0e59f1dc, 0x1fbe, 0x11d0, 0x8f,0xf2, 0x00,0xa0,0xd1,0x00,0x38,0xbc);

#ifdef __cplusplus
class DECLSPEC_UUID("0e59f1dc-1fbe-11d0-8ff2-00a0d10038bc") Module;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Module, 0x0e59f1dc, 0x1fbe, 0x11d0, 0x8f,0xf2, 0x00,0xa0,0xd1,0x00,0x38,0xbc)
#endif
#endif

/*****************************************************************************
 * Modules coclass
 */

DEFINE_GUID(CLSID_Modules, 0x0e59f1dd, 0x1fbe, 0x11d0, 0x8f,0xf2, 0x00,0xa0,0xd1,0x00,0x38,0xbc);

#ifdef __cplusplus
class DECLSPEC_UUID("0e59f1dd-1fbe-11d0-8ff2-00a0d10038bc") Modules;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Modules, 0x0e59f1dd, 0x1fbe, 0x11d0, 0x8f,0xf2, 0x00,0xa0,0xd1,0x00,0x38,0xbc)
#endif
#endif

/*****************************************************************************
 * Error coclass
 */

DEFINE_GUID(CLSID_Error, 0x0e59f1de, 0x1fbe, 0x11d0, 0x8f,0xf2, 0x00,0xa0,0xd1,0x00,0x38,0xbc);

#ifdef __cplusplus
class DECLSPEC_UUID("0e59f1de-1fbe-11d0-8ff2-00a0d10038bc") Error;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Error, 0x0e59f1de, 0x1fbe, 0x11d0, 0x8f,0xf2, 0x00,0xa0,0xd1,0x00,0x38,0xbc)
#endif
#endif

/*****************************************************************************
 * ScriptControl coclass
 */

DEFINE_GUID(CLSID_ScriptControl, 0x0e59f1d5, 0x1fbe, 0x11d0, 0x8f,0xf2, 0x00,0xa0,0xd1,0x00,0x38,0xbc);

#ifdef __cplusplus
class DECLSPEC_UUID("0e59f1d5-1fbe-11d0-8ff2-00a0d10038bc") ScriptControl;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ScriptControl, 0x0e59f1d5, 0x1fbe, 0x11d0, 0x8f,0xf2, 0x00,0xa0,0xd1,0x00,0x38,0xbc)
#endif
#endif

/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);
ULONG           __RPC_USER VARIANT_UserSize     (ULONG *, ULONG, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserMarshal  (ULONG *, unsigned char *, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserUnmarshal(ULONG *, unsigned char *, VARIANT *);
void            __RPC_USER VARIANT_UserFree     (ULONG *, VARIANT *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __msscript_h__ */
