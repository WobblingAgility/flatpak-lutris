/*** Autogenerated by WIDL 3.8 from irot.idl - Do not edit ***/
#include <string.h>

#include "irot.h"

#ifndef DECLSPEC_HIDDEN
#define DECLSPEC_HIDDEN
#endif

#ifndef _WIN64

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

struct __server_frame
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static int __server_filter( struct __server_frame *__frame )
{
    return (__frame->code == STATUS_ACCESS_VIOLATION) ||
           (__frame->code == STATUS_DATATYPE_MISALIGNMENT) ||
           (__frame->code == RPC_X_BAD_STUB_DATA) ||
           (__frame->code == RPC_S_INVALID_BOUND);
}

#define TYPE_FORMAT_STRING_SIZE 237
#define PROC_FORMAT_STRING_SIZE 103

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

static const NDR_RUNDOWN RundownRoutines[] =
{
    IrotContextHandle_rundown
};

/*****************************************************************************
 * Irot interface
 */

static RPC_DISPATCH_TABLE Irot_v0_2_DispatchTable;
static const MIDL_SERVER_INFO Irot_ServerInfo;

static const RPC_SERVER_INTERFACE Irot___RpcServerInterface =
{
    sizeof(RPC_SERVER_INTERFACE),
    {{0x7a98c254,0x6808,0x11cf,{0xb7,0x3b,0x00,0xaa,0x00,0xb6,0x77,0xa8}},{0,2}},
    {{0x8a885d04,0x1ceb,0x11c9,{0x9f,0xe8,0x08,0x00,0x2b,0x10,0x48,0x60}},{2,0}},
    &Irot_v0_2_DispatchTable,
    0,
    0,
    0,
    &Irot_ServerInfo,
    0,
};
RPC_IF_HANDLE Irot_v0_2_s_ifspec DECLSPEC_HIDDEN = (RPC_IF_HANDLE)& Irot___RpcServerInterface;

static const MIDL_STUB_DESC Irot_StubDesc;

struct __frame_Irot_IrotRegister
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    IrotHandle h;
    const MonikerComparisonData * moniker_data;
    const InterfaceData * object;
    const InterfaceData * moniker;
    const FILETIME * time;
    DWORD grfFlags;
    IrotCookie _W0;
    IrotCookie * cookie;
    NDR_SCONTEXT ctxt_handle;
};

static void __finally_Irot_IrotRegister( struct __frame_Irot_IrotRegister *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->moniker_data,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[20]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->object,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[42]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->moniker,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[54]);






}

void __RPC_STUB Irot_IrotRegister( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_Irot_IrotRegister __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &Irot_StubDesc);

    RpcExceptionInit( __server_filter, __finally_Irot_IrotRegister );
    __frame->moniker_data = 0;
    __frame->object = 0;
    __frame->moniker = 0;
    __frame->time = 0;
    __frame->cookie = 0;
    __frame->ctxt_handle = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[0]);


            NdrConformantStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->moniker_data,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[12],
                0);

            NdrConformantStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->object,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[34],
                0);

            NdrConformantStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->moniker,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[46],
                0);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->time,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[58],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->grfFlags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->cookie = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ctxt_handle = NdrContextHandleInitialize(
            &__frame->_StubMsg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[74]);

        __frame->_RetVal = IrotRegister(
            __frame->h,
            __frame->moniker_data,
            __frame->object,
            __frame->moniker,
            __frame->time,
            __frame->grfFlags,
            __frame->cookie,
            (IrotContextHandle *)NDRSContextValue(__frame->ctxt_handle));
        __frame->_StubMsg.BufferLength = 40;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(IrotCookie *)__frame->_StubMsg.Buffer = *__frame->cookie;
        __frame->_StubMsg.Buffer += sizeof(IrotCookie);

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->ctxt_handle,
            (NDR_RUNDOWN)IrotContextHandle_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[74]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_Irot_IrotRegister( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_Irot_IrotRevoke
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    IrotHandle h;
    IrotCookie cookie;
    NDR_SCONTEXT ctxt_handle;
    PInterfaceData _W0;
    PInterfaceData * object;
    PInterfaceData _W1;
    PInterfaceData * moniker;
};

static void __finally_Irot_IrotRevoke( struct __frame_Irot_IrotRevoke *__frame )
{



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->object,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[102]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->moniker,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[110]);


}

void __RPC_STUB Irot_IrotRevoke( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_Irot_IrotRevoke __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &Irot_StubDesc);

    RpcExceptionInit( __server_filter, __finally_Irot_IrotRevoke );
    __frame->ctxt_handle = 0;
    __frame->object = 0;
    __frame->moniker = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[30]);


            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(IrotCookie) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->cookie = *(IrotCookie *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(IrotCookie);

            __frame->ctxt_handle = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[82]);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->object = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->moniker = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = IrotRevoke(
            __frame->h,
            __frame->cookie,
            (IrotContextHandle *)NDRSContextValue(__frame->ctxt_handle),
            __frame->object,
            __frame->moniker);
        __frame->_StubMsg.BufferLength = 32;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->object,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[102]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->moniker,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[110]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->ctxt_handle,
            (NDR_RUNDOWN)IrotContextHandle_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[82]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->object,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[102]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->moniker,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[110]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_Irot_IrotRevoke( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_Irot_IrotIsRunning
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    IrotHandle h;
    const MonikerComparisonData * moniker_data;
};

static void __finally_Irot_IrotIsRunning( struct __frame_Irot_IrotIsRunning *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->moniker_data,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[122]);


}

void __RPC_STUB Irot_IrotIsRunning( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_Irot_IrotIsRunning __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &Irot_StubDesc);

    RpcExceptionInit( __server_filter, __finally_Irot_IrotIsRunning );
    __frame->moniker_data = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[48]);


            NdrConformantStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->moniker_data,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[114],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = IrotIsRunning(
            __frame->h,
            __frame->moniker_data);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_Irot_IrotIsRunning( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_Irot_IrotGetObject
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    IrotHandle h;
    const MonikerComparisonData * moniker_data;
    PInterfaceData _W0;
    PInterfaceData * obj;
    IrotCookie _W1;
    IrotCookie * cookie;
};

static void __finally_Irot_IrotGetObject( struct __frame_Irot_IrotGetObject *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->moniker_data,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[134]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->obj,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[142]);



}

void __RPC_STUB Irot_IrotGetObject( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_Irot_IrotGetObject __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &Irot_StubDesc);

    RpcExceptionInit( __server_filter, __finally_Irot_IrotGetObject );
    __frame->moniker_data = 0;
    __frame->obj = 0;
    __frame->cookie = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[56]);


            NdrConformantStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->moniker_data,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[126],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->obj = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->cookie = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = IrotGetObject(
            __frame->h,
            __frame->moniker_data,
            __frame->obj,
            __frame->cookie);
        __frame->_StubMsg.BufferLength = 16;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->obj,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[142]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->obj,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[142]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(IrotCookie *)__frame->_StubMsg.Buffer = *__frame->cookie;
        __frame->_StubMsg.Buffer += sizeof(IrotCookie);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_Irot_IrotGetObject( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_Irot_IrotNoteChangeTime
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    IrotHandle h;
    IrotCookie cookie;
    const FILETIME * time;
};

static void __finally_Irot_IrotNoteChangeTime( struct __frame_Irot_IrotNoteChangeTime *__frame )
{




}

void __RPC_STUB Irot_IrotNoteChangeTime( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_Irot_IrotNoteChangeTime __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &Irot_StubDesc);

    RpcExceptionInit( __server_filter, __finally_Irot_IrotNoteChangeTime );
    __frame->time = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[72]);


            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(IrotCookie) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->cookie = *(IrotCookie *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(IrotCookie);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->time,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[150],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = IrotNoteChangeTime(
            __frame->h,
            __frame->cookie,
            __frame->time);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_Irot_IrotNoteChangeTime( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_Irot_IrotGetTimeOfLastChange
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    IrotHandle h;
    const MonikerComparisonData * moniker_data;
    FILETIME _W0;
    FILETIME * time;
};

static void __finally_Irot_IrotGetTimeOfLastChange( struct __frame_Irot_IrotGetTimeOfLastChange *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->moniker_data,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[170]);



}

void __RPC_STUB Irot_IrotGetTimeOfLastChange( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_Irot_IrotGetTimeOfLastChange __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &Irot_StubDesc);

    RpcExceptionInit( __server_filter, __finally_Irot_IrotGetTimeOfLastChange );
    __frame->moniker_data = 0;
    __frame->time = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[82]);


            NdrConformantStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->moniker_data,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[162],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->time = &__frame->_W0;

        __frame->_RetVal = IrotGetTimeOfLastChange(
            __frame->h,
            __frame->moniker_data,
            __frame->time);
        __frame->_StubMsg.BufferLength = 20;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->time,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[174]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_Irot_IrotGetTimeOfLastChange( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_Irot_IrotEnumRunning
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    IrotHandle h;
    PInterfaceList _W0;
    PInterfaceList * list;
};

static void __finally_Irot_IrotEnumRunning( struct __frame_Irot_IrotEnumRunning *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->list,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[232]);


}

void __RPC_STUB Irot_IrotEnumRunning( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_Irot_IrotEnumRunning __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &Irot_StubDesc);

    RpcExceptionInit( __server_filter, __finally_Irot_IrotEnumRunning );
    __frame->list = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[94]);


            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->list = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = IrotEnumRunning(
            __frame->h,
            __frame->list);
        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->list,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[232]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->list,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[232]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_Irot_IrotEnumRunning( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

#if !defined(__RPC_WIN32__)
#error  Invalid build platform for this stub.
#endif

static const unsigned short Irot_FormatStringOffsetTable[] =
{
    0,  /* IrotRegister */
    30,  /* IrotRevoke */
    48,  /* IrotIsRunning */
    56,  /* IrotGetObject */
    72,  /* IrotNoteChangeTime */
    82,  /* IrotGetTimeOfLastChange */
    94,  /* IrotEnumRunning */
};

static const MIDL_STUB_DESC Irot_StubDesc =
{
    (void *)& Irot___RpcServerInterface,
    MIDL_user_allocate,
    MIDL_user_free,
    {
        0,
    },
    RundownRoutines,
    0,
    0,
    0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    0,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};

static RPC_DISPATCH_FUNCTION Irot_table[] =
{
    Irot_IrotRegister,
    Irot_IrotRevoke,
    Irot_IrotIsRunning,
    Irot_IrotGetObject,
    Irot_IrotNoteChangeTime,
    Irot_IrotGetTimeOfLastChange,
    Irot_IrotEnumRunning,
    0
};
static RPC_DISPATCH_TABLE Irot_v0_2_DispatchTable =
{
    7,
    Irot_table
};

static const SERVER_ROUTINE Irot_ServerRoutineTable[] =
{
    (SERVER_ROUTINE)IrotRegister,
    (SERVER_ROUTINE)IrotRevoke,
    (SERVER_ROUTINE)IrotIsRunning,
    (SERVER_ROUTINE)IrotGetObject,
    (SERVER_ROUTINE)IrotNoteChangeTime,
    (SERVER_ROUTINE)IrotGetTimeOfLastChange,
    (SERVER_ROUTINE)IrotEnumRunning,
};

static const MIDL_SERVER_INFO Irot_ServerInfo =
{
    &Irot_StubDesc,
    Irot_ServerRoutineTable,
    __MIDL_ProcFormatString.Format,
    Irot_FormatStringOffsetTable,
    0,
    0,
    0,
    0
};

static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 2 (parameter moniker_data) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x14),	/* type offset = 20 */
/* 6 (parameter object) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2a),	/* type offset = 42 */
/* 10 (parameter moniker) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x36),	/* type offset = 54 */
/* 14 (parameter time) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x42),	/* type offset = 66 */
/* 18 (parameter grfFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 20 (parameter cookie) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x46),	/* type offset = 70 */
/* 24 (parameter ctxt_handle) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4a),	/* type offset = 74 */
/* 28 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 30 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 32 (parameter cookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 34 (parameter ctxt_handle) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x52),	/* type offset = 82 */
/* 38 (parameter object) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x66),	/* type offset = 102 */
/* 42 (parameter moniker) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6e),	/* type offset = 110 */
/* 46 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 48 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 50 (parameter moniker_data) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7a),	/* type offset = 122 */
/* 54 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 56 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 58 (parameter moniker_data) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x86),	/* type offset = 134 */
/* 62 (parameter obj) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x8e),	/* type offset = 142 */
/* 66 (parameter cookie) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x92),	/* type offset = 146 */
/* 70 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 72 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 74 (parameter cookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 76 (parameter time) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9e),	/* type offset = 158 */
/* 80 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 82 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 84 (parameter moniker_data) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xaa),	/* type offset = 170 */
/* 88 (parameter time) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xb6),	/* type offset = 182 */
/* 92 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 94 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 96 (parameter list) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe8),	/* type offset = 232 */
/* 100 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (BYTE[]) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x9,	/* Corr desc: field ulCntData, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 12 (const MonikerComparisonData) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xfff2),	/* Offset= -14 (2) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 20 (const MonikerComparisonData *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff6),	/* Offset= -10 (12) */
/* 24 (BYTE[]) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x9,	/* Corr desc: field ulCntData, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 34 (const InterfaceData) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xfff2),	/* Offset= -14 (24) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 42 (const InterfaceData *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff6),	/* Offset= -10 (34) */
/* 46 (const InterfaceData) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xffe6),	/* Offset= -26 (24) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 54 (const InterfaceData *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff6),	/* Offset= -10 (46) */
/* 58 (const FILETIME) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 66 (const FILETIME *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff6),	/* Offset= -10 (58) */
/* 70 (IrotCookie *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 74 (IrotContextHandle *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (78) */
/* 78 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa8,	/* Context flags: strict, out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 82 (IrotContextHandle *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (86) */
/* 86 */
        0x30,	/* FC_BIND_CONTEXT */
        0xe8,	/* Context flags: strict, out, in, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 90 (InterfaceData) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xffba),	/* Offset= -70 (24) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 98 (PInterfaceData) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff6),	/* Offset= -10 (90) */
/* 102 (PInterfaceData *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (98) */
/* 106 (PInterfaceData) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffee),	/* Offset= -18 (90) */
/* 110 (PInterfaceData *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (106) */
/* 114 (const MonikerComparisonData) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xff8c),	/* Offset= -116 (2) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 122 (const MonikerComparisonData *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff6),	/* Offset= -10 (114) */
/* 126 (const MonikerComparisonData) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xff80),	/* Offset= -128 (2) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 134 (const MonikerComparisonData *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff6),	/* Offset= -10 (126) */
/* 138 (PInterfaceData) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffce),	/* Offset= -50 (90) */
/* 142 (PInterfaceData *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (138) */
/* 146 (IrotCookie *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 150 (const FILETIME) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 158 (const FILETIME *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff6),	/* Offset= -10 (150) */
/* 162 (const MonikerComparisonData) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xff5c),	/* Offset= -164 (2) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 170 (const MonikerComparisonData *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff6),	/* Offset= -10 (162) */
/* 174 (FILETIME) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 182 (FILETIME *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfff6),	/* Offset= -10 (174) */
/* 186 (PInterfaceData[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x9,	/* Corr desc: field size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff96),	/* Offset= -106 (90) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 200 (InterfaceList) */
        0x18,	/* FC_CPSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xffee),	/* Offset= -18 (186) */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x4),	/* Offset to array = 4 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff7c),	/* Offset= -132 (90) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 228 (PInterfaceList) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe2),	/* Offset= -30 (200) */
/* 232 (PInterfaceList *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (228) */
        0x0
    }
};


#else /* _WIN64 */

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

struct __server_frame
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static int __server_filter( struct __server_frame *__frame )
{
    return (__frame->code == STATUS_ACCESS_VIOLATION) ||
           (__frame->code == STATUS_DATATYPE_MISALIGNMENT) ||
           (__frame->code == RPC_X_BAD_STUB_DATA) ||
           (__frame->code == RPC_S_INVALID_BOUND);
}

#define TYPE_FORMAT_STRING_SIZE 225
#define PROC_FORMAT_STRING_SIZE 103

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

static const NDR_RUNDOWN RundownRoutines[] =
{
    IrotContextHandle_rundown
};

/*****************************************************************************
 * Irot interface
 */

static RPC_DISPATCH_TABLE Irot_v0_2_DispatchTable;
static const MIDL_SERVER_INFO Irot_ServerInfo;

static const RPC_SERVER_INTERFACE Irot___RpcServerInterface =
{
    sizeof(RPC_SERVER_INTERFACE),
    {{0x7a98c254,0x6808,0x11cf,{0xb7,0x3b,0x00,0xaa,0x00,0xb6,0x77,0xa8}},{0,2}},
    {{0x8a885d04,0x1ceb,0x11c9,{0x9f,0xe8,0x08,0x00,0x2b,0x10,0x48,0x60}},{2,0}},
    &Irot_v0_2_DispatchTable,
    0,
    0,
    0,
    &Irot_ServerInfo,
    0,
};
RPC_IF_HANDLE Irot_v0_2_s_ifspec DECLSPEC_HIDDEN = (RPC_IF_HANDLE)& Irot___RpcServerInterface;

static const MIDL_STUB_DESC Irot_StubDesc;

struct __frame_Irot_IrotRegister
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    IrotHandle h;
    const MonikerComparisonData * moniker_data;
    const InterfaceData * object;
    const InterfaceData * moniker;
    const FILETIME * time;
    DWORD grfFlags;
    IrotCookie _W0;
    IrotCookie * cookie;
    NDR_SCONTEXT ctxt_handle;
};

static void __finally_Irot_IrotRegister( struct __frame_Irot_IrotRegister *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->moniker_data,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[20]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->object,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[42]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->moniker,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[54]);






}

void __RPC_STUB Irot_IrotRegister( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_Irot_IrotRegister __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &Irot_StubDesc);

    RpcExceptionInit( __server_filter, __finally_Irot_IrotRegister );
    __frame->moniker_data = 0;
    __frame->object = 0;
    __frame->moniker = 0;
    __frame->time = 0;
    __frame->cookie = 0;
    __frame->ctxt_handle = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[0]);


            NdrConformantStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->moniker_data,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[12],
                0);

            NdrConformantStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->object,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[34],
                0);

            NdrConformantStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->moniker,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[46],
                0);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->time,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[58],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->grfFlags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->cookie = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ctxt_handle = NdrContextHandleInitialize(
            &__frame->_StubMsg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[74]);

        __frame->_RetVal = IrotRegister(
            __frame->h,
            __frame->moniker_data,
            __frame->object,
            __frame->moniker,
            __frame->time,
            __frame->grfFlags,
            __frame->cookie,
            (IrotContextHandle *)NDRSContextValue(__frame->ctxt_handle));
        __frame->_StubMsg.BufferLength = 40;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(IrotCookie *)__frame->_StubMsg.Buffer = *__frame->cookie;
        __frame->_StubMsg.Buffer += sizeof(IrotCookie);

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->ctxt_handle,
            (NDR_RUNDOWN)IrotContextHandle_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[74]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_Irot_IrotRegister( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_Irot_IrotRevoke
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    IrotHandle h;
    IrotCookie cookie;
    NDR_SCONTEXT ctxt_handle;
    PInterfaceData _W0;
    PInterfaceData * object;
    PInterfaceData _W1;
    PInterfaceData * moniker;
};

static void __finally_Irot_IrotRevoke( struct __frame_Irot_IrotRevoke *__frame )
{



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->object,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[102]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->moniker,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[110]);


}

void __RPC_STUB Irot_IrotRevoke( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_Irot_IrotRevoke __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &Irot_StubDesc);

    RpcExceptionInit( __server_filter, __finally_Irot_IrotRevoke );
    __frame->ctxt_handle = 0;
    __frame->object = 0;
    __frame->moniker = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[30]);


            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(IrotCookie) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->cookie = *(IrotCookie *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(IrotCookie);

            __frame->ctxt_handle = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[82]);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->object = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->moniker = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = IrotRevoke(
            __frame->h,
            __frame->cookie,
            (IrotContextHandle *)NDRSContextValue(__frame->ctxt_handle),
            __frame->object,
            __frame->moniker);
        __frame->_StubMsg.BufferLength = 32;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->object,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[102]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->moniker,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[110]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->ctxt_handle,
            (NDR_RUNDOWN)IrotContextHandle_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[82]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->object,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[102]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->moniker,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[110]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_Irot_IrotRevoke( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_Irot_IrotIsRunning
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    IrotHandle h;
    const MonikerComparisonData * moniker_data;
};

static void __finally_Irot_IrotIsRunning( struct __frame_Irot_IrotIsRunning *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->moniker_data,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[122]);


}

void __RPC_STUB Irot_IrotIsRunning( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_Irot_IrotIsRunning __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &Irot_StubDesc);

    RpcExceptionInit( __server_filter, __finally_Irot_IrotIsRunning );
    __frame->moniker_data = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[48]);


            NdrConformantStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->moniker_data,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[114],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = IrotIsRunning(
            __frame->h,
            __frame->moniker_data);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_Irot_IrotIsRunning( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_Irot_IrotGetObject
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    IrotHandle h;
    const MonikerComparisonData * moniker_data;
    PInterfaceData _W0;
    PInterfaceData * obj;
    IrotCookie _W1;
    IrotCookie * cookie;
};

static void __finally_Irot_IrotGetObject( struct __frame_Irot_IrotGetObject *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->moniker_data,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[134]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->obj,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[142]);



}

void __RPC_STUB Irot_IrotGetObject( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_Irot_IrotGetObject __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &Irot_StubDesc);

    RpcExceptionInit( __server_filter, __finally_Irot_IrotGetObject );
    __frame->moniker_data = 0;
    __frame->obj = 0;
    __frame->cookie = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[56]);


            NdrConformantStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->moniker_data,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[126],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->obj = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->cookie = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = IrotGetObject(
            __frame->h,
            __frame->moniker_data,
            __frame->obj,
            __frame->cookie);
        __frame->_StubMsg.BufferLength = 16;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->obj,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[142]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->obj,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[142]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(IrotCookie *)__frame->_StubMsg.Buffer = *__frame->cookie;
        __frame->_StubMsg.Buffer += sizeof(IrotCookie);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_Irot_IrotGetObject( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_Irot_IrotNoteChangeTime
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    IrotHandle h;
    IrotCookie cookie;
    const FILETIME * time;
};

static void __finally_Irot_IrotNoteChangeTime( struct __frame_Irot_IrotNoteChangeTime *__frame )
{




}

void __RPC_STUB Irot_IrotNoteChangeTime( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_Irot_IrotNoteChangeTime __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &Irot_StubDesc);

    RpcExceptionInit( __server_filter, __finally_Irot_IrotNoteChangeTime );
    __frame->time = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[72]);


            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(IrotCookie) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->cookie = *(IrotCookie *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(IrotCookie);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->time,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[150],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = IrotNoteChangeTime(
            __frame->h,
            __frame->cookie,
            __frame->time);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_Irot_IrotNoteChangeTime( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_Irot_IrotGetTimeOfLastChange
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    IrotHandle h;
    const MonikerComparisonData * moniker_data;
    FILETIME _W0;
    FILETIME * time;
};

static void __finally_Irot_IrotGetTimeOfLastChange( struct __frame_Irot_IrotGetTimeOfLastChange *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->moniker_data,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[170]);



}

void __RPC_STUB Irot_IrotGetTimeOfLastChange( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_Irot_IrotGetTimeOfLastChange __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &Irot_StubDesc);

    RpcExceptionInit( __server_filter, __finally_Irot_IrotGetTimeOfLastChange );
    __frame->moniker_data = 0;
    __frame->time = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[82]);


            NdrConformantStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->moniker_data,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[162],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->time = &__frame->_W0;

        __frame->_RetVal = IrotGetTimeOfLastChange(
            __frame->h,
            __frame->moniker_data,
            __frame->time);
        __frame->_StubMsg.BufferLength = 20;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->time,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[174]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_Irot_IrotGetTimeOfLastChange( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_Irot_IrotEnumRunning
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    IrotHandle h;
    PInterfaceList _W0;
    PInterfaceList * list;
};

static void __finally_Irot_IrotEnumRunning( struct __frame_Irot_IrotEnumRunning *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->list,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[220]);


}

void __RPC_STUB Irot_IrotEnumRunning( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_Irot_IrotEnumRunning __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &Irot_StubDesc);

    RpcExceptionInit( __server_filter, __finally_Irot_IrotEnumRunning );
    __frame->list = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[94]);


            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->list = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = IrotEnumRunning(
            __frame->h,
            __frame->list);
        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->list,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[220]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->list,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[220]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_Irot_IrotEnumRunning( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

#if !defined(__RPC_WIN64__)
#error  Invalid build platform for this stub.
#endif

static const unsigned short Irot_FormatStringOffsetTable[] =
{
    0,  /* IrotRegister */
    30,  /* IrotRevoke */
    48,  /* IrotIsRunning */
    56,  /* IrotGetObject */
    72,  /* IrotNoteChangeTime */
    82,  /* IrotGetTimeOfLastChange */
    94,  /* IrotEnumRunning */
};

static const MIDL_STUB_DESC Irot_StubDesc =
{
    (void *)& Irot___RpcServerInterface,
    MIDL_user_allocate,
    MIDL_user_free,
    {
        0,
    },
    RundownRoutines,
    0,
    0,
    0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    0,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};

static RPC_DISPATCH_FUNCTION Irot_table[] =
{
    Irot_IrotRegister,
    Irot_IrotRevoke,
    Irot_IrotIsRunning,
    Irot_IrotGetObject,
    Irot_IrotNoteChangeTime,
    Irot_IrotGetTimeOfLastChange,
    Irot_IrotEnumRunning,
    0
};
static RPC_DISPATCH_TABLE Irot_v0_2_DispatchTable =
{
    7,
    Irot_table
};

static const SERVER_ROUTINE Irot_ServerRoutineTable[] =
{
    (SERVER_ROUTINE)IrotRegister,
    (SERVER_ROUTINE)IrotRevoke,
    (SERVER_ROUTINE)IrotIsRunning,
    (SERVER_ROUTINE)IrotGetObject,
    (SERVER_ROUTINE)IrotNoteChangeTime,
    (SERVER_ROUTINE)IrotGetTimeOfLastChange,
    (SERVER_ROUTINE)IrotEnumRunning,
};

static const MIDL_SERVER_INFO Irot_ServerInfo =
{
    &Irot_StubDesc,
    Irot_ServerRoutineTable,
    __MIDL_ProcFormatString.Format,
    Irot_FormatStringOffsetTable,
    0,
    0,
    0,
    0
};

static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 2 (parameter moniker_data) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x14),	/* type offset = 20 */
/* 6 (parameter object) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2a),	/* type offset = 42 */
/* 10 (parameter moniker) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x36),	/* type offset = 54 */
/* 14 (parameter time) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x42),	/* type offset = 66 */
/* 18 (parameter grfFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 20 (parameter cookie) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x46),	/* type offset = 70 */
/* 24 (parameter ctxt_handle) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4a),	/* type offset = 74 */
/* 28 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 30 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 32 (parameter cookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 34 (parameter ctxt_handle) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x52),	/* type offset = 82 */
/* 38 (parameter object) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x66),	/* type offset = 102 */
/* 42 (parameter moniker) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6e),	/* type offset = 110 */
/* 46 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 48 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 50 (parameter moniker_data) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7a),	/* type offset = 122 */
/* 54 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 56 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 58 (parameter moniker_data) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x86),	/* type offset = 134 */
/* 62 (parameter obj) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x8e),	/* type offset = 142 */
/* 66 (parameter cookie) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x92),	/* type offset = 146 */
/* 70 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 72 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 74 (parameter cookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 76 (parameter time) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9e),	/* type offset = 158 */
/* 80 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 82 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 84 (parameter moniker_data) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xaa),	/* type offset = 170 */
/* 88 (parameter time) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xb6),	/* type offset = 182 */
/* 92 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 94 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 96 (parameter list) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xdc),	/* type offset = 220 */
/* 100 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (BYTE[]) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x9,	/* Corr desc: field ulCntData, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 12 (const MonikerComparisonData) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xfff2),	/* Offset= -14 (2) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 20 (const MonikerComparisonData *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff6),	/* Offset= -10 (12) */
/* 24 (BYTE[]) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x9,	/* Corr desc: field ulCntData, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 34 (const InterfaceData) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xfff2),	/* Offset= -14 (24) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 42 (const InterfaceData *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff6),	/* Offset= -10 (34) */
/* 46 (const InterfaceData) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xffe6),	/* Offset= -26 (24) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 54 (const InterfaceData *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff6),	/* Offset= -10 (46) */
/* 58 (const FILETIME) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 66 (const FILETIME *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff6),	/* Offset= -10 (58) */
/* 70 (IrotCookie *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 74 (IrotContextHandle *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (78) */
/* 78 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa8,	/* Context flags: strict, out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 82 (IrotContextHandle *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (86) */
/* 86 */
        0x30,	/* FC_BIND_CONTEXT */
        0xe8,	/* Context flags: strict, out, in, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 90 (InterfaceData) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xffba),	/* Offset= -70 (24) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 98 (PInterfaceData) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff6),	/* Offset= -10 (90) */
/* 102 (PInterfaceData *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (98) */
/* 106 (PInterfaceData) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffee),	/* Offset= -18 (90) */
/* 110 (PInterfaceData *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (106) */
/* 114 (const MonikerComparisonData) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xff8c),	/* Offset= -116 (2) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 122 (const MonikerComparisonData *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff6),	/* Offset= -10 (114) */
/* 126 (const MonikerComparisonData) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xff80),	/* Offset= -128 (2) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 134 (const MonikerComparisonData *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff6),	/* Offset= -10 (126) */
/* 138 (PInterfaceData) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffce),	/* Offset= -50 (90) */
/* 142 (PInterfaceData *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (138) */
/* 146 (IrotCookie *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 150 (const FILETIME) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 158 (const FILETIME *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff6),	/* Offset= -10 (150) */
/* 162 (const MonikerComparisonData) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xff5c),	/* Offset= -164 (2) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 170 (const MonikerComparisonData *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff6),	/* Offset= -10 (162) */
/* 174 (FILETIME) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 182 (FILETIME *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfff6),	/* Offset= -10 (174) */
/* 186 (PInterfaceData[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x9,	/* Corr desc: field size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff92),	/* Offset= -110 (90) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 204 (InterfaceList) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0xffea),	/* Offset= -22 (186) */
        NdrFcShort(0x0),	/* Offset= 0 (210) */
        0x08,	/* FC_LONG */
        0x40,	/* FC_STRUCTPAD4 */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 216 (PInterfaceList) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff2),	/* Offset= -14 (204) */
/* 220 (PInterfaceList *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (216) */
        0x0
    }
};


#endif /* _WIN64 */
