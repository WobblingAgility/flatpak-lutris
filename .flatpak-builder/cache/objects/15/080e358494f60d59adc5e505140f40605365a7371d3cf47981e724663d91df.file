/*** Autogenerated by WIDL 3.8 from disp_ex.idl - Do not edit ***/

#define __midl_proxy
#include "objbase.h"

#ifndef DECLSPEC_HIDDEN
#define DECLSPEC_HIDDEN
#endif


#ifndef _WIN64

#ifndef __REDQ_RPCPROXY_H_VERSION__
#define __REQUIRED_RPCPROXY_H_VERSION__ 440
#endif

#include "rpcproxy.h"
#ifndef __RPCPROXY_H_VERSION__
#error This code needs a newer version of rpcproxy.h
#endif /* __RPCPROXY_H_VERSION__ */

#include "disp_ex.h"

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

struct __proxy_frame
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    void             *This;
};

static int __proxy_filter( struct __proxy_frame *__frame )
{
    return (__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE);
}

#define TYPE_FORMAT_STRING_SIZE 1479
#define PROC_FORMAT_STRING_SIZE 177

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

static const MIDL_STUB_DESC Object_StubDesc;

/*****************************************************************************
 * IDispatchEx interface
 */
static void __finally_IDispatchEx_GetDispID_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispatchEx_GetDispID_Proxy(
    IDispatchEx* This,
    BSTR bstrName,
    DWORD grfdex,
    DISPID *pid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispatchEx_GetDispID_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrUserMarshalBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)&bstrName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[26]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrUserMarshalMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&bstrName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[26]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = grfdex;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[0]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DISPID) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pid = *(DISPID *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DISPID);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispatchEx_GetDispID_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[36], (void *)pid );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispatchEx_GetDispID_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispatchEx * _This;
    HRESULT _RetVal;
    BSTR bstrName;
    void *_p_bstrName;
    DWORD grfdex;
    DISPID _W0;
    DISPID * pid;
};

static void __finally_IDispatchEx_GetDispID_Stub( struct __frame_IDispatchEx_GetDispID_Stub *__frame )
{
    NdrUserMarshalFree(
        &__frame->_StubMsg,
        (unsigned char *)&__frame->bstrName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[26]);



}

void __RPC_STUB IDispatchEx_GetDispID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispatchEx_GetDispID_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispatchEx*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispatchEx_GetDispID_Stub );
    MIDL_memset(&__frame->bstrName, 0, sizeof(__frame->bstrName));
    __frame->_p_bstrName = &__frame->bstrName;
    __frame->pid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[0]);

        NdrUserMarshalUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_bstrName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[26],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->grfdex = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        __frame->pid = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetDispID(__frame->_This, __frame->bstrName, __frame->grfdex, __frame->pid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DISPID *)__frame->_StubMsg.Buffer = *__frame->pid;
        __frame->_StubMsg.Buffer += sizeof(DISPID);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispatchEx_GetDispID_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispatchEx_RemoteInvokeEx_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispatchEx_RemoteInvokeEx_Proxy(
    IDispatchEx* This,
    DISPID id,
    LCID lcid,
    DWORD dwFlags,
    DISPPARAMS *pdp,
    VARIANT *pvarRes,
    EXCEPINFO *pei,
    IServiceProvider *pspCaller,
    UINT cvarRefArg,
    UINT *rgiRefArg,
    VARIANT *rgvarRefArg)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispatchEx_RemoteInvokeEx_Proxy );
    __frame->This = This;
    if (pvarRes) MIDL_memset( pvarRes, 0, sizeof( *pvarRes ));
    if (pei) MIDL_memset( pei, 0, sizeof( *pei ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!pdp) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pvarRes) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pei) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!rgiRefArg) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!rgvarRefArg) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 32;
            NdrSimpleStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pdp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1164]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pspCaller,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1256]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cvarRefArg;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgiRefArg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1274]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cvarRefArg;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgvarRefArg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1288]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DISPID *)__frame->_StubMsg.Buffer = id;
            __frame->_StubMsg.Buffer += sizeof(DISPID);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LCID *)__frame->_StubMsg.Buffer = lcid;
            __frame->_StubMsg.Buffer += sizeof(LCID);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pdp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1164]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pspCaller,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1256]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(UINT *)__frame->_StubMsg.Buffer = cvarRefArg;
            __frame->_StubMsg.Buffer += sizeof(UINT);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cvarRefArg;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgiRefArg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1274]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cvarRefArg;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgvarRefArg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1288]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[12]);

            NdrUserMarshalUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pvarRes,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1200],
                0);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pei,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1224],
                0);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgvarRefArg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1288],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispatchEx_RemoteInvokeEx_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1210], (void *)pvarRes );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1252], (void *)pei );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)cvarRefArg;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1306], (void *)rgvarRefArg );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispatchEx_RemoteInvokeEx_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispatchEx * _This;
    HRESULT _RetVal;
    DISPID id;
    LCID lcid;
    DWORD dwFlags;
    DISPPARAMS * pdp;
    VARIANT _W0;
    VARIANT * pvarRes;
    EXCEPINFO _W1;
    EXCEPINFO * pei;
    IServiceProvider * pspCaller;
    UINT cvarRefArg;
    UINT * rgiRefArg;
    VARIANT * rgvarRefArg;
};

static void __finally_IDispatchEx_RemoteInvokeEx_Stub( struct __frame_IDispatchEx_RemoteInvokeEx_Stub *__frame )
{



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pdp,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1196]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pvarRes,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1210]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pei,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1252]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pspCaller,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1256]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cvarRefArg;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgiRefArg,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1274]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cvarRefArg;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgvarRefArg,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1306]);

}

void __RPC_STUB IDispatchEx_RemoteInvokeEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispatchEx_RemoteInvokeEx_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispatchEx*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispatchEx_RemoteInvokeEx_Stub );
    __frame->pdp = 0;
    __frame->pvarRes = 0;
    __frame->pei = 0;
    __frame->pspCaller = 0;
    __frame->rgiRefArg = 0;
    __frame->rgvarRefArg = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[12]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DISPID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->id = *(DISPID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DISPID);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LCID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->lcid = *(LCID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LCID);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pdp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1164],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pspCaller,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1256],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cvarRefArg = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgiRefArg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1274],
            0);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgvarRefArg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1288],
            0);


        __frame->pvarRes = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));
        __frame->pei = &__frame->_W1;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDispatchEx_InvokeEx_Stub(__frame->_This, __frame->id, __frame->lcid, __frame->dwFlags, __frame->pdp, __frame->pvarRes, __frame->pei, __frame->pspCaller, __frame->cvarRefArg, __frame->rgiRefArg, __frame->rgvarRefArg);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrUserMarshalBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pvarRes,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1200]);

        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pei,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1224]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cvarRefArg;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgvarRefArg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1288]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrUserMarshalMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pvarRes,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1200]);

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pei,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1224]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cvarRefArg;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgvarRefArg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1288]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispatchEx_RemoteInvokeEx_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispatchEx_DeleteMemberByName_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispatchEx_DeleteMemberByName_Proxy(
    IDispatchEx* This,
    BSTR bstrName,
    DWORD grfdex)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispatchEx_DeleteMemberByName_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrUserMarshalBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)&bstrName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1310]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrUserMarshalMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&bstrName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1310]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = grfdex;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[46]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispatchEx_DeleteMemberByName_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispatchEx_DeleteMemberByName_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispatchEx * _This;
    HRESULT _RetVal;
    BSTR bstrName;
    void *_p_bstrName;
    DWORD grfdex;
};

static void __finally_IDispatchEx_DeleteMemberByName_Stub( struct __frame_IDispatchEx_DeleteMemberByName_Stub *__frame )
{
    NdrUserMarshalFree(
        &__frame->_StubMsg,
        (unsigned char *)&__frame->bstrName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1310]);


}

void __RPC_STUB IDispatchEx_DeleteMemberByName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispatchEx_DeleteMemberByName_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispatchEx*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispatchEx_DeleteMemberByName_Stub );
    MIDL_memset(&__frame->bstrName, 0, sizeof(__frame->bstrName));
    __frame->_p_bstrName = &__frame->bstrName;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[46]);

        NdrUserMarshalUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_bstrName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1310],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->grfdex = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->DeleteMemberByName(__frame->_This, __frame->bstrName, __frame->grfdex);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispatchEx_DeleteMemberByName_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispatchEx_DeleteMemberByDispID_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispatchEx_DeleteMemberByDispID_Proxy(
    IDispatchEx* This,
    DISPID id)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispatchEx_DeleteMemberByDispID_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DISPID *)__frame->_StubMsg.Buffer = id;
            __frame->_StubMsg.Buffer += sizeof(DISPID);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[54]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispatchEx_DeleteMemberByDispID_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispatchEx_DeleteMemberByDispID_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispatchEx * _This;
    HRESULT _RetVal;
    DISPID id;
};

static void __finally_IDispatchEx_DeleteMemberByDispID_Stub( struct __frame_IDispatchEx_DeleteMemberByDispID_Stub *__frame )
{

}

void __RPC_STUB IDispatchEx_DeleteMemberByDispID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispatchEx_DeleteMemberByDispID_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispatchEx*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispatchEx_DeleteMemberByDispID_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[54]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DISPID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->id = *(DISPID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DISPID);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->DeleteMemberByDispID(__frame->_This, __frame->id);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispatchEx_DeleteMemberByDispID_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispatchEx_GetMemberProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispatchEx_GetMemberProperties_Proxy(
    IDispatchEx* This,
    DISPID id,
    DWORD grfdexFetch,
    DWORD *pgrfdex)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispatchEx_GetMemberProperties_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 11);
        if (!pgrfdex) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DISPID *)__frame->_StubMsg.Buffer = id;
            __frame->_StubMsg.Buffer += sizeof(DISPID);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = grfdexFetch;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[58]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pgrfdex = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispatchEx_GetMemberProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1320], (void *)pgrfdex );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispatchEx_GetMemberProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispatchEx * _This;
    HRESULT _RetVal;
    DISPID id;
    DWORD grfdexFetch;
    DWORD _W0;
    DWORD * pgrfdex;
};

static void __finally_IDispatchEx_GetMemberProperties_Stub( struct __frame_IDispatchEx_GetMemberProperties_Stub *__frame )
{



}

void __RPC_STUB IDispatchEx_GetMemberProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispatchEx_GetMemberProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispatchEx*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispatchEx_GetMemberProperties_Stub );
    __frame->pgrfdex = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[58]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DISPID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->id = *(DISPID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DISPID);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->grfdexFetch = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        __frame->pgrfdex = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetMemberProperties(__frame->_This, __frame->id, __frame->grfdexFetch, __frame->pgrfdex);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pgrfdex;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispatchEx_GetMemberProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispatchEx_GetMemberName_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispatchEx_GetMemberName_Proxy(
    IDispatchEx* This,
    DISPID id,
    BSTR *pbstrName)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispatchEx_GetMemberName_Proxy );
    __frame->This = This;
    if (pbstrName) MIDL_memset( pbstrName, 0, sizeof( *pbstrName ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 12);
        if (!pbstrName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DISPID *)__frame->_StubMsg.Buffer = id;
            __frame->_StubMsg.Buffer += sizeof(DISPID);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[68]);

            NdrUserMarshalUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pbstrName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1214],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispatchEx_GetMemberName_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1324], (void *)pbstrName );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispatchEx_GetMemberName_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispatchEx * _This;
    HRESULT _RetVal;
    DISPID id;
    BSTR _W0;
    BSTR * pbstrName;
};

static void __finally_IDispatchEx_GetMemberName_Stub( struct __frame_IDispatchEx_GetMemberName_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pbstrName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1324]);

}

void __RPC_STUB IDispatchEx_GetMemberName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispatchEx_GetMemberName_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispatchEx*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispatchEx_GetMemberName_Stub );
    __frame->pbstrName = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[68]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DISPID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->id = *(DISPID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DISPID);


        __frame->pbstrName = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetMemberName(__frame->_This, __frame->id, __frame->pbstrName);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrUserMarshalBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pbstrName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1214]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrUserMarshalMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pbstrName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1214]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispatchEx_GetMemberName_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispatchEx_GetNextDispID_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispatchEx_GetNextDispID_Proxy(
    IDispatchEx* This,
    DWORD grfdex,
    DISPID id,
    DISPID *pid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispatchEx_GetNextDispID_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 13);
        if (!pid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = grfdex;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DISPID *)__frame->_StubMsg.Buffer = id;
            __frame->_StubMsg.Buffer += sizeof(DISPID);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[76]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DISPID) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pid = *(DISPID *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DISPID);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispatchEx_GetNextDispID_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1328], (void *)pid );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispatchEx_GetNextDispID_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispatchEx * _This;
    HRESULT _RetVal;
    DWORD grfdex;
    DISPID id;
    DISPID _W0;
    DISPID * pid;
};

static void __finally_IDispatchEx_GetNextDispID_Stub( struct __frame_IDispatchEx_GetNextDispID_Stub *__frame )
{



}

void __RPC_STUB IDispatchEx_GetNextDispID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispatchEx_GetNextDispID_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispatchEx*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispatchEx_GetNextDispID_Stub );
    __frame->pid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[76]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->grfdex = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DISPID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->id = *(DISPID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DISPID);


        __frame->pid = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetNextDispID(__frame->_This, __frame->grfdex, __frame->id, __frame->pid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DISPID *)__frame->_StubMsg.Buffer = *__frame->pid;
        __frame->_StubMsg.Buffer += sizeof(DISPID);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispatchEx_GetNextDispID_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispatchEx_GetNameSpaceParent_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispatchEx_GetNameSpaceParent_Proxy(
    IDispatchEx* This,
    IUnknown **ppunk)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispatchEx_GetNameSpaceParent_Proxy );
    __frame->This = This;
    if (ppunk) MIDL_memset( ppunk, 0, sizeof( *ppunk ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 14);
        if (!ppunk) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[86]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppunk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1350],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispatchEx_GetNameSpaceParent_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1350], (void *)ppunk );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispatchEx_GetNameSpaceParent_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispatchEx * _This;
    HRESULT _RetVal;
    IUnknown *_W0;
    IUnknown ** ppunk;
};

static void __finally_IDispatchEx_GetNameSpaceParent_Stub( struct __frame_IDispatchEx_GetNameSpaceParent_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppunk,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1350]);

}

void __RPC_STUB IDispatchEx_GetNameSpaceParent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispatchEx_GetNameSpaceParent_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispatchEx*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispatchEx_GetNameSpaceParent_Stub );
    __frame->ppunk = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[86]);


        __frame->ppunk = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetNameSpaceParent(__frame->_This, __frame->ppunk);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppunk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1350]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppunk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1350]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispatchEx_GetNameSpaceParent_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IDispatchEx_FormatStringOffsetTable[] =
{
    (unsigned short)-1,  /* IDispatch::GetTypeInfoCount */
    (unsigned short)-1,  /* IDispatch::GetTypeInfo */
    (unsigned short)-1,  /* IDispatch::GetIDsOfNames */
    (unsigned short)-1,  /* IDispatch::RemoteInvoke */
    0,  /* IDispatchEx::GetDispID */
    12,  /* IDispatchEx::RemoteInvokeEx */
    46,  /* IDispatchEx::DeleteMemberByName */
    54,  /* IDispatchEx::DeleteMemberByDispID */
    58,  /* IDispatchEx::GetMemberProperties */
    68,  /* IDispatchEx::GetMemberName */
    76,  /* IDispatchEx::GetNextDispID */
    86,  /* IDispatchEx::GetNameSpaceParent */
};

static CINTERFACE_PROXY_VTABLE(15) _IDispatchExProxyVtbl =
{
    {
        &IID_IDispatchEx,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        0,  /* IDispatch::GetTypeInfoCount */
        0,  /* IDispatch::GetTypeInfo */
        0,  /* IDispatch::GetIDsOfNames */
        0,  /* IDispatch::Invoke */
        IDispatchEx_GetDispID_Proxy,
        IDispatchEx_InvokeEx_Proxy,
        IDispatchEx_DeleteMemberByName_Proxy,
        IDispatchEx_DeleteMemberByDispID_Proxy,
        IDispatchEx_GetMemberProperties_Proxy,
        IDispatchEx_GetMemberName_Proxy,
        IDispatchEx_GetNextDispID_Proxy,
        IDispatchEx_GetNameSpaceParent_Proxy,
    }
};

static const MIDL_SERVER_INFO IDispatchEx_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IDispatchEx_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IDispatchEx_table[] =
{
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    IDispatchEx_GetDispID_Stub,
    IDispatchEx_RemoteInvokeEx_Stub,
    IDispatchEx_DeleteMemberByName_Stub,
    IDispatchEx_DeleteMemberByDispID_Stub,
    IDispatchEx_GetMemberProperties_Stub,
    IDispatchEx_GetMemberName_Stub,
    IDispatchEx_GetNextDispID_Stub,
    IDispatchEx_GetNameSpaceParent_Stub
};

static CInterfaceStubVtbl _IDispatchExStubVtbl =
{
    {
        &IID_IDispatchEx,
        &IDispatchEx_ServerInfo,
        15,
        &IDispatchEx_table[-3]
    },
    {
        CStdStubBuffer_DELEGATING_METHODS
    }
};

/*****************************************************************************
 * IDispError interface
 */
static void __finally_IDispError_QueryErrorInfo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispError_QueryErrorInfo_Proxy(
    IDispError* This,
    GUID guidErrorType,
    IDispError **ppde)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispError_QueryErrorInfo_Proxy );
    __frame->This = This;
    if (ppde) MIDL_memset( ppde, 0, sizeof( *ppde ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppde) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&guidErrorType,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1360]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[92]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppde,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1390],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispError_QueryErrorInfo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1390], (void *)ppde );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispError_QueryErrorInfo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispError * _This;
    HRESULT _RetVal;
    GUID guidErrorType;
    void *_p_guidErrorType;
    IDispError *_W0;
    IDispError ** ppde;
};

static void __finally_IDispError_QueryErrorInfo_Stub( struct __frame_IDispError_QueryErrorInfo_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppde,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1390]);

}

void __RPC_STUB IDispError_QueryErrorInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispError_QueryErrorInfo_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispError*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispError_QueryErrorInfo_Stub );
    MIDL_memset(&__frame->guidErrorType, 0, sizeof(__frame->guidErrorType));
    __frame->_p_guidErrorType = &__frame->guidErrorType;
    __frame->ppde = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[92]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_guidErrorType,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1360],
            0);


        __frame->ppde = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->QueryErrorInfo(__frame->_This, __frame->guidErrorType, __frame->ppde);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppde,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1390]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppde,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1390]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispError_QueryErrorInfo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispError_GetNext_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispError_GetNext_Proxy(
    IDispError* This,
    IDispError **ppde)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispError_GetNext_Proxy );
    __frame->This = This;
    if (ppde) MIDL_memset( ppde, 0, sizeof( *ppde ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppde) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[102]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppde,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1412],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispError_GetNext_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1412], (void *)ppde );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispError_GetNext_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispError * _This;
    HRESULT _RetVal;
    IDispError *_W0;
    IDispError ** ppde;
};

static void __finally_IDispError_GetNext_Stub( struct __frame_IDispError_GetNext_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppde,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1412]);

}

void __RPC_STUB IDispError_GetNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispError_GetNext_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispError*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispError_GetNext_Stub );
    __frame->ppde = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[102]);


        __frame->ppde = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetNext(__frame->_This, __frame->ppde);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppde,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1412]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppde,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1412]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispError_GetNext_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispError_GetHresult_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispError_GetHresult_Proxy(
    IDispError* This,
    HRESULT *phr)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispError_GetHresult_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!phr) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[108]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *phr = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispError_GetHresult_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1416], (void *)phr );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispError_GetHresult_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispError * _This;
    HRESULT _RetVal;
    HRESULT _W0;
    HRESULT * phr;
};

static void __finally_IDispError_GetHresult_Stub( struct __frame_IDispError_GetHresult_Stub *__frame )
{

}

void __RPC_STUB IDispError_GetHresult_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispError_GetHresult_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispError*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispError_GetHresult_Stub );
    __frame->phr = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[108]);


        __frame->phr = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetHresult(__frame->_This, __frame->phr);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = *__frame->phr;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispError_GetHresult_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispError_GetSource_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispError_GetSource_Proxy(
    IDispError* This,
    BSTR *pbstrSource)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispError_GetSource_Proxy );
    __frame->This = This;
    if (pbstrSource) MIDL_memset( pbstrSource, 0, sizeof( *pbstrSource ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!pbstrSource) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[114]);

            NdrUserMarshalUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pbstrSource,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1214],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispError_GetSource_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1420], (void *)pbstrSource );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispError_GetSource_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispError * _This;
    HRESULT _RetVal;
    BSTR _W0;
    BSTR * pbstrSource;
};

static void __finally_IDispError_GetSource_Stub( struct __frame_IDispError_GetSource_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pbstrSource,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1420]);

}

void __RPC_STUB IDispError_GetSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispError_GetSource_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispError*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispError_GetSource_Stub );
    __frame->pbstrSource = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[114]);


        __frame->pbstrSource = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetSource(__frame->_This, __frame->pbstrSource);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrUserMarshalBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pbstrSource,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1214]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrUserMarshalMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pbstrSource,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1214]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispError_GetSource_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispError_GetHelpInfo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispError_GetHelpInfo_Proxy(
    IDispError* This,
    BSTR *pbstrFileName,
    DWORD *pdwContext)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispError_GetHelpInfo_Proxy );
    __frame->This = This;
    if (pbstrFileName) MIDL_memset( pbstrFileName, 0, sizeof( *pbstrFileName ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pbstrFileName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pdwContext) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[120]);

            NdrUserMarshalUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pbstrFileName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1214],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwContext = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispError_GetHelpInfo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1424], (void *)pbstrFileName );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1428], (void *)pdwContext );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispError_GetHelpInfo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispError * _This;
    HRESULT _RetVal;
    BSTR _W0;
    BSTR * pbstrFileName;
    DWORD _W1;
    DWORD * pdwContext;
};

static void __finally_IDispError_GetHelpInfo_Stub( struct __frame_IDispError_GetHelpInfo_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pbstrFileName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1424]);


}

void __RPC_STUB IDispError_GetHelpInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispError_GetHelpInfo_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispError*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispError_GetHelpInfo_Stub );
    __frame->pbstrFileName = 0;
    __frame->pdwContext = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[120]);


        __frame->pbstrFileName = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));
        __frame->pdwContext = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetHelpInfo(__frame->_This, __frame->pbstrFileName, __frame->pdwContext);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrUserMarshalBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pbstrFileName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1214]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrUserMarshalMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pbstrFileName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1214]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pdwContext;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispError_GetHelpInfo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispError_GetDescription_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispError_GetDescription_Proxy(
    IDispError* This,
    BSTR *pbstrDescription)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispError_GetDescription_Proxy );
    __frame->This = This;
    if (pbstrDescription) MIDL_memset( pbstrDescription, 0, sizeof( *pbstrDescription ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!pbstrDescription) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[130]);

            NdrUserMarshalUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pbstrDescription,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1214],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispError_GetDescription_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1432], (void *)pbstrDescription );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispError_GetDescription_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispError * _This;
    HRESULT _RetVal;
    BSTR _W0;
    BSTR * pbstrDescription;
};

static void __finally_IDispError_GetDescription_Stub( struct __frame_IDispError_GetDescription_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pbstrDescription,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1432]);

}

void __RPC_STUB IDispError_GetDescription_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispError_GetDescription_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispError*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispError_GetDescription_Stub );
    __frame->pbstrDescription = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[130]);


        __frame->pbstrDescription = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetDescription(__frame->_This, __frame->pbstrDescription);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrUserMarshalBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pbstrDescription,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1214]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrUserMarshalMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pbstrDescription,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1214]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispError_GetDescription_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IDispError_FormatStringOffsetTable[] =
{
    92,  /* IDispError::QueryErrorInfo */
    102,  /* IDispError::GetNext */
    108,  /* IDispError::GetHresult */
    114,  /* IDispError::GetSource */
    120,  /* IDispError::GetHelpInfo */
    130,  /* IDispError::GetDescription */
};

static const CINTERFACE_PROXY_VTABLE(9) _IDispErrorProxyVtbl =
{
    {
        &IID_IDispError,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IDispError_QueryErrorInfo_Proxy,
        IDispError_GetNext_Proxy,
        IDispError_GetHresult_Proxy,
        IDispError_GetSource_Proxy,
        IDispError_GetHelpInfo_Proxy,
        IDispError_GetDescription_Proxy,
    }
};

static const MIDL_SERVER_INFO IDispError_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IDispError_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IDispError_table[] =
{
    IDispError_QueryErrorInfo_Stub,
    IDispError_GetNext_Stub,
    IDispError_GetHresult_Stub,
    IDispError_GetSource_Stub,
    IDispError_GetHelpInfo_Stub,
    IDispError_GetDescription_Stub
};

static const CInterfaceStubVtbl _IDispErrorStubVtbl =
{
    {
        &IID_IDispError,
        &IDispError_ServerInfo,
        9,
        &IDispError_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IVariantChangeType interface
 */
static void __finally_IVariantChangeType_ChangeType_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IVariantChangeType_ChangeType_Proxy(
    IVariantChangeType* This,
    VARIANT *pvarDst,
    VARIANT *pvarSrc,
    LCID lcid,
    VARTYPE vtNew)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IVariantChangeType_ChangeType_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 14;
            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pvarDst,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1436]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pvarSrc,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1440]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pvarDst,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1436]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pvarSrc,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1440]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LCID *)__frame->_StubMsg.Buffer = lcid;
            __frame->_StubMsg.Buffer += sizeof(LCID);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(VARTYPE *)__frame->_StubMsg.Buffer = vtNew;
            __frame->_StubMsg.Buffer += sizeof(VARTYPE);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[136]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pvarDst,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1436],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IVariantChangeType_ChangeType_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1436], (void *)pvarDst );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IVariantChangeType_ChangeType_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IVariantChangeType * _This;
    HRESULT _RetVal;
    VARIANT * pvarDst;
    VARIANT * pvarSrc;
    LCID lcid;
    VARTYPE vtNew;
};

static void __finally_IVariantChangeType_ChangeType_Stub( struct __frame_IVariantChangeType_ChangeType_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pvarDst,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1436]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pvarSrc,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1440]);



}

void __RPC_STUB IVariantChangeType_ChangeType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IVariantChangeType_ChangeType_Stub __f, * const __frame = &__f;

    __frame->_This = (IVariantChangeType*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IVariantChangeType_ChangeType_Stub );
    __frame->pvarDst = 0;
    __frame->pvarSrc = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[136]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pvarDst,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1436],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pvarSrc,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1440],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LCID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->lcid = *(LCID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LCID);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(VARTYPE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->vtNew = *(VARTYPE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(VARTYPE);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ChangeType(__frame->_This, __frame->pvarDst, __frame->pvarSrc, __frame->lcid, __frame->vtNew);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pvarDst,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1436]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pvarDst,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1436]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IVariantChangeType_ChangeType_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IVariantChangeType_FormatStringOffsetTable[] =
{
    136,  /* IVariantChangeType::ChangeType */
};

static const CINTERFACE_PROXY_VTABLE(4) _IVariantChangeTypeProxyVtbl =
{
    {
        &IID_IVariantChangeType,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IVariantChangeType_ChangeType_Proxy,
    }
};

static const MIDL_SERVER_INFO IVariantChangeType_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IVariantChangeType_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IVariantChangeType_table[] =
{
    IVariantChangeType_ChangeType_Stub
};

static const CInterfaceStubVtbl _IVariantChangeTypeStubVtbl =
{
    {
        &IID_IVariantChangeType,
        &IVariantChangeType_ServerInfo,
        4,
        &IVariantChangeType_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IObjectIdentity interface
 */
static void __finally_IObjectIdentity_IsEqualObject_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IObjectIdentity_IsEqualObject_Proxy(
    IObjectIdentity* This,
    IUnknown *punk)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IObjectIdentity_IsEqualObject_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)punk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1444]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)punk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1444]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[150]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IObjectIdentity_IsEqualObject_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IObjectIdentity_IsEqualObject_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IObjectIdentity * _This;
    HRESULT _RetVal;
    IUnknown * punk;
};

static void __finally_IObjectIdentity_IsEqualObject_Stub( struct __frame_IObjectIdentity_IsEqualObject_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->punk,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1444]);

}

void __RPC_STUB IObjectIdentity_IsEqualObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IObjectIdentity_IsEqualObject_Stub __f, * const __frame = &__f;

    __frame->_This = (IObjectIdentity*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IObjectIdentity_IsEqualObject_Stub );
    __frame->punk = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[150]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->punk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1444],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->IsEqualObject(__frame->_This, __frame->punk);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IObjectIdentity_IsEqualObject_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IObjectIdentity_FormatStringOffsetTable[] =
{
    150,  /* IObjectIdentity::IsEqualObject */
};

static const CINTERFACE_PROXY_VTABLE(4) _IObjectIdentityProxyVtbl =
{
    {
        &IID_IObjectIdentity,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IObjectIdentity_IsEqualObject_Proxy,
    }
};

static const MIDL_SERVER_INFO IObjectIdentity_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IObjectIdentity_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IObjectIdentity_table[] =
{
    IObjectIdentity_IsEqualObject_Stub
};

static const CInterfaceStubVtbl _IObjectIdentityStubVtbl =
{
    {
        &IID_IObjectIdentity,
        &IObjectIdentity_ServerInfo,
        4,
        &IObjectIdentity_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ICanHandleException interface
 */
static void __finally_ICanHandleException_CanHandleException_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICanHandleException_CanHandleException_Proxy(
    ICanHandleException* This,
    EXCEPINFO *pExcepInfo,
    VARIANT *pvar)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICanHandleException_CanHandleException_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pExcepInfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pvar) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrComplexStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pExcepInfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1224]);

            NdrUserMarshalBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pvar,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1200]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrComplexStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pExcepInfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1224]);

            NdrUserMarshalMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pvar,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1200]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[156]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICanHandleException_CanHandleException_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICanHandleException_CanHandleException_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICanHandleException * _This;
    HRESULT _RetVal;
    EXCEPINFO * pExcepInfo;
    VARIANT * pvar;
};

static void __finally_ICanHandleException_CanHandleException_Stub( struct __frame_ICanHandleException_CanHandleException_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pExcepInfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1462]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pvar,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1466]);

}

void __RPC_STUB ICanHandleException_CanHandleException_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICanHandleException_CanHandleException_Stub __f, * const __frame = &__f;

    __frame->_This = (ICanHandleException*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICanHandleException_CanHandleException_Stub );
    __frame->pExcepInfo = 0;
    __frame->pvar = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[156]);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pExcepInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1224],
            0);

        NdrUserMarshalUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pvar,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1200],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CanHandleException(__frame->_This, __frame->pExcepInfo, __frame->pvar);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICanHandleException_CanHandleException_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ICanHandleException_FormatStringOffsetTable[] =
{
    156,  /* ICanHandleException::CanHandleException */
};

static const CINTERFACE_PROXY_VTABLE(4) _ICanHandleExceptionProxyVtbl =
{
    {
        &IID_ICanHandleException,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ICanHandleException_CanHandleException_Proxy,
    }
};

static const MIDL_SERVER_INFO ICanHandleException_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ICanHandleException_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ICanHandleException_table[] =
{
    ICanHandleException_CanHandleException_Stub
};

static const CInterfaceStubVtbl _ICanHandleExceptionStubVtbl =
{
    {
        &IID_ICanHandleException,
        &ICanHandleException_ServerInfo,
        4,
        &ICanHandleException_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IProvideRuntimeContext interface
 */
static void __finally_IProvideRuntimeContext_GetCurrentSourceContext_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IProvideRuntimeContext_GetCurrentSourceContext_Proxy(
    IProvideRuntimeContext* This,
    DWORD_PTR *pdwContext,
    VARIANT_BOOL *pfExecutingGlobalCode)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IProvideRuntimeContext_GetCurrentSourceContext_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pdwContext) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pfExecutingGlobalCode) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[166]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD_PTR) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwContext = *(DWORD_PTR *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD_PTR);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            if (__frame->_StubMsg.Buffer + sizeof(VARIANT_BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfExecutingGlobalCode = *(VARIANT_BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(VARIANT_BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IProvideRuntimeContext_GetCurrentSourceContext_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1470], (void *)pdwContext );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1474], (void *)pfExecutingGlobalCode );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IProvideRuntimeContext_GetCurrentSourceContext_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IProvideRuntimeContext * _This;
    HRESULT _RetVal;
    DWORD_PTR _W0;
    DWORD_PTR * pdwContext;
    VARIANT_BOOL _W1;
    VARIANT_BOOL * pfExecutingGlobalCode;
};

static void __finally_IProvideRuntimeContext_GetCurrentSourceContext_Stub( struct __frame_IProvideRuntimeContext_GetCurrentSourceContext_Stub *__frame )
{


}

void __RPC_STUB IProvideRuntimeContext_GetCurrentSourceContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IProvideRuntimeContext_GetCurrentSourceContext_Stub __f, * const __frame = &__f;

    __frame->_This = (IProvideRuntimeContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IProvideRuntimeContext_GetCurrentSourceContext_Stub );
    __frame->pdwContext = 0;
    __frame->pfExecutingGlobalCode = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[166]);


        __frame->pdwContext = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pfExecutingGlobalCode = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetCurrentSourceContext(__frame->_This, __frame->pdwContext, __frame->pfExecutingGlobalCode);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 22;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD_PTR *)__frame->_StubMsg.Buffer = *__frame->pdwContext;
        __frame->_StubMsg.Buffer += sizeof(DWORD_PTR);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        *(VARIANT_BOOL *)__frame->_StubMsg.Buffer = *__frame->pfExecutingGlobalCode;
        __frame->_StubMsg.Buffer += sizeof(VARIANT_BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IProvideRuntimeContext_GetCurrentSourceContext_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IProvideRuntimeContext_FormatStringOffsetTable[] =
{
    166,  /* IProvideRuntimeContext::GetCurrentSourceContext */
};

static const CINTERFACE_PROXY_VTABLE(4) _IProvideRuntimeContextProxyVtbl =
{
    {
        &IID_IProvideRuntimeContext,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IProvideRuntimeContext_GetCurrentSourceContext_Proxy,
    }
};

static const MIDL_SERVER_INFO IProvideRuntimeContext_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IProvideRuntimeContext_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IProvideRuntimeContext_table[] =
{
    IProvideRuntimeContext_GetCurrentSourceContext_Stub
};

static const CInterfaceStubVtbl _IProvideRuntimeContextStubVtbl =
{
    {
        &IID_IProvideRuntimeContext,
        &IProvideRuntimeContext_ServerInfo,
        4,
        &IProvideRuntimeContext_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

static const USER_MARSHAL_ROUTINE_QUADRUPLE UserMarshalRoutines[] =
{
    {
        (USER_MARSHAL_SIZING_ROUTINE)BSTR_UserSize,
        (USER_MARSHAL_MARSHALLING_ROUTINE)BSTR_UserMarshal,
        (USER_MARSHAL_UNMARSHALLING_ROUTINE)BSTR_UserUnmarshal,
        (USER_MARSHAL_FREEING_ROUTINE)BSTR_UserFree
    },
    {
        (USER_MARSHAL_SIZING_ROUTINE)VARIANT_UserSize,
        (USER_MARSHAL_MARSHALLING_ROUTINE)VARIANT_UserMarshal,
        (USER_MARSHAL_UNMARSHALLING_ROUTINE)VARIANT_UserUnmarshal,
        (USER_MARSHAL_FREEING_ROUTINE)VARIANT_UserFree
    }
};

static const MIDL_STUB_DESC Object_StubDesc =
{
    0,
    NdrOleAllocate,
    NdrOleFree,
    {0}, 0, 0, 0, 0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    UserMarshalRoutines,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};

#if !defined(__RPC_WIN32__)
#error Currently only Wine and WIN32 are supported.
#endif

static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter bstrName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1a),	/* type offset = 26 */
/* 4 (parameter grfdex) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 6 (parameter pid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x24),	/* type offset = 36 */
/* 10 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 12 (parameter id) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 14 (parameter lcid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 16 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 18 (parameter pdp) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x4ac),	/* type offset = 1196 */
/* 22 (parameter pvarRes) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4ba),	/* type offset = 1210 */
/* 26 (parameter pei) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4e4),	/* type offset = 1252 */
/* 30 (parameter pspCaller) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x4e8),	/* type offset = 1256 */
/* 34 (parameter cvarRefArg) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 36 (parameter rgiRefArg) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x4fa),	/* type offset = 1274 */
/* 40 (parameter rgvarRefArg) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x508),	/* type offset = 1288 */
/* 44 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 46 (parameter bstrName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x51e),	/* type offset = 1310 */
/* 50 (parameter grfdex) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 52 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 54 (parameter id) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 56 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 58 (parameter id) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 60 (parameter grfdexFetch) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 62 (parameter pgrfdex) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x528),	/* type offset = 1320 */
/* 66 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 68 (parameter id) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 70 (parameter pbstrName) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x52c),	/* type offset = 1324 */
/* 74 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 76 (parameter grfdex) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 78 (parameter id) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 80 (parameter pid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x530),	/* type offset = 1328 */
/* 84 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 86 (parameter ppunk) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x546),	/* type offset = 1350 */
/* 90 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 92 (parameter guidErrorType) */
        0x4d,    /* FC_IN_PARAM */
        0x04,
        NdrFcShort(0x550),	/* type offset = 1360 */
/* 96 (parameter ppde) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x56e),	/* type offset = 1390 */
/* 100 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 102 (parameter ppde) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x584),	/* type offset = 1412 */
/* 106 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 108 (parameter phr) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x588),	/* type offset = 1416 */
/* 112 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 114 (parameter pbstrSource) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x58c),	/* type offset = 1420 */
/* 118 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 120 (parameter pbstrFileName) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x590),	/* type offset = 1424 */
/* 124 (parameter pdwContext) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x594),	/* type offset = 1428 */
/* 128 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 130 (parameter pbstrDescription) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x598),	/* type offset = 1432 */
/* 134 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 136 (parameter pvarDst) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x59c),	/* type offset = 1436 */
/* 140 (parameter pvarSrc) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5a0),	/* type offset = 1440 */
/* 144 (parameter lcid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 146 (parameter vtNew) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 148 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 150 (parameter punk) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5a4),	/* type offset = 1444 */
/* 154 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 156 (parameter pExcepInfo) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5b6),	/* type offset = 1462 */
/* 160 (parameter pvar) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5ba),	/* type offset = 1466 */
/* 164 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 166 (parameter pdwContext) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5be),	/* type offset = 1470 */
/* 170 (parameter pfExecutingGlobalCode) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5c2),	/* type offset = 1474 */
/* 174 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (unsigned short[]) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x9,	/* Corr desc: field clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        0x06,	/* FC_SHORT */
        0x5b,	/* FC_END */
/* 12 (FLAGGED_WORD_BLOB) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0xfff2),	/* Offset= -14 (2) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 22 (wireBSTR) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (12) */
/* 26 (BSTR) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x0),	/* Function offset= 0 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfff4),	/* Offset= -12 (22) */
/* 36 (DISPID *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 40 (wireBSTR) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe2),	/* Offset= -30 (12) */
/* 44 (CY) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 50 (DECIMAL) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x10),	/* 16 */
        0x06,	/* FC_SHORT */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x08,	/* FC_LONG */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 60 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 78 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 96 (wireBSTR *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff94),	/* Offset= -108 (12) */
        0x5b,	/* FC_END */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff8f),	/* Offset= -113 (12) */
        0x5b,	/* FC_END */
/* 128 (SAFEARR_BSTR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (140) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 140 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffd2),	/* Offset= -46 (96) */
/* 144 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 162 (IUnknown **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (144) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 180 (SAFEARR_UNKNOWN) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (192) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 192 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (162) */
/* 196 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 214 (IDispatch **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (196) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 232 (SAFEARR_DISPATCH) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (244) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 244 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (214) */
/* 248 (wireVARIANT *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0x33e),	/* Offset= 830 (1102) */
        0x5b,	/* FC_END */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0x339),	/* Offset= 825 (1102) */
        0x5b,	/* FC_END */
/* 280 (SAFEARR_VARIANT) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (292) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 292 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffd2),	/* Offset= -46 (248) */
/* 296 (IRecordInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000002f),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 314 (byte *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 324 (struct _wireBRECORD) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (340) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffd8),	/* Offset= -40 (296) */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 340 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (314) */
/* 344 (wireBRECORD *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd4),	/* Offset= -44 (324) */
        0x5b,	/* FC_END */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffcf),	/* Offset= -49 (324) */
        0x5b,	/* FC_END */
/* 376 (SAFEARR_BRECORD) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (388) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 388 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffd2),	/* Offset= -46 (344) */
/* 392 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 410 (IUnknown **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (392) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 428 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 434 (IID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (428) */
        0x5b,	/* FC_END */
/* 446 (SAFEARR_HAVEIID) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (462) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe8),	/* Offset= -24 (434) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 462 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffca),	/* Offset= -54 (410) */
/* 466 (byte *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 476 (BYTE_SIZEDARR) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (466) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 496 (unsigned short *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x06,	/* FC_SHORT */
        0x5b,	/* FC_END */
/* 506 (WORD_SIZEDARR) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (496) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 526 (ULONG *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 536 (DWORD_SIZEDARR) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (526) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 556 (hyper *) */
        0x1b,	/* FC_CARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 566 (HYPER_SIZEDARR) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (556) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 586 (SAFEARRAYUNION) */
        0x2a,	/* FC_ENCAPSULATED_UNION */
        0x49,	/* Switch type= FC_ULONG */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0xa),	/* 10 */
        NdrFcLong(0x8),	/* 8 */
        NdrFcShort(0xfe2c),	/* Offset= -468 (128) */
        NdrFcLong(0xd),	/* 13 */
        NdrFcShort(0xfe5a),	/* Offset= -422 (180) */
        NdrFcLong(0x9),	/* 9 */
        NdrFcShort(0xfe88),	/* Offset= -376 (232) */
        NdrFcLong(0xc),	/* 12 */
        NdrFcShort(0xfeb2),	/* Offset= -334 (280) */
        NdrFcLong(0x24),	/* 36 */
        NdrFcShort(0xff0c),	/* Offset= -244 (376) */
        NdrFcLong(0x800d),	/* 32781 */
        NdrFcShort(0xff4c),	/* Offset= -180 (446) */
        NdrFcLong(0x10),	/* 16 */
        NdrFcShort(0xff64),	/* Offset= -156 (476) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xff7c),	/* Offset= -132 (506) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xff94),	/* Offset= -108 (536) */
        NdrFcLong(0x14),	/* 20 */
        NdrFcShort(0xffac),	/* Offset= -84 (566) */
        NdrFcShort(0xffff),
/* 654 (SAFEARRAYBOUND) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 662 (SAFEARRAYBOUND[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x7,	/* Corr desc: field cDims, FC_USHORT */
        0x0,	/* no operators */
        NdrFcShort(0xffd8),	/* offset = -40 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffee),	/* Offset= -18 (654) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 676 (struct _wireSAFEARRAY) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x28),	/* 40 */
        NdrFcShort(0xffee),	/* Offset= -18 (662) */
        NdrFcShort(0x0),	/* Offset= 0 (682) */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff98),	/* Offset= -104 (586) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 694 (wireSAFEARRAY) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (676) */
/* 698 (signed char *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
/* 702 (USHORT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x07,	/* FC_USHORT */
        0x5c,	/* FC_PAD */
/* 706 (ULONG *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 710 (INT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 714 (UINT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 718 (BYTE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
/* 722 (SHORT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
/* 726 (LONG *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 730 (FLOAT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0a,	/* FC_FLOAT */
        0x5c,	/* FC_PAD */
/* 734 (DOUBLE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0c,	/* FC_DOUBLE */
        0x5c,	/* FC_PAD */
/* 738 (VARIANT_BOOL *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
/* 742 (SCODE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 746 (DATE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0c,	/* FC_DOUBLE */
        0x5c,	/* FC_PAD */
/* 750 (wireBSTR) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd1c),	/* Offset= -740 (12) */
/* 754 (wireBSTR *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (750) */
/* 758 (wireVARIANT) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0x156),	/* Offset= 342 (1102) */
/* 762 (wireVARIANT *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (758) */
/* 766 (CY *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd2c),	/* Offset= -724 (44) */
/* 770 (DECIMAL *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd2e),	/* Offset= -722 (50) */
/* 774 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 792 (IUnknown **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (774) */
/* 796 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 814 (IDispatch **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (796) */
/* 818 (wireSAFEARRAY) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff70),	/* Offset= -144 (676) */
/* 822 (wireSAFEARRAY *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (818) */
/* 826 (wireBRECORD) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfe08),	/* Offset= -504 (324) */
/* 830 (union ) */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x2b),	/* 43 */
        NdrFcLong(0x0),	/* 0 */
        NdrFcShort(0x0),	/* No type */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0x0),	/* No type */
        NdrFcLong(0x10),	/* 16 */
        NdrFcShort(0x8002),	/* Simple arm type: FC_CHAR */
        NdrFcLong(0x12),	/* 18 */
        NdrFcShort(0x8007),	/* Simple arm type: FC_USHORT */
        NdrFcLong(0x13),	/* 19 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x16),	/* 22 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x17),	/* 23 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x11),	/* 17 */
        NdrFcShort(0x8002),	/* Simple arm type: FC_CHAR */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0x8006),	/* Simple arm type: FC_SHORT */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0x800a),	/* Simple arm type: FC_FLOAT */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0x800c),	/* Simple arm type: FC_DOUBLE */
        NdrFcLong(0xb),	/* 11 */
        NdrFcShort(0x8006),	/* Simple arm type: FC_SHORT */
        NdrFcLong(0xa),	/* 10 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x7),	/* 7 */
        NdrFcShort(0x800c),	/* Simple arm type: FC_DOUBLE */
        NdrFcLong(0x8),	/* 8 */
        NdrFcShort(0xff4e),	/* Offset= -178 (750) */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0xfc86),	/* Offset= -890 (44) */
        NdrFcLong(0xe),	/* 14 */
        NdrFcShort(0xfc86),	/* Offset= -890 (50) */
        NdrFcLong(0xd),	/* 13 */
        NdrFcShort(0xfc8a),	/* Offset= -886 (60) */
        NdrFcLong(0x9),	/* 9 */
        NdrFcShort(0xfc96),	/* Offset= -874 (78) */
        NdrFcLong(0x2000),	/* 8192 */
        NdrFcShort(0xff74),	/* Offset= -140 (818) */
        NdrFcLong(0x4010),	/* 16400 */
        NdrFcShort(0xfef6),	/* Offset= -266 (698) */
        NdrFcLong(0x4012),	/* 16402 */
        NdrFcShort(0xfef4),	/* Offset= -268 (702) */
        NdrFcLong(0x4013),	/* 16403 */
        NdrFcShort(0xfef2),	/* Offset= -270 (706) */
        NdrFcLong(0x4016),	/* 16406 */
        NdrFcShort(0xfef0),	/* Offset= -272 (710) */
        NdrFcLong(0x4017),	/* 16407 */
        NdrFcShort(0xfeee),	/* Offset= -274 (714) */
        NdrFcLong(0x4011),	/* 16401 */
        NdrFcShort(0xfeec),	/* Offset= -276 (718) */
        NdrFcLong(0x4002),	/* 16386 */
        NdrFcShort(0xfeea),	/* Offset= -278 (722) */
        NdrFcLong(0x4003),	/* 16387 */
        NdrFcShort(0xfee8),	/* Offset= -280 (726) */
        NdrFcLong(0x4004),	/* 16388 */
        NdrFcShort(0xfee6),	/* Offset= -282 (730) */
        NdrFcLong(0x4005),	/* 16389 */
        NdrFcShort(0xfee4),	/* Offset= -284 (734) */
        NdrFcLong(0x400b),	/* 16395 */
        NdrFcShort(0xfee2),	/* Offset= -286 (738) */
        NdrFcLong(0x400a),	/* 16394 */
        NdrFcShort(0xfee0),	/* Offset= -288 (742) */
        NdrFcLong(0x4007),	/* 16391 */
        NdrFcShort(0xfede),	/* Offset= -290 (746) */
        NdrFcLong(0x4008),	/* 16392 */
        NdrFcShort(0xfee0),	/* Offset= -288 (754) */
        NdrFcLong(0x400c),	/* 16396 */
        NdrFcShort(0xfee2),	/* Offset= -286 (762) */
        NdrFcLong(0x4006),	/* 16390 */
        NdrFcShort(0xfee0),	/* Offset= -288 (766) */
        NdrFcLong(0x400e),	/* 16398 */
        NdrFcShort(0xfede),	/* Offset= -290 (770) */
        NdrFcLong(0x400d),	/* 16397 */
        NdrFcShort(0xfeee),	/* Offset= -274 (792) */
        NdrFcLong(0x4009),	/* 16393 */
        NdrFcShort(0xfefe),	/* Offset= -258 (814) */
        NdrFcLong(0x6000),	/* 24576 */
        NdrFcShort(0xff00),	/* Offset= -256 (822) */
        NdrFcLong(0x24),	/* 36 */
        NdrFcShort(0xfefe),	/* Offset= -258 (826) */
        NdrFcLong(0x4024),	/* 16420 */
        NdrFcShort(0xfef8),	/* Offset= -264 (826) */
        NdrFcShort(0xffff),
/* 1094 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x7,	/* Corr desc: field vt, FC_USHORT */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcShort(0xfef2),	/* Offset= -270 (830) */
/* 1102 (struct _wireVARIANT) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1108) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe8),	/* Offset= -24 (1094) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1122 (wireVARIANT) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffea),	/* Offset= -22 (1102) */
/* 1126 (VARIANTARG) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x1),	/* Function offset= 1 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfff4),	/* Offset= -12 (1122) */
/* 1136 (VARIANTARG *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cArgs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe8),	/* Offset= -24 (1126) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1154 (DISPID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cNamedArgs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1164 (DISPPARAMS) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd6),	/* Offset= -42 (1136) */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (1154) */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1196 (DISPPARAMS *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffde),	/* Offset= -34 (1164) */
/* 1200 (VARIANT) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x1),	/* Function offset= 1 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xffaa),	/* Offset= -86 (1122) */
/* 1210 (VARIANT *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfff4),	/* Offset= -12 (1200) */
/* 1214 (BSTR) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x0),	/* Function offset= 0 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfe28),	/* Offset= -472 (750) */
/* 1224 (EXCEPINFO) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1230) */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffea),	/* Offset= -22 (1214) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe6),	/* Offset= -26 (1214) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe2),	/* Offset= -30 (1214) */
        0x08,	/* FC_LONG */
        0xb8,	/* FC_INT3264 */
        0xb8,	/* FC_INT3264 */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1252 (EXCEPINFO *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffe2),	/* Offset= -30 (1224) */
/* 1256 (IServiceProvider *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x6d5140c1),
        NdrFcShort(0x7436),
        NdrFcShort(0x11ce),
        0x80,
        0x34,
        0x00,
        0xaa,
        0x00,
        0x60,
        0x09,
        0xfa,

/* 1274 (UINT *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter cvarRefArg, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1284 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1274) */
/* 1288 (VARIANT *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter cvarRefArg, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff9a),	/* Offset= -102 (1200) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1306 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (1288) */
/* 1310 (BSTR) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x0),	/* Function offset= 0 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfdc8),	/* Offset= -568 (750) */
/* 1320 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1324 (BSTR *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xff90),	/* Offset= -112 (1214) */
/* 1328 (DISPID *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1332 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1350 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1332) */
/* 1354 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1360 (GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1354) */
        0x5b,	/* FC_END */
/* 1372 (IDispError *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xa6ef9861),
        NdrFcShort(0xc720),
        NdrFcShort(0x11d0),
        0x93,
        0x37,
        0x00,
        0xa0,
        0xc9,
        0x0d,
        0xca,
        0xa9,

/* 1390 (IDispError **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1372) */
/* 1394 (IDispError *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xa6ef9861),
        NdrFcShort(0xc720),
        NdrFcShort(0x11d0),
        0x93,
        0x37,
        0x00,
        0xa0,
        0xc9,
        0x0d,
        0xca,
        0xa9,

/* 1412 (IDispError **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1394) */
/* 1416 (HRESULT *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1420 (BSTR *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xff30),	/* Offset= -208 (1214) */
/* 1424 (BSTR *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xff2c),	/* Offset= -212 (1214) */
/* 1428 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1432 (BSTR *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xff24),	/* Offset= -220 (1214) */
/* 1436 (VARIANT *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff12),	/* Offset= -238 (1200) */
/* 1440 (VARIANT *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff0e),	/* Offset= -242 (1200) */
/* 1444 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1462 (EXCEPINFO *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xff10),	/* Offset= -240 (1224) */
/* 1466 (VARIANT *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfef4),	/* Offset= -268 (1200) */
/* 1470 (DWORD_PTR *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 1474 (VARIANT_BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
        0x0
    }
};

static const CInterfaceProxyVtbl* const _disp_ex_ProxyVtblList[] =
{
    (const CInterfaceProxyVtbl*)&_IProvideRuntimeContextProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ICanHandleExceptionProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IDispatchExProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IDispErrorProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IVariantChangeTypeProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IObjectIdentityProxyVtbl,
    0
};

static const CInterfaceStubVtbl* const _disp_ex_StubVtblList[] =
{
    &_IProvideRuntimeContextStubVtbl,
    &_ICanHandleExceptionStubVtbl,
    &_IDispatchExStubVtbl,
    &_IDispErrorStubVtbl,
    &_IVariantChangeTypeStubVtbl,
    &_IObjectIdentityStubVtbl,
    0
};

static PCInterfaceName const _disp_ex_InterfaceNamesList[] =
{
    "IProvideRuntimeContext",
    "ICanHandleException",
    "IDispatchEx",
    "IDispError",
    "IVariantChangeType",
    "IObjectIdentity",
    0
};

static const IID * _disp_ex_BaseIIDList[] =
{
    0,
    0,
    &IID_IDispatch,  /* IDispatchEx */
    0,
    0,
    0,
    0
};

static int __stdcall _disp_ex_IID_Lookup(const IID* pIID, int* pIndex)
{
    int low = 0, high = 5;

    while (low <= high)
    {
        int pos = (low + high) / 2;
        int res = IID_GENERIC_CHECK_IID(_disp_ex, pIID, pos);
        if (!res) { *pIndex = pos; return 1; }
        if (res > 0) low = pos + 1;
        else high = pos - 1;
    }
    return 0;
}

const ExtendedProxyFileInfo disp_ex_ProxyFileInfo DECLSPEC_HIDDEN =
{
    (const PCInterfaceProxyVtblList*)_disp_ex_ProxyVtblList,
    (const PCInterfaceStubVtblList*)_disp_ex_StubVtblList,
    _disp_ex_InterfaceNamesList,
    _disp_ex_BaseIIDList,
    _disp_ex_IID_Lookup,
    6,
    1,
    0,
    0,
    0,
    0
};

#else /* _WIN64 */

#ifndef __REDQ_RPCPROXY_H_VERSION__
#define __REQUIRED_RPCPROXY_H_VERSION__ 440
#endif

#include "rpcproxy.h"
#ifndef __RPCPROXY_H_VERSION__
#error This code needs a newer version of rpcproxy.h
#endif /* __RPCPROXY_H_VERSION__ */

#include "disp_ex.h"

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

struct __proxy_frame
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    void             *This;
};

static int __proxy_filter( struct __proxy_frame *__frame )
{
    return (__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE);
}

#define TYPE_FORMAT_STRING_SIZE 1413
#define PROC_FORMAT_STRING_SIZE 177

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

static const MIDL_STUB_DESC Object_StubDesc;

/*****************************************************************************
 * IDispatchEx interface
 */
static void __finally_IDispatchEx_GetDispID_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispatchEx_GetDispID_Proxy(
    IDispatchEx* This,
    BSTR bstrName,
    DWORD grfdex,
    DISPID *pid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispatchEx_GetDispID_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrUserMarshalBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)&bstrName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[26]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrUserMarshalMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&bstrName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[26]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = grfdex;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[0]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DISPID) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pid = *(DISPID *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DISPID);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispatchEx_GetDispID_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[36], (void *)pid );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispatchEx_GetDispID_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispatchEx * _This;
    HRESULT _RetVal;
    BSTR bstrName;
    void *_p_bstrName;
    DWORD grfdex;
    DISPID _W0;
    DISPID * pid;
};

static void __finally_IDispatchEx_GetDispID_Stub( struct __frame_IDispatchEx_GetDispID_Stub *__frame )
{
    NdrUserMarshalFree(
        &__frame->_StubMsg,
        (unsigned char *)&__frame->bstrName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[26]);



}

void __RPC_STUB IDispatchEx_GetDispID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispatchEx_GetDispID_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispatchEx*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispatchEx_GetDispID_Stub );
    MIDL_memset(&__frame->bstrName, 0, sizeof(__frame->bstrName));
    __frame->_p_bstrName = &__frame->bstrName;
    __frame->pid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[0]);

        NdrUserMarshalUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_bstrName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[26],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->grfdex = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        __frame->pid = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetDispID(__frame->_This, __frame->bstrName, __frame->grfdex, __frame->pid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DISPID *)__frame->_StubMsg.Buffer = *__frame->pid;
        __frame->_StubMsg.Buffer += sizeof(DISPID);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispatchEx_GetDispID_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispatchEx_RemoteInvokeEx_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispatchEx_RemoteInvokeEx_Proxy(
    IDispatchEx* This,
    DISPID id,
    LCID lcid,
    DWORD dwFlags,
    DISPPARAMS *pdp,
    VARIANT *pvarRes,
    EXCEPINFO *pei,
    IServiceProvider *pspCaller,
    UINT cvarRefArg,
    UINT *rgiRefArg,
    VARIANT *rgvarRefArg)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispatchEx_RemoteInvokeEx_Proxy );
    __frame->This = This;
    if (pvarRes) MIDL_memset( pvarRes, 0, sizeof( *pvarRes ));
    if (pei) MIDL_memset( pei, 0, sizeof( *pei ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!pdp) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pvarRes) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pei) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!rgiRefArg) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!rgvarRefArg) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 32;
            NdrComplexStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pdp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1106]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pspCaller,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1190]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cvarRefArg;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgiRefArg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1208]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cvarRefArg;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgvarRefArg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1222]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DISPID *)__frame->_StubMsg.Buffer = id;
            __frame->_StubMsg.Buffer += sizeof(DISPID);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LCID *)__frame->_StubMsg.Buffer = lcid;
            __frame->_StubMsg.Buffer += sizeof(LCID);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrComplexStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pdp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1106]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pspCaller,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1190]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(UINT *)__frame->_StubMsg.Buffer = cvarRefArg;
            __frame->_StubMsg.Buffer += sizeof(UINT);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cvarRefArg;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgiRefArg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1208]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cvarRefArg;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgvarRefArg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1222]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[12]);

            NdrUserMarshalUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pvarRes,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1132],
                0);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pei,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1156],
                0);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgvarRefArg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1222],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispatchEx_RemoteInvokeEx_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1142], (void *)pvarRes );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1186], (void *)pei );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)cvarRefArg;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1240], (void *)rgvarRefArg );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispatchEx_RemoteInvokeEx_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispatchEx * _This;
    HRESULT _RetVal;
    DISPID id;
    LCID lcid;
    DWORD dwFlags;
    DISPPARAMS * pdp;
    VARIANT _W0;
    VARIANT * pvarRes;
    EXCEPINFO _W1;
    EXCEPINFO * pei;
    IServiceProvider * pspCaller;
    UINT cvarRefArg;
    UINT * rgiRefArg;
    VARIANT * rgvarRefArg;
};

static void __finally_IDispatchEx_RemoteInvokeEx_Stub( struct __frame_IDispatchEx_RemoteInvokeEx_Stub *__frame )
{



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pdp,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1128]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pvarRes,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1142]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pei,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1186]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pspCaller,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1190]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cvarRefArg;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgiRefArg,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1208]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cvarRefArg;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgvarRefArg,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1240]);

}

void __RPC_STUB IDispatchEx_RemoteInvokeEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispatchEx_RemoteInvokeEx_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispatchEx*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispatchEx_RemoteInvokeEx_Stub );
    __frame->pdp = 0;
    __frame->pvarRes = 0;
    __frame->pei = 0;
    __frame->pspCaller = 0;
    __frame->rgiRefArg = 0;
    __frame->rgvarRefArg = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[12]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DISPID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->id = *(DISPID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DISPID);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LCID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->lcid = *(LCID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LCID);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pdp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1106],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pspCaller,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1190],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cvarRefArg = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgiRefArg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1208],
            0);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgvarRefArg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1222],
            0);


        __frame->pvarRes = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));
        __frame->pei = &__frame->_W1;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDispatchEx_InvokeEx_Stub(__frame->_This, __frame->id, __frame->lcid, __frame->dwFlags, __frame->pdp, __frame->pvarRes, __frame->pei, __frame->pspCaller, __frame->cvarRefArg, __frame->rgiRefArg, __frame->rgvarRefArg);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrUserMarshalBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pvarRes,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1132]);

        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pei,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1156]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cvarRefArg;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgvarRefArg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1222]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrUserMarshalMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pvarRes,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1132]);

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pei,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1156]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cvarRefArg;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgvarRefArg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1222]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispatchEx_RemoteInvokeEx_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispatchEx_DeleteMemberByName_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispatchEx_DeleteMemberByName_Proxy(
    IDispatchEx* This,
    BSTR bstrName,
    DWORD grfdex)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispatchEx_DeleteMemberByName_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrUserMarshalBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)&bstrName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1244]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrUserMarshalMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&bstrName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1244]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = grfdex;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[46]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispatchEx_DeleteMemberByName_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispatchEx_DeleteMemberByName_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispatchEx * _This;
    HRESULT _RetVal;
    BSTR bstrName;
    void *_p_bstrName;
    DWORD grfdex;
};

static void __finally_IDispatchEx_DeleteMemberByName_Stub( struct __frame_IDispatchEx_DeleteMemberByName_Stub *__frame )
{
    NdrUserMarshalFree(
        &__frame->_StubMsg,
        (unsigned char *)&__frame->bstrName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1244]);


}

void __RPC_STUB IDispatchEx_DeleteMemberByName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispatchEx_DeleteMemberByName_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispatchEx*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispatchEx_DeleteMemberByName_Stub );
    MIDL_memset(&__frame->bstrName, 0, sizeof(__frame->bstrName));
    __frame->_p_bstrName = &__frame->bstrName;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[46]);

        NdrUserMarshalUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_bstrName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1244],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->grfdex = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->DeleteMemberByName(__frame->_This, __frame->bstrName, __frame->grfdex);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispatchEx_DeleteMemberByName_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispatchEx_DeleteMemberByDispID_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispatchEx_DeleteMemberByDispID_Proxy(
    IDispatchEx* This,
    DISPID id)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispatchEx_DeleteMemberByDispID_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DISPID *)__frame->_StubMsg.Buffer = id;
            __frame->_StubMsg.Buffer += sizeof(DISPID);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[54]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispatchEx_DeleteMemberByDispID_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispatchEx_DeleteMemberByDispID_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispatchEx * _This;
    HRESULT _RetVal;
    DISPID id;
};

static void __finally_IDispatchEx_DeleteMemberByDispID_Stub( struct __frame_IDispatchEx_DeleteMemberByDispID_Stub *__frame )
{

}

void __RPC_STUB IDispatchEx_DeleteMemberByDispID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispatchEx_DeleteMemberByDispID_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispatchEx*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispatchEx_DeleteMemberByDispID_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[54]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DISPID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->id = *(DISPID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DISPID);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->DeleteMemberByDispID(__frame->_This, __frame->id);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispatchEx_DeleteMemberByDispID_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispatchEx_GetMemberProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispatchEx_GetMemberProperties_Proxy(
    IDispatchEx* This,
    DISPID id,
    DWORD grfdexFetch,
    DWORD *pgrfdex)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispatchEx_GetMemberProperties_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 11);
        if (!pgrfdex) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DISPID *)__frame->_StubMsg.Buffer = id;
            __frame->_StubMsg.Buffer += sizeof(DISPID);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = grfdexFetch;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[58]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pgrfdex = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispatchEx_GetMemberProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1254], (void *)pgrfdex );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispatchEx_GetMemberProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispatchEx * _This;
    HRESULT _RetVal;
    DISPID id;
    DWORD grfdexFetch;
    DWORD _W0;
    DWORD * pgrfdex;
};

static void __finally_IDispatchEx_GetMemberProperties_Stub( struct __frame_IDispatchEx_GetMemberProperties_Stub *__frame )
{



}

void __RPC_STUB IDispatchEx_GetMemberProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispatchEx_GetMemberProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispatchEx*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispatchEx_GetMemberProperties_Stub );
    __frame->pgrfdex = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[58]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DISPID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->id = *(DISPID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DISPID);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->grfdexFetch = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        __frame->pgrfdex = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetMemberProperties(__frame->_This, __frame->id, __frame->grfdexFetch, __frame->pgrfdex);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pgrfdex;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispatchEx_GetMemberProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispatchEx_GetMemberName_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispatchEx_GetMemberName_Proxy(
    IDispatchEx* This,
    DISPID id,
    BSTR *pbstrName)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispatchEx_GetMemberName_Proxy );
    __frame->This = This;
    if (pbstrName) MIDL_memset( pbstrName, 0, sizeof( *pbstrName ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 12);
        if (!pbstrName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DISPID *)__frame->_StubMsg.Buffer = id;
            __frame->_StubMsg.Buffer += sizeof(DISPID);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[68]);

            NdrUserMarshalUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pbstrName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1146],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispatchEx_GetMemberName_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1258], (void *)pbstrName );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispatchEx_GetMemberName_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispatchEx * _This;
    HRESULT _RetVal;
    DISPID id;
    BSTR _W0;
    BSTR * pbstrName;
};

static void __finally_IDispatchEx_GetMemberName_Stub( struct __frame_IDispatchEx_GetMemberName_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pbstrName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1258]);

}

void __RPC_STUB IDispatchEx_GetMemberName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispatchEx_GetMemberName_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispatchEx*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispatchEx_GetMemberName_Stub );
    __frame->pbstrName = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[68]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DISPID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->id = *(DISPID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DISPID);


        __frame->pbstrName = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetMemberName(__frame->_This, __frame->id, __frame->pbstrName);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrUserMarshalBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pbstrName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1146]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrUserMarshalMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pbstrName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1146]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispatchEx_GetMemberName_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispatchEx_GetNextDispID_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispatchEx_GetNextDispID_Proxy(
    IDispatchEx* This,
    DWORD grfdex,
    DISPID id,
    DISPID *pid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispatchEx_GetNextDispID_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 13);
        if (!pid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = grfdex;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DISPID *)__frame->_StubMsg.Buffer = id;
            __frame->_StubMsg.Buffer += sizeof(DISPID);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[76]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DISPID) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pid = *(DISPID *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DISPID);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispatchEx_GetNextDispID_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1262], (void *)pid );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispatchEx_GetNextDispID_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispatchEx * _This;
    HRESULT _RetVal;
    DWORD grfdex;
    DISPID id;
    DISPID _W0;
    DISPID * pid;
};

static void __finally_IDispatchEx_GetNextDispID_Stub( struct __frame_IDispatchEx_GetNextDispID_Stub *__frame )
{



}

void __RPC_STUB IDispatchEx_GetNextDispID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispatchEx_GetNextDispID_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispatchEx*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispatchEx_GetNextDispID_Stub );
    __frame->pid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[76]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->grfdex = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DISPID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->id = *(DISPID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DISPID);


        __frame->pid = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetNextDispID(__frame->_This, __frame->grfdex, __frame->id, __frame->pid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DISPID *)__frame->_StubMsg.Buffer = *__frame->pid;
        __frame->_StubMsg.Buffer += sizeof(DISPID);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispatchEx_GetNextDispID_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispatchEx_GetNameSpaceParent_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispatchEx_GetNameSpaceParent_Proxy(
    IDispatchEx* This,
    IUnknown **ppunk)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispatchEx_GetNameSpaceParent_Proxy );
    __frame->This = This;
    if (ppunk) MIDL_memset( ppunk, 0, sizeof( *ppunk ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 14);
        if (!ppunk) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[86]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppunk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1284],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispatchEx_GetNameSpaceParent_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1284], (void *)ppunk );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispatchEx_GetNameSpaceParent_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispatchEx * _This;
    HRESULT _RetVal;
    IUnknown *_W0;
    IUnknown ** ppunk;
};

static void __finally_IDispatchEx_GetNameSpaceParent_Stub( struct __frame_IDispatchEx_GetNameSpaceParent_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppunk,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1284]);

}

void __RPC_STUB IDispatchEx_GetNameSpaceParent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispatchEx_GetNameSpaceParent_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispatchEx*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispatchEx_GetNameSpaceParent_Stub );
    __frame->ppunk = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[86]);


        __frame->ppunk = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetNameSpaceParent(__frame->_This, __frame->ppunk);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppunk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1284]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppunk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1284]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispatchEx_GetNameSpaceParent_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IDispatchEx_FormatStringOffsetTable[] =
{
    (unsigned short)-1,  /* IDispatch::GetTypeInfoCount */
    (unsigned short)-1,  /* IDispatch::GetTypeInfo */
    (unsigned short)-1,  /* IDispatch::GetIDsOfNames */
    (unsigned short)-1,  /* IDispatch::RemoteInvoke */
    0,  /* IDispatchEx::GetDispID */
    12,  /* IDispatchEx::RemoteInvokeEx */
    46,  /* IDispatchEx::DeleteMemberByName */
    54,  /* IDispatchEx::DeleteMemberByDispID */
    58,  /* IDispatchEx::GetMemberProperties */
    68,  /* IDispatchEx::GetMemberName */
    76,  /* IDispatchEx::GetNextDispID */
    86,  /* IDispatchEx::GetNameSpaceParent */
};

static CINTERFACE_PROXY_VTABLE(15) _IDispatchExProxyVtbl =
{
    {
        &IID_IDispatchEx,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        0,  /* IDispatch::GetTypeInfoCount */
        0,  /* IDispatch::GetTypeInfo */
        0,  /* IDispatch::GetIDsOfNames */
        0,  /* IDispatch::Invoke */
        IDispatchEx_GetDispID_Proxy,
        IDispatchEx_InvokeEx_Proxy,
        IDispatchEx_DeleteMemberByName_Proxy,
        IDispatchEx_DeleteMemberByDispID_Proxy,
        IDispatchEx_GetMemberProperties_Proxy,
        IDispatchEx_GetMemberName_Proxy,
        IDispatchEx_GetNextDispID_Proxy,
        IDispatchEx_GetNameSpaceParent_Proxy,
    }
};

static const MIDL_SERVER_INFO IDispatchEx_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IDispatchEx_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IDispatchEx_table[] =
{
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    IDispatchEx_GetDispID_Stub,
    IDispatchEx_RemoteInvokeEx_Stub,
    IDispatchEx_DeleteMemberByName_Stub,
    IDispatchEx_DeleteMemberByDispID_Stub,
    IDispatchEx_GetMemberProperties_Stub,
    IDispatchEx_GetMemberName_Stub,
    IDispatchEx_GetNextDispID_Stub,
    IDispatchEx_GetNameSpaceParent_Stub
};

static CInterfaceStubVtbl _IDispatchExStubVtbl =
{
    {
        &IID_IDispatchEx,
        &IDispatchEx_ServerInfo,
        15,
        &IDispatchEx_table[-3]
    },
    {
        CStdStubBuffer_DELEGATING_METHODS
    }
};

/*****************************************************************************
 * IDispError interface
 */
static void __finally_IDispError_QueryErrorInfo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispError_QueryErrorInfo_Proxy(
    IDispError* This,
    GUID guidErrorType,
    IDispError **ppde)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispError_QueryErrorInfo_Proxy );
    __frame->This = This;
    if (ppde) MIDL_memset( ppde, 0, sizeof( *ppde ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppde) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&guidErrorType,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1294]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[92]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppde,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1324],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispError_QueryErrorInfo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1324], (void *)ppde );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispError_QueryErrorInfo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispError * _This;
    HRESULT _RetVal;
    GUID guidErrorType;
    void *_p_guidErrorType;
    IDispError *_W0;
    IDispError ** ppde;
};

static void __finally_IDispError_QueryErrorInfo_Stub( struct __frame_IDispError_QueryErrorInfo_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppde,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1324]);

}

void __RPC_STUB IDispError_QueryErrorInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispError_QueryErrorInfo_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispError*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispError_QueryErrorInfo_Stub );
    MIDL_memset(&__frame->guidErrorType, 0, sizeof(__frame->guidErrorType));
    __frame->_p_guidErrorType = &__frame->guidErrorType;
    __frame->ppde = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[92]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_guidErrorType,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1294],
            0);


        __frame->ppde = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->QueryErrorInfo(__frame->_This, __frame->guidErrorType, __frame->ppde);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppde,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1324]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppde,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1324]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispError_QueryErrorInfo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispError_GetNext_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispError_GetNext_Proxy(
    IDispError* This,
    IDispError **ppde)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispError_GetNext_Proxy );
    __frame->This = This;
    if (ppde) MIDL_memset( ppde, 0, sizeof( *ppde ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppde) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[102]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppde,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1346],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispError_GetNext_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1346], (void *)ppde );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispError_GetNext_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispError * _This;
    HRESULT _RetVal;
    IDispError *_W0;
    IDispError ** ppde;
};

static void __finally_IDispError_GetNext_Stub( struct __frame_IDispError_GetNext_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppde,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1346]);

}

void __RPC_STUB IDispError_GetNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispError_GetNext_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispError*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispError_GetNext_Stub );
    __frame->ppde = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[102]);


        __frame->ppde = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetNext(__frame->_This, __frame->ppde);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppde,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1346]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppde,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1346]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispError_GetNext_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispError_GetHresult_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispError_GetHresult_Proxy(
    IDispError* This,
    HRESULT *phr)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispError_GetHresult_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!phr) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[108]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *phr = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispError_GetHresult_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1350], (void *)phr );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispError_GetHresult_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispError * _This;
    HRESULT _RetVal;
    HRESULT _W0;
    HRESULT * phr;
};

static void __finally_IDispError_GetHresult_Stub( struct __frame_IDispError_GetHresult_Stub *__frame )
{

}

void __RPC_STUB IDispError_GetHresult_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispError_GetHresult_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispError*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispError_GetHresult_Stub );
    __frame->phr = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[108]);


        __frame->phr = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetHresult(__frame->_This, __frame->phr);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = *__frame->phr;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispError_GetHresult_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispError_GetSource_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispError_GetSource_Proxy(
    IDispError* This,
    BSTR *pbstrSource)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispError_GetSource_Proxy );
    __frame->This = This;
    if (pbstrSource) MIDL_memset( pbstrSource, 0, sizeof( *pbstrSource ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!pbstrSource) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[114]);

            NdrUserMarshalUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pbstrSource,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1146],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispError_GetSource_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1354], (void *)pbstrSource );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispError_GetSource_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispError * _This;
    HRESULT _RetVal;
    BSTR _W0;
    BSTR * pbstrSource;
};

static void __finally_IDispError_GetSource_Stub( struct __frame_IDispError_GetSource_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pbstrSource,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1354]);

}

void __RPC_STUB IDispError_GetSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispError_GetSource_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispError*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispError_GetSource_Stub );
    __frame->pbstrSource = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[114]);


        __frame->pbstrSource = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetSource(__frame->_This, __frame->pbstrSource);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrUserMarshalBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pbstrSource,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1146]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrUserMarshalMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pbstrSource,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1146]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispError_GetSource_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispError_GetHelpInfo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispError_GetHelpInfo_Proxy(
    IDispError* This,
    BSTR *pbstrFileName,
    DWORD *pdwContext)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispError_GetHelpInfo_Proxy );
    __frame->This = This;
    if (pbstrFileName) MIDL_memset( pbstrFileName, 0, sizeof( *pbstrFileName ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pbstrFileName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pdwContext) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[120]);

            NdrUserMarshalUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pbstrFileName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1146],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwContext = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispError_GetHelpInfo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1358], (void *)pbstrFileName );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1362], (void *)pdwContext );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispError_GetHelpInfo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispError * _This;
    HRESULT _RetVal;
    BSTR _W0;
    BSTR * pbstrFileName;
    DWORD _W1;
    DWORD * pdwContext;
};

static void __finally_IDispError_GetHelpInfo_Stub( struct __frame_IDispError_GetHelpInfo_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pbstrFileName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1358]);


}

void __RPC_STUB IDispError_GetHelpInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispError_GetHelpInfo_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispError*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispError_GetHelpInfo_Stub );
    __frame->pbstrFileName = 0;
    __frame->pdwContext = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[120]);


        __frame->pbstrFileName = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));
        __frame->pdwContext = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetHelpInfo(__frame->_This, __frame->pbstrFileName, __frame->pdwContext);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrUserMarshalBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pbstrFileName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1146]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrUserMarshalMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pbstrFileName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1146]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pdwContext;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispError_GetHelpInfo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDispError_GetDescription_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDispError_GetDescription_Proxy(
    IDispError* This,
    BSTR *pbstrDescription)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDispError_GetDescription_Proxy );
    __frame->This = This;
    if (pbstrDescription) MIDL_memset( pbstrDescription, 0, sizeof( *pbstrDescription ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!pbstrDescription) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[130]);

            NdrUserMarshalUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pbstrDescription,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1146],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDispError_GetDescription_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1366], (void *)pbstrDescription );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDispError_GetDescription_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDispError * _This;
    HRESULT _RetVal;
    BSTR _W0;
    BSTR * pbstrDescription;
};

static void __finally_IDispError_GetDescription_Stub( struct __frame_IDispError_GetDescription_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pbstrDescription,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1366]);

}

void __RPC_STUB IDispError_GetDescription_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDispError_GetDescription_Stub __f, * const __frame = &__f;

    __frame->_This = (IDispError*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDispError_GetDescription_Stub );
    __frame->pbstrDescription = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[130]);


        __frame->pbstrDescription = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetDescription(__frame->_This, __frame->pbstrDescription);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrUserMarshalBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pbstrDescription,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1146]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrUserMarshalMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pbstrDescription,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1146]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDispError_GetDescription_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IDispError_FormatStringOffsetTable[] =
{
    92,  /* IDispError::QueryErrorInfo */
    102,  /* IDispError::GetNext */
    108,  /* IDispError::GetHresult */
    114,  /* IDispError::GetSource */
    120,  /* IDispError::GetHelpInfo */
    130,  /* IDispError::GetDescription */
};

static const CINTERFACE_PROXY_VTABLE(9) _IDispErrorProxyVtbl =
{
    {
        &IID_IDispError,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IDispError_QueryErrorInfo_Proxy,
        IDispError_GetNext_Proxy,
        IDispError_GetHresult_Proxy,
        IDispError_GetSource_Proxy,
        IDispError_GetHelpInfo_Proxy,
        IDispError_GetDescription_Proxy,
    }
};

static const MIDL_SERVER_INFO IDispError_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IDispError_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IDispError_table[] =
{
    IDispError_QueryErrorInfo_Stub,
    IDispError_GetNext_Stub,
    IDispError_GetHresult_Stub,
    IDispError_GetSource_Stub,
    IDispError_GetHelpInfo_Stub,
    IDispError_GetDescription_Stub
};

static const CInterfaceStubVtbl _IDispErrorStubVtbl =
{
    {
        &IID_IDispError,
        &IDispError_ServerInfo,
        9,
        &IDispError_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IVariantChangeType interface
 */
static void __finally_IVariantChangeType_ChangeType_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IVariantChangeType_ChangeType_Proxy(
    IVariantChangeType* This,
    VARIANT *pvarDst,
    VARIANT *pvarSrc,
    LCID lcid,
    VARTYPE vtNew)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IVariantChangeType_ChangeType_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 14;
            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pvarDst,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1370]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pvarSrc,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1374]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pvarDst,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1370]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pvarSrc,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1374]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LCID *)__frame->_StubMsg.Buffer = lcid;
            __frame->_StubMsg.Buffer += sizeof(LCID);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(VARTYPE *)__frame->_StubMsg.Buffer = vtNew;
            __frame->_StubMsg.Buffer += sizeof(VARTYPE);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[136]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pvarDst,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1370],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IVariantChangeType_ChangeType_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1370], (void *)pvarDst );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IVariantChangeType_ChangeType_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IVariantChangeType * _This;
    HRESULT _RetVal;
    VARIANT * pvarDst;
    VARIANT * pvarSrc;
    LCID lcid;
    VARTYPE vtNew;
};

static void __finally_IVariantChangeType_ChangeType_Stub( struct __frame_IVariantChangeType_ChangeType_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pvarDst,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1370]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pvarSrc,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1374]);



}

void __RPC_STUB IVariantChangeType_ChangeType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IVariantChangeType_ChangeType_Stub __f, * const __frame = &__f;

    __frame->_This = (IVariantChangeType*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IVariantChangeType_ChangeType_Stub );
    __frame->pvarDst = 0;
    __frame->pvarSrc = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[136]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pvarDst,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1370],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pvarSrc,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1374],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LCID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->lcid = *(LCID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LCID);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(VARTYPE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->vtNew = *(VARTYPE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(VARTYPE);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ChangeType(__frame->_This, __frame->pvarDst, __frame->pvarSrc, __frame->lcid, __frame->vtNew);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pvarDst,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1370]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pvarDst,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1370]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IVariantChangeType_ChangeType_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IVariantChangeType_FormatStringOffsetTable[] =
{
    136,  /* IVariantChangeType::ChangeType */
};

static const CINTERFACE_PROXY_VTABLE(4) _IVariantChangeTypeProxyVtbl =
{
    {
        &IID_IVariantChangeType,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IVariantChangeType_ChangeType_Proxy,
    }
};

static const MIDL_SERVER_INFO IVariantChangeType_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IVariantChangeType_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IVariantChangeType_table[] =
{
    IVariantChangeType_ChangeType_Stub
};

static const CInterfaceStubVtbl _IVariantChangeTypeStubVtbl =
{
    {
        &IID_IVariantChangeType,
        &IVariantChangeType_ServerInfo,
        4,
        &IVariantChangeType_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IObjectIdentity interface
 */
static void __finally_IObjectIdentity_IsEqualObject_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IObjectIdentity_IsEqualObject_Proxy(
    IObjectIdentity* This,
    IUnknown *punk)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IObjectIdentity_IsEqualObject_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)punk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1378]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)punk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1378]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[150]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IObjectIdentity_IsEqualObject_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IObjectIdentity_IsEqualObject_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IObjectIdentity * _This;
    HRESULT _RetVal;
    IUnknown * punk;
};

static void __finally_IObjectIdentity_IsEqualObject_Stub( struct __frame_IObjectIdentity_IsEqualObject_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->punk,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1378]);

}

void __RPC_STUB IObjectIdentity_IsEqualObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IObjectIdentity_IsEqualObject_Stub __f, * const __frame = &__f;

    __frame->_This = (IObjectIdentity*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IObjectIdentity_IsEqualObject_Stub );
    __frame->punk = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[150]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->punk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1378],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->IsEqualObject(__frame->_This, __frame->punk);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IObjectIdentity_IsEqualObject_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IObjectIdentity_FormatStringOffsetTable[] =
{
    150,  /* IObjectIdentity::IsEqualObject */
};

static const CINTERFACE_PROXY_VTABLE(4) _IObjectIdentityProxyVtbl =
{
    {
        &IID_IObjectIdentity,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IObjectIdentity_IsEqualObject_Proxy,
    }
};

static const MIDL_SERVER_INFO IObjectIdentity_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IObjectIdentity_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IObjectIdentity_table[] =
{
    IObjectIdentity_IsEqualObject_Stub
};

static const CInterfaceStubVtbl _IObjectIdentityStubVtbl =
{
    {
        &IID_IObjectIdentity,
        &IObjectIdentity_ServerInfo,
        4,
        &IObjectIdentity_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ICanHandleException interface
 */
static void __finally_ICanHandleException_CanHandleException_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICanHandleException_CanHandleException_Proxy(
    ICanHandleException* This,
    EXCEPINFO *pExcepInfo,
    VARIANT *pvar)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICanHandleException_CanHandleException_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pExcepInfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pvar) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrComplexStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pExcepInfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1156]);

            NdrUserMarshalBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pvar,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1132]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrComplexStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pExcepInfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1156]);

            NdrUserMarshalMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pvar,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1132]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[156]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICanHandleException_CanHandleException_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICanHandleException_CanHandleException_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICanHandleException * _This;
    HRESULT _RetVal;
    EXCEPINFO * pExcepInfo;
    VARIANT * pvar;
};

static void __finally_ICanHandleException_CanHandleException_Stub( struct __frame_ICanHandleException_CanHandleException_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pExcepInfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1396]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pvar,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1400]);

}

void __RPC_STUB ICanHandleException_CanHandleException_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICanHandleException_CanHandleException_Stub __f, * const __frame = &__f;

    __frame->_This = (ICanHandleException*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICanHandleException_CanHandleException_Stub );
    __frame->pExcepInfo = 0;
    __frame->pvar = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[156]);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pExcepInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1156],
            0);

        NdrUserMarshalUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pvar,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1132],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CanHandleException(__frame->_This, __frame->pExcepInfo, __frame->pvar);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICanHandleException_CanHandleException_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ICanHandleException_FormatStringOffsetTable[] =
{
    156,  /* ICanHandleException::CanHandleException */
};

static const CINTERFACE_PROXY_VTABLE(4) _ICanHandleExceptionProxyVtbl =
{
    {
        &IID_ICanHandleException,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ICanHandleException_CanHandleException_Proxy,
    }
};

static const MIDL_SERVER_INFO ICanHandleException_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ICanHandleException_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ICanHandleException_table[] =
{
    ICanHandleException_CanHandleException_Stub
};

static const CInterfaceStubVtbl _ICanHandleExceptionStubVtbl =
{
    {
        &IID_ICanHandleException,
        &ICanHandleException_ServerInfo,
        4,
        &ICanHandleException_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IProvideRuntimeContext interface
 */
static void __finally_IProvideRuntimeContext_GetCurrentSourceContext_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IProvideRuntimeContext_GetCurrentSourceContext_Proxy(
    IProvideRuntimeContext* This,
    DWORD_PTR *pdwContext,
    VARIANT_BOOL *pfExecutingGlobalCode)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IProvideRuntimeContext_GetCurrentSourceContext_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pdwContext) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pfExecutingGlobalCode) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[166]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD_PTR) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwContext = *(DWORD_PTR *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD_PTR);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            if (__frame->_StubMsg.Buffer + sizeof(VARIANT_BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfExecutingGlobalCode = *(VARIANT_BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(VARIANT_BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IProvideRuntimeContext_GetCurrentSourceContext_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1404], (void *)pdwContext );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1408], (void *)pfExecutingGlobalCode );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IProvideRuntimeContext_GetCurrentSourceContext_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IProvideRuntimeContext * _This;
    HRESULT _RetVal;
    DWORD_PTR _W0;
    DWORD_PTR * pdwContext;
    VARIANT_BOOL _W1;
    VARIANT_BOOL * pfExecutingGlobalCode;
};

static void __finally_IProvideRuntimeContext_GetCurrentSourceContext_Stub( struct __frame_IProvideRuntimeContext_GetCurrentSourceContext_Stub *__frame )
{


}

void __RPC_STUB IProvideRuntimeContext_GetCurrentSourceContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IProvideRuntimeContext_GetCurrentSourceContext_Stub __f, * const __frame = &__f;

    __frame->_This = (IProvideRuntimeContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IProvideRuntimeContext_GetCurrentSourceContext_Stub );
    __frame->pdwContext = 0;
    __frame->pfExecutingGlobalCode = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[166]);


        __frame->pdwContext = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pfExecutingGlobalCode = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetCurrentSourceContext(__frame->_This, __frame->pdwContext, __frame->pfExecutingGlobalCode);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 30;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD_PTR *)__frame->_StubMsg.Buffer = *__frame->pdwContext;
        __frame->_StubMsg.Buffer += sizeof(DWORD_PTR);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        *(VARIANT_BOOL *)__frame->_StubMsg.Buffer = *__frame->pfExecutingGlobalCode;
        __frame->_StubMsg.Buffer += sizeof(VARIANT_BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IProvideRuntimeContext_GetCurrentSourceContext_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IProvideRuntimeContext_FormatStringOffsetTable[] =
{
    166,  /* IProvideRuntimeContext::GetCurrentSourceContext */
};

static const CINTERFACE_PROXY_VTABLE(4) _IProvideRuntimeContextProxyVtbl =
{
    {
        &IID_IProvideRuntimeContext,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IProvideRuntimeContext_GetCurrentSourceContext_Proxy,
    }
};

static const MIDL_SERVER_INFO IProvideRuntimeContext_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IProvideRuntimeContext_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IProvideRuntimeContext_table[] =
{
    IProvideRuntimeContext_GetCurrentSourceContext_Stub
};

static const CInterfaceStubVtbl _IProvideRuntimeContextStubVtbl =
{
    {
        &IID_IProvideRuntimeContext,
        &IProvideRuntimeContext_ServerInfo,
        4,
        &IProvideRuntimeContext_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

static const USER_MARSHAL_ROUTINE_QUADRUPLE UserMarshalRoutines[] =
{
    {
        (USER_MARSHAL_SIZING_ROUTINE)BSTR_UserSize,
        (USER_MARSHAL_MARSHALLING_ROUTINE)BSTR_UserMarshal,
        (USER_MARSHAL_UNMARSHALLING_ROUTINE)BSTR_UserUnmarshal,
        (USER_MARSHAL_FREEING_ROUTINE)BSTR_UserFree
    },
    {
        (USER_MARSHAL_SIZING_ROUTINE)VARIANT_UserSize,
        (USER_MARSHAL_MARSHALLING_ROUTINE)VARIANT_UserMarshal,
        (USER_MARSHAL_UNMARSHALLING_ROUTINE)VARIANT_UserUnmarshal,
        (USER_MARSHAL_FREEING_ROUTINE)VARIANT_UserFree
    }
};

static const MIDL_STUB_DESC Object_StubDesc =
{
    0,
    NdrOleAllocate,
    NdrOleFree,
    {0}, 0, 0, 0, 0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    UserMarshalRoutines,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};

#if !defined(__RPC_WIN64__)
#error Currently only Wine and WIN32 are supported.
#endif

static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter bstrName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1a),	/* type offset = 26 */
/* 4 (parameter grfdex) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 6 (parameter pid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x24),	/* type offset = 36 */
/* 10 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 12 (parameter id) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 14 (parameter lcid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 16 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 18 (parameter pdp) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x468),	/* type offset = 1128 */
/* 22 (parameter pvarRes) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x476),	/* type offset = 1142 */
/* 26 (parameter pei) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4a2),	/* type offset = 1186 */
/* 30 (parameter pspCaller) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x4a6),	/* type offset = 1190 */
/* 34 (parameter cvarRefArg) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 36 (parameter rgiRefArg) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x4b8),	/* type offset = 1208 */
/* 40 (parameter rgvarRefArg) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x4c6),	/* type offset = 1222 */
/* 44 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 46 (parameter bstrName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x4dc),	/* type offset = 1244 */
/* 50 (parameter grfdex) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 52 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 54 (parameter id) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 56 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 58 (parameter id) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 60 (parameter grfdexFetch) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 62 (parameter pgrfdex) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4e6),	/* type offset = 1254 */
/* 66 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 68 (parameter id) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 70 (parameter pbstrName) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4ea),	/* type offset = 1258 */
/* 74 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 76 (parameter grfdex) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 78 (parameter id) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 80 (parameter pid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4ee),	/* type offset = 1262 */
/* 84 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 86 (parameter ppunk) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x504),	/* type offset = 1284 */
/* 90 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 92 (parameter guidErrorType) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x50e),	/* type offset = 1294 */
/* 96 (parameter ppde) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x52c),	/* type offset = 1324 */
/* 100 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 102 (parameter ppde) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x542),	/* type offset = 1346 */
/* 106 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 108 (parameter phr) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x546),	/* type offset = 1350 */
/* 112 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 114 (parameter pbstrSource) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x54a),	/* type offset = 1354 */
/* 118 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 120 (parameter pbstrFileName) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x54e),	/* type offset = 1358 */
/* 124 (parameter pdwContext) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x552),	/* type offset = 1362 */
/* 128 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 130 (parameter pbstrDescription) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x556),	/* type offset = 1366 */
/* 134 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 136 (parameter pvarDst) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x55a),	/* type offset = 1370 */
/* 140 (parameter pvarSrc) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x55e),	/* type offset = 1374 */
/* 144 (parameter lcid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 146 (parameter vtNew) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 148 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 150 (parameter punk) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x562),	/* type offset = 1378 */
/* 154 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 156 (parameter pExcepInfo) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x574),	/* type offset = 1396 */
/* 160 (parameter pvar) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x578),	/* type offset = 1400 */
/* 164 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 166 (parameter pdwContext) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x57c),	/* type offset = 1404 */
/* 170 (parameter pfExecutingGlobalCode) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x580),	/* type offset = 1408 */
/* 174 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (unsigned short[]) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x9,	/* Corr desc: field clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        0x06,	/* FC_SHORT */
        0x5b,	/* FC_END */
/* 12 (FLAGGED_WORD_BLOB) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0xfff2),	/* Offset= -14 (2) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 22 (wireBSTR) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (12) */
/* 26 (BSTR) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x0),	/* Function offset= 0 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfff4),	/* Offset= -12 (22) */
/* 36 (DISPID *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 40 (wireBSTR) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe2),	/* Offset= -30 (12) */
/* 44 (CY) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 50 (DECIMAL) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x10),	/* 16 */
        0x06,	/* FC_SHORT */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x08,	/* FC_LONG */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 60 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 78 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 96 (wireBSTR *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff9e),	/* Offset= -98 (12) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 114 (SAFEARR_BSTR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (126) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 126 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (96) */
/* 130 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 148 (IUnknown **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (130) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 166 (SAFEARR_UNKNOWN) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (178) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 178 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (148) */
/* 182 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 200 (IDispatch **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (182) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 218 (SAFEARR_DISPATCH) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (230) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 230 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (200) */
/* 234 (wireVARIANT *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0x31c),	/* Offset= 796 (1044) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 252 (SAFEARR_VARIANT) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (264) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 264 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (234) */
/* 268 (IRecordInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000002f),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 286 (byte *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 296 (struct _wireBRECORD) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (312) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffd8),	/* Offset= -40 (268) */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 312 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (286) */
/* 316 (wireBRECORD *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (296) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 334 (SAFEARR_BRECORD) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (346) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 346 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (316) */
/* 350 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 368 (IUnknown **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (350) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 386 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 392 (IID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (386) */
        0x5b,	/* FC_END */
/* 404 (SAFEARR_HAVEIID) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (420) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe7),	/* Offset= -25 (392) */
        0x5b,	/* FC_END */
/* 420 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffca),	/* Offset= -54 (368) */
/* 424 (byte *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 434 (BYTE_SIZEDARR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (446) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 446 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (424) */
/* 450 (unsigned short *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x06,	/* FC_SHORT */
        0x5b,	/* FC_END */
/* 460 (WORD_SIZEDARR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (472) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 472 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (450) */
/* 476 (ULONG *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 486 (DWORD_SIZEDARR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (498) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 498 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (476) */
/* 502 (hyper *) */
        0x1b,	/* FC_CARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 512 (HYPER_SIZEDARR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (524) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 524 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (502) */
/* 528 (SAFEARRAYUNION) */
        0x2a,	/* FC_ENCAPSULATED_UNION */
        0x89,	/* Switch type= FC_ULONG */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0xa),	/* 10 */
        NdrFcLong(0x8),	/* 8 */
        NdrFcShort(0xfe58),	/* Offset= -424 (114) */
        NdrFcLong(0xd),	/* 13 */
        NdrFcShort(0xfe86),	/* Offset= -378 (166) */
        NdrFcLong(0x9),	/* 9 */
        NdrFcShort(0xfeb4),	/* Offset= -332 (218) */
        NdrFcLong(0xc),	/* 12 */
        NdrFcShort(0xfed0),	/* Offset= -304 (252) */
        NdrFcLong(0x24),	/* 36 */
        NdrFcShort(0xff1c),	/* Offset= -228 (334) */
        NdrFcLong(0x800d),	/* 32781 */
        NdrFcShort(0xff5c),	/* Offset= -164 (404) */
        NdrFcLong(0x10),	/* 16 */
        NdrFcShort(0xff74),	/* Offset= -140 (434) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xff88),	/* Offset= -120 (460) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xff9c),	/* Offset= -100 (486) */
        NdrFcLong(0x14),	/* 20 */
        NdrFcShort(0xffb0),	/* Offset= -80 (512) */
        NdrFcShort(0xffff),
/* 596 (SAFEARRAYBOUND) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 604 (SAFEARRAYBOUND[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x7,	/* Corr desc: field cDims, FC_USHORT */
        0x0,	/* no operators */
        NdrFcShort(0xffc8),	/* offset = -56 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffee),	/* Offset= -18 (596) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 618 (struct _wireSAFEARRAY) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x38),	/* 56 */
        NdrFcShort(0xffee),	/* Offset= -18 (604) */
        NdrFcShort(0x0),	/* Offset= 0 (624) */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff97),	/* Offset= -105 (528) */
        0x5b,	/* FC_END */
/* 636 (wireSAFEARRAY) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (618) */
/* 640 (signed char *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
/* 644 (USHORT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x07,	/* FC_USHORT */
        0x5c,	/* FC_PAD */
/* 648 (ULONG *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 652 (INT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 656 (UINT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 660 (BYTE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
/* 664 (SHORT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
/* 668 (LONG *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 672 (FLOAT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0a,	/* FC_FLOAT */
        0x5c,	/* FC_PAD */
/* 676 (DOUBLE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0c,	/* FC_DOUBLE */
        0x5c,	/* FC_PAD */
/* 680 (VARIANT_BOOL *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
/* 684 (SCODE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 688 (DATE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0c,	/* FC_DOUBLE */
        0x5c,	/* FC_PAD */
/* 692 (wireBSTR) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd56),	/* Offset= -682 (12) */
/* 696 (wireBSTR *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (692) */
/* 700 (wireVARIANT) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0x156),	/* Offset= 342 (1044) */
/* 704 (wireVARIANT *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (700) */
/* 708 (CY *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd66),	/* Offset= -666 (44) */
/* 712 (DECIMAL *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd68),	/* Offset= -664 (50) */
/* 716 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 734 (IUnknown **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (716) */
/* 738 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 756 (IDispatch **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (738) */
/* 760 (wireSAFEARRAY) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff70),	/* Offset= -144 (618) */
/* 764 (wireSAFEARRAY *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (760) */
/* 768 (wireBRECORD) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfe26),	/* Offset= -474 (296) */
/* 772 (union ) */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x2b),	/* 43 */
        NdrFcLong(0x0),	/* 0 */
        NdrFcShort(0x0),	/* No type */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0x0),	/* No type */
        NdrFcLong(0x10),	/* 16 */
        NdrFcShort(0x8002),	/* Simple arm type: FC_CHAR */
        NdrFcLong(0x12),	/* 18 */
        NdrFcShort(0x8007),	/* Simple arm type: FC_USHORT */
        NdrFcLong(0x13),	/* 19 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x16),	/* 22 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x17),	/* 23 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x11),	/* 17 */
        NdrFcShort(0x8002),	/* Simple arm type: FC_CHAR */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0x8006),	/* Simple arm type: FC_SHORT */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0x800a),	/* Simple arm type: FC_FLOAT */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0x800c),	/* Simple arm type: FC_DOUBLE */
        NdrFcLong(0xb),	/* 11 */
        NdrFcShort(0x8006),	/* Simple arm type: FC_SHORT */
        NdrFcLong(0xa),	/* 10 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x7),	/* 7 */
        NdrFcShort(0x800c),	/* Simple arm type: FC_DOUBLE */
        NdrFcLong(0x8),	/* 8 */
        NdrFcShort(0xff4e),	/* Offset= -178 (692) */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0xfcc0),	/* Offset= -832 (44) */
        NdrFcLong(0xe),	/* 14 */
        NdrFcShort(0xfcc0),	/* Offset= -832 (50) */
        NdrFcLong(0xd),	/* 13 */
        NdrFcShort(0xfcc4),	/* Offset= -828 (60) */
        NdrFcLong(0x9),	/* 9 */
        NdrFcShort(0xfcd0),	/* Offset= -816 (78) */
        NdrFcLong(0x2000),	/* 8192 */
        NdrFcShort(0xff74),	/* Offset= -140 (760) */
        NdrFcLong(0x4010),	/* 16400 */
        NdrFcShort(0xfef6),	/* Offset= -266 (640) */
        NdrFcLong(0x4012),	/* 16402 */
        NdrFcShort(0xfef4),	/* Offset= -268 (644) */
        NdrFcLong(0x4013),	/* 16403 */
        NdrFcShort(0xfef2),	/* Offset= -270 (648) */
        NdrFcLong(0x4016),	/* 16406 */
        NdrFcShort(0xfef0),	/* Offset= -272 (652) */
        NdrFcLong(0x4017),	/* 16407 */
        NdrFcShort(0xfeee),	/* Offset= -274 (656) */
        NdrFcLong(0x4011),	/* 16401 */
        NdrFcShort(0xfeec),	/* Offset= -276 (660) */
        NdrFcLong(0x4002),	/* 16386 */
        NdrFcShort(0xfeea),	/* Offset= -278 (664) */
        NdrFcLong(0x4003),	/* 16387 */
        NdrFcShort(0xfee8),	/* Offset= -280 (668) */
        NdrFcLong(0x4004),	/* 16388 */
        NdrFcShort(0xfee6),	/* Offset= -282 (672) */
        NdrFcLong(0x4005),	/* 16389 */
        NdrFcShort(0xfee4),	/* Offset= -284 (676) */
        NdrFcLong(0x400b),	/* 16395 */
        NdrFcShort(0xfee2),	/* Offset= -286 (680) */
        NdrFcLong(0x400a),	/* 16394 */
        NdrFcShort(0xfee0),	/* Offset= -288 (684) */
        NdrFcLong(0x4007),	/* 16391 */
        NdrFcShort(0xfede),	/* Offset= -290 (688) */
        NdrFcLong(0x4008),	/* 16392 */
        NdrFcShort(0xfee0),	/* Offset= -288 (696) */
        NdrFcLong(0x400c),	/* 16396 */
        NdrFcShort(0xfee2),	/* Offset= -286 (704) */
        NdrFcLong(0x4006),	/* 16390 */
        NdrFcShort(0xfee0),	/* Offset= -288 (708) */
        NdrFcLong(0x400e),	/* 16398 */
        NdrFcShort(0xfede),	/* Offset= -290 (712) */
        NdrFcLong(0x400d),	/* 16397 */
        NdrFcShort(0xfeee),	/* Offset= -274 (734) */
        NdrFcLong(0x4009),	/* 16393 */
        NdrFcShort(0xfefe),	/* Offset= -258 (756) */
        NdrFcLong(0x6000),	/* 24576 */
        NdrFcShort(0xff00),	/* Offset= -256 (764) */
        NdrFcLong(0x24),	/* 36 */
        NdrFcShort(0xfefe),	/* Offset= -258 (768) */
        NdrFcLong(0x4024),	/* 16420 */
        NdrFcShort(0xfef8),	/* Offset= -264 (768) */
        NdrFcShort(0xffff),
/* 1036 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x7,	/* Corr desc: field vt, FC_USHORT */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcShort(0xfef2),	/* Offset= -270 (772) */
/* 1044 (struct _wireVARIANT) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1050) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe8),	/* Offset= -24 (1036) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1064 (wireVARIANT) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffea),	/* Offset= -22 (1044) */
/* 1068 (VARIANTARG) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x1),	/* Function offset= 1 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfff4),	/* Offset= -12 (1064) */
/* 1078 (VARIANTARG *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cArgs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe8),	/* Offset= -24 (1068) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1096 (DISPID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cNamedArgs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x14),	/* offset = 20 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1106 (DISPPARAMS) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0x8),	/* Offset= 8 (1120) */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1120 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd4),	/* Offset= -44 (1078) */
/* 1124 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe2),	/* Offset= -30 (1096) */
/* 1128 (DISPPARAMS *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe8),	/* Offset= -24 (1106) */
/* 1132 (VARIANT) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x1),	/* Function offset= 1 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xffb4),	/* Offset= -76 (1064) */
/* 1142 (VARIANT *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfff4),	/* Offset= -12 (1132) */
/* 1146 (BSTR) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x0),	/* Function offset= 0 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfe32),	/* Offset= -462 (692) */
/* 1156 (EXCEPINFO) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x40),	/* 64 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1162) */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe9),	/* Offset= -23 (1146) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe5),	/* Offset= -27 (1146) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe1),	/* Offset= -31 (1146) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0xb8,	/* FC_INT3264 */
        0xb8,	/* FC_INT3264 */
        0x08,	/* FC_LONG */
        0x40,	/* FC_STRUCTPAD4 */
        0x5b,	/* FC_END */
/* 1186 (EXCEPINFO *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffe0),	/* Offset= -32 (1156) */
/* 1190 (IServiceProvider *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x6d5140c1),
        NdrFcShort(0x7436),
        NdrFcShort(0x11ce),
        0x80,
        0x34,
        0x00,
        0xaa,
        0x00,
        0x60,
        0x09,
        0xfa,

/* 1208 (UINT *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter cvarRefArg, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x40),	/* offset = 64 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1218 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1208) */
/* 1222 (VARIANT *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter cvarRefArg, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x40),	/* offset = 64 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff98),	/* Offset= -104 (1132) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1240 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (1222) */
/* 1244 (BSTR) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x0),	/* Function offset= 0 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfdd0),	/* Offset= -560 (692) */
/* 1254 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1258 (BSTR *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xff8e),	/* Offset= -114 (1146) */
/* 1262 (DISPID *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1266 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1284 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1266) */
/* 1288 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1294 (GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1288) */
        0x5b,	/* FC_END */
/* 1306 (IDispError *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xa6ef9861),
        NdrFcShort(0xc720),
        NdrFcShort(0x11d0),
        0x93,
        0x37,
        0x00,
        0xa0,
        0xc9,
        0x0d,
        0xca,
        0xa9,

/* 1324 (IDispError **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1306) */
/* 1328 (IDispError *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xa6ef9861),
        NdrFcShort(0xc720),
        NdrFcShort(0x11d0),
        0x93,
        0x37,
        0x00,
        0xa0,
        0xc9,
        0x0d,
        0xca,
        0xa9,

/* 1346 (IDispError **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1328) */
/* 1350 (HRESULT *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1354 (BSTR *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xff2e),	/* Offset= -210 (1146) */
/* 1358 (BSTR *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xff2a),	/* Offset= -214 (1146) */
/* 1362 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1366 (BSTR *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xff22),	/* Offset= -222 (1146) */
/* 1370 (VARIANT *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff10),	/* Offset= -240 (1132) */
/* 1374 (VARIANT *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff0c),	/* Offset= -244 (1132) */
/* 1378 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1396 (EXCEPINFO *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xff0e),	/* Offset= -242 (1156) */
/* 1400 (VARIANT *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfef2),	/* Offset= -270 (1132) */
/* 1404 (DWORD_PTR *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 1408 (VARIANT_BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
        0x0
    }
};

static const CInterfaceProxyVtbl* const _disp_ex_ProxyVtblList[] =
{
    (const CInterfaceProxyVtbl*)&_IProvideRuntimeContextProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ICanHandleExceptionProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IDispatchExProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IDispErrorProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IVariantChangeTypeProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IObjectIdentityProxyVtbl,
    0
};

static const CInterfaceStubVtbl* const _disp_ex_StubVtblList[] =
{
    &_IProvideRuntimeContextStubVtbl,
    &_ICanHandleExceptionStubVtbl,
    &_IDispatchExStubVtbl,
    &_IDispErrorStubVtbl,
    &_IVariantChangeTypeStubVtbl,
    &_IObjectIdentityStubVtbl,
    0
};

static PCInterfaceName const _disp_ex_InterfaceNamesList[] =
{
    "IProvideRuntimeContext",
    "ICanHandleException",
    "IDispatchEx",
    "IDispError",
    "IVariantChangeType",
    "IObjectIdentity",
    0
};

static const IID * _disp_ex_BaseIIDList[] =
{
    0,
    0,
    &IID_IDispatch,  /* IDispatchEx */
    0,
    0,
    0,
    0
};

static int __stdcall _disp_ex_IID_Lookup(const IID* pIID, int* pIndex)
{
    int low = 0, high = 5;

    while (low <= high)
    {
        int pos = (low + high) / 2;
        int res = IID_GENERIC_CHECK_IID(_disp_ex, pIID, pos);
        if (!res) { *pIndex = pos; return 1; }
        if (res > 0) low = pos + 1;
        else high = pos - 1;
    }
    return 0;
}

const ExtendedProxyFileInfo disp_ex_ProxyFileInfo DECLSPEC_HIDDEN =
{
    (const PCInterfaceProxyVtblList*)_disp_ex_ProxyVtblList,
    (const PCInterfaceStubVtblList*)_disp_ex_StubVtblList,
    _disp_ex_InterfaceNamesList,
    _disp_ex_BaseIIDList,
    _disp_ex_IID_Lookup,
    6,
    1,
    0,
    0,
    0,
    0
};

#endif /* _WIN64 */
