/*** Autogenerated by WIDL 3.8 from atsvc.idl - Do not edit ***/
#include <string.h>

#include "atsvc.h"

#ifndef DECLSPEC_HIDDEN
#define DECLSPEC_HIDDEN
#endif

#ifndef _WIN64

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

struct __server_frame
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static int __server_filter( struct __server_frame *__frame )
{
    return (__frame->code == STATUS_ACCESS_VIOLATION) ||
           (__frame->code == STATUS_DATATYPE_MISALIGNMENT) ||
           (__frame->code == RPC_X_BAD_STUB_DATA) ||
           (__frame->code == RPC_S_INVALID_BOUND);
}

#define TYPE_FORMAT_STRING_SIZE 157
#define PROC_FORMAT_STRING_SIZE 57

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

/*****************************************************************************
 * atsvc interface
 */

static RPC_DISPATCH_TABLE atsvc_v1_0_DispatchTable;
static const MIDL_SERVER_INFO atsvc_ServerInfo;

static const RPC_SERVER_INTERFACE atsvc___RpcServerInterface =
{
    sizeof(RPC_SERVER_INTERFACE),
    {{0x1ff70682,0x0a51,0x30e8,{0x07,0x6d,0x74,0x0b,0xe8,0xce,0xe9,0x8b}},{1,0}},
    {{0x8a885d04,0x1ceb,0x11c9,{0x9f,0xe8,0x08,0x00,0x2b,0x10,0x48,0x60}},{2,0}},
    &atsvc_v1_0_DispatchTable,
    0,
    0,
    0,
    &atsvc_ServerInfo,
    0,
};
RPC_IF_HANDLE atsvc_v1_0_s_ifspec DECLSPEC_HIDDEN = (RPC_IF_HANDLE)& atsvc___RpcServerInterface;

static const MIDL_STUB_DESC atsvc_StubDesc;

struct __frame_atsvc_NetrJobAdd
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    ATSVC_HANDLE ServerName;
    LPAT_INFO pAtInfo;
    DWORD _W0;
    LPDWORD pJobId;
};

static void __finally_atsvc_NetrJobAdd( struct __frame_atsvc_NetrJobAdd *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ServerName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[144]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pAtInfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[34]);



}

void __RPC_STUB atsvc_NetrJobAdd( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_atsvc_NetrJobAdd __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &atsvc_StubDesc);

    RpcExceptionInit( __server_filter, __finally_atsvc_NetrJobAdd );
    __frame->ServerName = 0;
    __frame->pAtInfo = 0;
    __frame->pJobId = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[0]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->ServerName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[144],
                0);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->pAtInfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[10],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->pJobId = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = NetrJobAdd(
            __frame->ServerName,
            __frame->pAtInfo,
            __frame->pJobId);
        __frame->_StubMsg.BufferLength = 16;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pJobId;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_atsvc_NetrJobAdd( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_atsvc_NetrJobDel
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    ATSVC_HANDLE ServerName;
    DWORD MinJobId;
    DWORD MaxJobId;
};

static void __finally_atsvc_NetrJobDel( struct __frame_atsvc_NetrJobDel *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ServerName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[144]);




}

void __RPC_STUB atsvc_NetrJobDel( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_atsvc_NetrJobDel __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &atsvc_StubDesc);

    RpcExceptionInit( __server_filter, __finally_atsvc_NetrJobDel );
    __frame->ServerName = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[14]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->ServerName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[144],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->MinJobId = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->MaxJobId = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = NetrJobDel(
            __frame->ServerName,
            __frame->MinJobId,
            __frame->MaxJobId);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_atsvc_NetrJobDel( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_atsvc_NetrJobEnum
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    ATSVC_HANDLE ServerName;
    LPAT_ENUM_CONTAINER pEnumContainer;
    DWORD PreferedMaximumLength;
    DWORD _W0;
    LPDWORD pTotalEntries;
    LPDWORD pResumeHandle;
};

static void __finally_atsvc_NetrJobEnum( struct __frame_atsvc_NetrJobEnum *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ServerName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[144]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pEnumContainer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[132]);



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pResumeHandle,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[140]);


}

void __RPC_STUB atsvc_NetrJobEnum( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_atsvc_NetrJobEnum __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &atsvc_StubDesc);

    RpcExceptionInit( __server_filter, __finally_atsvc_NetrJobEnum );
    __frame->ServerName = 0;
    __frame->pEnumContainer = 0;
    __frame->pTotalEntries = 0;
    __frame->pResumeHandle = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[24]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->ServerName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[144],
                0);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->pEnumContainer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[112],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->PreferedMaximumLength = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->pResumeHandle,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[140],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->pTotalEntries = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = NetrJobEnum(
            __frame->ServerName,
            __frame->pEnumContainer,
            __frame->PreferedMaximumLength,
            __frame->pTotalEntries,
            __frame->pResumeHandle);
        __frame->_StubMsg.BufferLength = 32;
        NdrSimpleStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pEnumContainer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[112]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pEnumContainer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[112]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pTotalEntries;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pResumeHandle,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[140]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_atsvc_NetrJobEnum( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_atsvc_NetrJobGetInfo
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    ATSVC_HANDLE ServerName;
    DWORD JobId;
    LPAT_INFO _W0;
    LPAT_INFO * ppAtInfo;
};

static void __finally_atsvc_NetrJobGetInfo( struct __frame_atsvc_NetrJobGetInfo *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ServerName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[144]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppAtInfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[152]);


}

void __RPC_STUB atsvc_NetrJobGetInfo( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_atsvc_NetrJobGetInfo __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &atsvc_StubDesc);

    RpcExceptionInit( __server_filter, __finally_atsvc_NetrJobGetInfo );
    __frame->ServerName = 0;
    __frame->ppAtInfo = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[44]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->ServerName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[144],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->JobId = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->ppAtInfo = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = NetrJobGetInfo(
            __frame->ServerName,
            __frame->JobId,
            __frame->ppAtInfo);
        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppAtInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[152]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppAtInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[152]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_atsvc_NetrJobGetInfo( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

#if !defined(__RPC_WIN32__)
#error  Invalid build platform for this stub.
#endif

static const unsigned short atsvc_FormatStringOffsetTable[] =
{
    0,  /* NetrJobAdd */
    14,  /* NetrJobDel */
    24,  /* NetrJobEnum */
    44,  /* NetrJobGetInfo */
};

static const MIDL_STUB_DESC atsvc_StubDesc =
{
    (void *)& atsvc___RpcServerInterface,
    MIDL_user_allocate,
    MIDL_user_free,
    {
        0,
    },
    0,
    0,
    0,
    0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    0,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};

static RPC_DISPATCH_FUNCTION atsvc_table[] =
{
    atsvc_NetrJobAdd,
    atsvc_NetrJobDel,
    atsvc_NetrJobEnum,
    atsvc_NetrJobGetInfo,
    0
};
static RPC_DISPATCH_TABLE atsvc_v1_0_DispatchTable =
{
    4,
    atsvc_table
};

static const SERVER_ROUTINE atsvc_ServerRoutineTable[] =
{
    (SERVER_ROUTINE)NetrJobAdd,
    (SERVER_ROUTINE)NetrJobDel,
    (SERVER_ROUTINE)NetrJobEnum,
    (SERVER_ROUTINE)NetrJobGetInfo,
};

static const MIDL_SERVER_INFO atsvc_ServerInfo =
{
    &atsvc_StubDesc,
    atsvc_ServerRoutineTable,
    __MIDL_ProcFormatString.Format,
    atsvc_FormatStringOffsetTable,
    0,
    0,
    0,
    0
};

static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter ServerName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2),	/* type offset = 2 */
/* 4 (parameter pAtInfo) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x22),	/* type offset = 34 */
/* 8 (parameter pJobId) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x26),	/* type offset = 38 */
/* 12 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 14 (parameter ServerName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2a),	/* type offset = 42 */
/* 18 (parameter MinJobId) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 20 (parameter MaxJobId) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 22 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 24 (parameter ServerName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2e),	/* type offset = 46 */
/* 28 (parameter pEnumContainer) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x84),	/* type offset = 132 */
/* 32 (parameter PreferedMaximumLength) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 34 (parameter pTotalEntries) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x88),	/* type offset = 136 */
/* 38 (parameter pResumeHandle) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x8c),	/* type offset = 140 */
/* 42 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 44 (parameter ServerName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x90),	/* type offset = 144 */
/* 48 (parameter JobId) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 50 (parameter ppAtInfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x98),	/* type offset = 152 */
/* 54 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (ATSVC_HANDLE) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/*  4 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 6 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/*  8 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 10 (struct _AT_INFO) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0xc),	/* Memory offset = 12 */
        NdrFcShort(0xc),	/* Buffer offset = 12 */
/* 22 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 24 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0xb8,	/* FC_INT3264 */
        0x08,	/* FC_LONG */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x38,	/* FC_ALIGNM4 */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 34 (LPAT_INFO) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe6),	/* Offset= -26 (10) */
/* 38 (LPDWORD) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 42 (ATSVC_HANDLE) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 44 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 46 (ATSVC_HANDLE) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 48 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 50 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 52 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 54 (struct _AT_ENUM) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x14),	/* 20 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x10),	/* Memory offset = 16 */
        NdrFcShort(0x10),	/* Buffer offset = 16 */
/* 66 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 68 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0xb8,	/* FC_INT3264 */
        0x08,	/* FC_LONG */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x38,	/* FC_ALIGNM4 */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 80 (LPAT_ENUM) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x14),	/* 20 */
        0x19,	/* Corr desc: field pointer EntriesRead, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x14),	/* Increment = 20 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x10),	/* Memory offset = 16 */
        NdrFcShort(0x10),	/* Buffer offset = 16 */
/* 102 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 104 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffc9),	/* Offset= -55 (54) */
        0x5b,	/* FC_END */
/* 112 (struct _AT_ENUM_CONTAINER) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd2),	/* Offset= -46 (80) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 132 (LPAT_ENUM_CONTAINER) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffea),	/* Offset= -22 (112) */
/* 136 (LPDWORD) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 140 (LPDWORD) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 144 (ATSVC_HANDLE) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 146 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 148 (LPAT_INFO) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff74),	/* Offset= -140 (10) */
/* 152 (LPAT_INFO *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (148) */
        0x0
    }
};


#else /* _WIN64 */

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

struct __server_frame
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static int __server_filter( struct __server_frame *__frame )
{
    return (__frame->code == STATUS_ACCESS_VIOLATION) ||
           (__frame->code == STATUS_DATATYPE_MISALIGNMENT) ||
           (__frame->code == RPC_X_BAD_STUB_DATA) ||
           (__frame->code == RPC_S_INVALID_BOUND);
}

#define TYPE_FORMAT_STRING_SIZE 131
#define PROC_FORMAT_STRING_SIZE 57

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

/*****************************************************************************
 * atsvc interface
 */

static RPC_DISPATCH_TABLE atsvc_v1_0_DispatchTable;
static const MIDL_SERVER_INFO atsvc_ServerInfo;

static const RPC_SERVER_INTERFACE atsvc___RpcServerInterface =
{
    sizeof(RPC_SERVER_INTERFACE),
    {{0x1ff70682,0x0a51,0x30e8,{0x07,0x6d,0x74,0x0b,0xe8,0xce,0xe9,0x8b}},{1,0}},
    {{0x8a885d04,0x1ceb,0x11c9,{0x9f,0xe8,0x08,0x00,0x2b,0x10,0x48,0x60}},{2,0}},
    &atsvc_v1_0_DispatchTable,
    0,
    0,
    0,
    &atsvc_ServerInfo,
    0,
};
RPC_IF_HANDLE atsvc_v1_0_s_ifspec DECLSPEC_HIDDEN = (RPC_IF_HANDLE)& atsvc___RpcServerInterface;

static const MIDL_STUB_DESC atsvc_StubDesc;

struct __frame_atsvc_NetrJobAdd
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    ATSVC_HANDLE ServerName;
    LPAT_INFO pAtInfo;
    DWORD _W0;
    LPDWORD pJobId;
};

static void __finally_atsvc_NetrJobAdd( struct __frame_atsvc_NetrJobAdd *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ServerName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[118]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pAtInfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[30]);



}

void __RPC_STUB atsvc_NetrJobAdd( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_atsvc_NetrJobAdd __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &atsvc_StubDesc);

    RpcExceptionInit( __server_filter, __finally_atsvc_NetrJobAdd );
    __frame->ServerName = 0;
    __frame->pAtInfo = 0;
    __frame->pJobId = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[0]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->ServerName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[118],
                0);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->pAtInfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[10],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->pJobId = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = NetrJobAdd(
            __frame->ServerName,
            __frame->pAtInfo,
            __frame->pJobId);
        __frame->_StubMsg.BufferLength = 16;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pJobId;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_atsvc_NetrJobAdd( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_atsvc_NetrJobDel
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    ATSVC_HANDLE ServerName;
    DWORD MinJobId;
    DWORD MaxJobId;
};

static void __finally_atsvc_NetrJobDel( struct __frame_atsvc_NetrJobDel *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ServerName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[118]);




}

void __RPC_STUB atsvc_NetrJobDel( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_atsvc_NetrJobDel __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &atsvc_StubDesc);

    RpcExceptionInit( __server_filter, __finally_atsvc_NetrJobDel );
    __frame->ServerName = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[14]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->ServerName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[118],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->MinJobId = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->MaxJobId = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = NetrJobDel(
            __frame->ServerName,
            __frame->MinJobId,
            __frame->MaxJobId);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_atsvc_NetrJobDel( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_atsvc_NetrJobEnum
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    ATSVC_HANDLE ServerName;
    LPAT_ENUM_CONTAINER pEnumContainer;
    DWORD PreferedMaximumLength;
    DWORD _W0;
    LPDWORD pTotalEntries;
    LPDWORD pResumeHandle;
};

static void __finally_atsvc_NetrJobEnum( struct __frame_atsvc_NetrJobEnum *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ServerName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[118]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pEnumContainer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[106]);



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pResumeHandle,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[114]);


}

void __RPC_STUB atsvc_NetrJobEnum( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_atsvc_NetrJobEnum __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &atsvc_StubDesc);

    RpcExceptionInit( __server_filter, __finally_atsvc_NetrJobEnum );
    __frame->ServerName = 0;
    __frame->pEnumContainer = 0;
    __frame->pTotalEntries = 0;
    __frame->pResumeHandle = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[24]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->ServerName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[118],
                0);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->pEnumContainer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[90],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->PreferedMaximumLength = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->pResumeHandle,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[114],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->pTotalEntries = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = NetrJobEnum(
            __frame->ServerName,
            __frame->pEnumContainer,
            __frame->PreferedMaximumLength,
            __frame->pTotalEntries,
            __frame->pResumeHandle);
        __frame->_StubMsg.BufferLength = 32;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pEnumContainer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[90]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pEnumContainer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[90]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pTotalEntries;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pResumeHandle,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[114]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_atsvc_NetrJobEnum( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_atsvc_NetrJobGetInfo
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    ATSVC_HANDLE ServerName;
    DWORD JobId;
    LPAT_INFO _W0;
    LPAT_INFO * ppAtInfo;
};

static void __finally_atsvc_NetrJobGetInfo( struct __frame_atsvc_NetrJobGetInfo *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ServerName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[118]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppAtInfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[126]);


}

void __RPC_STUB atsvc_NetrJobGetInfo( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_atsvc_NetrJobGetInfo __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &atsvc_StubDesc);

    RpcExceptionInit( __server_filter, __finally_atsvc_NetrJobGetInfo );
    __frame->ServerName = 0;
    __frame->ppAtInfo = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[44]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->ServerName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[118],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->JobId = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->ppAtInfo = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = NetrJobGetInfo(
            __frame->ServerName,
            __frame->JobId,
            __frame->ppAtInfo);
        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppAtInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[126]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppAtInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[126]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_atsvc_NetrJobGetInfo( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

#if !defined(__RPC_WIN64__)
#error  Invalid build platform for this stub.
#endif

static const unsigned short atsvc_FormatStringOffsetTable[] =
{
    0,  /* NetrJobAdd */
    14,  /* NetrJobDel */
    24,  /* NetrJobEnum */
    44,  /* NetrJobGetInfo */
};

static const MIDL_STUB_DESC atsvc_StubDesc =
{
    (void *)& atsvc___RpcServerInterface,
    MIDL_user_allocate,
    MIDL_user_free,
    {
        0,
    },
    0,
    0,
    0,
    0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    0,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};

static RPC_DISPATCH_FUNCTION atsvc_table[] =
{
    atsvc_NetrJobAdd,
    atsvc_NetrJobDel,
    atsvc_NetrJobEnum,
    atsvc_NetrJobGetInfo,
    0
};
static RPC_DISPATCH_TABLE atsvc_v1_0_DispatchTable =
{
    4,
    atsvc_table
};

static const SERVER_ROUTINE atsvc_ServerRoutineTable[] =
{
    (SERVER_ROUTINE)NetrJobAdd,
    (SERVER_ROUTINE)NetrJobDel,
    (SERVER_ROUTINE)NetrJobEnum,
    (SERVER_ROUTINE)NetrJobGetInfo,
};

static const MIDL_SERVER_INFO atsvc_ServerInfo =
{
    &atsvc_StubDesc,
    atsvc_ServerRoutineTable,
    __MIDL_ProcFormatString.Format,
    atsvc_FormatStringOffsetTable,
    0,
    0,
    0,
    0
};

static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter ServerName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2),	/* type offset = 2 */
/* 4 (parameter pAtInfo) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1e),	/* type offset = 30 */
/* 8 (parameter pJobId) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x22),	/* type offset = 34 */
/* 12 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 14 (parameter ServerName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x26),	/* type offset = 38 */
/* 18 (parameter MinJobId) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 20 (parameter MaxJobId) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 22 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 24 (parameter ServerName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2a),	/* type offset = 42 */
/* 28 (parameter pEnumContainer) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x6a),	/* type offset = 106 */
/* 32 (parameter PreferedMaximumLength) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 34 (parameter pTotalEntries) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6e),	/* type offset = 110 */
/* 38 (parameter pResumeHandle) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x72),	/* type offset = 114 */
/* 42 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 44 (parameter ServerName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x76),	/* type offset = 118 */
/* 48 (parameter JobId) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 50 (parameter ppAtInfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x7e),	/* type offset = 126 */
/* 54 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (ATSVC_HANDLE) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/*  4 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 6 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/*  8 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 10 (struct _AT_INFO) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (26) */
        0xb8,	/* FC_INT3264 */
        0x08,	/* FC_LONG */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 26 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 28 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 30 (LPAT_INFO) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffea),	/* Offset= -22 (10) */
/* 34 (LPDWORD) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 38 (ATSVC_HANDLE) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 40 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 42 (ATSVC_HANDLE) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 44 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 46 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 48 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 50 (struct _AT_ENUM) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0xc),	/* Offset= 12 (68) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0xb8,	/* FC_INT3264 */
        0x08,	/* FC_LONG */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 68 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 70 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 72 (LPAT_ENUM) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer EntriesRead, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffdc),	/* Offset= -36 (50) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 90 (struct _AT_ENUM_CONTAINER) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (102) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 102 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe0),	/* Offset= -32 (72) */
/* 106 (LPAT_ENUM_CONTAINER) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffee),	/* Offset= -18 (90) */
/* 110 (LPDWORD) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 114 (LPDWORD) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 118 (ATSVC_HANDLE) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 120 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 122 (LPAT_INFO) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff8e),	/* Offset= -114 (10) */
/* 126 (LPAT_INFO *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (122) */
        0x0
    }
};


#endif /* _WIN64 */
