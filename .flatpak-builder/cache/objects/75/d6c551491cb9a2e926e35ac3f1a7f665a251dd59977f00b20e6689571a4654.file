/*** Autogenerated by WIDL 3.8 from atsvc.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __atsvc_h__
#define __atsvc_h__

/* Forward declarations */

/* Headers for imported files */

#include <oaidl.h>
#include <ocidl.h>

#ifdef __cplusplus
extern "C" {
#endif

/*****************************************************************************
 * atsvc interface (v1.0)
 */
#ifndef __atsvc_INTERFACE_DEFINED__
#define __atsvc_INTERFACE_DEFINED__

extern handle_t rpc_handle;
extern RPC_IF_HANDLE atsvc_v1_0_c_ifspec;
extern RPC_IF_HANDLE atsvc_v1_0_s_ifspec;
#define APE_AT_ID_NOT_FOUND (0xede)

typedef const WCHAR *ATSVC_HANDLE;
typedef struct _AT_ENUM {
    DWORD JobId;
    DWORD_PTR JobTime;
    DWORD DaysOfMonth;
    unsigned char DaysOfWeek;
    unsigned char Flags;
    WCHAR *Command;
} AT_ENUM;
typedef struct _AT_ENUM *PAT_ENUM;
typedef struct _AT_ENUM *LPAT_ENUM;
typedef struct _AT_INFO {
    DWORD_PTR JobTime;
    DWORD DaysOfMonth;
    unsigned char DaysOfWeek;
    unsigned char Flags;
    WCHAR *Command;
} AT_INFO;
typedef struct _AT_INFO *PAT_INFO;
typedef struct _AT_INFO *LPAT_INFO;
typedef struct _AT_ENUM_CONTAINER {
    DWORD EntriesRead;
    LPAT_ENUM Buffer;
} AT_ENUM_CONTAINER;
typedef struct _AT_ENUM_CONTAINER *PAT_ENUM_CONTAINER;
typedef struct _AT_ENUM_CONTAINER *LPAT_ENUM_CONTAINER;
DWORD __cdecl NetrJobAdd(
    ATSVC_HANDLE ServerName,
    LPAT_INFO pAtInfo,
    LPDWORD pJobId);

DWORD __cdecl NetrJobDel(
    ATSVC_HANDLE ServerName,
    DWORD MinJobId,
    DWORD MaxJobId);

DWORD __cdecl NetrJobEnum(
    ATSVC_HANDLE ServerName,
    LPAT_ENUM_CONTAINER pEnumContainer,
    DWORD PreferedMaximumLength,
    LPDWORD pTotalEntries,
    LPDWORD pResumeHandle);

DWORD __cdecl NetrJobGetInfo(
    ATSVC_HANDLE ServerName,
    DWORD JobId,
    LPAT_INFO *ppAtInfo);


#endif  /* __atsvc_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */

handle_t __RPC_USER ATSVC_HANDLE_bind(ATSVC_HANDLE);
void __RPC_USER ATSVC_HANDLE_unbind(ATSVC_HANDLE, handle_t);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __atsvc_h__ */
