/*** Autogenerated by WIDL 3.8 from xmlparser.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __xmlparser_h__
#define __xmlparser_h__

/* Forward declarations */

#ifndef __IXMLNodeFactory_FWD_DEFINED__
#define __IXMLNodeFactory_FWD_DEFINED__
typedef interface IXMLNodeFactory IXMLNodeFactory;
#ifdef __cplusplus
interface IXMLNodeFactory;
#endif /* __cplusplus */
#endif

#ifndef __IXMLNodeSource_FWD_DEFINED__
#define __IXMLNodeSource_FWD_DEFINED__
typedef interface IXMLNodeSource IXMLNodeSource;
#ifdef __cplusplus
interface IXMLNodeSource;
#endif /* __cplusplus */
#endif

#ifndef __IXMLParser_FWD_DEFINED__
#define __IXMLParser_FWD_DEFINED__
typedef interface IXMLParser IXMLParser;
#ifdef __cplusplus
interface IXMLParser;
#endif /* __cplusplus */
#endif

#ifndef __XMLParser_FWD_DEFINED__
#define __XMLParser_FWD_DEFINED__
#ifdef __cplusplus
typedef class XMLParser XMLParser;
#else
typedef struct XMLParser XMLParser;
#endif /* defined __cplusplus */
#endif /* defined __XMLParser_FWD_DEFINED__ */

#ifndef __XMLParser26_FWD_DEFINED__
#define __XMLParser26_FWD_DEFINED__
#ifdef __cplusplus
typedef class XMLParser26 XMLParser26;
#else
typedef struct XMLParser26 XMLParser26;
#endif /* defined __cplusplus */
#endif /* defined __XMLParser26_FWD_DEFINED__ */

#ifndef __XMLParser30_FWD_DEFINED__
#define __XMLParser30_FWD_DEFINED__
#ifdef __cplusplus
typedef class XMLParser30 XMLParser30;
#else
typedef struct XMLParser30 XMLParser30;
#endif /* defined __cplusplus */
#endif /* defined __XMLParser30_FWD_DEFINED__ */

#ifndef __XMLView_FWD_DEFINED__
#define __XMLView_FWD_DEFINED__
#ifdef __cplusplus
typedef class XMLView XMLView;
#else
typedef struct XMLView XMLView;
#endif /* defined __cplusplus */
#endif /* defined __XMLView_FWD_DEFINED__ */

/* Headers for imported files */

#include <unknwn.h>
#include <objidl.h>
#include <oaidl.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifndef __IXMLNodeSource_FWD_DEFINED__
#define __IXMLNodeSource_FWD_DEFINED__
typedef interface IXMLNodeSource IXMLNodeSource;
#ifdef __cplusplus
interface IXMLNodeSource;
#endif /* __cplusplus */
#endif

#ifndef __IXMLParser_FWD_DEFINED__
#define __IXMLParser_FWD_DEFINED__
typedef interface IXMLParser IXMLParser;
#ifdef __cplusplus
interface IXMLParser;
#endif /* __cplusplus */
#endif

#ifndef __IXMLNodeFactory_FWD_DEFINED__
#define __IXMLNodeFactory_FWD_DEFINED__
typedef interface IXMLNodeFactory IXMLNodeFactory;
#ifdef __cplusplus
interface IXMLNodeFactory;
#endif /* __cplusplus */
#endif

#ifndef __IMoniker_FWD_DEFINED__
#define __IMoniker_FWD_DEFINED__
typedef interface IMoniker IMoniker;
#ifdef __cplusplus
interface IMoniker;
#endif /* __cplusplus */
#endif

typedef enum __WIDL_xmlparser_generated_name_00000002 {
    XML_ELEMENT = 1,
    XML_ATTRIBUTE = 2,
    XML_PI = 3,
    XML_XMLDECL = 4,
    XML_DOCTYPE = 5,
    XML_DTDATTRIBUTE = 6,
    XML_ENTITYDECL = 7,
    XML_ELEMENTDECL = 8,
    XML_ATTLISTDECL = 9,
    XML_NOTATION = 10,
    XML_GROUP = 11,
    XML_INCLUDESECT = 12,
    XML_PCDATA = 13,
    XML_CDATA = 14,
    XML_IGNORESECT = 15,
    XML_COMMENT = 16,
    XML_ENTITYREF = 17,
    XML_WHITESPACE = 18,
    XML_NAME = 19,
    XML_NMTOKEN = 20,
    XML_STRING = 21,
    XML_PEREF = 22,
    XML_MODEL = 23,
    XML_ATTDEF = 24,
    XML_ATTTYPE = 25,
    XML_ATTPRESENCE = 26,
    XML_DTDSUBSET = 27,
    XML_LASTNODETYPE = 28
} XML_NODE_TYPE;
typedef enum __WIDL_xmlparser_generated_name_00000003 {
    XML_VERSION = XML_LASTNODETYPE,
    XML_ENCODING = 29,
    XML_STANDALONE = 30,
    XML_NS = 31,
    XML_XMLSPACE = 32,
    XML_XMLLANG = 33,
    XML_SYSTEM = 34,
    XML_PUBLIC = 35,
    XML_NDATA = 36,
    XML_AT_CDATA = 37,
    XML_AT_ID = 38,
    XML_AT_IDREF = 39,
    XML_AT_IDREFS = 40,
    XML_AT_ENTITY = 41,
    XML_AT_ENTITIES = 42,
    XML_AT_NMTOKEN = 43,
    XML_AT_NMTOKENS = 44,
    XML_AT_NOTATION = 45,
    XML_AT_REQUIRED = 46,
    XML_AT_IMPLIED = 47,
    XML_AT_FIXED = 48,
    XML_PENTITYDECL = 49,
    XML_EMPTY = 50,
    XML_ANY = 51,
    XML_MIXED = 52,
    XML_SEQUENCE = 53,
    XML_CHOICE = 54,
    XML_STAR = 55,
    XML_PLUS = 56,
    XML_QUESTIONMARK = 57,
    XML_LASTSUBNODETYPE = 58
} XML_NODE_SUBTYPE;
typedef enum __WIDL_xmlparser_generated_name_00000004 {
    XML_E_PARSEERRORBASE = 0xc00ce500,
    XML_E_ENDOFINPUT = XML_E_PARSEERRORBASE,
    XML_E_MISSINGEQUALS = 0xc00ce501,
    XML_E_MISSINGQUOTE = 0xc00ce502,
    XML_E_COMMENTSYNTAX = 0xc00ce503,
    XML_E_BADSTARTNAMECHAR = 0xc00ce504,
    XML_E_BADNAMECHAR = 0xc00ce505,
    XML_E_BADCHARINSTRING = 0xc00ce506,
    XML_E_XMLDECLSYNTAX = 0xc00ce507,
    XML_E_BADCHARDATA = 0xc00ce508,
    XML_E_MISSINGWHITESPACE = 0xc00ce509,
    XML_E_EXPECTINGTAGEND = 0xc00ce50a,
    XML_E_BADCHARINDTD = 0xc00ce50b,
    XML_E_BADCHARINDECL = 0xc00ce50c,
    XML_E_MISSINGSEMICOLON = 0xc00ce50d,
    XML_E_BADCHARINENTREF = 0xc00ce50e,
    XML_E_UNBALANCEDPAREN = 0xc00ce50f,
    XML_E_EXPECTINGOPENBRACKET = 0xc00ce510,
    XML_E_BADENDCONDSECT = 0xc00ce511,
    XML_E_INTERNALERROR = 0xc00ce512,
    XML_E_UNEXPECTED_WHITESPACE = 0xc00ce513,
    XML_E_INCOMPLETE_ENCODING = 0xc00ce514,
    XML_E_BADCHARINMIXEDMODEL = 0xc00ce515,
    XML_E_MISSING_STAR = 0xc00ce516,
    XML_E_BADCHARINMODEL = 0xc00ce517,
    XML_E_MISSING_PAREN = 0xc00ce518,
    XML_E_BADCHARINENUMERATION = 0xc00ce519,
    XML_E_PIDECLSYNTAX = 0xc00ce51a,
    XML_E_EXPECTINGCLOSEQUOTE = 0xc00ce51b,
    XML_E_MULTIPLE_COLONS = 0xc00ce51c,
    XML_E_INVALID_DECIMAL = 0xc00ce51d,
    XML_E_INVALID_HEXIDECIMAL = 0xc00ce51e,
    XML_E_INVALID_UNICODE = 0xc00ce51f,
    XML_E_WHITESPACEORQUESTIONMARK = 0xc00ce520,
    XML_E_ENDOFPE = 0xc00ce521,
    XML_E_TOKEN_ERROR = XML_E_PARSEERRORBASE + 0x50,
    XML_E_SUSPENDED = 0xc00ce550,
    XML_E_STOPPED = 0xc00ce551,
    XML_E_UNEXPECTEDENDTAG = 0xc00ce552,
    XML_E_UNCLOSEDTAG = 0xc00ce553,
    XML_E_DUPLICATEATTRIBUTE = 0xc00ce554,
    XML_E_MULTIPLEROOTS = 0xc00ce555,
    XML_E_INVALIDATROOTLEVEL = 0xc00ce556,
    XML_E_BADXMLDECL = 0xc00ce557,
    XML_E_MISSINGROOT = 0xc00ce558,
    XML_E_UNEXPECTEDEOF = 0xc00ce559,
    XML_E_BADPEREFINSUBSET = 0xc00ce55a,
    XML_E_PE_NESTING = 0xc00ce55b,
    XML_E_INVALID_CDATACLOSINGTAG = 0xc00ce55c,
    XML_E_UNCLOSEDPI = 0xc00ce55d,
    XML_E_UNCLOSEDSTARTTAG = 0xc00ce55e,
    XML_E_UNCLOSEDENDTAG = 0xc00ce55f,
    XML_E_UNCLOSEDSTRING = 0xc00ce560,
    XML_E_UNCLOSEDCOMMENT = 0xc00ce561,
    XML_E_UNCLOSEDDECL = 0xc00ce562,
    XML_E_UNCLOSEDMARKUPDECL = 0xc00ce563,
    XML_E_UNCLOSEDCDATA = 0xc00ce564,
    XML_E_BADDECLNAME = 0xc00ce565,
    XML_E_BADEXTERNALID = 0xc00ce566,
    XML_E_BADELEMENTINDTD = 0xc00ce567,
    XML_E_RESERVEDNAMESPACE = 0xc00ce568,
    XML_E_EXPECTING_VERSION = 0xc00ce569,
    XML_E_EXPECTING_ENCODING = 0xc00ce56a,
    XML_E_EXPECTING_NAME = 0xc00ce56b,
    XML_E_UNEXPECTED_ATTRIBUTE = 0xc00ce56c,
    XML_E_ENDTAGMISMATCH = 0xc00ce56d,
    XML_E_INVALIDENCODING = 0xc00ce56e,
    XML_E_INVALIDSWITCH = 0xc00ce56f,
    XML_E_EXPECTING_NDATA = 0xc00ce570,
    XML_E_INVALID_MODEL = 0xc00ce571,
    XML_E_INVALID_TYPE = 0xc00ce572,
    XML_E_INVALIDXMLSPACE = 0xc00ce573,
    XML_E_MULTI_ATTR_VALUE = 0xc00ce574,
    XML_E_INVALID_PRESENCE = 0xc00ce575,
    XML_E_BADXMLCASE = 0xc00ce576,
    XML_E_CONDSECTINSUBSET = 0xc00ce577,
    XML_E_CDATAINVALID = 0xc00ce578,
    XML_E_INVALID_STANDALONE = 0xc00ce579,
    XML_E_UNEXPECTED_STANDALONE = 0xc00ce57a,
    XML_E_DOCTYPE_IN_DTD = 0xc00ce57b,
    XML_E_MISSING_ENTITY = 0xc00ce57c,
    XML_E_ENTITYREF_INNAME = 0xc00ce57d,
    XML_E_DOCTYPE_OUTSIDE_PROLOG = 0xc00ce57e,
    XML_E_INVALID_VERSION = 0xc00ce57f,
    XML_E_DTDELEMENT_OUTSIDE_DTD = 0xc00ce580,
    XML_E_DUPLICATEDOCTYPE = 0xc00ce581,
    XML_E_RESOURCE = 0xc00ce582,
    XML_E_MISSINGNAME = 0xc00ce583,
    XML_E_LASTERROR = 0xc00ce584
} XML_ERROR_CODE;
typedef enum __WIDL_xmlparser_generated_name_00000005 {
    XMLPARSER_IDLE = 0,
    XMLPARSER_WAITING = 1,
    XMLPARSER_BUSY = 2,
    XMLPARSER_ERROR = 3,
    XMLPARSER_STOPPED = 4,
    XMLPARSER_SUSPENDED = 5
} XML_PARSER_STATE;
typedef enum __WIDL_xmlparser_generated_name_00000006 {
    XMLFLAG_FLOATINGAMP = 0x1,
    XMLFLAG_SHORTENDTAGS = 0x2,
    XMLFLAG_CASEINSENSITIVE = 0x4,
    XMLFLAG_NONAMESPACES = 0x8,
    XMLFLAG_NOWHITESPACE = 0x10,
    XMLFLAG_IE4QUIRKS = 0x20,
    XMLFLAG_NODTDNODES = 0x40,
    XMLFLAG_IE4COMPATIBILITY = 0xff,
    XMLFLAG_IE5COMPATIBILITY = 0x100,
    XMLFLAG_SAX = 0x200,
    XMLFLAG_NORMALIZELB = 0x400,
    XMLFLAG_IGNOREENCODING = 0x800,
    XMLFLAG_USEWINHTTP = 0x1000,
    XMLFLAG_RUNBUFFERONLY = 0x2000,
    XMLFLAG_PROHIBIT_DTD = 0x8000
} XML_PARSER_FLAGS;
typedef enum __WIDL_xmlparser_generated_name_00000007 {
    XMLNF_STARTDOCUMENT = 0,
    XMLNF_STARTDTD = 1,
    XMLNF_ENDDTD = 2,
    XMLNF_STARTDTDSUBSET = 3,
    XMLNF_ENDDTDSUBSET = 4,
    XMLNF_ENDPROLOG = 5,
    XMLNF_STARTENTITY = 6,
    XMLNF_ENDENTITY = 7,
    XMLNF_ENDDOCUMENT = 8,
    XMLNF_DATAAVAILABLE = 9,
    XMLNF_LASTEVENT = XMLNF_DATAAVAILABLE
} XML_NODEFACTORY_EVENT;
typedef struct _XML_NODE_INFO {
    DWORD dwSize;
    DWORD dwType;
    DWORD dwSubType;
    BOOL fTerminal;
    const WCHAR *pwcText;
    ULONG ulLen;
    ULONG ulNsPrefixLen;
    PVOID pNode;
    PVOID pReserved;
} XML_NODE_INFO;

DEFINE_GUID(LIBID_XMLPSR, 0xd242361c, 0x51a0, 0x11d2, 0x9c,0xaf, 0x00,0x60,0xb0,0xec,0x3d,0x39);

/*****************************************************************************
 * IXMLNodeFactory interface
 */
#ifndef __IXMLNodeFactory_INTERFACE_DEFINED__
#define __IXMLNodeFactory_INTERFACE_DEFINED__

DEFINE_GUID(IID_IXMLNodeFactory, 0xd242361f, 0x51a0, 0x11d2, 0x9c,0xaf, 0x00,0x60,0xb0,0xec,0x3d,0x39);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d242361f-51a0-11d2-9caf-0060b0ec3d39")
IXMLNodeFactory : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE NotifyEvent(
        IXMLNodeSource *pSource,
        XML_NODEFACTORY_EVENT iEvt) = 0;

    virtual HRESULT STDMETHODCALLTYPE BeginChildren(
        IXMLNodeSource *pSource,
        XML_NODE_INFO *pNodeInfo) = 0;

    virtual HRESULT STDMETHODCALLTYPE EndChildren(
        IXMLNodeSource *pSource,
        BOOL fEmpty,
        XML_NODE_INFO *pNodeInfo) = 0;

    virtual HRESULT STDMETHODCALLTYPE Error(
        IXMLNodeSource *pSource,
        HRESULT hrErrorCode,
        USHORT cNumRecs,
        XML_NODE_INFO **ppNodeInfo) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateNode(
        IXMLNodeSource *pSource,
        PVOID pNodeParent,
        USHORT cNumRecs,
        XML_NODE_INFO **ppNodeInfo) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IXMLNodeFactory, 0xd242361f, 0x51a0, 0x11d2, 0x9c,0xaf, 0x00,0x60,0xb0,0xec,0x3d,0x39)
#endif
#else
typedef struct IXMLNodeFactoryVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IXMLNodeFactory *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IXMLNodeFactory *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IXMLNodeFactory *This);

    /*** IXMLNodeFactory methods ***/
    HRESULT (STDMETHODCALLTYPE *NotifyEvent)(
        IXMLNodeFactory *This,
        IXMLNodeSource *pSource,
        XML_NODEFACTORY_EVENT iEvt);

    HRESULT (STDMETHODCALLTYPE *BeginChildren)(
        IXMLNodeFactory *This,
        IXMLNodeSource *pSource,
        XML_NODE_INFO *pNodeInfo);

    HRESULT (STDMETHODCALLTYPE *EndChildren)(
        IXMLNodeFactory *This,
        IXMLNodeSource *pSource,
        BOOL fEmpty,
        XML_NODE_INFO *pNodeInfo);

    HRESULT (STDMETHODCALLTYPE *Error)(
        IXMLNodeFactory *This,
        IXMLNodeSource *pSource,
        HRESULT hrErrorCode,
        USHORT cNumRecs,
        XML_NODE_INFO **ppNodeInfo);

    HRESULT (STDMETHODCALLTYPE *CreateNode)(
        IXMLNodeFactory *This,
        IXMLNodeSource *pSource,
        PVOID pNodeParent,
        USHORT cNumRecs,
        XML_NODE_INFO **ppNodeInfo);

    END_INTERFACE
} IXMLNodeFactoryVtbl;

interface IXMLNodeFactory {
    CONST_VTBL IXMLNodeFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IXMLNodeFactory_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IXMLNodeFactory_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IXMLNodeFactory_Release(This) (This)->lpVtbl->Release(This)
/*** IXMLNodeFactory methods ***/
#define IXMLNodeFactory_NotifyEvent(This,pSource,iEvt) (This)->lpVtbl->NotifyEvent(This,pSource,iEvt)
#define IXMLNodeFactory_BeginChildren(This,pSource,pNodeInfo) (This)->lpVtbl->BeginChildren(This,pSource,pNodeInfo)
#define IXMLNodeFactory_EndChildren(This,pSource,fEmpty,pNodeInfo) (This)->lpVtbl->EndChildren(This,pSource,fEmpty,pNodeInfo)
#define IXMLNodeFactory_Error(This,pSource,hrErrorCode,cNumRecs,ppNodeInfo) (This)->lpVtbl->Error(This,pSource,hrErrorCode,cNumRecs,ppNodeInfo)
#define IXMLNodeFactory_CreateNode(This,pSource,pNodeParent,cNumRecs,ppNodeInfo) (This)->lpVtbl->CreateNode(This,pSource,pNodeParent,cNumRecs,ppNodeInfo)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IXMLNodeFactory_QueryInterface(IXMLNodeFactory* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IXMLNodeFactory_AddRef(IXMLNodeFactory* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IXMLNodeFactory_Release(IXMLNodeFactory* This) {
    return This->lpVtbl->Release(This);
}
/*** IXMLNodeFactory methods ***/
static FORCEINLINE HRESULT IXMLNodeFactory_NotifyEvent(IXMLNodeFactory* This,IXMLNodeSource *pSource,XML_NODEFACTORY_EVENT iEvt) {
    return This->lpVtbl->NotifyEvent(This,pSource,iEvt);
}
static FORCEINLINE HRESULT IXMLNodeFactory_BeginChildren(IXMLNodeFactory* This,IXMLNodeSource *pSource,XML_NODE_INFO *pNodeInfo) {
    return This->lpVtbl->BeginChildren(This,pSource,pNodeInfo);
}
static FORCEINLINE HRESULT IXMLNodeFactory_EndChildren(IXMLNodeFactory* This,IXMLNodeSource *pSource,BOOL fEmpty,XML_NODE_INFO *pNodeInfo) {
    return This->lpVtbl->EndChildren(This,pSource,fEmpty,pNodeInfo);
}
static FORCEINLINE HRESULT IXMLNodeFactory_Error(IXMLNodeFactory* This,IXMLNodeSource *pSource,HRESULT hrErrorCode,USHORT cNumRecs,XML_NODE_INFO **ppNodeInfo) {
    return This->lpVtbl->Error(This,pSource,hrErrorCode,cNumRecs,ppNodeInfo);
}
static FORCEINLINE HRESULT IXMLNodeFactory_CreateNode(IXMLNodeFactory* This,IXMLNodeSource *pSource,PVOID pNodeParent,USHORT cNumRecs,XML_NODE_INFO **ppNodeInfo) {
    return This->lpVtbl->CreateNode(This,pSource,pNodeParent,cNumRecs,ppNodeInfo);
}
#endif
#endif

#endif


#endif  /* __IXMLNodeFactory_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IXMLNodeSource interface
 */
#ifndef __IXMLNodeSource_INTERFACE_DEFINED__
#define __IXMLNodeSource_INTERFACE_DEFINED__

DEFINE_GUID(IID_IXMLNodeSource, 0xd242361d, 0x51a0, 0x11d2, 0x9c,0xaf, 0x00,0x60,0xb0,0xec,0x3d,0x39);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d242361d-51a0-11d2-9caf-0060b0ec3d39")
IXMLNodeSource : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE SetFactory(
        IXMLNodeFactory *pNodeFactory) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetFactory(
        IXMLNodeFactory **ppNodeFactory) = 0;

    virtual HRESULT STDMETHODCALLTYPE Abort(
        BSTR bstrErrorInfo) = 0;

    virtual ULONG STDMETHODCALLTYPE GetLineNumber(
        ) = 0;

    virtual ULONG STDMETHODCALLTYPE GetLinePosition(
        ) = 0;

    virtual ULONG STDMETHODCALLTYPE GetAbsolutePosition(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetLineBuffer(
        const WCHAR **ppBuf,
        ULONG *Len,
        ULONG *StartPos) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetLastError(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetErrorInfo(
        BSTR *pErrorInfo) = 0;

    virtual ULONG STDMETHODCALLTYPE GetFlags(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetURL(
        const WCHAR **ppBuf) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IXMLNodeSource, 0xd242361d, 0x51a0, 0x11d2, 0x9c,0xaf, 0x00,0x60,0xb0,0xec,0x3d,0x39)
#endif
#else
typedef struct IXMLNodeSourceVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IXMLNodeSource *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IXMLNodeSource *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IXMLNodeSource *This);

    /*** IXMLNodeSource methods ***/
    HRESULT (STDMETHODCALLTYPE *SetFactory)(
        IXMLNodeSource *This,
        IXMLNodeFactory *pNodeFactory);

    HRESULT (STDMETHODCALLTYPE *GetFactory)(
        IXMLNodeSource *This,
        IXMLNodeFactory **ppNodeFactory);

    HRESULT (STDMETHODCALLTYPE *Abort)(
        IXMLNodeSource *This,
        BSTR bstrErrorInfo);

    ULONG (STDMETHODCALLTYPE *GetLineNumber)(
        IXMLNodeSource *This);

    ULONG (STDMETHODCALLTYPE *GetLinePosition)(
        IXMLNodeSource *This);

    ULONG (STDMETHODCALLTYPE *GetAbsolutePosition)(
        IXMLNodeSource *This);

    HRESULT (STDMETHODCALLTYPE *GetLineBuffer)(
        IXMLNodeSource *This,
        const WCHAR **ppBuf,
        ULONG *Len,
        ULONG *StartPos);

    HRESULT (STDMETHODCALLTYPE *GetLastError)(
        IXMLNodeSource *This);

    HRESULT (STDMETHODCALLTYPE *GetErrorInfo)(
        IXMLNodeSource *This,
        BSTR *pErrorInfo);

    ULONG (STDMETHODCALLTYPE *GetFlags)(
        IXMLNodeSource *This);

    HRESULT (STDMETHODCALLTYPE *GetURL)(
        IXMLNodeSource *This,
        const WCHAR **ppBuf);

    END_INTERFACE
} IXMLNodeSourceVtbl;

interface IXMLNodeSource {
    CONST_VTBL IXMLNodeSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IXMLNodeSource_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IXMLNodeSource_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IXMLNodeSource_Release(This) (This)->lpVtbl->Release(This)
/*** IXMLNodeSource methods ***/
#define IXMLNodeSource_SetFactory(This,pNodeFactory) (This)->lpVtbl->SetFactory(This,pNodeFactory)
#define IXMLNodeSource_GetFactory(This,ppNodeFactory) (This)->lpVtbl->GetFactory(This,ppNodeFactory)
#define IXMLNodeSource_Abort(This,bstrErrorInfo) (This)->lpVtbl->Abort(This,bstrErrorInfo)
#define IXMLNodeSource_GetLineNumber(This) (This)->lpVtbl->GetLineNumber(This)
#define IXMLNodeSource_GetLinePosition(This) (This)->lpVtbl->GetLinePosition(This)
#define IXMLNodeSource_GetAbsolutePosition(This) (This)->lpVtbl->GetAbsolutePosition(This)
#define IXMLNodeSource_GetLineBuffer(This,ppBuf,Len,StartPos) (This)->lpVtbl->GetLineBuffer(This,ppBuf,Len,StartPos)
#define IXMLNodeSource_GetLastError(This) (This)->lpVtbl->GetLastError(This)
#define IXMLNodeSource_GetErrorInfo(This,pErrorInfo) (This)->lpVtbl->GetErrorInfo(This,pErrorInfo)
#define IXMLNodeSource_GetFlags(This) (This)->lpVtbl->GetFlags(This)
#define IXMLNodeSource_GetURL(This,ppBuf) (This)->lpVtbl->GetURL(This,ppBuf)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IXMLNodeSource_QueryInterface(IXMLNodeSource* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IXMLNodeSource_AddRef(IXMLNodeSource* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IXMLNodeSource_Release(IXMLNodeSource* This) {
    return This->lpVtbl->Release(This);
}
/*** IXMLNodeSource methods ***/
static FORCEINLINE HRESULT IXMLNodeSource_SetFactory(IXMLNodeSource* This,IXMLNodeFactory *pNodeFactory) {
    return This->lpVtbl->SetFactory(This,pNodeFactory);
}
static FORCEINLINE HRESULT IXMLNodeSource_GetFactory(IXMLNodeSource* This,IXMLNodeFactory **ppNodeFactory) {
    return This->lpVtbl->GetFactory(This,ppNodeFactory);
}
static FORCEINLINE HRESULT IXMLNodeSource_Abort(IXMLNodeSource* This,BSTR bstrErrorInfo) {
    return This->lpVtbl->Abort(This,bstrErrorInfo);
}
static FORCEINLINE ULONG IXMLNodeSource_GetLineNumber(IXMLNodeSource* This) {
    return This->lpVtbl->GetLineNumber(This);
}
static FORCEINLINE ULONG IXMLNodeSource_GetLinePosition(IXMLNodeSource* This) {
    return This->lpVtbl->GetLinePosition(This);
}
static FORCEINLINE ULONG IXMLNodeSource_GetAbsolutePosition(IXMLNodeSource* This) {
    return This->lpVtbl->GetAbsolutePosition(This);
}
static FORCEINLINE HRESULT IXMLNodeSource_GetLineBuffer(IXMLNodeSource* This,const WCHAR **ppBuf,ULONG *Len,ULONG *StartPos) {
    return This->lpVtbl->GetLineBuffer(This,ppBuf,Len,StartPos);
}
static FORCEINLINE HRESULT IXMLNodeSource_GetLastError(IXMLNodeSource* This) {
    return This->lpVtbl->GetLastError(This);
}
static FORCEINLINE HRESULT IXMLNodeSource_GetErrorInfo(IXMLNodeSource* This,BSTR *pErrorInfo) {
    return This->lpVtbl->GetErrorInfo(This,pErrorInfo);
}
static FORCEINLINE ULONG IXMLNodeSource_GetFlags(IXMLNodeSource* This) {
    return This->lpVtbl->GetFlags(This);
}
static FORCEINLINE HRESULT IXMLNodeSource_GetURL(IXMLNodeSource* This,const WCHAR **ppBuf) {
    return This->lpVtbl->GetURL(This,ppBuf);
}
#endif
#endif

#endif


#endif  /* __IXMLNodeSource_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IXMLParser interface
 */
#ifndef __IXMLParser_INTERFACE_DEFINED__
#define __IXMLParser_INTERFACE_DEFINED__

DEFINE_GUID(IID_IXMLParser, 0xd242361e, 0x51a0, 0x11d2, 0x9c,0xaf, 0x00,0x60,0xb0,0xec,0x3d,0x39);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d242361e-51a0-11d2-9caf-0060b0ec3d39")
IXMLParser : public IXMLNodeSource
{
    virtual HRESULT STDMETHODCALLTYPE SetURL(
        const WCHAR *pszBaseUrl,
        const WCHAR *pszRelativeUrl,
        BOOL fAsync) = 0;

    virtual HRESULT STDMETHODCALLTYPE Load(
        BOOL fFullyAvailable,
        IMoniker *pimkName,
        LPBC pibc,
        DWORD grfMode) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetInput(
        IUnknown *pStm) = 0;

    virtual HRESULT STDMETHODCALLTYPE PushData(
        const char *pData,
        ULONG ulChars,
        BOOL fLastBuffer) = 0;

    virtual HRESULT STDMETHODCALLTYPE LoadDTD(
        const WCHAR *pszBaseUrl,
        const WCHAR *pszRelativeUrl) = 0;

    virtual HRESULT STDMETHODCALLTYPE LoadEntity(
        const WCHAR *pszBaseUrl,
        const WCHAR *pszRelativeUrl,
        BOOL fpe) = 0;

    virtual HRESULT STDMETHODCALLTYPE ParseEntity(
        const WCHAR *pwcText,
        ULONG ulLen,
        BOOL fpe) = 0;

    virtual HRESULT STDMETHODCALLTYPE ExpandEntity(
        const WCHAR *pwcText,
        ULONG ulLen) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetRoot(
        PVOID pRoot) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetRoot(
        PVOID *ppRoot) = 0;

    virtual HRESULT STDMETHODCALLTYPE Run(
        LONG lChars) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetParserState(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Suspend(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Reset(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetFlags(
        ULONG iFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetSecureBaseURL(
        const WCHAR *pszBaseUrl) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetSecureBaseURL(
        const WCHAR **ppwcBuf) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IXMLParser, 0xd242361e, 0x51a0, 0x11d2, 0x9c,0xaf, 0x00,0x60,0xb0,0xec,0x3d,0x39)
#endif
#else
typedef struct IXMLParserVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IXMLParser *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IXMLParser *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IXMLParser *This);

    /*** IXMLNodeSource methods ***/
    HRESULT (STDMETHODCALLTYPE *SetFactory)(
        IXMLParser *This,
        IXMLNodeFactory *pNodeFactory);

    HRESULT (STDMETHODCALLTYPE *GetFactory)(
        IXMLParser *This,
        IXMLNodeFactory **ppNodeFactory);

    HRESULT (STDMETHODCALLTYPE *Abort)(
        IXMLParser *This,
        BSTR bstrErrorInfo);

    ULONG (STDMETHODCALLTYPE *GetLineNumber)(
        IXMLParser *This);

    ULONG (STDMETHODCALLTYPE *GetLinePosition)(
        IXMLParser *This);

    ULONG (STDMETHODCALLTYPE *GetAbsolutePosition)(
        IXMLParser *This);

    HRESULT (STDMETHODCALLTYPE *GetLineBuffer)(
        IXMLParser *This,
        const WCHAR **ppBuf,
        ULONG *Len,
        ULONG *StartPos);

    HRESULT (STDMETHODCALLTYPE *GetLastError)(
        IXMLParser *This);

    HRESULT (STDMETHODCALLTYPE *GetErrorInfo)(
        IXMLParser *This,
        BSTR *pErrorInfo);

    ULONG (STDMETHODCALLTYPE *GetFlags)(
        IXMLParser *This);

    HRESULT (STDMETHODCALLTYPE *GetURL)(
        IXMLParser *This,
        const WCHAR **ppBuf);

    /*** IXMLParser methods ***/
    HRESULT (STDMETHODCALLTYPE *SetURL)(
        IXMLParser *This,
        const WCHAR *pszBaseUrl,
        const WCHAR *pszRelativeUrl,
        BOOL fAsync);

    HRESULT (STDMETHODCALLTYPE *Load)(
        IXMLParser *This,
        BOOL fFullyAvailable,
        IMoniker *pimkName,
        LPBC pibc,
        DWORD grfMode);

    HRESULT (STDMETHODCALLTYPE *SetInput)(
        IXMLParser *This,
        IUnknown *pStm);

    HRESULT (STDMETHODCALLTYPE *PushData)(
        IXMLParser *This,
        const char *pData,
        ULONG ulChars,
        BOOL fLastBuffer);

    HRESULT (STDMETHODCALLTYPE *LoadDTD)(
        IXMLParser *This,
        const WCHAR *pszBaseUrl,
        const WCHAR *pszRelativeUrl);

    HRESULT (STDMETHODCALLTYPE *LoadEntity)(
        IXMLParser *This,
        const WCHAR *pszBaseUrl,
        const WCHAR *pszRelativeUrl,
        BOOL fpe);

    HRESULT (STDMETHODCALLTYPE *ParseEntity)(
        IXMLParser *This,
        const WCHAR *pwcText,
        ULONG ulLen,
        BOOL fpe);

    HRESULT (STDMETHODCALLTYPE *ExpandEntity)(
        IXMLParser *This,
        const WCHAR *pwcText,
        ULONG ulLen);

    HRESULT (STDMETHODCALLTYPE *SetRoot)(
        IXMLParser *This,
        PVOID pRoot);

    HRESULT (STDMETHODCALLTYPE *GetRoot)(
        IXMLParser *This,
        PVOID *ppRoot);

    HRESULT (STDMETHODCALLTYPE *Run)(
        IXMLParser *This,
        LONG lChars);

    HRESULT (STDMETHODCALLTYPE *GetParserState)(
        IXMLParser *This);

    HRESULT (STDMETHODCALLTYPE *Suspend)(
        IXMLParser *This);

    HRESULT (STDMETHODCALLTYPE *Reset)(
        IXMLParser *This);

    HRESULT (STDMETHODCALLTYPE *SetFlags)(
        IXMLParser *This,
        ULONG iFlags);

    HRESULT (STDMETHODCALLTYPE *SetSecureBaseURL)(
        IXMLParser *This,
        const WCHAR *pszBaseUrl);

    HRESULT (STDMETHODCALLTYPE *GetSecureBaseURL)(
        IXMLParser *This,
        const WCHAR **ppwcBuf);

    END_INTERFACE
} IXMLParserVtbl;

interface IXMLParser {
    CONST_VTBL IXMLParserVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IXMLParser_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IXMLParser_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IXMLParser_Release(This) (This)->lpVtbl->Release(This)
/*** IXMLNodeSource methods ***/
#define IXMLParser_SetFactory(This,pNodeFactory) (This)->lpVtbl->SetFactory(This,pNodeFactory)
#define IXMLParser_GetFactory(This,ppNodeFactory) (This)->lpVtbl->GetFactory(This,ppNodeFactory)
#define IXMLParser_Abort(This,bstrErrorInfo) (This)->lpVtbl->Abort(This,bstrErrorInfo)
#define IXMLParser_GetLineNumber(This) (This)->lpVtbl->GetLineNumber(This)
#define IXMLParser_GetLinePosition(This) (This)->lpVtbl->GetLinePosition(This)
#define IXMLParser_GetAbsolutePosition(This) (This)->lpVtbl->GetAbsolutePosition(This)
#define IXMLParser_GetLineBuffer(This,ppBuf,Len,StartPos) (This)->lpVtbl->GetLineBuffer(This,ppBuf,Len,StartPos)
#define IXMLParser_GetLastError(This) (This)->lpVtbl->GetLastError(This)
#define IXMLParser_GetErrorInfo(This,pErrorInfo) (This)->lpVtbl->GetErrorInfo(This,pErrorInfo)
#define IXMLParser_GetFlags(This) (This)->lpVtbl->GetFlags(This)
#define IXMLParser_GetURL(This,ppBuf) (This)->lpVtbl->GetURL(This,ppBuf)
/*** IXMLParser methods ***/
#define IXMLParser_SetURL(This,pszBaseUrl,pszRelativeUrl,fAsync) (This)->lpVtbl->SetURL(This,pszBaseUrl,pszRelativeUrl,fAsync)
#define IXMLParser_Load(This,fFullyAvailable,pimkName,pibc,grfMode) (This)->lpVtbl->Load(This,fFullyAvailable,pimkName,pibc,grfMode)
#define IXMLParser_SetInput(This,pStm) (This)->lpVtbl->SetInput(This,pStm)
#define IXMLParser_PushData(This,pData,ulChars,fLastBuffer) (This)->lpVtbl->PushData(This,pData,ulChars,fLastBuffer)
#define IXMLParser_LoadDTD(This,pszBaseUrl,pszRelativeUrl) (This)->lpVtbl->LoadDTD(This,pszBaseUrl,pszRelativeUrl)
#define IXMLParser_LoadEntity(This,pszBaseUrl,pszRelativeUrl,fpe) (This)->lpVtbl->LoadEntity(This,pszBaseUrl,pszRelativeUrl,fpe)
#define IXMLParser_ParseEntity(This,pwcText,ulLen,fpe) (This)->lpVtbl->ParseEntity(This,pwcText,ulLen,fpe)
#define IXMLParser_ExpandEntity(This,pwcText,ulLen) (This)->lpVtbl->ExpandEntity(This,pwcText,ulLen)
#define IXMLParser_SetRoot(This,pRoot) (This)->lpVtbl->SetRoot(This,pRoot)
#define IXMLParser_GetRoot(This,ppRoot) (This)->lpVtbl->GetRoot(This,ppRoot)
#define IXMLParser_Run(This,lChars) (This)->lpVtbl->Run(This,lChars)
#define IXMLParser_GetParserState(This) (This)->lpVtbl->GetParserState(This)
#define IXMLParser_Suspend(This) (This)->lpVtbl->Suspend(This)
#define IXMLParser_Reset(This) (This)->lpVtbl->Reset(This)
#define IXMLParser_SetFlags(This,iFlags) (This)->lpVtbl->SetFlags(This,iFlags)
#define IXMLParser_SetSecureBaseURL(This,pszBaseUrl) (This)->lpVtbl->SetSecureBaseURL(This,pszBaseUrl)
#define IXMLParser_GetSecureBaseURL(This,ppwcBuf) (This)->lpVtbl->GetSecureBaseURL(This,ppwcBuf)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IXMLParser_QueryInterface(IXMLParser* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IXMLParser_AddRef(IXMLParser* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IXMLParser_Release(IXMLParser* This) {
    return This->lpVtbl->Release(This);
}
/*** IXMLNodeSource methods ***/
static FORCEINLINE HRESULT IXMLParser_SetFactory(IXMLParser* This,IXMLNodeFactory *pNodeFactory) {
    return This->lpVtbl->SetFactory(This,pNodeFactory);
}
static FORCEINLINE HRESULT IXMLParser_GetFactory(IXMLParser* This,IXMLNodeFactory **ppNodeFactory) {
    return This->lpVtbl->GetFactory(This,ppNodeFactory);
}
static FORCEINLINE HRESULT IXMLParser_Abort(IXMLParser* This,BSTR bstrErrorInfo) {
    return This->lpVtbl->Abort(This,bstrErrorInfo);
}
static FORCEINLINE ULONG IXMLParser_GetLineNumber(IXMLParser* This) {
    return This->lpVtbl->GetLineNumber(This);
}
static FORCEINLINE ULONG IXMLParser_GetLinePosition(IXMLParser* This) {
    return This->lpVtbl->GetLinePosition(This);
}
static FORCEINLINE ULONG IXMLParser_GetAbsolutePosition(IXMLParser* This) {
    return This->lpVtbl->GetAbsolutePosition(This);
}
static FORCEINLINE HRESULT IXMLParser_GetLineBuffer(IXMLParser* This,const WCHAR **ppBuf,ULONG *Len,ULONG *StartPos) {
    return This->lpVtbl->GetLineBuffer(This,ppBuf,Len,StartPos);
}
static FORCEINLINE HRESULT IXMLParser_GetLastError(IXMLParser* This) {
    return This->lpVtbl->GetLastError(This);
}
static FORCEINLINE HRESULT IXMLParser_GetErrorInfo(IXMLParser* This,BSTR *pErrorInfo) {
    return This->lpVtbl->GetErrorInfo(This,pErrorInfo);
}
static FORCEINLINE ULONG IXMLParser_GetFlags(IXMLParser* This) {
    return This->lpVtbl->GetFlags(This);
}
static FORCEINLINE HRESULT IXMLParser_GetURL(IXMLParser* This,const WCHAR **ppBuf) {
    return This->lpVtbl->GetURL(This,ppBuf);
}
/*** IXMLParser methods ***/
static FORCEINLINE HRESULT IXMLParser_SetURL(IXMLParser* This,const WCHAR *pszBaseUrl,const WCHAR *pszRelativeUrl,BOOL fAsync) {
    return This->lpVtbl->SetURL(This,pszBaseUrl,pszRelativeUrl,fAsync);
}
static FORCEINLINE HRESULT IXMLParser_Load(IXMLParser* This,BOOL fFullyAvailable,IMoniker *pimkName,LPBC pibc,DWORD grfMode) {
    return This->lpVtbl->Load(This,fFullyAvailable,pimkName,pibc,grfMode);
}
static FORCEINLINE HRESULT IXMLParser_SetInput(IXMLParser* This,IUnknown *pStm) {
    return This->lpVtbl->SetInput(This,pStm);
}
static FORCEINLINE HRESULT IXMLParser_PushData(IXMLParser* This,const char *pData,ULONG ulChars,BOOL fLastBuffer) {
    return This->lpVtbl->PushData(This,pData,ulChars,fLastBuffer);
}
static FORCEINLINE HRESULT IXMLParser_LoadDTD(IXMLParser* This,const WCHAR *pszBaseUrl,const WCHAR *pszRelativeUrl) {
    return This->lpVtbl->LoadDTD(This,pszBaseUrl,pszRelativeUrl);
}
static FORCEINLINE HRESULT IXMLParser_LoadEntity(IXMLParser* This,const WCHAR *pszBaseUrl,const WCHAR *pszRelativeUrl,BOOL fpe) {
    return This->lpVtbl->LoadEntity(This,pszBaseUrl,pszRelativeUrl,fpe);
}
static FORCEINLINE HRESULT IXMLParser_ParseEntity(IXMLParser* This,const WCHAR *pwcText,ULONG ulLen,BOOL fpe) {
    return This->lpVtbl->ParseEntity(This,pwcText,ulLen,fpe);
}
static FORCEINLINE HRESULT IXMLParser_ExpandEntity(IXMLParser* This,const WCHAR *pwcText,ULONG ulLen) {
    return This->lpVtbl->ExpandEntity(This,pwcText,ulLen);
}
static FORCEINLINE HRESULT IXMLParser_SetRoot(IXMLParser* This,PVOID pRoot) {
    return This->lpVtbl->SetRoot(This,pRoot);
}
static FORCEINLINE HRESULT IXMLParser_GetRoot(IXMLParser* This,PVOID *ppRoot) {
    return This->lpVtbl->GetRoot(This,ppRoot);
}
static FORCEINLINE HRESULT IXMLParser_Run(IXMLParser* This,LONG lChars) {
    return This->lpVtbl->Run(This,lChars);
}
static FORCEINLINE HRESULT IXMLParser_GetParserState(IXMLParser* This) {
    return This->lpVtbl->GetParserState(This);
}
static FORCEINLINE HRESULT IXMLParser_Suspend(IXMLParser* This) {
    return This->lpVtbl->Suspend(This);
}
static FORCEINLINE HRESULT IXMLParser_Reset(IXMLParser* This) {
    return This->lpVtbl->Reset(This);
}
static FORCEINLINE HRESULT IXMLParser_SetFlags(IXMLParser* This,ULONG iFlags) {
    return This->lpVtbl->SetFlags(This,iFlags);
}
static FORCEINLINE HRESULT IXMLParser_SetSecureBaseURL(IXMLParser* This,const WCHAR *pszBaseUrl) {
    return This->lpVtbl->SetSecureBaseURL(This,pszBaseUrl);
}
static FORCEINLINE HRESULT IXMLParser_GetSecureBaseURL(IXMLParser* This,const WCHAR **ppwcBuf) {
    return This->lpVtbl->GetSecureBaseURL(This,ppwcBuf);
}
#endif
#endif

#endif


#endif  /* __IXMLParser_INTERFACE_DEFINED__ */

/*****************************************************************************
 * XMLParser coclass
 */

DEFINE_GUID(CLSID_XMLParser, 0xf5078f19, 0xc551, 0x11d3, 0x89,0xb9, 0x00,0x00,0xf8,0x1f,0xe2,0x21);

#ifdef __cplusplus
class DECLSPEC_UUID("f5078f19-c551-11d3-89b9-0000f81fe221") XMLParser;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(XMLParser, 0xf5078f19, 0xc551, 0x11d3, 0x89,0xb9, 0x00,0x00,0xf8,0x1f,0xe2,0x21)
#endif
#endif

/*****************************************************************************
 * XMLParser26 coclass
 */

DEFINE_GUID(CLSID_XMLParser26, 0xf5078f20, 0xc551, 0x11d3, 0x89,0xb9, 0x00,0x00,0xf8,0x1f,0xe2,0x21);

#ifdef __cplusplus
class DECLSPEC_UUID("f5078f20-c551-11d3-89b9-0000f81fe221") XMLParser26;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(XMLParser26, 0xf5078f20, 0xc551, 0x11d3, 0x89,0xb9, 0x00,0x00,0xf8,0x1f,0xe2,0x21)
#endif
#endif

/*****************************************************************************
 * XMLParser30 coclass
 */

DEFINE_GUID(CLSID_XMLParser30, 0xf5078f31, 0xc551, 0x11d3, 0x89,0xb9, 0x00,0x00,0xf8,0x1f,0xe2,0x21);

#ifdef __cplusplus
class DECLSPEC_UUID("f5078f31-c551-11d3-89b9-0000f81fe221") XMLParser30;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(XMLParser30, 0xf5078f31, 0xc551, 0x11d3, 0x89,0xb9, 0x00,0x00,0xf8,0x1f,0xe2,0x21)
#endif
#endif

/*****************************************************************************
 * XMLView coclass
 */

DEFINE_GUID(CLSID_XMLView, 0x48123bc4, 0x99d9, 0x11d1, 0xa6,0xb3, 0x00,0xc0,0x4f,0xd9,0x15,0x55);

#ifdef __cplusplus
class DECLSPEC_UUID("48123bc4-99d9-11d1-a6b3-00c04fd91555") XMLView;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(XMLView, 0x48123bc4, 0x99d9, 0x11d1, 0xa6,0xb3, 0x00,0xc0,0x4f,0xd9,0x15,0x55)
#endif
#endif

/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __xmlparser_h__ */
