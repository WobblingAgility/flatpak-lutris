/*** Autogenerated by WIDL 3.8 from schrpc.idl - Do not edit ***/
#include <string.h>

#include "schrpc.h"

#ifndef DECLSPEC_HIDDEN
#define DECLSPEC_HIDDEN
#endif

#ifndef _WIN64

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

#define TYPE_FORMAT_STRING_SIZE 569
#define PROC_FORMAT_STRING_SIZE 321

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

/*****************************************************************************
 * ITaskSchedulerService interface
 */

handle_t rpc_handle;

static const RPC_CLIENT_INTERFACE ITaskSchedulerService___RpcClientInterface =
{
    sizeof(RPC_CLIENT_INTERFACE),
    {{0x86d35949,0x83c9,0x4044,{0xb4,0x24,0xdb,0x36,0x32,0x31,0xfd,0x0c}},{1,0}},
    {{0x8a885d04,0x1ceb,0x11c9,{0x9f,0xe8,0x08,0x00,0x2b,0x10,0x48,0x60}},{2,0}},
    0,
    0,
    0,
    0,
    0,
    0,
};
RPC_IF_HANDLE ITaskSchedulerService_v1_0_c_ifspec DECLSPEC_HIDDEN = (RPC_IF_HANDLE)& ITaskSchedulerService___RpcClientInterface;

static const MIDL_STUB_DESC ITaskSchedulerService_StubDesc;

struct __frame_SchRpcHighestVersion
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcHighestVersion( struct __frame_SchRpcHighestVersion *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcHighestVersion(
    DWORD *version)
{
    struct __frame_SchRpcHighestVersion __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcHighestVersion );
    if (!version) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 0);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 0;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[0]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *version = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcHighestVersion( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcRegisterTask
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcRegisterTask( struct __frame_SchRpcRegisterTask *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcRegisterTask(
    const WCHAR *path,
    const WCHAR *xml,
    DWORD flags,
    const WCHAR *sddl,
    DWORD task_logon_type,
    DWORD n_creds,
    const TASK_USER_CRED *creds,
    WCHAR **actual_path,
    TASK_XML_ERROR_INFO **xml_error_info)
{
    struct __frame_SchRpcRegisterTask __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcRegisterTask );
    if (!xml) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!actual_path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!xml_error_info) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 1);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 24;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6]);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)xml,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[12]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)sddl,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[14]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)n_creds;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)creds,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[98]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6]);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)xml,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[12]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)sddl,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[14]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = task_logon_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = n_creds;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)n_creds;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)creds,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[98]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[6]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&actual_path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[102],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&xml_error_info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[154],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcRegisterTask( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcRetrieveTask
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcRetrieveTask( struct __frame_SchRpcRetrieveTask *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcRetrieveTask(
    const WCHAR *path,
    const WCHAR *languages,
    ULONG *n_languages,
    WCHAR **xml)
{
    struct __frame_SchRpcRetrieveTask __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcRetrieveTask );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!languages) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!n_languages) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!xml) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 2);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[160]);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)languages,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[164]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[160]);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)languages,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[164]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *n_languages;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[38]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&xml,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[170],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcRetrieveTask( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcCreateFolder
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcCreateFolder( struct __frame_SchRpcCreateFolder *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcCreateFolder(
    const WCHAR *path,
    const WCHAR *sddl,
    DWORD flags)
{
    struct __frame_SchRpcCreateFolder __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcCreateFolder );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 3);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[180]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)sddl,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[182]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[180]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)sddl,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[182]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[56]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcCreateFolder( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcSetSecurity
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcSetSecurity( struct __frame_SchRpcSetSecurity *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcSetSecurity(
    const WCHAR *path,
    const WCHAR *sddl,
    DWORD flags)
{
    struct __frame_SchRpcSetSecurity __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcSetSecurity );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!sddl) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 4);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[188]);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)sddl,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[192]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[188]);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)sddl,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[192]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[68]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcSetSecurity( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcGetSecurity
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcGetSecurity( struct __frame_SchRpcGetSecurity *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcGetSecurity(
    const WCHAR *path,
    DWORD flags,
    WCHAR **sddl)
{
    struct __frame_SchRpcGetSecurity __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcGetSecurity );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!sddl) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 5);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[196]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[196]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[80]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&sddl,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[198],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcGetSecurity( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcEnumFolders
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcEnumFolders( struct __frame_SchRpcEnumFolders *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcEnumFolders(
    const WCHAR *path,
    DWORD flags,
    DWORD *start_index,
    DWORD n_requested,
    DWORD *n_names,
    TASK_NAMES *names)
{
    struct __frame_SchRpcEnumFolders __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcEnumFolders );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!start_index) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!n_names) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!names) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 6);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 24;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[208]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[208]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *start_index;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = n_requested;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[92]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *start_index = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *n_names = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&names,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[218],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcEnumFolders( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcEnumTasks
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcEnumTasks( struct __frame_SchRpcEnumTasks *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcEnumTasks(
    const WCHAR *path,
    DWORD flags,
    DWORD *start_index,
    DWORD n_requested,
    DWORD *n_names,
    TASK_NAMES *names)
{
    struct __frame_SchRpcEnumTasks __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcEnumTasks );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!start_index) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!n_names) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!names) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 7);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 24;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[260]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[260]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *start_index;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = n_requested;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[114]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *start_index = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *n_names = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&names,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[270],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcEnumTasks( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcEnumInstances
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcEnumInstances( struct __frame_SchRpcEnumInstances *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcEnumInstances(
    const WCHAR *path,
    DWORD flags,
    DWORD *n_guids,
    GUID **guids)
{
    struct __frame_SchRpcEnumInstances __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcEnumInstances );
    if (!n_guids) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!guids) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 8);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[310]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[310]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[136]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *n_guids = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&guids,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[354],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcEnumInstances( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcGetInstanceInfo
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcGetInstanceInfo( struct __frame_SchRpcGetInstanceInfo *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcGetInstanceInfo(
    GUID guid,
    WCHAR **path,
    DWORD *task_state,
    WCHAR **action,
    WCHAR **info,
    DWORD *n_instances,
    GUID **instances,
    DWORD *pid)
{
    struct __frame_SchRpcGetInstanceInfo __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcGetInstanceInfo );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!task_state) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!action) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!info) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!n_instances) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!instances) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!pid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 9);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 20;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)&guid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[324]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[152]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[358],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *task_state = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&action,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[370],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[378],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *n_instances = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&instances,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[408],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *pid = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcGetInstanceInfo( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcStopInstance
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcStopInstance( struct __frame_SchRpcStopInstance *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcStopInstance(
    GUID guid,
    DWORD flags)
{
    struct __frame_SchRpcStopInstance __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcStopInstance );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 10);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 28;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)&guid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[324]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[186]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcStopInstance( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcStop
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcStop( struct __frame_SchRpcStop *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcStop(
    const WCHAR *path,
    DWORD flags)
{
    struct __frame_SchRpcStop __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcStop );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 11);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[416]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[416]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[194]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcStop( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcRun
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcRun( struct __frame_SchRpcRun *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcRun(
    const WCHAR *path,
    DWORD n_args,
    const WCHAR **args,
    DWORD flags,
    DWORD session_id,
    const WCHAR *user,
    GUID *guid)
{
    struct __frame_SchRpcRun __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcRun );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!guid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 12);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 24;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[422]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)n_args;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)args,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[456]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)user,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[460]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[422]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = n_args;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)n_args;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)args,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[456]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = session_id;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)user,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[460]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[202]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&guid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[324],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcRun( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcDelete
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcDelete( struct __frame_SchRpcDelete *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcDelete(
    const WCHAR *path,
    DWORD flags)
{
    struct __frame_SchRpcDelete __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcDelete );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 13);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[470]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[470]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[226]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcDelete( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcRename
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcRename( struct __frame_SchRpcRename *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcRename(
    const WCHAR *path,
    const WCHAR *name,
    DWORD flags)
{
    struct __frame_SchRpcRename __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcRename );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!name) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 14);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[474]);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[478]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[474]);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[478]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[234]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcRename( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcScheduledRuntimes
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcScheduledRuntimes( struct __frame_SchRpcScheduledRuntimes *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcScheduledRuntimes(
    const WCHAR *path,
    SYSTEMTIME *start,
    SYSTEMTIME *end,
    DWORD flags,
    DWORD n_requested,
    DWORD *n_runtimes,
    SYSTEMTIME **runtimes)
{
    struct __frame_SchRpcScheduledRuntimes __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcScheduledRuntimes );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!n_runtimes) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!runtimes) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 15);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 68;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[482]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[482]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)start,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[498]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)end,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[502]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = n_requested;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[246]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *n_runtimes = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&runtimes,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[528],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcScheduledRuntimes( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcGetLastRunInfo
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcGetLastRunInfo( struct __frame_SchRpcGetLastRunInfo *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcGetLastRunInfo(
    const WCHAR *path,
    SYSTEMTIME *last_runtime,
    DWORD *last_return_code)
{
    struct __frame_SchRpcGetLastRunInfo __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcGetLastRunInfo );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!last_runtime) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!last_return_code) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 16);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 0;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[534]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[534]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[272]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&last_runtime,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[484],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *last_return_code = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcGetLastRunInfo( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcGetTaskInfo
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcGetTaskInfo( struct __frame_SchRpcGetTaskInfo *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcGetTaskInfo(
    const WCHAR *path,
    DWORD flags,
    DWORD *enabled,
    DWORD *task_state)
{
    struct __frame_SchRpcGetTaskInfo __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcGetTaskInfo );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!enabled) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!task_state) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 17);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[546]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[546]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[286]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *enabled = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *task_state = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcGetTaskInfo( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcGetNumberOfMissedRuns
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcGetNumberOfMissedRuns( struct __frame_SchRpcGetNumberOfMissedRuns *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcGetNumberOfMissedRuns(
    const WCHAR *path,
    DWORD *runs)
{
    struct __frame_SchRpcGetNumberOfMissedRuns __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcGetNumberOfMissedRuns );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!runs) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 18);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 0;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[558]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[558]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[302]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *runs = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcGetNumberOfMissedRuns( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcEnableTask
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcEnableTask( struct __frame_SchRpcEnableTask *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcEnableTask(
    const WCHAR *path,
    DWORD enabled)
{
    struct __frame_SchRpcEnableTask __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcEnableTask );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 19);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[566]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[566]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = enabled;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[312]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcEnableTask( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

#if !defined(__RPC_WIN32__)
#error  Invalid build platform for this stub.
#endif

static const MIDL_STUB_DESC ITaskSchedulerService_StubDesc =
{
    (void *)& ITaskSchedulerService___RpcClientInterface,
    MIDL_user_allocate,
    MIDL_user_free,
    {
        &rpc_handle,
    },
    0,
    0,
    0,
    0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    0,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};


static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter version) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2),	/* type offset = 2 */
/* 4 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 6 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6),	/* type offset = 6 */
/* 10 (parameter xml) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa),	/* type offset = 10 */
/* 14 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 16 (parameter sddl) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe),	/* type offset = 14 */
/* 20 (parameter task_logon_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 22 (parameter n_creds) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 24 (parameter creds) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x62),	/* type offset = 98 */
/* 28 (parameter actual_path) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6a),	/* type offset = 106 */
/* 32 (parameter xml_error_info) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x9a),	/* type offset = 154 */
/* 36 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 38 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9e),	/* type offset = 158 */
/* 42 (parameter languages) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa2),	/* type offset = 162 */
/* 46 (parameter n_languages) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa6),	/* type offset = 166 */
/* 50 (parameter xml) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xae),	/* type offset = 174 */
/* 54 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 56 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb2),	/* type offset = 178 */
/* 60 (parameter sddl) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb6),	/* type offset = 182 */
/* 64 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 66 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 68 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xba),	/* type offset = 186 */
/* 72 (parameter sddl) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xbe),	/* type offset = 190 */
/* 76 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 78 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 80 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc2),	/* type offset = 194 */
/* 84 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 86 (parameter sddl) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xca),	/* type offset = 202 */
/* 90 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 92 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xce),	/* type offset = 206 */
/* 96 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 98 (parameter start_index) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xd2),	/* type offset = 210 */
/* 102 (parameter n_requested) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 104 (parameter n_names) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xd6),	/* type offset = 214 */
/* 108 (parameter names) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe2),	/* type offset = 226 */
/* 112 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 114 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x102),	/* type offset = 258 */
/* 118 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 120 (parameter start_index) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x106),	/* type offset = 262 */
/* 124 (parameter n_requested) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 126 (parameter n_names) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x10a),	/* type offset = 266 */
/* 130 (parameter names) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x116),	/* type offset = 278 */
/* 134 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 136 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x136),	/* type offset = 310 */
/* 140 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 142 (parameter n_guids) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x13a),	/* type offset = 314 */
/* 146 (parameter guids) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x162),	/* type offset = 354 */
/* 150 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 152 (parameter guid) */
        0x4d,    /* FC_IN_PARAM */
        0x04,
        NdrFcShort(0x144),	/* type offset = 324 */
/* 156 (parameter path) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x16a),	/* type offset = 362 */
/* 160 (parameter task_state) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x16e),	/* type offset = 366 */
/* 164 (parameter action) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x176),	/* type offset = 374 */
/* 168 (parameter info) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x17e),	/* type offset = 382 */
/* 172 (parameter n_instances) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x182),	/* type offset = 386 */
/* 176 (parameter instances) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x198),	/* type offset = 408 */
/* 180 (parameter pid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x19c),	/* type offset = 412 */
/* 184 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 186 (parameter guid) */
        0x4d,    /* FC_IN_PARAM */
        0x04,
        NdrFcShort(0x144),	/* type offset = 324 */
/* 190 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 192 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 194 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1a0),	/* type offset = 416 */
/* 198 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 200 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 202 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1a4),	/* type offset = 420 */
/* 206 (parameter n_args) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 208 (parameter args) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1c8),	/* type offset = 456 */
/* 212 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 214 (parameter session_id) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 216 (parameter user) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1cc),	/* type offset = 460 */
/* 220 (parameter guid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1d0),	/* type offset = 464 */
/* 224 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 226 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1d4),	/* type offset = 468 */
/* 230 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 232 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 234 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1d8),	/* type offset = 472 */
/* 238 (parameter name) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1dc),	/* type offset = 476 */
/* 242 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 244 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 246 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1e0),	/* type offset = 480 */
/* 250 (parameter start) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1f2),	/* type offset = 498 */
/* 254 (parameter end) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1f6),	/* type offset = 502 */
/* 258 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 260 (parameter n_requested) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 262 (parameter n_runtimes) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1fa),	/* type offset = 506 */
/* 266 (parameter runtimes) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x210),	/* type offset = 528 */
/* 270 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 272 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x214),	/* type offset = 532 */
/* 276 (parameter last_runtime) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x218),	/* type offset = 536 */
/* 280 (parameter last_return_code) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x21c),	/* type offset = 540 */
/* 284 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 286 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x220),	/* type offset = 544 */
/* 290 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 292 (parameter enabled) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x224),	/* type offset = 548 */
/* 296 (parameter task_state) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x228),	/* type offset = 552 */
/* 300 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 302 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x22c),	/* type offset = 556 */
/* 306 (parameter runs) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x230),	/* type offset = 560 */
/* 310 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 312 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x234),	/* type offset = 564 */
/* 316 (parameter enabled) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 318 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 6 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/*  8 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 10 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 12 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 14 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 16 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 18 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 20 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 22 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 24 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 26 (const TASK_USER_CRED) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0xc),	/* 12 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
/* 38 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 40 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
/* 48 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 50 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 58 (const TASK_USER_CRED *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0xc),	/* 12 */
        0x29,	/* Corr desc: parameter n_creds, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x14),	/* offset = 20 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0xc),	/* Increment = 12 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x2),	/* Number of pointers = 2 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
/* 80 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 82 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
/* 88 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 90 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffbb),	/* Offset= -69 (26) */
        0x5b,	/* FC_END */
/* 98 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffd6),	/* Offset= -42 (58) */
/* 102 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (106) */
/* 106 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 108 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 110 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 112 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 114 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 116 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 118 (TASK_XML_ERROR_INFO) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x8),	/* Memory offset = 8 */
        NdrFcShort(0x8),	/* Buffer offset = 8 */
/* 130 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 132 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0xc),	/* Memory offset = 12 */
        NdrFcShort(0xc),	/* Buffer offset = 12 */
/* 140 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 142 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 150 (TASK_XML_ERROR_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (118) */
/* 154 (TASK_XML_ERROR_INFO **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (150) */
/* 158 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 160 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 162 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 164 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 166 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 170 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (174) */
/* 174 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 176 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 178 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 180 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 182 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 184 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 186 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 188 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 190 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 192 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 194 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 196 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 198 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (202) */
/* 202 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 204 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 206 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 208 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 210 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 214 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 218 (TASK_NAMES *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (222) */
/* 222 (TASK_NAMES) */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0x2),
/* 226 (TASK_NAMES) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter n_names, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x10),	/* offset = 16 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
/* 248 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 250 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x05,	/* FC_WCHAR */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 258 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 260 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 262 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 266 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 270 (TASK_NAMES *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (274) */
/* 274 (TASK_NAMES) */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0x2),
/* 278 (TASK_NAMES) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter n_names, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x10),	/* offset = 16 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
/* 300 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 302 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x05,	/* FC_WCHAR */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 310 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 312 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 314 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 318 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 324 (GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (318) */
        0x5b,	/* FC_END */
/* 336 (GUID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x29,	/* Corr desc: parameter n_guids, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x8),	/* offset = 8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffea),	/* Offset= -22 (324) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 350 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (336) */
/* 354 (GUID **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (350) */
/* 358 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (362) */
/* 362 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 364 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 366 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 370 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (374) */
/* 374 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 376 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 378 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (382) */
/* 382 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 384 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 386 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 390 (GUID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x29,	/* Corr desc: parameter n_instances, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x20),	/* offset = 32 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffb4),	/* Offset= -76 (324) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 404 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (390) */
/* 408 (GUID **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (404) */
/* 412 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 416 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 418 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 420 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 422 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 424 (const WCHAR **) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter n_args, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x05,	/* FC_WCHAR */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x05,	/* FC_WCHAR */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 456 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (424) */
/* 460 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 462 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 464 (GUID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xff72),	/* Offset= -142 (324) */
/* 468 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 470 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 472 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 474 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 476 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 478 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 480 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 482 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 484 (SYSTEMTIME) */
        0x15,	/* FC_STRUCT */
        0x1,	/* 1 */
        NdrFcShort(0x10),	/* 16 */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 498 (SYSTEMTIME *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (484) */
/* 502 (SYSTEMTIME *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (484) */
/* 506 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 510 (SYSTEMTIME *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x10),	/* 16 */
        0x29,	/* Corr desc: parameter n_runtimes, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x14),	/* offset = 20 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffdc),	/* Offset= -36 (484) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 524 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (510) */
/* 528 (SYSTEMTIME **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (524) */
/* 532 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 534 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 536 (SYSTEMTIME *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffca),	/* Offset= -54 (484) */
/* 540 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 544 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 546 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 548 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 552 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 556 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 558 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 560 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 564 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 566 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x0
    }
};


#else /* _WIN64 */

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

#define TYPE_FORMAT_STRING_SIZE 485
#define PROC_FORMAT_STRING_SIZE 321

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

/*****************************************************************************
 * ITaskSchedulerService interface
 */

handle_t rpc_handle;

static const RPC_CLIENT_INTERFACE ITaskSchedulerService___RpcClientInterface =
{
    sizeof(RPC_CLIENT_INTERFACE),
    {{0x86d35949,0x83c9,0x4044,{0xb4,0x24,0xdb,0x36,0x32,0x31,0xfd,0x0c}},{1,0}},
    {{0x8a885d04,0x1ceb,0x11c9,{0x9f,0xe8,0x08,0x00,0x2b,0x10,0x48,0x60}},{2,0}},
    0,
    0,
    0,
    0,
    0,
    0,
};
RPC_IF_HANDLE ITaskSchedulerService_v1_0_c_ifspec DECLSPEC_HIDDEN = (RPC_IF_HANDLE)& ITaskSchedulerService___RpcClientInterface;

static const MIDL_STUB_DESC ITaskSchedulerService_StubDesc;

struct __frame_SchRpcHighestVersion
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcHighestVersion( struct __frame_SchRpcHighestVersion *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcHighestVersion(
    DWORD *version)
{
    struct __frame_SchRpcHighestVersion __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcHighestVersion );
    if (!version) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 0);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 0;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[0]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *version = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcHighestVersion( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcRegisterTask
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcRegisterTask( struct __frame_SchRpcRegisterTask *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcRegisterTask(
    const WCHAR *path,
    const WCHAR *xml,
    DWORD flags,
    const WCHAR *sddl,
    DWORD task_logon_type,
    DWORD n_creds,
    const TASK_USER_CRED *creds,
    WCHAR **actual_path,
    TASK_XML_ERROR_INFO **xml_error_info)
{
    struct __frame_SchRpcRegisterTask __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcRegisterTask );
    if (!xml) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!actual_path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!xml_error_info) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 1);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 24;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6]);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)xml,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[12]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)sddl,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[14]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)n_creds;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)creds,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[66]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6]);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)xml,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[12]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)sddl,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[14]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = task_logon_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = n_creds;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)n_creds;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)creds,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[66]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[6]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&actual_path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[70],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&xml_error_info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[112],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcRegisterTask( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcRetrieveTask
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcRetrieveTask( struct __frame_SchRpcRetrieveTask *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcRetrieveTask(
    const WCHAR *path,
    const WCHAR *languages,
    ULONG *n_languages,
    WCHAR **xml)
{
    struct __frame_SchRpcRetrieveTask __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcRetrieveTask );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!languages) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!n_languages) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!xml) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 2);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[118]);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)languages,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[122]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[118]);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)languages,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[122]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *n_languages;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[38]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&xml,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[128],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcRetrieveTask( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcCreateFolder
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcCreateFolder( struct __frame_SchRpcCreateFolder *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcCreateFolder(
    const WCHAR *path,
    const WCHAR *sddl,
    DWORD flags)
{
    struct __frame_SchRpcCreateFolder __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcCreateFolder );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 3);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[138]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)sddl,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[140]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[138]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)sddl,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[140]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[56]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcCreateFolder( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcSetSecurity
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcSetSecurity( struct __frame_SchRpcSetSecurity *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcSetSecurity(
    const WCHAR *path,
    const WCHAR *sddl,
    DWORD flags)
{
    struct __frame_SchRpcSetSecurity __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcSetSecurity );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!sddl) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 4);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[146]);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)sddl,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[150]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[146]);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)sddl,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[150]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[68]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcSetSecurity( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcGetSecurity
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcGetSecurity( struct __frame_SchRpcGetSecurity *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcGetSecurity(
    const WCHAR *path,
    DWORD flags,
    WCHAR **sddl)
{
    struct __frame_SchRpcGetSecurity __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcGetSecurity );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!sddl) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 5);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[154]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[154]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[80]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&sddl,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[156],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcGetSecurity( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcEnumFolders
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcEnumFolders( struct __frame_SchRpcEnumFolders *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcEnumFolders(
    const WCHAR *path,
    DWORD flags,
    DWORD *start_index,
    DWORD n_requested,
    DWORD *n_names,
    TASK_NAMES *names)
{
    struct __frame_SchRpcEnumFolders __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcEnumFolders );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!start_index) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!n_names) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!names) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 6);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 24;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[166]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[166]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *start_index;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = n_requested;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[92]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *start_index = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *n_names = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&names,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[176],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcEnumFolders( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcEnumTasks
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcEnumTasks( struct __frame_SchRpcEnumTasks *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcEnumTasks(
    const WCHAR *path,
    DWORD flags,
    DWORD *start_index,
    DWORD n_requested,
    DWORD *n_names,
    TASK_NAMES *names)
{
    struct __frame_SchRpcEnumTasks __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcEnumTasks );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!start_index) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!n_names) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!names) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 7);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 24;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[204]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[204]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *start_index;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = n_requested;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[114]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *start_index = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *n_names = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&names,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[214],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcEnumTasks( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcEnumInstances
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcEnumInstances( struct __frame_SchRpcEnumInstances *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcEnumInstances(
    const WCHAR *path,
    DWORD flags,
    DWORD *n_guids,
    GUID **guids)
{
    struct __frame_SchRpcEnumInstances __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcEnumInstances );
    if (!n_guids) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!guids) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 8);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[240]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[240]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[136]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *n_guids = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&guids,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[284],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcEnumInstances( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcGetInstanceInfo
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcGetInstanceInfo( struct __frame_SchRpcGetInstanceInfo *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcGetInstanceInfo(
    GUID guid,
    WCHAR **path,
    DWORD *task_state,
    WCHAR **action,
    WCHAR **info,
    DWORD *n_instances,
    GUID **instances,
    DWORD *pid)
{
    struct __frame_SchRpcGetInstanceInfo __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcGetInstanceInfo );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!task_state) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!action) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!info) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!n_instances) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!instances) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!pid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 9);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 20;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)&guid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[254]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[152]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[288],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *task_state = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&action,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[300],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[308],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *n_instances = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&instances,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[338],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *pid = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcGetInstanceInfo( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcStopInstance
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcStopInstance( struct __frame_SchRpcStopInstance *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcStopInstance(
    GUID guid,
    DWORD flags)
{
    struct __frame_SchRpcStopInstance __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcStopInstance );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 10);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 28;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)&guid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[254]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[186]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcStopInstance( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcStop
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcStop( struct __frame_SchRpcStop *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcStop(
    const WCHAR *path,
    DWORD flags)
{
    struct __frame_SchRpcStop __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcStop );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 11);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[346]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[346]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[194]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcStop( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcRun
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcRun( struct __frame_SchRpcRun *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcRun(
    const WCHAR *path,
    DWORD n_args,
    const WCHAR **args,
    DWORD flags,
    DWORD session_id,
    const WCHAR *user,
    GUID *guid)
{
    struct __frame_SchRpcRun __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcRun );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!guid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 12);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 24;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[352]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)n_args;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)args,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[372]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)user,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[376]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[352]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = n_args;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)n_args;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)args,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[372]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = session_id;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)user,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[376]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[202]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&guid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[254],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcRun( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcDelete
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcDelete( struct __frame_SchRpcDelete *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcDelete(
    const WCHAR *path,
    DWORD flags)
{
    struct __frame_SchRpcDelete __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcDelete );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 13);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[386]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[386]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[226]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcDelete( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcRename
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcRename( struct __frame_SchRpcRename *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcRename(
    const WCHAR *path,
    const WCHAR *name,
    DWORD flags)
{
    struct __frame_SchRpcRename __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcRename );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!name) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 14);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[390]);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[394]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[390]);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[394]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[234]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcRename( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcScheduledRuntimes
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcScheduledRuntimes( struct __frame_SchRpcScheduledRuntimes *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcScheduledRuntimes(
    const WCHAR *path,
    SYSTEMTIME *start,
    SYSTEMTIME *end,
    DWORD flags,
    DWORD n_requested,
    DWORD *n_runtimes,
    SYSTEMTIME **runtimes)
{
    struct __frame_SchRpcScheduledRuntimes __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcScheduledRuntimes );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!n_runtimes) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!runtimes) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 15);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 68;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[398]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[398]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)start,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[414]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)end,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[418]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = n_requested;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[246]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *n_runtimes = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&runtimes,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[444],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcScheduledRuntimes( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcGetLastRunInfo
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcGetLastRunInfo( struct __frame_SchRpcGetLastRunInfo *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcGetLastRunInfo(
    const WCHAR *path,
    SYSTEMTIME *last_runtime,
    DWORD *last_return_code)
{
    struct __frame_SchRpcGetLastRunInfo __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcGetLastRunInfo );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!last_runtime) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!last_return_code) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 16);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 0;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[450]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[450]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[272]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&last_runtime,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[400],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *last_return_code = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcGetLastRunInfo( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcGetTaskInfo
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcGetTaskInfo( struct __frame_SchRpcGetTaskInfo *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcGetTaskInfo(
    const WCHAR *path,
    DWORD flags,
    DWORD *enabled,
    DWORD *task_state)
{
    struct __frame_SchRpcGetTaskInfo __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcGetTaskInfo );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!enabled) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!task_state) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 17);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[462]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[462]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[286]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *enabled = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *task_state = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcGetTaskInfo( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcGetNumberOfMissedRuns
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcGetNumberOfMissedRuns( struct __frame_SchRpcGetNumberOfMissedRuns *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcGetNumberOfMissedRuns(
    const WCHAR *path,
    DWORD *runs)
{
    struct __frame_SchRpcGetNumberOfMissedRuns __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcGetNumberOfMissedRuns );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!runs) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 18);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 0;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[474]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[474]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[302]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *runs = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcGetNumberOfMissedRuns( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_SchRpcEnableTask
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_SchRpcEnableTask( struct __frame_SchRpcEnableTask *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

HRESULT __cdecl SchRpcEnableTask(
    const WCHAR *path,
    DWORD enabled)
{
    struct __frame_SchRpcEnableTask __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_SchRpcEnableTask );
    if (!path) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &ITaskSchedulerService_StubDesc, 19);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[482]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[482]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = enabled;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[312]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_SchRpcEnableTask( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

#if !defined(__RPC_WIN64__)
#error  Invalid build platform for this stub.
#endif

static const MIDL_STUB_DESC ITaskSchedulerService_StubDesc =
{
    (void *)& ITaskSchedulerService___RpcClientInterface,
    MIDL_user_allocate,
    MIDL_user_free,
    {
        &rpc_handle,
    },
    0,
    0,
    0,
    0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    0,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};


static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter version) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2),	/* type offset = 2 */
/* 4 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 6 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6),	/* type offset = 6 */
/* 10 (parameter xml) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa),	/* type offset = 10 */
/* 14 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 16 (parameter sddl) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe),	/* type offset = 14 */
/* 20 (parameter task_logon_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 22 (parameter n_creds) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 24 (parameter creds) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x42),	/* type offset = 66 */
/* 28 (parameter actual_path) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4a),	/* type offset = 74 */
/* 32 (parameter xml_error_info) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x70),	/* type offset = 112 */
/* 36 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 38 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x74),	/* type offset = 116 */
/* 42 (parameter languages) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x78),	/* type offset = 120 */
/* 46 (parameter n_languages) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7c),	/* type offset = 124 */
/* 50 (parameter xml) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x84),	/* type offset = 132 */
/* 54 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 56 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x88),	/* type offset = 136 */
/* 60 (parameter sddl) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8c),	/* type offset = 140 */
/* 64 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 66 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 68 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x90),	/* type offset = 144 */
/* 72 (parameter sddl) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x94),	/* type offset = 148 */
/* 76 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 78 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 80 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x98),	/* type offset = 152 */
/* 84 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 86 (parameter sddl) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa0),	/* type offset = 160 */
/* 90 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 92 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa4),	/* type offset = 164 */
/* 96 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 98 (parameter start_index) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xa8),	/* type offset = 168 */
/* 102 (parameter n_requested) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 104 (parameter n_names) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xac),	/* type offset = 172 */
/* 108 (parameter names) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xb8),	/* type offset = 184 */
/* 112 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 114 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xca),	/* type offset = 202 */
/* 118 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 120 (parameter start_index) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xce),	/* type offset = 206 */
/* 124 (parameter n_requested) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 126 (parameter n_names) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xd2),	/* type offset = 210 */
/* 130 (parameter names) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xde),	/* type offset = 222 */
/* 134 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 136 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf0),	/* type offset = 240 */
/* 140 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 142 (parameter n_guids) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf4),	/* type offset = 244 */
/* 146 (parameter guids) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x11c),	/* type offset = 284 */
/* 150 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 152 (parameter guid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xfe),	/* type offset = 254 */
/* 156 (parameter path) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x124),	/* type offset = 292 */
/* 160 (parameter task_state) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x128),	/* type offset = 296 */
/* 164 (parameter action) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x130),	/* type offset = 304 */
/* 168 (parameter info) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x138),	/* type offset = 312 */
/* 172 (parameter n_instances) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x13c),	/* type offset = 316 */
/* 176 (parameter instances) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x152),	/* type offset = 338 */
/* 180 (parameter pid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x156),	/* type offset = 342 */
/* 184 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 186 (parameter guid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xfe),	/* type offset = 254 */
/* 190 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 192 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 194 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x15a),	/* type offset = 346 */
/* 198 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 200 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 202 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x15e),	/* type offset = 350 */
/* 206 (parameter n_args) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 208 (parameter args) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x174),	/* type offset = 372 */
/* 212 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 214 (parameter session_id) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 216 (parameter user) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x178),	/* type offset = 376 */
/* 220 (parameter guid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x17c),	/* type offset = 380 */
/* 224 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 226 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x180),	/* type offset = 384 */
/* 230 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 232 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 234 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x184),	/* type offset = 388 */
/* 238 (parameter name) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x188),	/* type offset = 392 */
/* 242 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 244 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 246 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x18c),	/* type offset = 396 */
/* 250 (parameter start) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x19e),	/* type offset = 414 */
/* 254 (parameter end) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1a2),	/* type offset = 418 */
/* 258 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 260 (parameter n_requested) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 262 (parameter n_runtimes) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1a6),	/* type offset = 422 */
/* 266 (parameter runtimes) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1bc),	/* type offset = 444 */
/* 270 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 272 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1c0),	/* type offset = 448 */
/* 276 (parameter last_runtime) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1c4),	/* type offset = 452 */
/* 280 (parameter last_return_code) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1c8),	/* type offset = 456 */
/* 284 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 286 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1cc),	/* type offset = 460 */
/* 290 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 292 (parameter enabled) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1d0),	/* type offset = 464 */
/* 296 (parameter task_state) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1d4),	/* type offset = 468 */
/* 300 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 302 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1d8),	/* type offset = 472 */
/* 306 (parameter runs) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1dc),	/* type offset = 476 */
/* 310 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 312 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1e0),	/* type offset = 480 */
/* 316 (parameter enabled) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 318 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 6 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/*  8 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 10 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 12 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 14 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 16 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 18 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 20 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 22 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 24 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 26 (const TASK_USER_CRED) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0x8),	/* Offset= 8 (40) */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x40,	/* FC_STRUCTPAD4 */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 40 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 42 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 44 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 46 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 48 (const TASK_USER_CRED *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter n_creds, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x28),	/* offset = 40 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffdc),	/* Offset= -36 (26) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 66 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (48) */
/* 70 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (74) */
/* 74 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 76 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 78 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 80 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 82 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 84 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 86 (TASK_XML_ERROR_INFO) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0x8),	/* Offset= 8 (100) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 100 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 102 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 104 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 106 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 108 (TASK_XML_ERROR_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (86) */
/* 112 (TASK_XML_ERROR_INFO **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (108) */
/* 116 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 118 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 120 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 122 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 124 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 128 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (132) */
/* 132 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 134 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 136 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 138 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 140 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 142 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 144 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 146 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 148 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 150 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 152 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 154 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 156 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (160) */
/* 160 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 162 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 164 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 166 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 168 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 172 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 176 (TASK_NAMES *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (180) */
/* 180 (TASK_NAMES) */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0x2),
/* 184 (TASK_NAMES) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter n_names, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x20),	/* offset = 32 */
        NdrFcLong(0xffffffff),	/* -1 */
/* 196 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 198 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 202 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 204 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 206 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 210 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 214 (TASK_NAMES *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (218) */
/* 218 (TASK_NAMES) */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0x2),
/* 222 (TASK_NAMES) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter n_names, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x20),	/* offset = 32 */
        NdrFcLong(0xffffffff),	/* -1 */
/* 234 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 236 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 240 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 242 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 244 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 248 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 254 (GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (248) */
        0x5b,	/* FC_END */
/* 266 (GUID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x29,	/* Corr desc: parameter n_guids, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x10),	/* offset = 16 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffea),	/* Offset= -22 (254) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 280 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (266) */
/* 284 (GUID **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (280) */
/* 288 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (292) */
/* 292 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 294 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 296 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 300 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (304) */
/* 304 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 306 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 308 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (312) */
/* 312 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 314 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 316 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 320 (GUID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x29,	/* Corr desc: parameter n_instances, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x28),	/* offset = 40 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffb4),	/* Offset= -76 (254) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 334 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (320) */
/* 338 (GUID **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (334) */
/* 342 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 346 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 348 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 350 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 352 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 354 (const WCHAR **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter n_args, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x05,	/* FC_WCHAR */
        0x5c,	/* FC_PAD */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 372 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (354) */
/* 376 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 378 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 380 (GUID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xff80),	/* Offset= -128 (254) */
/* 384 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 386 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 388 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 390 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 392 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 394 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 396 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 398 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 400 (SYSTEMTIME) */
        0x15,	/* FC_STRUCT */
        0x1,	/* 1 */
        NdrFcShort(0x10),	/* 16 */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 414 (SYSTEMTIME *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (400) */
/* 418 (SYSTEMTIME *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (400) */
/* 422 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 426 (SYSTEMTIME *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x10),	/* 16 */
        0x29,	/* Corr desc: parameter n_runtimes, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x28),	/* offset = 40 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffdc),	/* Offset= -36 (400) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 440 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (426) */
/* 444 (SYSTEMTIME **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (440) */
/* 448 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 450 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 452 (SYSTEMTIME *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffca),	/* Offset= -54 (400) */
/* 456 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 460 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 462 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 464 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 468 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 472 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 474 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 476 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 480 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 482 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x0
    }
};


#endif /* _WIN64 */
