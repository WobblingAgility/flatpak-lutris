/*** Autogenerated by WIDL 3.8 from row_server.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __row_server_h__
#define __row_server_h__

/* Forward declarations */

#ifndef __PSFactoryBuffer_FWD_DEFINED__
#define __PSFactoryBuffer_FWD_DEFINED__
#ifdef __cplusplus
typedef class PSFactoryBuffer PSFactoryBuffer;
#else
typedef struct PSFactoryBuffer PSFactoryBuffer;
#endif /* defined __cplusplus */
#endif /* defined __PSFactoryBuffer_FWD_DEFINED__ */

#ifndef __IWineRowServer_FWD_DEFINED__
#define __IWineRowServer_FWD_DEFINED__
typedef interface IWineRowServer IWineRowServer;
#ifdef __cplusplus
interface IWineRowServer;
#endif /* __cplusplus */
#endif

#ifndef __wine_row_server_FWD_DEFINED__
#define __wine_row_server_FWD_DEFINED__
#ifdef __cplusplus
typedef class wine_row_server wine_row_server;
#else
typedef struct wine_row_server wine_row_server;
#endif /* defined __cplusplus */
#endif /* defined __wine_row_server_FWD_DEFINED__ */

#ifndef __wine_row_proxy_FWD_DEFINED__
#define __wine_row_proxy_FWD_DEFINED__
#ifdef __cplusplus
typedef class wine_row_proxy wine_row_proxy;
#else
typedef struct wine_row_proxy wine_row_proxy;
#endif /* defined __cplusplus */
#endif /* defined __wine_row_proxy_FWD_DEFINED__ */

#ifndef __wine_rowset_server_FWD_DEFINED__
#define __wine_rowset_server_FWD_DEFINED__
#ifdef __cplusplus
typedef class wine_rowset_server wine_rowset_server;
#else
typedef struct wine_rowset_server wine_rowset_server;
#endif /* defined __cplusplus */
#endif /* defined __wine_rowset_server_FWD_DEFINED__ */

#ifndef __wine_rowset_proxy_FWD_DEFINED__
#define __wine_rowset_proxy_FWD_DEFINED__
#ifdef __cplusplus
typedef class wine_rowset_proxy wine_rowset_proxy;
#else
typedef struct wine_rowset_proxy wine_rowset_proxy;
#endif /* defined __cplusplus */
#endif /* defined __wine_rowset_proxy_FWD_DEFINED__ */

/* Headers for imported files */

#include <oledb.h>

#ifdef __cplusplus
extern "C" {
#endif

/*****************************************************************************
 * PSFactoryBuffer coclass
 */

DEFINE_GUID(CLSID_PSFactoryBuffer, 0x06210e88, 0x01f5, 0x11d1, 0xb5,0x12, 0x00,0x80,0xc7,0x81,0xc3,0x84);

#ifdef __cplusplus
class DECLSPEC_UUID("06210e88-01f5-11d1-b512-0080c781c384") PSFactoryBuffer;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(PSFactoryBuffer, 0x06210e88, 0x01f5, 0x11d1, 0xb5,0x12, 0x00,0x80,0xc7,0x81,0xc3,0x84)
#endif
#endif

/*****************************************************************************
 * IWineRowServer interface
 */
#ifndef __IWineRowServer_INTERFACE_DEFINED__
#define __IWineRowServer_INTERFACE_DEFINED__

typedef struct __WIDL_row_server_generated_name_00000011 {
    DBID columnid;
    DBLENGTH max_len;
    DBTYPE type;
    BYTE precision;
    BYTE scale;
} wine_getcolumns_in;
typedef struct __WIDL_row_server_generated_name_00000012 {
    VARIANT v;
    DBLENGTH data_len;
    DBSTATUS status;
} wine_getcolumns_out;
typedef struct __WIDL_row_server_generated_name_00000013 {
    VARIANT v;
    DBID columnid;
    DBLENGTH data_len;
    DBSTATUS status;
    DBLENGTH max_len;
    DBTYPE type;
    BYTE precision;
    BYTE scale;
} wine_setcolumns_in;
DEFINE_GUID(IID_IWineRowServer, 0x38248178, 0xcf6d, 0x11de, 0xab,0xe5, 0x00,0x0c,0x29,0x16,0xd8,0x65);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("38248178-cf6d-11de-abe5-000c2916d865")
IWineRowServer : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE SetInnerUnk(
        IUnknown *unknown) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetMarshal(
        IMarshal **marshal) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetColumns(
        DBORDINAL num_cols,
        wine_getcolumns_in *in_data,
        wine_getcolumns_out *out_cols) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetSourceRowset(
        REFIID riid,
        IUnknown **ppRowset,
        HROW *phRow) = 0;

    virtual HRESULT STDMETHODCALLTYPE Open(
        IUnknown *pUnkOuter,
        DBID *pColumnID,
        REFGUID rguidColumnType,
        DWORD dwBindFlags,
        REFIID riid,
        IUnknown **ppUnk) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetColumns(
        DBORDINAL num_cols,
        wine_setcolumns_in *in_data,
        DBSTATUS *status) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddRefRows(
        DBCOUNTITEM cRows,
        const HROW rghRows[],
        DBREFCOUNT rgRefCounts[],
        DBROWSTATUS rgRowStatus[]) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetData(
        HROW hRow,
        HACCESSOR hAccessor,
        BYTE *pData,
        DWORD size) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetNextRows(
        HCHAPTER hReserved,
        DBROWOFFSET lRowsOffset,
        DBROWCOUNT cRows,
        DBCOUNTITEM *pcRowObtained,
        HROW **prghRows) = 0;

    virtual HRESULT STDMETHODCALLTYPE ReleaseRows(
        DBCOUNTITEM cRows,
        const HROW rghRows[],
        DBROWOPTIONS rgRowOptions[],
        DBREFCOUNT rgRefCounts[],
        DBROWSTATUS rgRowStatus[]) = 0;

    virtual HRESULT STDMETHODCALLTYPE RestartPosition(
        HCHAPTER hReserved) = 0;

    virtual HRESULT STDMETHODCALLTYPE Compare(
        HCHAPTER hReserved,
        DBBKMARK cbBookmark1,
        const BYTE *pBookmark1,
        DBBKMARK cbBookmark2,
        const BYTE *pBookmark2,
        DBCOMPARE *pComparison) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetRowsAt(
        HWATCHREGION hReserved1,
        HCHAPTER hReserved2,
        DBBKMARK cbBookmark,
        const BYTE *pBookmark,
        DBROWOFFSET lRowsOffset,
        DBROWCOUNT cRows,
        DBCOUNTITEM *pcRowsObtained,
        HROW **prghRows) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetRowsByBookmark(
        HCHAPTER hReserved,
        DBCOUNTITEM cRows,
        const DBBKMARK rgcbBookmarks[],
        const BYTE * rgpBookmarks[],
        HROW rghRows[],
        DBROWSTATUS rgRowStatus[]) = 0;

    virtual HRESULT STDMETHODCALLTYPE Hash(
        HCHAPTER hReserved,
        DBBKMARK cBookmarks,
        const DBBKMARK rgcbBookmarks[],
        const BYTE * rgpBookmarks[],
        DBHASHVALUE rgHashedValues[],
        DBROWSTATUS rgBookmarkStatus[]) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetProperties(
        ULONG cPropertyIDSets,
        const DBPROPIDSET *rgPropertyIDSets,
        ULONG *pcPropertySets,
        DBPROPSET **prgPropertySets) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetReferencedRowset(
        DBORDINAL iOrdinal,
        REFIID riid,
        IUnknown **ppReferencedRowset) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetSpecification(
        REFIID riid,
        IUnknown **ppSpecification) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddRefAccessor(
        HACCESSOR hAccessor,
        DBREFCOUNT *pcRefCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateAccessor(
        DBACCESSORFLAGS dwAccessorFlags,
        DBCOUNTITEM cBindings,
        const DBBINDING *rgBindings,
        DBLENGTH cbRowSize,
        HACCESSOR *phAccessor,
        DBBINDSTATUS *rgStatus) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetBindings(
        HACCESSOR hAccessor,
        DBACCESSORFLAGS *pdwAccessorFlags,
        DBCOUNTITEM *pcBindings,
        DBBINDING **prgBindings) = 0;

    virtual HRESULT STDMETHODCALLTYPE ReleaseAccessor(
        HACCESSOR hAccessor,
        DBREFCOUNT *pcRefCount) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineRowServer, 0x38248178, 0xcf6d, 0x11de, 0xab,0xe5, 0x00,0x0c,0x29,0x16,0xd8,0x65)
#endif
#else
typedef struct IWineRowServerVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineRowServer *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineRowServer *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineRowServer *This);

    /*** IWineRowServer methods ***/
    HRESULT (STDMETHODCALLTYPE *SetInnerUnk)(
        IWineRowServer *This,
        IUnknown *unknown);

    HRESULT (STDMETHODCALLTYPE *GetMarshal)(
        IWineRowServer *This,
        IMarshal **marshal);

    HRESULT (STDMETHODCALLTYPE *GetColumns)(
        IWineRowServer *This,
        DBORDINAL num_cols,
        wine_getcolumns_in *in_data,
        wine_getcolumns_out *out_cols);

    HRESULT (STDMETHODCALLTYPE *GetSourceRowset)(
        IWineRowServer *This,
        REFIID riid,
        IUnknown **ppRowset,
        HROW *phRow);

    HRESULT (STDMETHODCALLTYPE *Open)(
        IWineRowServer *This,
        IUnknown *pUnkOuter,
        DBID *pColumnID,
        REFGUID rguidColumnType,
        DWORD dwBindFlags,
        REFIID riid,
        IUnknown **ppUnk);

    HRESULT (STDMETHODCALLTYPE *SetColumns)(
        IWineRowServer *This,
        DBORDINAL num_cols,
        wine_setcolumns_in *in_data,
        DBSTATUS *status);

    HRESULT (STDMETHODCALLTYPE *AddRefRows)(
        IWineRowServer *This,
        DBCOUNTITEM cRows,
        const HROW rghRows[],
        DBREFCOUNT rgRefCounts[],
        DBROWSTATUS rgRowStatus[]);

    HRESULT (STDMETHODCALLTYPE *GetData)(
        IWineRowServer *This,
        HROW hRow,
        HACCESSOR hAccessor,
        BYTE *pData,
        DWORD size);

    HRESULT (STDMETHODCALLTYPE *GetNextRows)(
        IWineRowServer *This,
        HCHAPTER hReserved,
        DBROWOFFSET lRowsOffset,
        DBROWCOUNT cRows,
        DBCOUNTITEM *pcRowObtained,
        HROW **prghRows);

    HRESULT (STDMETHODCALLTYPE *ReleaseRows)(
        IWineRowServer *This,
        DBCOUNTITEM cRows,
        const HROW rghRows[],
        DBROWOPTIONS rgRowOptions[],
        DBREFCOUNT rgRefCounts[],
        DBROWSTATUS rgRowStatus[]);

    HRESULT (STDMETHODCALLTYPE *RestartPosition)(
        IWineRowServer *This,
        HCHAPTER hReserved);

    HRESULT (STDMETHODCALLTYPE *Compare)(
        IWineRowServer *This,
        HCHAPTER hReserved,
        DBBKMARK cbBookmark1,
        const BYTE *pBookmark1,
        DBBKMARK cbBookmark2,
        const BYTE *pBookmark2,
        DBCOMPARE *pComparison);

    HRESULT (STDMETHODCALLTYPE *GetRowsAt)(
        IWineRowServer *This,
        HWATCHREGION hReserved1,
        HCHAPTER hReserved2,
        DBBKMARK cbBookmark,
        const BYTE *pBookmark,
        DBROWOFFSET lRowsOffset,
        DBROWCOUNT cRows,
        DBCOUNTITEM *pcRowsObtained,
        HROW **prghRows);

    HRESULT (STDMETHODCALLTYPE *GetRowsByBookmark)(
        IWineRowServer *This,
        HCHAPTER hReserved,
        DBCOUNTITEM cRows,
        const DBBKMARK rgcbBookmarks[],
        const BYTE * rgpBookmarks[],
        HROW rghRows[],
        DBROWSTATUS rgRowStatus[]);

    HRESULT (STDMETHODCALLTYPE *Hash)(
        IWineRowServer *This,
        HCHAPTER hReserved,
        DBBKMARK cBookmarks,
        const DBBKMARK rgcbBookmarks[],
        const BYTE * rgpBookmarks[],
        DBHASHVALUE rgHashedValues[],
        DBROWSTATUS rgBookmarkStatus[]);

    HRESULT (STDMETHODCALLTYPE *GetProperties)(
        IWineRowServer *This,
        ULONG cPropertyIDSets,
        const DBPROPIDSET *rgPropertyIDSets,
        ULONG *pcPropertySets,
        DBPROPSET **prgPropertySets);

    HRESULT (STDMETHODCALLTYPE *GetReferencedRowset)(
        IWineRowServer *This,
        DBORDINAL iOrdinal,
        REFIID riid,
        IUnknown **ppReferencedRowset);

    HRESULT (STDMETHODCALLTYPE *GetSpecification)(
        IWineRowServer *This,
        REFIID riid,
        IUnknown **ppSpecification);

    HRESULT (STDMETHODCALLTYPE *AddRefAccessor)(
        IWineRowServer *This,
        HACCESSOR hAccessor,
        DBREFCOUNT *pcRefCount);

    HRESULT (STDMETHODCALLTYPE *CreateAccessor)(
        IWineRowServer *This,
        DBACCESSORFLAGS dwAccessorFlags,
        DBCOUNTITEM cBindings,
        const DBBINDING *rgBindings,
        DBLENGTH cbRowSize,
        HACCESSOR *phAccessor,
        DBBINDSTATUS *rgStatus);

    HRESULT (STDMETHODCALLTYPE *GetBindings)(
        IWineRowServer *This,
        HACCESSOR hAccessor,
        DBACCESSORFLAGS *pdwAccessorFlags,
        DBCOUNTITEM *pcBindings,
        DBBINDING **prgBindings);

    HRESULT (STDMETHODCALLTYPE *ReleaseAccessor)(
        IWineRowServer *This,
        HACCESSOR hAccessor,
        DBREFCOUNT *pcRefCount);

    END_INTERFACE
} IWineRowServerVtbl;

interface IWineRowServer {
    CONST_VTBL IWineRowServerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWineRowServer_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineRowServer_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineRowServer_Release(This) (This)->lpVtbl->Release(This)
/*** IWineRowServer methods ***/
#define IWineRowServer_SetInnerUnk(This,unknown) (This)->lpVtbl->SetInnerUnk(This,unknown)
#define IWineRowServer_GetMarshal(This,marshal) (This)->lpVtbl->GetMarshal(This,marshal)
#define IWineRowServer_GetColumns(This,num_cols,in_data,out_cols) (This)->lpVtbl->GetColumns(This,num_cols,in_data,out_cols)
#define IWineRowServer_GetSourceRowset(This,riid,ppRowset,phRow) (This)->lpVtbl->GetSourceRowset(This,riid,ppRowset,phRow)
#define IWineRowServer_Open(This,pUnkOuter,pColumnID,rguidColumnType,dwBindFlags,riid,ppUnk) (This)->lpVtbl->Open(This,pUnkOuter,pColumnID,rguidColumnType,dwBindFlags,riid,ppUnk)
#define IWineRowServer_SetColumns(This,num_cols,in_data,status) (This)->lpVtbl->SetColumns(This,num_cols,in_data,status)
#define IWineRowServer_AddRefRows(This,cRows,rghRows,rgRefCounts,rgRowStatus) (This)->lpVtbl->AddRefRows(This,cRows,rghRows,rgRefCounts,rgRowStatus)
#define IWineRowServer_GetData(This,hRow,hAccessor,pData,size) (This)->lpVtbl->GetData(This,hRow,hAccessor,pData,size)
#define IWineRowServer_GetNextRows(This,hReserved,lRowsOffset,cRows,pcRowObtained,prghRows) (This)->lpVtbl->GetNextRows(This,hReserved,lRowsOffset,cRows,pcRowObtained,prghRows)
#define IWineRowServer_ReleaseRows(This,cRows,rghRows,rgRowOptions,rgRefCounts,rgRowStatus) (This)->lpVtbl->ReleaseRows(This,cRows,rghRows,rgRowOptions,rgRefCounts,rgRowStatus)
#define IWineRowServer_RestartPosition(This,hReserved) (This)->lpVtbl->RestartPosition(This,hReserved)
#define IWineRowServer_Compare(This,hReserved,cbBookmark1,pBookmark1,cbBookmark2,pBookmark2,pComparison) (This)->lpVtbl->Compare(This,hReserved,cbBookmark1,pBookmark1,cbBookmark2,pBookmark2,pComparison)
#define IWineRowServer_GetRowsAt(This,hReserved1,hReserved2,cbBookmark,pBookmark,lRowsOffset,cRows,pcRowsObtained,prghRows) (This)->lpVtbl->GetRowsAt(This,hReserved1,hReserved2,cbBookmark,pBookmark,lRowsOffset,cRows,pcRowsObtained,prghRows)
#define IWineRowServer_GetRowsByBookmark(This,hReserved,cRows,rgcbBookmarks,rgpBookmarks,rghRows,rgRowStatus) (This)->lpVtbl->GetRowsByBookmark(This,hReserved,cRows,rgcbBookmarks,rgpBookmarks,rghRows,rgRowStatus)
#define IWineRowServer_Hash(This,hReserved,cBookmarks,rgcbBookmarks,rgpBookmarks,rgHashedValues,rgBookmarkStatus) (This)->lpVtbl->Hash(This,hReserved,cBookmarks,rgcbBookmarks,rgpBookmarks,rgHashedValues,rgBookmarkStatus)
#define IWineRowServer_GetProperties(This,cPropertyIDSets,rgPropertyIDSets,pcPropertySets,prgPropertySets) (This)->lpVtbl->GetProperties(This,cPropertyIDSets,rgPropertyIDSets,pcPropertySets,prgPropertySets)
#define IWineRowServer_GetReferencedRowset(This,iOrdinal,riid,ppReferencedRowset) (This)->lpVtbl->GetReferencedRowset(This,iOrdinal,riid,ppReferencedRowset)
#define IWineRowServer_GetSpecification(This,riid,ppSpecification) (This)->lpVtbl->GetSpecification(This,riid,ppSpecification)
#define IWineRowServer_AddRefAccessor(This,hAccessor,pcRefCount) (This)->lpVtbl->AddRefAccessor(This,hAccessor,pcRefCount)
#define IWineRowServer_CreateAccessor(This,dwAccessorFlags,cBindings,rgBindings,cbRowSize,phAccessor,rgStatus) (This)->lpVtbl->CreateAccessor(This,dwAccessorFlags,cBindings,rgBindings,cbRowSize,phAccessor,rgStatus)
#define IWineRowServer_GetBindings(This,hAccessor,pdwAccessorFlags,pcBindings,prgBindings) (This)->lpVtbl->GetBindings(This,hAccessor,pdwAccessorFlags,pcBindings,prgBindings)
#define IWineRowServer_ReleaseAccessor(This,hAccessor,pcRefCount) (This)->lpVtbl->ReleaseAccessor(This,hAccessor,pcRefCount)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IWineRowServer_QueryInterface(IWineRowServer* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IWineRowServer_AddRef(IWineRowServer* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IWineRowServer_Release(IWineRowServer* This) {
    return This->lpVtbl->Release(This);
}
/*** IWineRowServer methods ***/
static FORCEINLINE HRESULT IWineRowServer_SetInnerUnk(IWineRowServer* This,IUnknown *unknown) {
    return This->lpVtbl->SetInnerUnk(This,unknown);
}
static FORCEINLINE HRESULT IWineRowServer_GetMarshal(IWineRowServer* This,IMarshal **marshal) {
    return This->lpVtbl->GetMarshal(This,marshal);
}
static FORCEINLINE HRESULT IWineRowServer_GetColumns(IWineRowServer* This,DBORDINAL num_cols,wine_getcolumns_in *in_data,wine_getcolumns_out *out_cols) {
    return This->lpVtbl->GetColumns(This,num_cols,in_data,out_cols);
}
static FORCEINLINE HRESULT IWineRowServer_GetSourceRowset(IWineRowServer* This,REFIID riid,IUnknown **ppRowset,HROW *phRow) {
    return This->lpVtbl->GetSourceRowset(This,riid,ppRowset,phRow);
}
static FORCEINLINE HRESULT IWineRowServer_Open(IWineRowServer* This,IUnknown *pUnkOuter,DBID *pColumnID,REFGUID rguidColumnType,DWORD dwBindFlags,REFIID riid,IUnknown **ppUnk) {
    return This->lpVtbl->Open(This,pUnkOuter,pColumnID,rguidColumnType,dwBindFlags,riid,ppUnk);
}
static FORCEINLINE HRESULT IWineRowServer_SetColumns(IWineRowServer* This,DBORDINAL num_cols,wine_setcolumns_in *in_data,DBSTATUS *status) {
    return This->lpVtbl->SetColumns(This,num_cols,in_data,status);
}
static FORCEINLINE HRESULT IWineRowServer_AddRefRows(IWineRowServer* This,DBCOUNTITEM cRows,const HROW rghRows[],DBREFCOUNT rgRefCounts[],DBROWSTATUS rgRowStatus[]) {
    return This->lpVtbl->AddRefRows(This,cRows,rghRows,rgRefCounts,rgRowStatus);
}
static FORCEINLINE HRESULT IWineRowServer_GetData(IWineRowServer* This,HROW hRow,HACCESSOR hAccessor,BYTE *pData,DWORD size) {
    return This->lpVtbl->GetData(This,hRow,hAccessor,pData,size);
}
static FORCEINLINE HRESULT IWineRowServer_GetNextRows(IWineRowServer* This,HCHAPTER hReserved,DBROWOFFSET lRowsOffset,DBROWCOUNT cRows,DBCOUNTITEM *pcRowObtained,HROW **prghRows) {
    return This->lpVtbl->GetNextRows(This,hReserved,lRowsOffset,cRows,pcRowObtained,prghRows);
}
static FORCEINLINE HRESULT IWineRowServer_ReleaseRows(IWineRowServer* This,DBCOUNTITEM cRows,const HROW rghRows[],DBROWOPTIONS rgRowOptions[],DBREFCOUNT rgRefCounts[],DBROWSTATUS rgRowStatus[]) {
    return This->lpVtbl->ReleaseRows(This,cRows,rghRows,rgRowOptions,rgRefCounts,rgRowStatus);
}
static FORCEINLINE HRESULT IWineRowServer_RestartPosition(IWineRowServer* This,HCHAPTER hReserved) {
    return This->lpVtbl->RestartPosition(This,hReserved);
}
static FORCEINLINE HRESULT IWineRowServer_Compare(IWineRowServer* This,HCHAPTER hReserved,DBBKMARK cbBookmark1,const BYTE *pBookmark1,DBBKMARK cbBookmark2,const BYTE *pBookmark2,DBCOMPARE *pComparison) {
    return This->lpVtbl->Compare(This,hReserved,cbBookmark1,pBookmark1,cbBookmark2,pBookmark2,pComparison);
}
static FORCEINLINE HRESULT IWineRowServer_GetRowsAt(IWineRowServer* This,HWATCHREGION hReserved1,HCHAPTER hReserved2,DBBKMARK cbBookmark,const BYTE *pBookmark,DBROWOFFSET lRowsOffset,DBROWCOUNT cRows,DBCOUNTITEM *pcRowsObtained,HROW **prghRows) {
    return This->lpVtbl->GetRowsAt(This,hReserved1,hReserved2,cbBookmark,pBookmark,lRowsOffset,cRows,pcRowsObtained,prghRows);
}
static FORCEINLINE HRESULT IWineRowServer_GetRowsByBookmark(IWineRowServer* This,HCHAPTER hReserved,DBCOUNTITEM cRows,const DBBKMARK rgcbBookmarks[],const BYTE * rgpBookmarks[],HROW rghRows[],DBROWSTATUS rgRowStatus[]) {
    return This->lpVtbl->GetRowsByBookmark(This,hReserved,cRows,rgcbBookmarks,rgpBookmarks,rghRows,rgRowStatus);
}
static FORCEINLINE HRESULT IWineRowServer_Hash(IWineRowServer* This,HCHAPTER hReserved,DBBKMARK cBookmarks,const DBBKMARK rgcbBookmarks[],const BYTE * rgpBookmarks[],DBHASHVALUE rgHashedValues[],DBROWSTATUS rgBookmarkStatus[]) {
    return This->lpVtbl->Hash(This,hReserved,cBookmarks,rgcbBookmarks,rgpBookmarks,rgHashedValues,rgBookmarkStatus);
}
static FORCEINLINE HRESULT IWineRowServer_GetProperties(IWineRowServer* This,ULONG cPropertyIDSets,const DBPROPIDSET *rgPropertyIDSets,ULONG *pcPropertySets,DBPROPSET **prgPropertySets) {
    return This->lpVtbl->GetProperties(This,cPropertyIDSets,rgPropertyIDSets,pcPropertySets,prgPropertySets);
}
static FORCEINLINE HRESULT IWineRowServer_GetReferencedRowset(IWineRowServer* This,DBORDINAL iOrdinal,REFIID riid,IUnknown **ppReferencedRowset) {
    return This->lpVtbl->GetReferencedRowset(This,iOrdinal,riid,ppReferencedRowset);
}
static FORCEINLINE HRESULT IWineRowServer_GetSpecification(IWineRowServer* This,REFIID riid,IUnknown **ppSpecification) {
    return This->lpVtbl->GetSpecification(This,riid,ppSpecification);
}
static FORCEINLINE HRESULT IWineRowServer_AddRefAccessor(IWineRowServer* This,HACCESSOR hAccessor,DBREFCOUNT *pcRefCount) {
    return This->lpVtbl->AddRefAccessor(This,hAccessor,pcRefCount);
}
static FORCEINLINE HRESULT IWineRowServer_CreateAccessor(IWineRowServer* This,DBACCESSORFLAGS dwAccessorFlags,DBCOUNTITEM cBindings,const DBBINDING *rgBindings,DBLENGTH cbRowSize,HACCESSOR *phAccessor,DBBINDSTATUS *rgStatus) {
    return This->lpVtbl->CreateAccessor(This,dwAccessorFlags,cBindings,rgBindings,cbRowSize,phAccessor,rgStatus);
}
static FORCEINLINE HRESULT IWineRowServer_GetBindings(IWineRowServer* This,HACCESSOR hAccessor,DBACCESSORFLAGS *pdwAccessorFlags,DBCOUNTITEM *pcBindings,DBBINDING **prgBindings) {
    return This->lpVtbl->GetBindings(This,hAccessor,pdwAccessorFlags,pcBindings,prgBindings);
}
static FORCEINLINE HRESULT IWineRowServer_ReleaseAccessor(IWineRowServer* This,HACCESSOR hAccessor,DBREFCOUNT *pcRefCount) {
    return This->lpVtbl->ReleaseAccessor(This,hAccessor,pcRefCount);
}
#endif
#endif

#endif


#endif  /* __IWineRowServer_INTERFACE_DEFINED__ */

/*****************************************************************************
 * wine_row_server coclass
 */

DEFINE_GUID(CLSID_wine_row_server, 0x38248178, 0xcf6d, 0x11de, 0xab,0xe5, 0x00,0x0c,0x29,0x16,0xd8,0x65);

#ifdef __cplusplus
class DECLSPEC_UUID("38248178-cf6d-11de-abe5-000c2916d865") wine_row_server;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(wine_row_server, 0x38248178, 0xcf6d, 0x11de, 0xab,0xe5, 0x00,0x0c,0x29,0x16,0xd8,0x65)
#endif
#endif

/*****************************************************************************
 * wine_row_proxy coclass
 */

DEFINE_GUID(CLSID_wine_row_proxy, 0x38248179, 0xcf6d, 0x11de, 0xab,0xe5, 0x00,0x0c,0x29,0x16,0xd8,0x65);

#ifdef __cplusplus
class DECLSPEC_UUID("38248179-cf6d-11de-abe5-000c2916d865") wine_row_proxy;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(wine_row_proxy, 0x38248179, 0xcf6d, 0x11de, 0xab,0xe5, 0x00,0x0c,0x29,0x16,0xd8,0x65)
#endif
#endif

/*****************************************************************************
 * wine_rowset_server coclass
 */

DEFINE_GUID(CLSID_wine_rowset_server, 0x3824817a, 0xcf6d, 0x11de, 0xab,0xe5, 0x00,0x0c,0x29,0x16,0xd8,0x65);

#ifdef __cplusplus
class DECLSPEC_UUID("3824817a-cf6d-11de-abe5-000c2916d865") wine_rowset_server;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(wine_rowset_server, 0x3824817a, 0xcf6d, 0x11de, 0xab,0xe5, 0x00,0x0c,0x29,0x16,0xd8,0x65)
#endif
#endif

/*****************************************************************************
 * wine_rowset_proxy coclass
 */

DEFINE_GUID(CLSID_wine_rowset_proxy, 0x3824817b, 0xcf6d, 0x11de, 0xab,0xe5, 0x00,0x0c,0x29,0x16,0xd8,0x65);

#ifdef __cplusplus
class DECLSPEC_UUID("3824817b-cf6d-11de-abe5-000c2916d865") wine_rowset_proxy;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(wine_rowset_proxy, 0x3824817b, 0xcf6d, 0x11de, 0xab,0xe5, 0x00,0x0c,0x29,0x16,0xd8,0x65)
#endif
#endif

extern HRESULT create_row_server( IUnknown*, LPVOID* ) DECLSPEC_HIDDEN;
extern HRESULT create_row_marshal( IUnknown*, LPVOID* ) DECLSPEC_HIDDEN;
extern HRESULT create_rowset_server( IUnknown*, LPVOID* ) DECLSPEC_HIDDEN;
extern HRESULT create_rowset_marshal( IUnknown*, LPVOID* ) DECLSPEC_HIDDEN;
/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER VARIANT_UserSize     (ULONG *, ULONG, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserMarshal  (ULONG *, unsigned char *, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserUnmarshal(ULONG *, unsigned char *, VARIANT *);
void            __RPC_USER VARIANT_UserFree     (ULONG *, VARIANT *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __row_server_h__ */
