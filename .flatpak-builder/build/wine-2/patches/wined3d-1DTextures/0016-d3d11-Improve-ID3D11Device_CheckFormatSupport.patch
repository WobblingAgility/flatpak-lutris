From 59893987de8d756b0a6db1e5b4bd46727a20d5b6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
Date: Sun, 4 Jun 2017 22:04:39 +0200
Subject: [PATCH] d3d11: Improve ID3D11Device_CheckFormatSupport.

---
 dlls/d3d11/device.c      | 17 ++++++++++++-----
 dlls/d3d11/tests/d3d11.c | 33 ++++++++++++++++++++++++++++++++-
 dlls/wined3d/directx.c   | 21 ++++++++++++++++++++-
 3 files changed, 64 insertions(+), 7 deletions(-)

diff --git a/dlls/d3d11/device.c b/dlls/d3d11/device.c
index 25308c2..1183335 100644
--- a/dlls/d3d11/device.c
+++ b/dlls/d3d11/device.c
@@ -3224,17 +3224,24 @@ static HRESULT STDMETHODCALLTYPE d3d11_device_CheckFormatSupport(ID3D11Device *i
     }
     flag_mapping[] =
     {
-        {WINED3D_RTYPE_TEXTURE_2D, WINED3DUSAGE_TEXTURE,      D3D11_FORMAT_SUPPORT_TEXTURE2D},
-        {WINED3D_RTYPE_TEXTURE_3D, WINED3DUSAGE_TEXTURE,      D3D11_FORMAT_SUPPORT_TEXTURE3D},
-        {WINED3D_RTYPE_NONE,       WINED3DUSAGE_RENDERTARGET, D3D11_FORMAT_SUPPORT_RENDER_TARGET},
-        {WINED3D_RTYPE_NONE,       WINED3DUSAGE_DEPTHSTENCIL, D3D11_FORMAT_SUPPORT_DEPTH_STENCIL},
+        {WINED3D_RTYPE_TEXTURE_1D, WINED3DUSAGE_TEXTURE,             D3D11_FORMAT_SUPPORT_TEXTURE1D | D3D11_FORMAT_SUPPORT_MIP},
+        {WINED3D_RTYPE_TEXTURE_2D, WINED3DUSAGE_TEXTURE,             D3D11_FORMAT_SUPPORT_TEXTURE2D | D3D11_FORMAT_SUPPORT_MIP},
+        {WINED3D_RTYPE_TEXTURE_3D, WINED3DUSAGE_TEXTURE,             D3D11_FORMAT_SUPPORT_TEXTURE3D | D3D11_FORMAT_SUPPORT_MIP},
+        {WINED3D_RTYPE_NONE,       WINED3DUSAGE_RENDERTARGET,        D3D11_FORMAT_SUPPORT_RENDER_TARGET | D3D11_FORMAT_SUPPORT_DISPLAY},
+        {WINED3D_RTYPE_NONE,       WINED3DUSAGE_DEPTHSTENCIL,        D3D11_FORMAT_SUPPORT_DEPTH_STENCIL},
+        {WINED3D_RTYPE_BUFFER,     WINED3DUSAGE_QUERY_VERTEXTEXTURE, D3D11_FORMAT_SUPPORT_BUFFER |
+            D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER | D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER | D3D11_FORMAT_SUPPORT_SO_BUFFER
+        },
+        {WINED3D_RTYPE_TEXTURE_2D, WINED3DUSAGE_TEXTURE | WINED3DUSAGE_LEGACY_CUBEMAP, D3D11_FORMAT_SUPPORT_TEXTURECUBE},
+        {WINED3D_RTYPE_TEXTURE_2D, WINED3DUSAGE_TEXTURE | WINED3DUSAGE_QUERY_GENMIPMAP,  D3D11_FORMAT_SUPPORT_MIP_AUTOGEN},
+        {WINED3D_RTYPE_TEXTURE_2D, WINED3DUSAGE_TEXTURE | WINED3DUSAGE_QUERY_POSTPIXELSHADER_BLENDING, D3D11_FORMAT_SUPPORT_BLENDABLE},
     };
     HRESULT hr;
 
     FIXME("iface %p, format %u, format_support %p partial-stub!\n", iface, format, format_support);
 
     wined3d_format = wined3dformat_from_dxgi_format(format);
-    if (format && !wined3d_format)
+    if ((format && !wined3d_format) || wined3d_format == WINED3DFMT_UNKNOWN)
     {
         WARN("Invalid format %#x.\n", format);
         *format_support = 0;
diff --git a/dlls/d3d11/tests/d3d11.c b/dlls/d3d11/tests/d3d11.c
index 6d7fccd..82b746f 100644
--- a/dlls/d3d11/tests/d3d11.c
+++ b/dlls/d3d11/tests/d3d11.c
@@ -16037,7 +16037,8 @@ static void check_format_support(const unsigned int *format_support, D3D_FEATURE
 
         if (formats[i].fl_required <= feature_level)
         {
-            todo_wine ok(supported, "Format %#x - %s not supported, feature_level %#x, format support %#x.\n",
+            todo_wine_if(formats[i].format == DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM)
+            ok(supported, "Format %#x - %s not supported, feature_level %#x, format support %#x.\n",
                     format, feature_name, feature_level, format_support[format]);
             continue;
         }
@@ -16050,6 +16051,9 @@ static void check_format_support(const unsigned int *format_support, D3D_FEATURE
             continue;
         }
 
+        todo_wine_if(formats[i].format == DXGI_FORMAT_R16G16B16A16_FLOAT ||
+                formats[i].format == DXGI_FORMAT_R10G10B10A2_UNORM ||
+                formats[i].format == DXGI_FORMAT_R32_UINT)
         ok(!supported, "Format %#x - %s supported, feature level %#x, format support %#x.\n",
                 format, feature_name, feature_level, format_support[format]);
     }
@@ -16057,6 +16061,15 @@ static void check_format_support(const unsigned int *format_support, D3D_FEATURE
 
 static void test_required_format_support(const D3D_FEATURE_LEVEL feature_level)
 {
+    static const UINT expected = D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER |
+            D3D11_FORMAT_SUPPORT_TEXTURE1D | D3D11_FORMAT_SUPPORT_TEXTURE2D |
+            D3D11_FORMAT_SUPPORT_TEXTURE3D | D3D11_FORMAT_SUPPORT_TEXTURECUBE |
+            D3D11_FORMAT_SUPPORT_MIP | D3D11_FORMAT_SUPPORT_MIP_AUTOGEN |
+            D3D11_FORMAT_SUPPORT_RENDER_TARGET | D3D11_FORMAT_SUPPORT_BLENDABLE |
+            D3D11_FORMAT_SUPPORT_DISPLAY /* | D3D11_FORMAT_SUPPORT_SHADER_LOAD
+            D3D11_FORMAT_SUPPORT_SHADER_SAMPLE | D3D11_FORMAT_SUPPORT_CPU_LOCKABLE |
+            D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE | D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST
+            D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET */;
     unsigned int format_support[DXGI_FORMAT_B4G4R4A4_UNORM + 1];
     struct device_desc device_desc;
     ID3D11Device *device;
@@ -16084,6 +16097,24 @@ static void test_required_format_support(const D3D_FEATURE_LEVEL feature_level)
     ok(hr == E_FAIL, "Got unexpected hr %#x.\n", hr);
     ok(!support, "Got unexpected format support %#x.\n", support);
 
+    /* crashes on Windows, even though MSDN states the function returns E_INVALIDARG */
+    if (0)
+    {
+        hr = ID3D11Device_CheckFormatSupport(device, DXGI_FORMAT_R8G8B8A8_UNORM, NULL);
+        ok(hr == E_INVALIDARG, "Expected E_INVALIDARG, got %#x.\n", hr);
+    }
+
+    hr = ID3D11Device_CheckFormatSupport(device, DXGI_FORMAT_UNKNOWN, &support);
+    ok(hr == E_FAIL, "Expected E_FAIL, got %#x.\n", hr);
+
+    hr = ID3D11Device_CheckFormatSupport(device, 0xdeadbeef, &support);
+    ok(hr == E_FAIL, "Expected E_FAIL, got %#x.\n", hr);
+
+    hr = ID3D11Device_CheckFormatSupport(device, DXGI_FORMAT_R8G8B8A8_UNORM, &support);
+    ok(hr == S_OK, "Expected S_OK, got %#x.\n", hr);
+    ok((support & expected) == expected, "Expected the following features to be supported: %#x.\n",
+       (support ^ expected) & expected);
+
     memset(format_support, 0, sizeof(format_support));
     for (format = DXGI_FORMAT_UNKNOWN; format <= DXGI_FORMAT_B4G4R4A4_UNORM; ++format)
     {
diff --git a/dlls/wined3d/directx.c b/dlls/wined3d/directx.c
index f18c4ac..fe4d087 100644
--- a/dlls/wined3d/directx.c
+++ b/dlls/wined3d/directx.c
@@ -5335,10 +5335,23 @@ HRESULT CDECL wined3d_check_device_format(const struct wined3d *wined3d, UINT ad
         case WINED3D_RTYPE_NONE:
             allowed_usage = WINED3DUSAGE_DEPTHSTENCIL
                     | WINED3DUSAGE_RENDERTARGET;
-            gl_type = WINED3D_GL_RES_TYPE_TEX_2D;
+            gl_type = WINED3D_GL_RES_TYPE_TEX_1D;
             gl_type_end = WINED3D_GL_RES_TYPE_TEX_3D;
             break;
 
+        case WINED3D_RTYPE_TEXTURE_1D:
+            allowed_usage = WINED3DUSAGE_DYNAMIC
+                    | WINED3DUSAGE_SOFTWAREPROCESSING
+                    | WINED3DUSAGE_TEXTURE
+                    | WINED3DUSAGE_QUERY_FILTER
+                    | WINED3DUSAGE_QUERY_POSTPIXELSHADER_BLENDING
+                    | WINED3DUSAGE_QUERY_SRGBREAD
+                    | WINED3DUSAGE_QUERY_SRGBWRITE
+                    | WINED3DUSAGE_QUERY_VERTEXTEXTURE
+                    | WINED3DUSAGE_QUERY_WRAPANDMIP;
+            gl_type = gl_type_end = WINED3D_GL_RES_TYPE_TEX_1D;
+            break;
+
         case WINED3D_RTYPE_TEXTURE_2D:
             allowed_usage = WINED3DUSAGE_DEPTHSTENCIL
                     | WINED3DUSAGE_RENDERTARGET
@@ -5395,6 +5408,12 @@ HRESULT CDECL wined3d_check_device_format(const struct wined3d *wined3d, UINT ad
             gl_type = gl_type_end = WINED3D_GL_RES_TYPE_TEX_3D;
             break;
 
+        case WINED3D_RTYPE_BUFFER:
+            allowed_usage = WINED3DUSAGE_DYNAMIC
+                    | WINED3DUSAGE_QUERY_VERTEXTEXTURE;
+            gl_type = gl_type_end = WINED3D_GL_RES_TYPE_BUFFER;
+            break;
+
         default:
             FIXME("Unhandled resource type %s.\n", debug_d3dresourcetype(resource_type));
             return WINED3DERR_NOTAVAILABLE;
-- 
1.9.1

