From 957497472a02cda0e6af687ce7eb4e30dee724f9 Mon Sep 17 00:00:00 2001
From: Johannes Specht <jojos_band@gmx.net>
Date: Thu, 31 Aug 2017 20:49:47 +0200
Subject: [PATCH] d3d11: Implement ClearUnorderedAccessViewUint for deferred
 contexts.

---
 dlls/d3d11/device.c | 34 +++++++++++++++++++++++++++++++++-
 1 file changed, 33 insertions(+), 1 deletion(-)

diff --git a/dlls/d3d11/device.c b/dlls/d3d11/device.c
index d2ac3a8..c1a3ab2 100644
--- a/dlls/d3d11/device.c
+++ b/dlls/d3d11/device.c
@@ -90,6 +90,7 @@ enum deferred_cmd
     DEFERRED_CLEARSTATE,
     DEFERRED_CLEARRENDERTARGETVIEW,     /* clear_rtv_info */
     DEFERRED_CLEARDEPTHSTENCILVIEW,     /* clear_depth_info */
+    DEFERRED_CLEARUNORDEREDACCESSVIEWUINT,  /* clear_unordered_access_view_uint */
 
     DEFERRED_BEGIN,                     /* async_info */
     DEFERRED_END,                       /* async_info */
@@ -299,6 +300,11 @@ struct deferred_call
         } clear_depth_info;
         struct
         {
+            ID3D11UnorderedAccessView *unordered_access_view;
+            UINT values[4];
+        } clear_unordered_access_view_uint;
+        struct
+        {
             ID3D11Asynchronous *asynchronous;
         } async_info;
     };
@@ -644,6 +650,12 @@ static void free_deferred_calls(struct list *commands)
                     ID3D11DepthStencilView_Release(call->clear_depth_info.view);
                 break;
             }
+            case DEFERRED_CLEARUNORDEREDACCESSVIEWUINT:
+            {
+                if (call->clear_unordered_access_view_uint.unordered_access_view)
+                    ID3D11UnorderedAccessView_Release(call->clear_unordered_access_view_uint.unordered_access_view);
+                break;
+            }
             case DEFERRED_BEGIN:
             case DEFERRED_END:
             {
@@ -999,6 +1011,13 @@ static void exec_deferred_calls(ID3D11DeviceContext1 *iface, struct list *comman
                         call->clear_depth_info.stencil);
                 break;
             }
+            case DEFERRED_CLEARUNORDEREDACCESSVIEWUINT:
+            {
+                ID3D11DeviceContext1_ClearUnorderedAccessViewUint(iface,
+                        call->clear_unordered_access_view_uint.unordered_access_view,
+                        call->clear_unordered_access_view_uint.values);
+                break;
+            }
             case DEFERRED_BEGIN:
             {
                 ID3D11DeviceContext1_Begin(iface, call->async_info.asynchronous);
@@ -4843,8 +4862,21 @@ static void STDMETHODCALLTYPE d3d11_deferred_context_ClearRenderTargetView(ID3D1
 static void STDMETHODCALLTYPE d3d11_deferred_context_ClearUnorderedAccessViewUint(ID3D11DeviceContext *iface,
         ID3D11UnorderedAccessView *unordered_access_view, const UINT values[4])
 {
-    FIXME("iface %p, unordered_access_view %p, values {%u %u %u %u} stub!\n",
+    struct d3d11_deferred_context *context = impl_from_deferred_ID3D11DeviceContext(iface);
+    struct deferred_call *call;
+    int i;
+
+    TRACE("iface %p, unordered_access_view %p, values {%u %u %u %u}.\n",
             iface, unordered_access_view, values[0], values[1], values[2], values[3]);
+
+    if (!(call = add_deferred_call(context, 0)))
+        return;
+
+    call->cmd = DEFERRED_CLEARUNORDEREDACCESSVIEWUINT;
+    if (unordered_access_view) ID3D11UnorderedAccessView_AddRef(unordered_access_view);
+    call->clear_unordered_access_view_uint.unordered_access_view = unordered_access_view;
+    for (i = 0; i < 4; i++)
+        call->clear_unordered_access_view_uint.values[i] = values[i];
 }
 
 static void STDMETHODCALLTYPE d3d11_deferred_context_ClearUnorderedAccessViewFloat(ID3D11DeviceContext *iface,
-- 
1.9.1

