From 037c5691b9d2dd35a61017cfc8472c879048c182 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
Date: Thu, 31 Aug 2017 01:54:22 +0200
Subject: wined3d: Report correct number of blend matrices when software vertex
 processing is used.

---
 dlls/d3d9/tests/visual.c | 4 ++--
 dlls/wined3d/device.c    | 9 ++++++++-
 dlls/wined3d/directx.c   | 5 ++++-
 3 files changed, 14 insertions(+), 4 deletions(-)

diff --git a/dlls/d3d9/tests/visual.c b/dlls/d3d9/tests/visual.c
index 11b933f..2ea94fe 100644
--- a/dlls/d3d9/tests/visual.c
+++ b/dlls/d3d9/tests/visual.c
@@ -20569,7 +20569,7 @@ static void test_indexed_vertex_blending(void)
         memset(&caps, 0, sizeof(caps));
         hr = IDirect3DDevice9_GetDeviceCaps(device, &caps);
         ok(SUCCEEDED(hr), "Failed to get device caps, hr %#x.\n", hr);
-        todo_wine ok(caps.MaxVertexBlendMatrixIndex == 255, "Expected 255 as maximum blend matrix index, got %u.\n",
+        ok(caps.MaxVertexBlendMatrixIndex == 255, "Expected 255 as maximum blend matrix index, got %u.\n",
                 caps.MaxVertexBlendMatrixIndex);
 
         do_test_indexed_vertex_blending(device,"IVB software");
@@ -20595,7 +20595,7 @@ static void test_indexed_vertex_blending(void)
         memset(&caps, 0, sizeof(caps));
         hr = IDirect3DDevice9_GetDeviceCaps(device, &caps);
         ok(SUCCEEDED(hr), "Failed to get device caps, hr %#x.\n", hr);
-        todo_wine ok(caps.MaxVertexBlendMatrixIndex == 255, "Expected 255 as maximum blend matrix index, got %u.\n",
+        ok(caps.MaxVertexBlendMatrixIndex == 255, "Expected 255 as maximum blend matrix index, got %u.\n",
                 caps.MaxVertexBlendMatrixIndex);
 
         hr = IDirect3DDevice9_SetSoftwareVertexProcessing(device, FALSE);
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index 717a7d3..ea2d136 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -3480,10 +3480,17 @@ struct wined3d_texture * CDECL wined3d_device_get_texture(const struct wined3d_d
 
 HRESULT CDECL wined3d_device_get_device_caps(const struct wined3d_device *device, WINED3DCAPS *caps)
 {
+    HRESULT hr;
+
     TRACE("device %p, caps %p.\n", device, caps);
 
-    return wined3d_get_device_caps(device->wined3d, device->adapter->ordinal,
+    hr = wined3d_get_device_caps(device->wined3d, device->adapter->ordinal,
             device->create_parms.device_type, caps);
+
+    if (SUCCEEDED(hr) && use_software_vertex_processing(device))
+        caps->MaxVertexBlendMatrixIndex = 255;
+
+    return hr;
 }
 
 HRESULT CDECL wined3d_device_get_display_mode(const struct wined3d_device *device, UINT swapchain_idx,
diff --git a/dlls/wined3d/directx.c b/dlls/wined3d/directx.c
index 86e790a..0acaa4d 100644
--- a/dlls/wined3d/directx.c
+++ b/dlls/wined3d/directx.c
@@ -6002,7 +6002,10 @@ HRESULT CDECL wined3d_get_device_caps(const struct wined3d *wined3d, UINT adapte
     caps->MaxUserClipPlanes                = vertex_caps.max_user_clip_planes;
     caps->MaxActiveLights                  = vertex_caps.max_active_lights;
     caps->MaxVertexBlendMatrices           = vertex_caps.max_vertex_blend_matrices;
-    caps->MaxVertexBlendMatrixIndex        = vertex_caps.max_vertex_blend_matrix_index;
+    if (device_type == WINED3D_DEVICE_TYPE_HAL)
+        caps->MaxVertexBlendMatrixIndex    = vertex_caps.max_vertex_blend_matrix_index;
+    else
+        caps->MaxVertexBlendMatrixIndex    = 255;
     caps->VertexProcessingCaps             = vertex_caps.vertex_processing_caps;
     caps->FVFCaps                          = vertex_caps.fvf_caps;
     caps->RasterCaps                      |= vertex_caps.raster_caps;
-- 
2.7.4

