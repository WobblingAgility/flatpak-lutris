From b3286b1c7ea9b507918c96f901d8e2c1311a4a1c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
Date: Wed, 8 Mar 2017 02:12:37 +0100
Subject: ntdll: Implement ObjectTypesInformation in NtQueryObject.

---
 dlls/ntdll/om.c       | 51 +++++++++++++++++++++++++++++++++++++++++++++
 dlls/ntdll/tests/om.c | 57 +++++++++++++++++++++++++++++++++++++++++++++++++++
 include/winternl.h    | 30 +++++++++++++++++++++++++--
 server/directory.c    | 19 ++++++++++++++++-
 server/protocol.def   |  9 ++++++++
 5 files changed, 163 insertions(+), 3 deletions(-)

diff --git a/dlls/ntdll/om.c b/dlls/ntdll/om.c
index 0f21800df6..8911a28b20 100644
--- a/dlls/ntdll/om.c
+++ b/dlls/ntdll/om.c
@@ -43,6 +43,7 @@
 
 WINE_DEFAULT_DEBUG_CHANNEL(ntdll);
 
+#define ROUND_UP(value, alignment) (((value) + ((alignment) - 1)) & ~((alignment)-1))
 
 /*
  *	Generic object functions
@@ -188,6 +189,56 @@ NTSTATUS WINAPI NtQueryObject(IN HANDLE handle,
             SERVER_END_REQ;
         }
         break;
+    case ObjectTypesInformation:
+        {
+            OBJECT_TYPES_INFORMATION *p = ptr;
+            OBJECT_TYPE_INFORMATION *type = (OBJECT_TYPE_INFORMATION *)(p + 1);
+            ULONG count, type_len, req_len = sizeof(OBJECT_TYPES_INFORMATION);
+
+            for (count = 0, status = STATUS_SUCCESS; !status; count++)
+            {
+                SERVER_START_REQ( get_object_type_by_index )
+                {
+                    req->index = count;
+                    if (len > sizeof(*type))
+                        wine_server_set_reply( req, type + 1, len - sizeof(*type) );
+                    status = wine_server_call( req );
+                    if (status == STATUS_SUCCESS)
+                    {
+                        type_len = sizeof(*type);
+                        if (reply->total)
+                            type_len += ROUND_UP( reply->total + sizeof(WCHAR), sizeof(DWORD_PTR) );
+                        req_len += type_len;
+                    }
+                    if (status == STATUS_SUCCESS && len >= req_len)
+                    {
+                        ULONG res = wine_server_reply_size( reply );
+                        memset( type, 0, sizeof(*type) );
+                        if (reply->total)
+                        {
+                            type->TypeName.Buffer = (WCHAR *)(type + 1);
+                            type->TypeName.Length = res;
+                            type->TypeName.MaximumLength = res + sizeof(WCHAR);
+                            type->TypeName.Buffer[res / sizeof(WCHAR)] = 0;
+                        }
+                        type->TypeIndex = count;
+                        type = (OBJECT_TYPE_INFORMATION *)((char *)type + type_len);
+                    }
+                }
+                SERVER_END_REQ;
+            }
+
+            if (status != STATUS_NO_MORE_ENTRIES)
+                return status;
+
+            if (used_len) *used_len = req_len;
+            if (len < req_len)
+                return STATUS_INFO_LENGTH_MISMATCH;
+
+            p->NumberOfTypes = count - 1;
+            status = STATUS_SUCCESS;
+        }
+        break;
     case ObjectDataInformation:
         {
             OBJECT_DATA_INFORMATION* p = ptr;
diff --git a/dlls/ntdll/tests/om.c b/dlls/ntdll/tests/om.c
index 9a1ba670ab..534cb514f9 100644
--- a/dlls/ntdll/tests/om.c
+++ b/dlls/ntdll/tests/om.c
@@ -74,6 +74,21 @@ static NTSTATUS (WINAPI *pNtOpenIoCompletion)( PHANDLE, ACCESS_MASK, POBJECT_ATT
 #define KEYEDEVENT_WAKE       0x0002
 #define KEYEDEVENT_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED | 0x0003)
 
+#define ROUND_UP(value, alignment) (((value) + ((alignment) - 1)) & ~((alignment)-1))
+
+static LPCSTR wine_dbgstr_us( const UNICODE_STRING *us )
+{
+    if (!us) return "(null)";
+    return wine_dbgstr_wn(us->Buffer, us->Length / sizeof(WCHAR));
+}
+
+static inline int strncmpW( const WCHAR *str1, const WCHAR *str2, int n )
+{
+    if (n <= 0) return 0;
+    while ((--n > 0) && *str1 && (*str1 == *str2)) { str1++; str2++; }
+    return *str1 - *str2;
+}
+
 static void test_case_sensitive (void)
 {
     static const WCHAR buffer1[] = {'\\','B','a','s','e','N','a','m','e','d','O','b','j','e','c','t','s','\\','t','e','s','t',0};
@@ -1524,6 +1539,47 @@ static void test_query_object(void)
     pRtlFreeUnicodeString( &session );
 }
 
+static void test_query_object_types(void)
+{
+    static const WCHAR typeW[] = {'T','y','p','e'};
+    OBJECT_TYPES_INFORMATION *buffer;
+    OBJECT_TYPE_INFORMATION *type;
+    NTSTATUS status;
+    ULONG len, i;
+
+    buffer = HeapAlloc( GetProcessHeap(), 0, sizeof(OBJECT_TYPES_INFORMATION) );
+    ok( buffer != NULL, "Failed to allocate memory\n" );
+
+    status = pNtQueryObject( NULL, ObjectTypesInformation, buffer, sizeof(OBJECT_TYPES_INFORMATION), &len );
+    ok( status == STATUS_INFO_LENGTH_MISMATCH, "NtQueryObject failed %x\n", status );
+    ok( len, "len is zero\n");
+
+    buffer = HeapReAlloc( GetProcessHeap(), 0, buffer, len );
+    ok( buffer != NULL, "Failed to allocate memory\n" );
+
+    memset( buffer, 0, len );
+    status = pNtQueryObject( NULL, ObjectTypesInformation, buffer, len, &len );
+    ok( status == STATUS_SUCCESS, "NtQueryObject failed %x\n", status );
+    ok( buffer->NumberOfTypes, "NumberOfTypes is zero\n" );
+
+    type = (OBJECT_TYPE_INFORMATION *)(buffer + 1);
+    for (i = 0; i < buffer->NumberOfTypes; i++)
+    {
+        USHORT length = type->TypeName.MaximumLength;
+        trace( "Type %u: %s\n", i, wine_dbgstr_us(&type->TypeName) );
+
+        if (i == 0)
+        {
+            todo_wine ok( type->TypeName.Length == sizeof(typeW) && !strncmpW(typeW, type->TypeName.Buffer, 4),
+                "Expected 'Type' as first type, got %s\n", wine_dbgstr_us(&type->TypeName) );
+        }
+
+        type = (OBJECT_TYPE_INFORMATION *)ROUND_UP( (DWORD_PTR)(type + 1) + length, sizeof(DWORD_PTR) );
+    }
+
+    HeapFree( GetProcessHeap(), 0, buffer );
+}
+
 static void test_type_mismatch(void)
 {
     HANDLE h;
@@ -2036,6 +2092,7 @@ START_TEST(om)
     test_directory();
     test_symboliclink();
     test_query_object();
+    test_query_object_types();
     test_type_mismatch();
     test_event();
     test_mutant();
diff --git a/include/winternl.h b/include/winternl.h
index 7ffe4f6c81..0a2e323c5b 100644
--- a/include/winternl.h
+++ b/include/winternl.h
@@ -790,7 +790,7 @@ typedef enum _OBJECT_INFORMATION_CLASS {
     ObjectBasicInformation,
     ObjectNameInformation,
     ObjectTypeInformation,
-    ObjectAllInformation,
+    ObjectTypesInformation,
     ObjectDataInformation
 } OBJECT_INFORMATION_CLASS, *POBJECT_INFORMATION_CLASS;
 
@@ -1208,9 +1208,35 @@ typedef struct _OBJECT_NAME_INFORMATION {
 
 typedef struct __OBJECT_TYPE_INFORMATION {
     UNICODE_STRING TypeName;
-    ULONG Reserved [22];
+    ULONG TotalNumberOfObjects;
+    ULONG TotalNumberOfHandles;
+    ULONG TotalPagedPoolUsage;
+    ULONG TotalNonPagedPoolUsage;
+    ULONG TotalNamePoolUsage;
+    ULONG TotalHandleTableUsage;
+    ULONG HighWaterNumberOfObjects;
+    ULONG HighWaterNumberOfHandles;
+    ULONG HighWaterPagedPoolUsage;
+    ULONG HighWaterNonPagedPoolUsage;
+    ULONG HighWaterNamePoolUsage;
+    ULONG HighWaterHandleTableUsage;
+    ULONG InvalidAttributes;
+    GENERIC_MAPPING GenericMapping;
+    ULONG ValidAccessMask;
+    BOOLEAN SecurityRequired;
+    BOOLEAN MaintainHandleCount;
+    UCHAR TypeIndex;
+    CHAR Reserved;
+    ULONG PoolType;
+    ULONG DefaultPagedPoolCharge;
+    ULONG DefaultNonPagedPoolCharge;
 } OBJECT_TYPE_INFORMATION, *POBJECT_TYPE_INFORMATION;
 
+typedef struct _OBJECT_TYPES_INFORMATION
+{
+    ULONG NumberOfTypes;
+} OBJECT_TYPES_INFORMATION, *POBJECT_TYPES_INFORMATION;
+
 typedef struct _PROCESS_BASIC_INFORMATION {
 #ifdef __WINESRC__
     DWORD_PTR ExitStatus;
diff --git a/server/directory.c b/server/directory.c
index d903ff283c..ebec63e6c6 100644
--- a/server/directory.c
+++ b/server/directory.c
@@ -72,6 +72,8 @@ static const struct object_ops object_type_ops =
     no_destroy                    /* destroy */
 };
 
+static struct object_type *object_type_list[64];
+static unsigned int object_type_count;
 
 struct directory
 {
@@ -238,7 +240,8 @@ struct object_type *get_object_type( const struct unicode_str *name )
     {
         if (get_error() != STATUS_OBJECT_NAME_EXISTS)
         {
-            grab_object( type );
+            assert( object_type_count < sizeof(object_type_list)/sizeof(object_type_list[0]) );
+            object_type_list[ object_type_count++ ] = (struct object_type *)grab_object( type );
             make_object_static( &type->obj );
         }
         clear_error();
@@ -531,3 +534,17 @@ DECL_HANDLER(get_object_type)
     }
     release_object( obj );
 }
+
+/* query object type name information by index */
+DECL_HANDLER(get_object_type_by_index)
+{
+    struct object_type *type;
+    const WCHAR *name;
+
+    if (req->index < object_type_count && (type = object_type_list[ req->index ]))
+    {
+        if ((name = get_object_name( &type->obj, &reply->total )))
+            set_reply_data( name, min( reply->total, get_reply_max_size() ) );
+    }
+    else set_error( STATUS_NO_MORE_ENTRIES );
+}
diff --git a/server/protocol.def b/server/protocol.def
index 071129723f..98c4c58a4e 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -3548,6 +3548,15 @@ struct handle_info
 @END
 
 
+/* Query object type name information */
+@REQ(get_object_type_by_index)
+    unsigned int   index;         /* index of the type */
+@REPLY
+    data_size_t    total;         /* needed size for type name */
+    VARARG(type,unicode_str);     /* type name */
+@END
+
+
 /* Unlink a named object */
 @REQ(unlink_object)
     obj_handle_t   handle;        /* handle to the object */
-- 
2.11.0

