From 493acad9e14688b4acb817ac1daa59b2f21ef809 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
Date: Thu, 25 Aug 2016 20:06:28 +0200
Subject: d3d11/tests: Prepare test_texture for non 2d textures.

---
 dlls/d3d11/tests/d3d11.c | 140 +++++++++++++++++++++++++++++------------------
 1 file changed, 87 insertions(+), 53 deletions(-)

diff --git a/dlls/d3d11/tests/d3d11.c b/dlls/d3d11/tests/d3d11.c
index a9d03322283..daf5dbdbd55 100644
--- a/dlls/d3d11/tests/d3d11.c
+++ b/dlls/d3d11/tests/d3d11.c
@@ -6245,6 +6245,7 @@ static void test_texture(void)
     };
     struct texture
     {
+        UINT dimension;
         UINT width;
         UINT height;
         UINT miplevel_count;
@@ -6256,7 +6257,7 @@ static void test_texture(void)
     D3D11_SHADER_RESOURCE_VIEW_DESC srv_desc;
     struct d3d11_test_context test_context;
     const struct texture *current_texture;
-    D3D11_TEXTURE2D_DESC texture_desc;
+    D3D11_TEXTURE2D_DESC texture2d_desc;
     D3D11_SAMPLER_DESC sampler_desc;
     const struct shader *current_ps;
     D3D_FEATURE_LEVEL feature_level;
@@ -6264,7 +6265,7 @@ static void test_texture(void)
     ID3D11DeviceContext *context;
     ID3D11SamplerState *sampler;
     struct resource_readback rb;
-    ID3D11Texture2D *texture;
+    ID3D11Resource *texture;
     struct vec4 ps_constant;
     ID3D11PixelShader *ps;
     ID3D11Device *device;
@@ -6625,6 +6626,7 @@ static void test_texture(void)
     };
     static const struct texture rgba_texture =
     {
+        D3D11_RESOURCE_DIMENSION_TEXTURE2D,
         4, 4, 3, 1, DXGI_FORMAT_R8G8B8A8_UNORM,
         {
             {rgba_level_0, 4 * sizeof(*rgba_level_0), 0},
@@ -6632,33 +6634,51 @@ static void test_texture(void)
             {rgba_level_2,     sizeof(*rgba_level_2), 0},
         }
     };
-    static const struct texture srgb_texture = {4, 4, 1, 1, DXGI_FORMAT_R8G8B8A8_UNORM_SRGB,
-            {{srgb_data, 4 * sizeof(*srgb_data)}}};
-    static const struct texture srgb_typeless = {4, 4, 1, 1, DXGI_FORMAT_R8G8B8A8_TYPELESS,
-            {{srgb_data, 4 * sizeof(*srgb_data)}}};
-    static const struct texture a8_texture = {4, 4, 1, 1, DXGI_FORMAT_A8_UNORM,
-            {{a8_data, 4 * sizeof(*a8_data)}}};
-    static const struct texture bc1_texture = {8, 8, 1, 1, DXGI_FORMAT_BC1_UNORM, {{bc1_data, 2 * 8}}};
-    static const struct texture bc2_texture = {8, 8, 1, 1, DXGI_FORMAT_BC2_UNORM, {{bc2_data, 2 * 16}}};
-    static const struct texture bc3_texture = {8, 8, 1, 1, DXGI_FORMAT_BC3_UNORM, {{bc3_data, 2 * 16}}};
-    static const struct texture bc4_texture = {8, 8, 1, 1, DXGI_FORMAT_BC4_UNORM, {{bc4_data, 2 * 8}}};
-    static const struct texture bc5_texture = {8, 8, 1, 1, DXGI_FORMAT_BC5_UNORM, {{bc5_data, 2 * 16}}};
-    static const struct texture bc6h_u_texture = {8, 8, 1, 1, DXGI_FORMAT_BC6H_UF16, {{bc6h_u_data, 2 * 16}}};
-    static const struct texture bc6h_s_texture = {8, 8, 1, 1, DXGI_FORMAT_BC6H_SF16, {{bc6h_s_data, 2 * 16}}};
-    static const struct texture bc7_texture = {8, 8, 1, 1, DXGI_FORMAT_BC7_UNORM, {{bc7_data, 2 * 16}}};
-    static const struct texture bc1_texture_srgb = {8, 8, 1, 1, DXGI_FORMAT_BC1_UNORM_SRGB, {{bc1_data, 2 * 8}}};
-    static const struct texture bc2_texture_srgb = {8, 8, 1, 1, DXGI_FORMAT_BC2_UNORM_SRGB, {{bc2_data, 2 * 16}}};
-    static const struct texture bc3_texture_srgb = {8, 8, 1, 1, DXGI_FORMAT_BC3_UNORM_SRGB, {{bc3_data, 2 * 16}}};
-    static const struct texture bc7_texture_srgb = {8, 8, 1, 1, DXGI_FORMAT_BC7_UNORM_SRGB, {{bc7_data, 2 * 16}}};
-    static const struct texture bc1_typeless = {8, 8, 1, 1, DXGI_FORMAT_BC1_TYPELESS, {{bc1_data, 2 * 8}}};
-    static const struct texture bc2_typeless = {8, 8, 1, 1, DXGI_FORMAT_BC2_TYPELESS, {{bc2_data, 2 * 16}}};
-    static const struct texture bc3_typeless = {8, 8, 1, 1, DXGI_FORMAT_BC3_TYPELESS, {{bc3_data, 2 * 16}}};
-    static const struct texture sint8_texture = {4, 4, 1, 1, DXGI_FORMAT_R8G8B8A8_SINT,
+    static const struct texture srgb_texture = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+            4, 4, 1, 1, DXGI_FORMAT_R8G8B8A8_UNORM_SRGB, {{srgb_data, 4 * sizeof(*srgb_data)}}};
+    static const struct texture srgb_typeless = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+            4, 4, 1, 1, DXGI_FORMAT_R8G8B8A8_TYPELESS, {{srgb_data, 4 * sizeof(*srgb_data)}}};
+    static const struct texture a8_texture = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+            4, 4, 1, 1, DXGI_FORMAT_A8_UNORM, {{a8_data, 4 * sizeof(*a8_data)}}};
+    static const struct texture bc1_texture = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+            8, 8, 1, 1, DXGI_FORMAT_BC1_UNORM, {{bc1_data, 2 * 8}}};
+    static const struct texture bc2_texture = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+            8, 8, 1, 1, DXGI_FORMAT_BC2_UNORM, {{bc2_data, 2 * 16}}};
+    static const struct texture bc3_texture = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+            8, 8, 1, 1, DXGI_FORMAT_BC3_UNORM, {{bc3_data, 2 * 16}}};
+    static const struct texture bc4_texture = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+            8, 8, 1, 1, DXGI_FORMAT_BC4_UNORM, {{bc4_data, 2 * 8}}};
+    static const struct texture bc5_texture = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+            8, 8, 1, 1, DXGI_FORMAT_BC5_UNORM, {{bc5_data, 2 * 16}}};
+    static const struct texture bc6h_u_texture = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+            8, 8, 1, 1, DXGI_FORMAT_BC6H_UF16, {{bc6h_u_data, 2 * 16}}};
+    static const struct texture bc6h_s_texture = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+            8, 8, 1, 1, DXGI_FORMAT_BC6H_SF16, {{bc6h_s_data, 2 * 16}}};
+    static const struct texture bc7_texture = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+            8, 8, 1, 1, DXGI_FORMAT_BC7_UNORM, {{bc7_data, 2 * 16}}};
+    static const struct texture bc1_texture_srgb = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+            8, 8, 1, 1, DXGI_FORMAT_BC1_UNORM_SRGB, {{bc1_data, 2 * 8}}};
+    static const struct texture bc2_texture_srgb = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+            8, 8, 1, 1, DXGI_FORMAT_BC2_UNORM_SRGB, {{bc2_data, 2 * 16}}};
+    static const struct texture bc3_texture_srgb = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+            8, 8, 1, 1, DXGI_FORMAT_BC3_UNORM_SRGB, {{bc3_data, 2 * 16}}};
+    static const struct texture bc7_texture_srgb = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+            8, 8, 1, 1, DXGI_FORMAT_BC7_UNORM_SRGB, {{bc7_data, 2 * 16}}};
+    static const struct texture bc1_typeless = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+            8, 8, 1, 1, DXGI_FORMAT_BC1_TYPELESS, {{bc1_data, 2 * 8}}};
+    static const struct texture bc2_typeless = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+            8, 8, 1, 1, DXGI_FORMAT_BC2_TYPELESS, {{bc2_data, 2 * 16}}};
+    static const struct texture bc3_typeless = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+            8, 8, 1, 1, DXGI_FORMAT_BC3_TYPELESS, {{bc3_data, 2 * 16}}};
+    static const struct texture sint8_texture = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+            4, 4, 1, 1, DXGI_FORMAT_R8G8B8A8_SINT,
             {{rgba_level_0, 4 * sizeof(*rgba_level_0)}}};
-    static const struct texture uint8_texture = {4, 4, 1, 1, DXGI_FORMAT_R8G8B8A8_UINT,
+    static const struct texture uint8_texture = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+            4, 4, 1, 1, DXGI_FORMAT_R8G8B8A8_UINT,
             {{rgba_level_0, 4 * sizeof(*rgba_level_0)}}};
     static const struct texture array_2d_texture =
     {
+        D3D11_RESOURCE_DIMENSION_TEXTURE2D,
         4, 4, 1, 3, DXGI_FORMAT_R8G8B8A8_UNORM,
         {
             {red_data,   6 * sizeof(*red_data)},
@@ -6666,11 +6686,14 @@ static void test_texture(void)
             {blue_data,  5 * sizeof(*blue_data)},
         }
     };
-    static const struct texture r32f_typeless = {4, 4, 1, 1, DXGI_FORMAT_R32_TYPELESS,
+    static const struct texture r32f_typeless = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+        4, 4, 1, 1, DXGI_FORMAT_R32_TYPELESS,
         {{r32_float, 4 * sizeof(*r32_float)}}};
-    static const struct texture r32u_typeless = {4, 4, 1, 1, DXGI_FORMAT_R32_TYPELESS,
+    static const struct texture r32u_typeless = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+        4, 4, 1, 1, DXGI_FORMAT_R32_TYPELESS,
         {{r32_uint, 4 * sizeof(*r32_uint)}}};
-    static const struct texture r9g9b9e5_texture = {4, 4, 1, 1, DXGI_FORMAT_R9G9B9E5_SHAREDEXP,
+    static const struct texture r9g9b9e5_texture = {D3D11_RESOURCE_DIMENSION_TEXTURE2D,
+        4, 4, 1, 1, DXGI_FORMAT_R9G9B9E5_SHAREDEXP,
         {{r9g9b9e5_data, 4 * sizeof(*r9g9b9e5_data)}}};
     static const DWORD red_colors[] =
     {
@@ -6968,12 +6991,12 @@ static void test_texture(void)
 
     ID3D11DeviceContext_PSSetConstantBuffers(context, 0, 1, &cb);
 
-    texture_desc.SampleDesc.Count = 1;
-    texture_desc.SampleDesc.Quality = 0;
-    texture_desc.Usage = D3D11_USAGE_DEFAULT;
-    texture_desc.BindFlags = D3D11_BIND_SHADER_RESOURCE;
-    texture_desc.CPUAccessFlags = 0;
-    texture_desc.MiscFlags = 0;
+    texture2d_desc.SampleDesc.Count = 1;
+    texture2d_desc.SampleDesc.Quality = 0;
+    texture2d_desc.Usage = D3D11_USAGE_DEFAULT;
+    texture2d_desc.BindFlags = D3D11_BIND_SHADER_RESOURCE;
+    texture2d_desc.CPUAccessFlags = 0;
+    texture2d_desc.MiscFlags = 0;
 
     sampler_desc.Filter = D3D11_FILTER_MIN_MAG_MIP_POINT;
     sampler_desc.AddressU = D3D11_TEXTURE_ADDRESS_CLAMP;
@@ -7031,7 +7054,7 @@ static void test_texture(void)
         if (current_texture != test->texture)
         {
             if (texture)
-                ID3D11Texture2D_Release(texture);
+                ID3D11Resource_Release(texture);
             if (srv)
                 ID3D11ShaderResourceView_Release(srv);
 
@@ -7039,16 +7062,23 @@ static void test_texture(void)
 
             if (current_texture)
             {
-                texture_desc.Width = current_texture->width;
-                texture_desc.Height = current_texture->height;
-                texture_desc.MipLevels = current_texture->miplevel_count;
-                texture_desc.ArraySize = current_texture->array_size;
-                texture_desc.Format = current_texture->format;
+                if (current_texture->dimension == D3D11_RESOURCE_DIMENSION_TEXTURE2D)
+                {
+                    ID3D11Texture2D *texture2d;
+
+                    texture2d_desc.Width = current_texture->width;
+                    texture2d_desc.Height = current_texture->height;
+                    texture2d_desc.MipLevels = current_texture->miplevel_count;
+                    texture2d_desc.ArraySize = current_texture->array_size;
+                    texture2d_desc.Format = current_texture->format;
 
-                hr = ID3D11Device_CreateTexture2D(device, &texture_desc, current_texture->data, &texture);
-                ok(SUCCEEDED(hr), "Test %u: Failed to create 2d texture, hr %#x.\n", i, hr);
+                    hr = ID3D11Device_CreateTexture2D(device, &texture2d_desc, current_texture->data, &texture2d);
+                    ok(SUCCEEDED(hr), "Test %u: Failed to create 2d texture, hr %#x.\n", i, hr);
+                    texture = (ID3D11Resource *)texture2d;
+                }
 
-                hr = ID3D11Device_CreateShaderResourceView(device, (ID3D11Resource *)texture, NULL, &srv);
+
+                hr = ID3D11Device_CreateShaderResourceView(device, texture, NULL, &srv);
                 ok(SUCCEEDED(hr), "Test %u: Failed to create shader resource view, hr %#x.\n", i, hr);
             }
             else
@@ -7102,7 +7132,7 @@ static void test_texture(void)
         ID3D11ShaderResourceView_Release(srv);
     ID3D11SamplerState_Release(sampler);
     if (texture)
-        ID3D11Texture2D_Release(texture);
+        ID3D11Resource_Release(texture);
     ID3D11PixelShader_Release(ps);
 
     if (is_warp_device(device) && feature_level < D3D_FEATURE_LEVEL_11_0)
@@ -7147,26 +7177,30 @@ static void test_texture(void)
 
         if (current_texture != test->texture)
         {
+            ID3D11Texture2D *texture2d;
+
             if (texture)
-                ID3D11Texture2D_Release(texture);
+                ID3D11Resource_Release(texture);
 
             current_texture = test->texture;
 
-            texture_desc.Width = current_texture->width;
-            texture_desc.Height = current_texture->height;
-            texture_desc.MipLevels = current_texture->miplevel_count;
-            texture_desc.ArraySize = current_texture->array_size;
-            texture_desc.Format = current_texture->format;
+            texture2d_desc.Width = current_texture->width;
+            texture2d_desc.Height = current_texture->height;
+            texture2d_desc.MipLevels = current_texture->miplevel_count;
+            texture2d_desc.ArraySize = current_texture->array_size;
+            texture2d_desc.Format = current_texture->format;
 
-            hr = ID3D11Device_CreateTexture2D(device, &texture_desc, current_texture->data, &texture);
+            hr = ID3D11Device_CreateTexture2D(device, &texture2d_desc, current_texture->data, &texture2d);
             ok(SUCCEEDED(hr), "Test %u: Failed to create 2d texture, hr %#x.\n", i, hr);
+
+            texture = (ID3D11Resource *)texture2d;
         }
 
         if (srv)
             ID3D11ShaderResourceView_Release(srv);
 
         get_srv_desc(&srv_desc, &test->srv_desc);
-        hr = ID3D11Device_CreateShaderResourceView(device, (ID3D11Resource *)texture, &srv_desc, &srv);
+        hr = ID3D11Device_CreateShaderResourceView(device, texture, &srv_desc, &srv);
         ok(SUCCEEDED(hr), "Test %u: Failed to create shader resource view, hr %#x.\n", i, hr);
 
         ID3D11DeviceContext_PSSetShaderResources(context, 0, 1, &srv);
@@ -7191,7 +7225,7 @@ static void test_texture(void)
         release_resource_readback(&rb);
     }
     ID3D11PixelShader_Release(ps);
-    ID3D11Texture2D_Release(texture);
+    ID3D11Resource_Release(texture);
     ID3D11ShaderResourceView_Release(srv);
     ID3D11SamplerState_Release(sampler);
 
-- 
2.14.1

